require('./sourcemap-register.js');module.exports =
/******/ (() => { // webpackBootstrap
/******/ 	var __webpack_modules__ = ({

/***/ 3109:
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";

var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
const core = __importStar(__webpack_require__(2186));
const command_1 = __webpack_require__(7351);
const github_1 = __webpack_require__(5438);
const glob_1 = __webpack_require__(8090);
const fs_1 = __webpack_require__(5747);
const github_actions_parser_1 = __webpack_require__(89);
const line_column_1 = __importDefault(__webpack_require__(5171));
const { readFile } = fs_1.promises;
function run() {
    return __awaiter(this, void 0, void 0, function* () {
        let errorsFound = false;
        try {
            // Enable dynamic features for now.
            // const token = core.getInput("github-token", {required: true});
            const parserContext = {
                owner: github_1.context.repo.owner,
                repository: github_1.context.repo.repo,
                client: undefined,
                orgFeaturesEnabled: false,
            };
            const patterns = JSON.parse(core.getInput("workflows")) || [];
            const globber = yield glob_1.create(patterns.join("\n"));
            const files = yield globber.glob();
            for (const file of files) {
                try {
                    const workflowContent = yield readFile(file, "utf-8");
                    const workflow = yield github_actions_parser_1.parse(parserContext, file, workflowContent);
                    const lineColumnFinder = line_column_1.default(workflowContent);
                    for (const diagnostic of workflow.diagnostics) {
                        const { line, col } = lineColumnFinder.fromIndex(diagnostic.pos[0]) || {
                            line: -1,
                            col: -1,
                        };
                        command_1.issueCommand(diagnostic.kind === 0 /*DiagnosticKind.Error*/
                            ? "error"
                            : "warning", {
                            file: file,
                            line,
                            col,
                        }, diagnostic.message);
                        if (diagnostic.kind === 0) {
                            errorsFound = true;
                        }
                    }
                }
                catch (e) {
                    core.error(`Could not parse ${file}: ${e.message}`);
                }
            }
        }
        catch (error) {
            core.setFailed(error.message);
        }
        if (errorsFound) {
            core.setFailed("Linting errors have been found");
        }
    });
}
run();


/***/ }),

/***/ 7351:
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";

var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
    result["default"] = mod;
    return result;
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
const os = __importStar(__webpack_require__(2087));
const utils_1 = __webpack_require__(5278);
/**
 * Commands
 *
 * Command Format:
 *   ::name key=value,key=value::message
 *
 * Examples:
 *   ::warning::This is the message
 *   ::set-env name=MY_VAR::some value
 */
function issueCommand(command, properties, message) {
    const cmd = new Command(command, properties, message);
    process.stdout.write(cmd.toString() + os.EOL);
}
exports.issueCommand = issueCommand;
function issue(name, message = '') {
    issueCommand(name, {}, message);
}
exports.issue = issue;
const CMD_STRING = '::';
class Command {
    constructor(command, properties, message) {
        if (!command) {
            command = 'missing.command';
        }
        this.command = command;
        this.properties = properties;
        this.message = message;
    }
    toString() {
        let cmdStr = CMD_STRING + this.command;
        if (this.properties && Object.keys(this.properties).length > 0) {
            cmdStr += ' ';
            let first = true;
            for (const key in this.properties) {
                if (this.properties.hasOwnProperty(key)) {
                    const val = this.properties[key];
                    if (val) {
                        if (first) {
                            first = false;
                        }
                        else {
                            cmdStr += ',';
                        }
                        cmdStr += `${key}=${escapeProperty(val)}`;
                    }
                }
            }
        }
        cmdStr += `${CMD_STRING}${escapeData(this.message)}`;
        return cmdStr;
    }
}
function escapeData(s) {
    return utils_1.toCommandValue(s)
        .replace(/%/g, '%25')
        .replace(/\r/g, '%0D')
        .replace(/\n/g, '%0A');
}
function escapeProperty(s) {
    return utils_1.toCommandValue(s)
        .replace(/%/g, '%25')
        .replace(/\r/g, '%0D')
        .replace(/\n/g, '%0A')
        .replace(/:/g, '%3A')
        .replace(/,/g, '%2C');
}
//# sourceMappingURL=command.js.map

/***/ }),

/***/ 2186:
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";

var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
    result["default"] = mod;
    return result;
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
const command_1 = __webpack_require__(7351);
const file_command_1 = __webpack_require__(717);
const utils_1 = __webpack_require__(5278);
const os = __importStar(__webpack_require__(2087));
const path = __importStar(__webpack_require__(5622));
/**
 * The code to exit an action
 */
var ExitCode;
(function (ExitCode) {
    /**
     * A code indicating that the action was successful
     */
    ExitCode[ExitCode["Success"] = 0] = "Success";
    /**
     * A code indicating that the action was a failure
     */
    ExitCode[ExitCode["Failure"] = 1] = "Failure";
})(ExitCode = exports.ExitCode || (exports.ExitCode = {}));
//-----------------------------------------------------------------------
// Variables
//-----------------------------------------------------------------------
/**
 * Sets env variable for this action and future actions in the job
 * @param name the name of the variable to set
 * @param val the value of the variable. Non-string values will be converted to a string via JSON.stringify
 */
// eslint-disable-next-line @typescript-eslint/no-explicit-any
function exportVariable(name, val) {
    const convertedVal = utils_1.toCommandValue(val);
    process.env[name] = convertedVal;
    const filePath = process.env['GITHUB_ENV'] || '';
    if (filePath) {
        const delimiter = '_GitHubActionsFileCommandDelimeter_';
        const commandValue = `${name}<<${delimiter}${os.EOL}${convertedVal}${os.EOL}${delimiter}`;
        file_command_1.issueCommand('ENV', commandValue);
    }
    else {
        command_1.issueCommand('set-env', { name }, convertedVal);
    }
}
exports.exportVariable = exportVariable;
/**
 * Registers a secret which will get masked from logs
 * @param secret value of the secret
 */
function setSecret(secret) {
    command_1.issueCommand('add-mask', {}, secret);
}
exports.setSecret = setSecret;
/**
 * Prepends inputPath to the PATH (for this action and future actions)
 * @param inputPath
 */
function addPath(inputPath) {
    const filePath = process.env['GITHUB_PATH'] || '';
    if (filePath) {
        file_command_1.issueCommand('PATH', inputPath);
    }
    else {
        command_1.issueCommand('add-path', {}, inputPath);
    }
    process.env['PATH'] = `${inputPath}${path.delimiter}${process.env['PATH']}`;
}
exports.addPath = addPath;
/**
 * Gets the value of an input.  The value is also trimmed.
 *
 * @param     name     name of the input to get
 * @param     options  optional. See InputOptions.
 * @returns   string
 */
function getInput(name, options) {
    const val = process.env[`INPUT_${name.replace(/ /g, '_').toUpperCase()}`] || '';
    if (options && options.required && !val) {
        throw new Error(`Input required and not supplied: ${name}`);
    }
    return val.trim();
}
exports.getInput = getInput;
/**
 * Sets the value of an output.
 *
 * @param     name     name of the output to set
 * @param     value    value to store. Non-string values will be converted to a string via JSON.stringify
 */
// eslint-disable-next-line @typescript-eslint/no-explicit-any
function setOutput(name, value) {
    command_1.issueCommand('set-output', { name }, value);
}
exports.setOutput = setOutput;
/**
 * Enables or disables the echoing of commands into stdout for the rest of the step.
 * Echoing is disabled by default if ACTIONS_STEP_DEBUG is not set.
 *
 */
function setCommandEcho(enabled) {
    command_1.issue('echo', enabled ? 'on' : 'off');
}
exports.setCommandEcho = setCommandEcho;
//-----------------------------------------------------------------------
// Results
//-----------------------------------------------------------------------
/**
 * Sets the action status to failed.
 * When the action exits it will be with an exit code of 1
 * @param message add error issue message
 */
function setFailed(message) {
    process.exitCode = ExitCode.Failure;
    error(message);
}
exports.setFailed = setFailed;
//-----------------------------------------------------------------------
// Logging Commands
//-----------------------------------------------------------------------
/**
 * Gets whether Actions Step Debug is on or not
 */
function isDebug() {
    return process.env['RUNNER_DEBUG'] === '1';
}
exports.isDebug = isDebug;
/**
 * Writes debug message to user log
 * @param message debug message
 */
function debug(message) {
    command_1.issueCommand('debug', {}, message);
}
exports.debug = debug;
/**
 * Adds an error issue
 * @param message error issue message. Errors will be converted to string via toString()
 */
function error(message) {
    command_1.issue('error', message instanceof Error ? message.toString() : message);
}
exports.error = error;
/**
 * Adds an warning issue
 * @param message warning issue message. Errors will be converted to string via toString()
 */
function warning(message) {
    command_1.issue('warning', message instanceof Error ? message.toString() : message);
}
exports.warning = warning;
/**
 * Writes info to log with console.log.
 * @param message info message
 */
function info(message) {
    process.stdout.write(message + os.EOL);
}
exports.info = info;
/**
 * Begin an output group.
 *
 * Output until the next `groupEnd` will be foldable in this group
 *
 * @param name The name of the output group
 */
function startGroup(name) {
    command_1.issue('group', name);
}
exports.startGroup = startGroup;
/**
 * End an output group.
 */
function endGroup() {
    command_1.issue('endgroup');
}
exports.endGroup = endGroup;
/**
 * Wrap an asynchronous function call in a group.
 *
 * Returns the same type as the function itself.
 *
 * @param name The name of the group
 * @param fn The function to wrap in the group
 */
function group(name, fn) {
    return __awaiter(this, void 0, void 0, function* () {
        startGroup(name);
        let result;
        try {
            result = yield fn();
        }
        finally {
            endGroup();
        }
        return result;
    });
}
exports.group = group;
//-----------------------------------------------------------------------
// Wrapper action state
//-----------------------------------------------------------------------
/**
 * Saves state for current action, the state can only be retrieved by this action's post job execution.
 *
 * @param     name     name of the state to store
 * @param     value    value to store. Non-string values will be converted to a string via JSON.stringify
 */
// eslint-disable-next-line @typescript-eslint/no-explicit-any
function saveState(name, value) {
    command_1.issueCommand('save-state', { name }, value);
}
exports.saveState = saveState;
/**
 * Gets the value of an state set by this action's main execution.
 *
 * @param     name     name of the state to get
 * @returns   string
 */
function getState(name) {
    return process.env[`STATE_${name}`] || '';
}
exports.getState = getState;
//# sourceMappingURL=core.js.map

/***/ }),

/***/ 717:
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";

// For internal use, subject to change.
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
    result["default"] = mod;
    return result;
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
// We use any as a valid input type
/* eslint-disable @typescript-eslint/no-explicit-any */
const fs = __importStar(__webpack_require__(5747));
const os = __importStar(__webpack_require__(2087));
const utils_1 = __webpack_require__(5278);
function issueCommand(command, message) {
    const filePath = process.env[`GITHUB_${command}`];
    if (!filePath) {
        throw new Error(`Unable to find environment variable for file command ${command}`);
    }
    if (!fs.existsSync(filePath)) {
        throw new Error(`Missing file at path: ${filePath}`);
    }
    fs.appendFileSync(filePath, `${utils_1.toCommandValue(message)}${os.EOL}`, {
        encoding: 'utf8'
    });
}
exports.issueCommand = issueCommand;
//# sourceMappingURL=file-command.js.map

/***/ }),

/***/ 5278:
/***/ ((__unused_webpack_module, exports) => {

"use strict";

// We use any as a valid input type
/* eslint-disable @typescript-eslint/no-explicit-any */
Object.defineProperty(exports, "__esModule", ({ value: true }));
/**
 * Sanitizes an input into a string so it can be passed into issueCommand safely
 * @param input input to sanitize into a string
 */
function toCommandValue(input) {
    if (input === null || input === undefined) {
        return '';
    }
    else if (typeof input === 'string' || input instanceof String) {
        return input;
    }
    return JSON.stringify(input);
}
exports.toCommandValue = toCommandValue;
//# sourceMappingURL=utils.js.map

/***/ }),

/***/ 4087:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.Context = void 0;
const fs_1 = __webpack_require__(5747);
const os_1 = __webpack_require__(2087);
class Context {
    /**
     * Hydrate the context from the environment
     */
    constructor() {
        this.payload = {};
        if (process.env.GITHUB_EVENT_PATH) {
            if (fs_1.existsSync(process.env.GITHUB_EVENT_PATH)) {
                this.payload = JSON.parse(fs_1.readFileSync(process.env.GITHUB_EVENT_PATH, { encoding: 'utf8' }));
            }
            else {
                const path = process.env.GITHUB_EVENT_PATH;
                process.stdout.write(`GITHUB_EVENT_PATH ${path} does not exist${os_1.EOL}`);
            }
        }
        this.eventName = process.env.GITHUB_EVENT_NAME;
        this.sha = process.env.GITHUB_SHA;
        this.ref = process.env.GITHUB_REF;
        this.workflow = process.env.GITHUB_WORKFLOW;
        this.action = process.env.GITHUB_ACTION;
        this.actor = process.env.GITHUB_ACTOR;
        this.job = process.env.GITHUB_JOB;
        this.runNumber = parseInt(process.env.GITHUB_RUN_NUMBER, 10);
        this.runId = parseInt(process.env.GITHUB_RUN_ID, 10);
    }
    get issue() {
        const payload = this.payload;
        return Object.assign(Object.assign({}, this.repo), { number: (payload.issue || payload.pull_request || payload).number });
    }
    get repo() {
        if (process.env.GITHUB_REPOSITORY) {
            const [owner, repo] = process.env.GITHUB_REPOSITORY.split('/');
            return { owner, repo };
        }
        if (this.payload.repository) {
            return {
                owner: this.payload.repository.owner.login,
                repo: this.payload.repository.name
            };
        }
        throw new Error("context.repo requires a GITHUB_REPOSITORY environment variable like 'owner/repo'");
    }
}
exports.Context = Context;
//# sourceMappingURL=context.js.map

/***/ }),

/***/ 5438:
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";

var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.getOctokit = exports.context = void 0;
const Context = __importStar(__webpack_require__(4087));
const utils_1 = __webpack_require__(3030);
exports.context = new Context.Context();
/**
 * Returns a hydrated octokit ready to use for GitHub Actions
 *
 * @param     token    the repo PAT or GITHUB_TOKEN
 * @param     options  other options to set
 */
function getOctokit(token, options) {
    return new utils_1.GitHub(utils_1.getOctokitOptions(token, options));
}
exports.getOctokit = getOctokit;
//# sourceMappingURL=github.js.map

/***/ }),

/***/ 7914:
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";

var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.getApiBaseUrl = exports.getProxyAgent = exports.getAuthString = void 0;
const httpClient = __importStar(__webpack_require__(9925));
function getAuthString(token, options) {
    if (!token && !options.auth) {
        throw new Error('Parameter token or opts.auth is required');
    }
    else if (token && options.auth) {
        throw new Error('Parameters token and opts.auth may not both be specified');
    }
    return typeof options.auth === 'string' ? options.auth : `token ${token}`;
}
exports.getAuthString = getAuthString;
function getProxyAgent(destinationUrl) {
    const hc = new httpClient.HttpClient();
    return hc.getAgent(destinationUrl);
}
exports.getProxyAgent = getProxyAgent;
function getApiBaseUrl() {
    return process.env['GITHUB_API_URL'] || 'https://api.github.com';
}
exports.getApiBaseUrl = getApiBaseUrl;
//# sourceMappingURL=utils.js.map

/***/ }),

/***/ 3030:
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";

var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.getOctokitOptions = exports.GitHub = exports.context = void 0;
const Context = __importStar(__webpack_require__(4087));
const Utils = __importStar(__webpack_require__(7914));
// octokit + plugins
const core_1 = __webpack_require__(6762);
const plugin_rest_endpoint_methods_1 = __webpack_require__(3044);
const plugin_paginate_rest_1 = __webpack_require__(4193);
exports.context = new Context.Context();
const baseUrl = Utils.getApiBaseUrl();
const defaults = {
    baseUrl,
    request: {
        agent: Utils.getProxyAgent(baseUrl)
    }
};
exports.GitHub = core_1.Octokit.plugin(plugin_rest_endpoint_methods_1.restEndpointMethods, plugin_paginate_rest_1.paginateRest).defaults(defaults);
/**
 * Convience function to correctly format Octokit Options to pass into the constructor.
 *
 * @param     token    the repo PAT or GITHUB_TOKEN
 * @param     options  other options to set
 */
function getOctokitOptions(token, options) {
    const opts = Object.assign({}, options || {}); // Shallow clone - don't mutate the object provided by the caller
    // Auth
    const auth = Utils.getAuthString(token, opts);
    if (auth) {
        opts.auth = auth;
    }
    return opts;
}
exports.getOctokitOptions = getOctokitOptions;
//# sourceMappingURL=utils.js.map

/***/ }),

/***/ 8090:
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";

var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
const internal_globber_1 = __webpack_require__(8298);
/**
 * Constructs a globber
 *
 * @param patterns  Patterns separated by newlines
 * @param options   Glob options
 */
function create(patterns, options) {
    return __awaiter(this, void 0, void 0, function* () {
        return yield internal_globber_1.DefaultGlobber.create(patterns, options);
    });
}
exports.create = create;
//# sourceMappingURL=glob.js.map

/***/ }),

/***/ 1026:
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";

var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
    result["default"] = mod;
    return result;
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
const core = __importStar(__webpack_require__(2186));
/**
 * Returns a copy with defaults filled in.
 */
function getOptions(copy) {
    const result = {
        followSymbolicLinks: true,
        implicitDescendants: true,
        omitBrokenSymbolicLinks: true
    };
    if (copy) {
        if (typeof copy.followSymbolicLinks === 'boolean') {
            result.followSymbolicLinks = copy.followSymbolicLinks;
            core.debug(`followSymbolicLinks '${result.followSymbolicLinks}'`);
        }
        if (typeof copy.implicitDescendants === 'boolean') {
            result.implicitDescendants = copy.implicitDescendants;
            core.debug(`implicitDescendants '${result.implicitDescendants}'`);
        }
        if (typeof copy.omitBrokenSymbolicLinks === 'boolean') {
            result.omitBrokenSymbolicLinks = copy.omitBrokenSymbolicLinks;
            core.debug(`omitBrokenSymbolicLinks '${result.omitBrokenSymbolicLinks}'`);
        }
    }
    return result;
}
exports.getOptions = getOptions;
//# sourceMappingURL=internal-glob-options-helper.js.map

/***/ }),

/***/ 8298:
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";

var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __asyncValues = (this && this.__asyncValues) || function (o) {
    if (!Symbol.asyncIterator) throw new TypeError("Symbol.asyncIterator is not defined.");
    var m = o[Symbol.asyncIterator], i;
    return m ? m.call(o) : (o = typeof __values === "function" ? __values(o) : o[Symbol.iterator](), i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function () { return this; }, i);
    function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }
    function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }
};
var __await = (this && this.__await) || function (v) { return this instanceof __await ? (this.v = v, this) : new __await(v); }
var __asyncGenerator = (this && this.__asyncGenerator) || function (thisArg, _arguments, generator) {
    if (!Symbol.asyncIterator) throw new TypeError("Symbol.asyncIterator is not defined.");
    var g = generator.apply(thisArg, _arguments || []), i, q = [];
    return i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function () { return this; }, i;
    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }
    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }
    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }
    function fulfill(value) { resume("next", value); }
    function reject(value) { resume("throw", value); }
    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }
};
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
    result["default"] = mod;
    return result;
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
const core = __importStar(__webpack_require__(2186));
const fs = __importStar(__webpack_require__(5747));
const globOptionsHelper = __importStar(__webpack_require__(1026));
const path = __importStar(__webpack_require__(5622));
const patternHelper = __importStar(__webpack_require__(9005));
const internal_match_kind_1 = __webpack_require__(1063);
const internal_pattern_1 = __webpack_require__(4536);
const internal_search_state_1 = __webpack_require__(9117);
const IS_WINDOWS = process.platform === 'win32';
class DefaultGlobber {
    constructor(options) {
        this.patterns = [];
        this.searchPaths = [];
        this.options = globOptionsHelper.getOptions(options);
    }
    getSearchPaths() {
        // Return a copy
        return this.searchPaths.slice();
    }
    glob() {
        var e_1, _a;
        return __awaiter(this, void 0, void 0, function* () {
            const result = [];
            try {
                for (var _b = __asyncValues(this.globGenerator()), _c; _c = yield _b.next(), !_c.done;) {
                    const itemPath = _c.value;
                    result.push(itemPath);
                }
            }
            catch (e_1_1) { e_1 = { error: e_1_1 }; }
            finally {
                try {
                    if (_c && !_c.done && (_a = _b.return)) yield _a.call(_b);
                }
                finally { if (e_1) throw e_1.error; }
            }
            return result;
        });
    }
    globGenerator() {
        return __asyncGenerator(this, arguments, function* globGenerator_1() {
            // Fill in defaults options
            const options = globOptionsHelper.getOptions(this.options);
            // Implicit descendants?
            const patterns = [];
            for (const pattern of this.patterns) {
                patterns.push(pattern);
                if (options.implicitDescendants &&
                    (pattern.trailingSeparator ||
                        pattern.segments[pattern.segments.length - 1] !== '**')) {
                    patterns.push(new internal_pattern_1.Pattern(pattern.negate, pattern.segments.concat('**')));
                }
            }
            // Push the search paths
            const stack = [];
            for (const searchPath of patternHelper.getSearchPaths(patterns)) {
                core.debug(`Search path '${searchPath}'`);
                // Exists?
                try {
                    // Intentionally using lstat. Detection for broken symlink
                    // will be performed later (if following symlinks).
                    yield __await(fs.promises.lstat(searchPath));
                }
                catch (err) {
                    if (err.code === 'ENOENT') {
                        continue;
                    }
                    throw err;
                }
                stack.unshift(new internal_search_state_1.SearchState(searchPath, 1));
            }
            // Search
            const traversalChain = []; // used to detect cycles
            while (stack.length) {
                // Pop
                const item = stack.pop();
                // Match?
                const match = patternHelper.match(patterns, item.path);
                const partialMatch = !!match || patternHelper.partialMatch(patterns, item.path);
                if (!match && !partialMatch) {
                    continue;
                }
                // Stat
                const stats = yield __await(DefaultGlobber.stat(item, options, traversalChain)
                // Broken symlink, or symlink cycle detected, or no longer exists
                );
                // Broken symlink, or symlink cycle detected, or no longer exists
                if (!stats) {
                    continue;
                }
                // Directory
                if (stats.isDirectory()) {
                    // Matched
                    if (match & internal_match_kind_1.MatchKind.Directory) {
                        yield yield __await(item.path);
                    }
                    // Descend?
                    else if (!partialMatch) {
                        continue;
                    }
                    // Push the child items in reverse
                    const childLevel = item.level + 1;
                    const childItems = (yield __await(fs.promises.readdir(item.path))).map(x => new internal_search_state_1.SearchState(path.join(item.path, x), childLevel));
                    stack.push(...childItems.reverse());
                }
                // File
                else if (match & internal_match_kind_1.MatchKind.File) {
                    yield yield __await(item.path);
                }
            }
        });
    }
    /**
     * Constructs a DefaultGlobber
     */
    static create(patterns, options) {
        return __awaiter(this, void 0, void 0, function* () {
            const result = new DefaultGlobber(options);
            if (IS_WINDOWS) {
                patterns = patterns.replace(/\r\n/g, '\n');
                patterns = patterns.replace(/\r/g, '\n');
            }
            const lines = patterns.split('\n').map(x => x.trim());
            for (const line of lines) {
                // Empty or comment
                if (!line || line.startsWith('#')) {
                    continue;
                }
                // Pattern
                else {
                    result.patterns.push(new internal_pattern_1.Pattern(line));
                }
            }
            result.searchPaths.push(...patternHelper.getSearchPaths(result.patterns));
            return result;
        });
    }
    static stat(item, options, traversalChain) {
        return __awaiter(this, void 0, void 0, function* () {
            // Note:
            // `stat` returns info about the target of a symlink (or symlink chain)
            // `lstat` returns info about a symlink itself
            let stats;
            if (options.followSymbolicLinks) {
                try {
                    // Use `stat` (following symlinks)
                    stats = yield fs.promises.stat(item.path);
                }
                catch (err) {
                    if (err.code === 'ENOENT') {
                        if (options.omitBrokenSymbolicLinks) {
                            core.debug(`Broken symlink '${item.path}'`);
                            return undefined;
                        }
                        throw new Error(`No information found for the path '${item.path}'. This may indicate a broken symbolic link.`);
                    }
                    throw err;
                }
            }
            else {
                // Use `lstat` (not following symlinks)
                stats = yield fs.promises.lstat(item.path);
            }
            // Note, isDirectory() returns false for the lstat of a symlink
            if (stats.isDirectory() && options.followSymbolicLinks) {
                // Get the realpath
                const realPath = yield fs.promises.realpath(item.path);
                // Fixup the traversal chain to match the item level
                while (traversalChain.length >= item.level) {
                    traversalChain.pop();
                }
                // Test for a cycle
                if (traversalChain.some((x) => x === realPath)) {
                    core.debug(`Symlink cycle detected for path '${item.path}' and realpath '${realPath}'`);
                    return undefined;
                }
                // Update the traversal chain
                traversalChain.push(realPath);
            }
            return stats;
        });
    }
}
exports.DefaultGlobber = DefaultGlobber;
//# sourceMappingURL=internal-globber.js.map

/***/ }),

/***/ 1063:
/***/ ((__unused_webpack_module, exports) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
/**
 * Indicates whether a pattern matches a path
 */
var MatchKind;
(function (MatchKind) {
    /** Not matched */
    MatchKind[MatchKind["None"] = 0] = "None";
    /** Matched if the path is a directory */
    MatchKind[MatchKind["Directory"] = 1] = "Directory";
    /** Matched if the path is a regular file */
    MatchKind[MatchKind["File"] = 2] = "File";
    /** Matched */
    MatchKind[MatchKind["All"] = 3] = "All";
})(MatchKind = exports.MatchKind || (exports.MatchKind = {}));
//# sourceMappingURL=internal-match-kind.js.map

/***/ }),

/***/ 1849:
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";

var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
    result["default"] = mod;
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
const path = __importStar(__webpack_require__(5622));
const assert_1 = __importDefault(__webpack_require__(2357));
const IS_WINDOWS = process.platform === 'win32';
/**
 * Similar to path.dirname except normalizes the path separators and slightly better handling for Windows UNC paths.
 *
 * For example, on Linux/macOS:
 * - `/               => /`
 * - `/hello          => /`
 *
 * For example, on Windows:
 * - `C:\             => C:\`
 * - `C:\hello        => C:\`
 * - `C:              => C:`
 * - `C:hello         => C:`
 * - `\               => \`
 * - `\hello          => \`
 * - `\\hello         => \\hello`
 * - `\\hello\world   => \\hello\world`
 */
function dirname(p) {
    // Normalize slashes and trim unnecessary trailing slash
    p = safeTrimTrailingSeparator(p);
    // Windows UNC root, e.g. \\hello or \\hello\world
    if (IS_WINDOWS && /^\\\\[^\\]+(\\[^\\]+)?$/.test(p)) {
        return p;
    }
    // Get dirname
    let result = path.dirname(p);
    // Trim trailing slash for Windows UNC root, e.g. \\hello\world\
    if (IS_WINDOWS && /^\\\\[^\\]+\\[^\\]+\\$/.test(result)) {
        result = safeTrimTrailingSeparator(result);
    }
    return result;
}
exports.dirname = dirname;
/**
 * Roots the path if not already rooted. On Windows, relative roots like `\`
 * or `C:` are expanded based on the current working directory.
 */
function ensureAbsoluteRoot(root, itemPath) {
    assert_1.default(root, `ensureAbsoluteRoot parameter 'root' must not be empty`);
    assert_1.default(itemPath, `ensureAbsoluteRoot parameter 'itemPath' must not be empty`);
    // Already rooted
    if (hasAbsoluteRoot(itemPath)) {
        return itemPath;
    }
    // Windows
    if (IS_WINDOWS) {
        // Check for itemPath like C: or C:foo
        if (itemPath.match(/^[A-Z]:[^\\/]|^[A-Z]:$/i)) {
            let cwd = process.cwd();
            assert_1.default(cwd.match(/^[A-Z]:\\/i), `Expected current directory to start with an absolute drive root. Actual '${cwd}'`);
            // Drive letter matches cwd? Expand to cwd
            if (itemPath[0].toUpperCase() === cwd[0].toUpperCase()) {
                // Drive only, e.g. C:
                if (itemPath.length === 2) {
                    // Preserve specified drive letter case (upper or lower)
                    return `${itemPath[0]}:\\${cwd.substr(3)}`;
                }
                // Drive + path, e.g. C:foo
                else {
                    if (!cwd.endsWith('\\')) {
                        cwd += '\\';
                    }
                    // Preserve specified drive letter case (upper or lower)
                    return `${itemPath[0]}:\\${cwd.substr(3)}${itemPath.substr(2)}`;
                }
            }
            // Different drive
            else {
                return `${itemPath[0]}:\\${itemPath.substr(2)}`;
            }
        }
        // Check for itemPath like \ or \foo
        else if (normalizeSeparators(itemPath).match(/^\\$|^\\[^\\]/)) {
            const cwd = process.cwd();
            assert_1.default(cwd.match(/^[A-Z]:\\/i), `Expected current directory to start with an absolute drive root. Actual '${cwd}'`);
            return `${cwd[0]}:\\${itemPath.substr(1)}`;
        }
    }
    assert_1.default(hasAbsoluteRoot(root), `ensureAbsoluteRoot parameter 'root' must have an absolute root`);
    // Otherwise ensure root ends with a separator
    if (root.endsWith('/') || (IS_WINDOWS && root.endsWith('\\'))) {
        // Intentionally empty
    }
    else {
        // Append separator
        root += path.sep;
    }
    return root + itemPath;
}
exports.ensureAbsoluteRoot = ensureAbsoluteRoot;
/**
 * On Linux/macOS, true if path starts with `/`. On Windows, true for paths like:
 * `\\hello\share` and `C:\hello` (and using alternate separator).
 */
function hasAbsoluteRoot(itemPath) {
    assert_1.default(itemPath, `hasAbsoluteRoot parameter 'itemPath' must not be empty`);
    // Normalize separators
    itemPath = normalizeSeparators(itemPath);
    // Windows
    if (IS_WINDOWS) {
        // E.g. \\hello\share or C:\hello
        return itemPath.startsWith('\\\\') || /^[A-Z]:\\/i.test(itemPath);
    }
    // E.g. /hello
    return itemPath.startsWith('/');
}
exports.hasAbsoluteRoot = hasAbsoluteRoot;
/**
 * On Linux/macOS, true if path starts with `/`. On Windows, true for paths like:
 * `\`, `\hello`, `\\hello\share`, `C:`, and `C:\hello` (and using alternate separator).
 */
function hasRoot(itemPath) {
    assert_1.default(itemPath, `isRooted parameter 'itemPath' must not be empty`);
    // Normalize separators
    itemPath = normalizeSeparators(itemPath);
    // Windows
    if (IS_WINDOWS) {
        // E.g. \ or \hello or \\hello
        // E.g. C: or C:\hello
        return itemPath.startsWith('\\') || /^[A-Z]:/i.test(itemPath);
    }
    // E.g. /hello
    return itemPath.startsWith('/');
}
exports.hasRoot = hasRoot;
/**
 * Removes redundant slashes and converts `/` to `\` on Windows
 */
function normalizeSeparators(p) {
    p = p || '';
    // Windows
    if (IS_WINDOWS) {
        // Convert slashes on Windows
        p = p.replace(/\//g, '\\');
        // Remove redundant slashes
        const isUnc = /^\\\\+[^\\]/.test(p); // e.g. \\hello
        return (isUnc ? '\\' : '') + p.replace(/\\\\+/g, '\\'); // preserve leading \\ for UNC
    }
    // Remove redundant slashes
    return p.replace(/\/\/+/g, '/');
}
exports.normalizeSeparators = normalizeSeparators;
/**
 * Normalizes the path separators and trims the trailing separator (when safe).
 * For example, `/foo/ => /foo` but `/ => /`
 */
function safeTrimTrailingSeparator(p) {
    // Short-circuit if empty
    if (!p) {
        return '';
    }
    // Normalize separators
    p = normalizeSeparators(p);
    // No trailing slash
    if (!p.endsWith(path.sep)) {
        return p;
    }
    // Check '/' on Linux/macOS and '\' on Windows
    if (p === path.sep) {
        return p;
    }
    // On Windows check if drive root. E.g. C:\
    if (IS_WINDOWS && /^[A-Z]:\\$/i.test(p)) {
        return p;
    }
    // Otherwise trim trailing slash
    return p.substr(0, p.length - 1);
}
exports.safeTrimTrailingSeparator = safeTrimTrailingSeparator;
//# sourceMappingURL=internal-path-helper.js.map

/***/ }),

/***/ 6836:
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";

var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
    result["default"] = mod;
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
const path = __importStar(__webpack_require__(5622));
const pathHelper = __importStar(__webpack_require__(1849));
const assert_1 = __importDefault(__webpack_require__(2357));
const IS_WINDOWS = process.platform === 'win32';
/**
 * Helper class for parsing paths into segments
 */
class Path {
    /**
     * Constructs a Path
     * @param itemPath Path or array of segments
     */
    constructor(itemPath) {
        this.segments = [];
        // String
        if (typeof itemPath === 'string') {
            assert_1.default(itemPath, `Parameter 'itemPath' must not be empty`);
            // Normalize slashes and trim unnecessary trailing slash
            itemPath = pathHelper.safeTrimTrailingSeparator(itemPath);
            // Not rooted
            if (!pathHelper.hasRoot(itemPath)) {
                this.segments = itemPath.split(path.sep);
            }
            // Rooted
            else {
                // Add all segments, while not at the root
                let remaining = itemPath;
                let dir = pathHelper.dirname(remaining);
                while (dir !== remaining) {
                    // Add the segment
                    const basename = path.basename(remaining);
                    this.segments.unshift(basename);
                    // Truncate the last segment
                    remaining = dir;
                    dir = pathHelper.dirname(remaining);
                }
                // Remainder is the root
                this.segments.unshift(remaining);
            }
        }
        // Array
        else {
            // Must not be empty
            assert_1.default(itemPath.length > 0, `Parameter 'itemPath' must not be an empty array`);
            // Each segment
            for (let i = 0; i < itemPath.length; i++) {
                let segment = itemPath[i];
                // Must not be empty
                assert_1.default(segment, `Parameter 'itemPath' must not contain any empty segments`);
                // Normalize slashes
                segment = pathHelper.normalizeSeparators(itemPath[i]);
                // Root segment
                if (i === 0 && pathHelper.hasRoot(segment)) {
                    segment = pathHelper.safeTrimTrailingSeparator(segment);
                    assert_1.default(segment === pathHelper.dirname(segment), `Parameter 'itemPath' root segment contains information for multiple segments`);
                    this.segments.push(segment);
                }
                // All other segments
                else {
                    // Must not contain slash
                    assert_1.default(!segment.includes(path.sep), `Parameter 'itemPath' contains unexpected path separators`);
                    this.segments.push(segment);
                }
            }
        }
    }
    /**
     * Converts the path to it's string representation
     */
    toString() {
        // First segment
        let result = this.segments[0];
        // All others
        let skipSlash = result.endsWith(path.sep) || (IS_WINDOWS && /^[A-Z]:$/i.test(result));
        for (let i = 1; i < this.segments.length; i++) {
            if (skipSlash) {
                skipSlash = false;
            }
            else {
                result += path.sep;
            }
            result += this.segments[i];
        }
        return result;
    }
}
exports.Path = Path;
//# sourceMappingURL=internal-path.js.map

/***/ }),

/***/ 9005:
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";

var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
    result["default"] = mod;
    return result;
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
const pathHelper = __importStar(__webpack_require__(1849));
const internal_match_kind_1 = __webpack_require__(1063);
const IS_WINDOWS = process.platform === 'win32';
/**
 * Given an array of patterns, returns an array of paths to search.
 * Duplicates and paths under other included paths are filtered out.
 */
function getSearchPaths(patterns) {
    // Ignore negate patterns
    patterns = patterns.filter(x => !x.negate);
    // Create a map of all search paths
    const searchPathMap = {};
    for (const pattern of patterns) {
        const key = IS_WINDOWS
            ? pattern.searchPath.toUpperCase()
            : pattern.searchPath;
        searchPathMap[key] = 'candidate';
    }
    const result = [];
    for (const pattern of patterns) {
        // Check if already included
        const key = IS_WINDOWS
            ? pattern.searchPath.toUpperCase()
            : pattern.searchPath;
        if (searchPathMap[key] === 'included') {
            continue;
        }
        // Check for an ancestor search path
        let foundAncestor = false;
        let tempKey = key;
        let parent = pathHelper.dirname(tempKey);
        while (parent !== tempKey) {
            if (searchPathMap[parent]) {
                foundAncestor = true;
                break;
            }
            tempKey = parent;
            parent = pathHelper.dirname(tempKey);
        }
        // Include the search pattern in the result
        if (!foundAncestor) {
            result.push(pattern.searchPath);
            searchPathMap[key] = 'included';
        }
    }
    return result;
}
exports.getSearchPaths = getSearchPaths;
/**
 * Matches the patterns against the path
 */
function match(patterns, itemPath) {
    let result = internal_match_kind_1.MatchKind.None;
    for (const pattern of patterns) {
        if (pattern.negate) {
            result &= ~pattern.match(itemPath);
        }
        else {
            result |= pattern.match(itemPath);
        }
    }
    return result;
}
exports.match = match;
/**
 * Checks whether to descend further into the directory
 */
function partialMatch(patterns, itemPath) {
    return patterns.some(x => !x.negate && x.partialMatch(itemPath));
}
exports.partialMatch = partialMatch;
//# sourceMappingURL=internal-pattern-helper.js.map

/***/ }),

/***/ 4536:
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";

var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
    result["default"] = mod;
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
const os = __importStar(__webpack_require__(2087));
const path = __importStar(__webpack_require__(5622));
const pathHelper = __importStar(__webpack_require__(1849));
const assert_1 = __importDefault(__webpack_require__(2357));
const minimatch_1 = __webpack_require__(3973);
const internal_match_kind_1 = __webpack_require__(1063);
const internal_path_1 = __webpack_require__(6836);
const IS_WINDOWS = process.platform === 'win32';
class Pattern {
    constructor(patternOrNegate, segments, homedir) {
        /**
         * Indicates whether matches should be excluded from the result set
         */
        this.negate = false;
        // Pattern overload
        let pattern;
        if (typeof patternOrNegate === 'string') {
            pattern = patternOrNegate.trim();
        }
        // Segments overload
        else {
            // Convert to pattern
            segments = segments || [];
            assert_1.default(segments.length, `Parameter 'segments' must not empty`);
            const root = Pattern.getLiteral(segments[0]);
            assert_1.default(root && pathHelper.hasAbsoluteRoot(root), `Parameter 'segments' first element must be a root path`);
            pattern = new internal_path_1.Path(segments).toString().trim();
            if (patternOrNegate) {
                pattern = `!${pattern}`;
            }
        }
        // Negate
        while (pattern.startsWith('!')) {
            this.negate = !this.negate;
            pattern = pattern.substr(1).trim();
        }
        // Normalize slashes and ensures absolute root
        pattern = Pattern.fixupPattern(pattern, homedir);
        // Segments
        this.segments = new internal_path_1.Path(pattern).segments;
        // Trailing slash indicates the pattern should only match directories, not regular files
        this.trailingSeparator = pathHelper
            .normalizeSeparators(pattern)
            .endsWith(path.sep);
        pattern = pathHelper.safeTrimTrailingSeparator(pattern);
        // Search path (literal path prior to the first glob segment)
        let foundGlob = false;
        const searchSegments = this.segments
            .map(x => Pattern.getLiteral(x))
            .filter(x => !foundGlob && !(foundGlob = x === ''));
        this.searchPath = new internal_path_1.Path(searchSegments).toString();
        // Root RegExp (required when determining partial match)
        this.rootRegExp = new RegExp(Pattern.regExpEscape(searchSegments[0]), IS_WINDOWS ? 'i' : '');
        // Create minimatch
        const minimatchOptions = {
            dot: true,
            nobrace: true,
            nocase: IS_WINDOWS,
            nocomment: true,
            noext: true,
            nonegate: true
        };
        pattern = IS_WINDOWS ? pattern.replace(/\\/g, '/') : pattern;
        this.minimatch = new minimatch_1.Minimatch(pattern, minimatchOptions);
    }
    /**
     * Matches the pattern against the specified path
     */
    match(itemPath) {
        // Last segment is globstar?
        if (this.segments[this.segments.length - 1] === '**') {
            // Normalize slashes
            itemPath = pathHelper.normalizeSeparators(itemPath);
            // Append a trailing slash. Otherwise Minimatch will not match the directory immediately
            // preceding the globstar. For example, given the pattern `/foo/**`, Minimatch returns
            // false for `/foo` but returns true for `/foo/`. Append a trailing slash to handle that quirk.
            if (!itemPath.endsWith(path.sep)) {
                // Note, this is safe because the constructor ensures the pattern has an absolute root.
                // For example, formats like C: and C:foo on Windows are resolved to an absolute root.
                itemPath = `${itemPath}${path.sep}`;
            }
        }
        else {
            // Normalize slashes and trim unnecessary trailing slash
            itemPath = pathHelper.safeTrimTrailingSeparator(itemPath);
        }
        // Match
        if (this.minimatch.match(itemPath)) {
            return this.trailingSeparator ? internal_match_kind_1.MatchKind.Directory : internal_match_kind_1.MatchKind.All;
        }
        return internal_match_kind_1.MatchKind.None;
    }
    /**
     * Indicates whether the pattern may match descendants of the specified path
     */
    partialMatch(itemPath) {
        // Normalize slashes and trim unnecessary trailing slash
        itemPath = pathHelper.safeTrimTrailingSeparator(itemPath);
        // matchOne does not handle root path correctly
        if (pathHelper.dirname(itemPath) === itemPath) {
            return this.rootRegExp.test(itemPath);
        }
        return this.minimatch.matchOne(itemPath.split(IS_WINDOWS ? /\\+/ : /\/+/), this.minimatch.set[0], true);
    }
    /**
     * Escapes glob patterns within a path
     */
    static globEscape(s) {
        return (IS_WINDOWS ? s : s.replace(/\\/g, '\\\\')) // escape '\' on Linux/macOS
            .replace(/(\[)(?=[^/]+\])/g, '[[]') // escape '[' when ']' follows within the path segment
            .replace(/\?/g, '[?]') // escape '?'
            .replace(/\*/g, '[*]'); // escape '*'
    }
    /**
     * Normalizes slashes and ensures absolute root
     */
    static fixupPattern(pattern, homedir) {
        // Empty
        assert_1.default(pattern, 'pattern cannot be empty');
        // Must not contain `.` segment, unless first segment
        // Must not contain `..` segment
        const literalSegments = new internal_path_1.Path(pattern).segments.map(x => Pattern.getLiteral(x));
        assert_1.default(literalSegments.every((x, i) => (x !== '.' || i === 0) && x !== '..'), `Invalid pattern '${pattern}'. Relative pathing '.' and '..' is not allowed.`);
        // Must not contain globs in root, e.g. Windows UNC path \\foo\b*r
        assert_1.default(!pathHelper.hasRoot(pattern) || literalSegments[0], `Invalid pattern '${pattern}'. Root segment must not contain globs.`);
        // Normalize slashes
        pattern = pathHelper.normalizeSeparators(pattern);
        // Replace leading `.` segment
        if (pattern === '.' || pattern.startsWith(`.${path.sep}`)) {
            pattern = Pattern.globEscape(process.cwd()) + pattern.substr(1);
        }
        // Replace leading `~` segment
        else if (pattern === '~' || pattern.startsWith(`~${path.sep}`)) {
            homedir = homedir || os.homedir();
            assert_1.default(homedir, 'Unable to determine HOME directory');
            assert_1.default(pathHelper.hasAbsoluteRoot(homedir), `Expected HOME directory to be a rooted path. Actual '${homedir}'`);
            pattern = Pattern.globEscape(homedir) + pattern.substr(1);
        }
        // Replace relative drive root, e.g. pattern is C: or C:foo
        else if (IS_WINDOWS &&
            (pattern.match(/^[A-Z]:$/i) || pattern.match(/^[A-Z]:[^\\]/i))) {
            let root = pathHelper.ensureAbsoluteRoot('C:\\dummy-root', pattern.substr(0, 2));
            if (pattern.length > 2 && !root.endsWith('\\')) {
                root += '\\';
            }
            pattern = Pattern.globEscape(root) + pattern.substr(2);
        }
        // Replace relative root, e.g. pattern is \ or \foo
        else if (IS_WINDOWS && (pattern === '\\' || pattern.match(/^\\[^\\]/))) {
            let root = pathHelper.ensureAbsoluteRoot('C:\\dummy-root', '\\');
            if (!root.endsWith('\\')) {
                root += '\\';
            }
            pattern = Pattern.globEscape(root) + pattern.substr(1);
        }
        // Otherwise ensure absolute root
        else {
            pattern = pathHelper.ensureAbsoluteRoot(Pattern.globEscape(process.cwd()), pattern);
        }
        return pathHelper.normalizeSeparators(pattern);
    }
    /**
     * Attempts to unescape a pattern segment to create a literal path segment.
     * Otherwise returns empty string.
     */
    static getLiteral(segment) {
        let literal = '';
        for (let i = 0; i < segment.length; i++) {
            const c = segment[i];
            // Escape
            if (c === '\\' && !IS_WINDOWS && i + 1 < segment.length) {
                literal += segment[++i];
                continue;
            }
            // Wildcard
            else if (c === '*' || c === '?') {
                return '';
            }
            // Character set
            else if (c === '[' && i + 1 < segment.length) {
                let set = '';
                let closed = -1;
                for (let i2 = i + 1; i2 < segment.length; i2++) {
                    const c2 = segment[i2];
                    // Escape
                    if (c2 === '\\' && !IS_WINDOWS && i2 + 1 < segment.length) {
                        set += segment[++i2];
                        continue;
                    }
                    // Closed
                    else if (c2 === ']') {
                        closed = i2;
                        break;
                    }
                    // Otherwise
                    else {
                        set += c2;
                    }
                }
                // Closed?
                if (closed >= 0) {
                    // Cannot convert
                    if (set.length > 1) {
                        return '';
                    }
                    // Convert to literal
                    if (set) {
                        literal += set;
                        i = closed;
                        continue;
                    }
                }
                // Otherwise fall thru
            }
            // Append
            literal += c;
        }
        return literal;
    }
    /**
     * Escapes regexp special characters
     * https://javascript.info/regexp-escaping
     */
    static regExpEscape(s) {
        return s.replace(/[[\\^$.|?*+()]/g, '\\$&');
    }
}
exports.Pattern = Pattern;
//# sourceMappingURL=internal-pattern.js.map

/***/ }),

/***/ 9117:
/***/ ((__unused_webpack_module, exports) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
class SearchState {
    constructor(path, level) {
        this.path = path;
        this.level = level;
    }
}
exports.SearchState = SearchState;
//# sourceMappingURL=internal-search-state.js.map

/***/ }),

/***/ 9925:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
const http = __webpack_require__(8605);
const https = __webpack_require__(7211);
const pm = __webpack_require__(6443);
let tunnel;
var HttpCodes;
(function (HttpCodes) {
    HttpCodes[HttpCodes["OK"] = 200] = "OK";
    HttpCodes[HttpCodes["MultipleChoices"] = 300] = "MultipleChoices";
    HttpCodes[HttpCodes["MovedPermanently"] = 301] = "MovedPermanently";
    HttpCodes[HttpCodes["ResourceMoved"] = 302] = "ResourceMoved";
    HttpCodes[HttpCodes["SeeOther"] = 303] = "SeeOther";
    HttpCodes[HttpCodes["NotModified"] = 304] = "NotModified";
    HttpCodes[HttpCodes["UseProxy"] = 305] = "UseProxy";
    HttpCodes[HttpCodes["SwitchProxy"] = 306] = "SwitchProxy";
    HttpCodes[HttpCodes["TemporaryRedirect"] = 307] = "TemporaryRedirect";
    HttpCodes[HttpCodes["PermanentRedirect"] = 308] = "PermanentRedirect";
    HttpCodes[HttpCodes["BadRequest"] = 400] = "BadRequest";
    HttpCodes[HttpCodes["Unauthorized"] = 401] = "Unauthorized";
    HttpCodes[HttpCodes["PaymentRequired"] = 402] = "PaymentRequired";
    HttpCodes[HttpCodes["Forbidden"] = 403] = "Forbidden";
    HttpCodes[HttpCodes["NotFound"] = 404] = "NotFound";
    HttpCodes[HttpCodes["MethodNotAllowed"] = 405] = "MethodNotAllowed";
    HttpCodes[HttpCodes["NotAcceptable"] = 406] = "NotAcceptable";
    HttpCodes[HttpCodes["ProxyAuthenticationRequired"] = 407] = "ProxyAuthenticationRequired";
    HttpCodes[HttpCodes["RequestTimeout"] = 408] = "RequestTimeout";
    HttpCodes[HttpCodes["Conflict"] = 409] = "Conflict";
    HttpCodes[HttpCodes["Gone"] = 410] = "Gone";
    HttpCodes[HttpCodes["TooManyRequests"] = 429] = "TooManyRequests";
    HttpCodes[HttpCodes["InternalServerError"] = 500] = "InternalServerError";
    HttpCodes[HttpCodes["NotImplemented"] = 501] = "NotImplemented";
    HttpCodes[HttpCodes["BadGateway"] = 502] = "BadGateway";
    HttpCodes[HttpCodes["ServiceUnavailable"] = 503] = "ServiceUnavailable";
    HttpCodes[HttpCodes["GatewayTimeout"] = 504] = "GatewayTimeout";
})(HttpCodes = exports.HttpCodes || (exports.HttpCodes = {}));
var Headers;
(function (Headers) {
    Headers["Accept"] = "accept";
    Headers["ContentType"] = "content-type";
})(Headers = exports.Headers || (exports.Headers = {}));
var MediaTypes;
(function (MediaTypes) {
    MediaTypes["ApplicationJson"] = "application/json";
})(MediaTypes = exports.MediaTypes || (exports.MediaTypes = {}));
/**
 * Returns the proxy URL, depending upon the supplied url and proxy environment variables.
 * @param serverUrl  The server URL where the request will be sent. For example, https://api.github.com
 */
function getProxyUrl(serverUrl) {
    let proxyUrl = pm.getProxyUrl(new URL(serverUrl));
    return proxyUrl ? proxyUrl.href : '';
}
exports.getProxyUrl = getProxyUrl;
const HttpRedirectCodes = [
    HttpCodes.MovedPermanently,
    HttpCodes.ResourceMoved,
    HttpCodes.SeeOther,
    HttpCodes.TemporaryRedirect,
    HttpCodes.PermanentRedirect
];
const HttpResponseRetryCodes = [
    HttpCodes.BadGateway,
    HttpCodes.ServiceUnavailable,
    HttpCodes.GatewayTimeout
];
const RetryableHttpVerbs = ['OPTIONS', 'GET', 'DELETE', 'HEAD'];
const ExponentialBackoffCeiling = 10;
const ExponentialBackoffTimeSlice = 5;
class HttpClientError extends Error {
    constructor(message, statusCode) {
        super(message);
        this.name = 'HttpClientError';
        this.statusCode = statusCode;
        Object.setPrototypeOf(this, HttpClientError.prototype);
    }
}
exports.HttpClientError = HttpClientError;
class HttpClientResponse {
    constructor(message) {
        this.message = message;
    }
    readBody() {
        return new Promise(async (resolve, reject) => {
            let output = Buffer.alloc(0);
            this.message.on('data', (chunk) => {
                output = Buffer.concat([output, chunk]);
            });
            this.message.on('end', () => {
                resolve(output.toString());
            });
        });
    }
}
exports.HttpClientResponse = HttpClientResponse;
function isHttps(requestUrl) {
    let parsedUrl = new URL(requestUrl);
    return parsedUrl.protocol === 'https:';
}
exports.isHttps = isHttps;
class HttpClient {
    constructor(userAgent, handlers, requestOptions) {
        this._ignoreSslError = false;
        this._allowRedirects = true;
        this._allowRedirectDowngrade = false;
        this._maxRedirects = 50;
        this._allowRetries = false;
        this._maxRetries = 1;
        this._keepAlive = false;
        this._disposed = false;
        this.userAgent = userAgent;
        this.handlers = handlers || [];
        this.requestOptions = requestOptions;
        if (requestOptions) {
            if (requestOptions.ignoreSslError != null) {
                this._ignoreSslError = requestOptions.ignoreSslError;
            }
            this._socketTimeout = requestOptions.socketTimeout;
            if (requestOptions.allowRedirects != null) {
                this._allowRedirects = requestOptions.allowRedirects;
            }
            if (requestOptions.allowRedirectDowngrade != null) {
                this._allowRedirectDowngrade = requestOptions.allowRedirectDowngrade;
            }
            if (requestOptions.maxRedirects != null) {
                this._maxRedirects = Math.max(requestOptions.maxRedirects, 0);
            }
            if (requestOptions.keepAlive != null) {
                this._keepAlive = requestOptions.keepAlive;
            }
            if (requestOptions.allowRetries != null) {
                this._allowRetries = requestOptions.allowRetries;
            }
            if (requestOptions.maxRetries != null) {
                this._maxRetries = requestOptions.maxRetries;
            }
        }
    }
    options(requestUrl, additionalHeaders) {
        return this.request('OPTIONS', requestUrl, null, additionalHeaders || {});
    }
    get(requestUrl, additionalHeaders) {
        return this.request('GET', requestUrl, null, additionalHeaders || {});
    }
    del(requestUrl, additionalHeaders) {
        return this.request('DELETE', requestUrl, null, additionalHeaders || {});
    }
    post(requestUrl, data, additionalHeaders) {
        return this.request('POST', requestUrl, data, additionalHeaders || {});
    }
    patch(requestUrl, data, additionalHeaders) {
        return this.request('PATCH', requestUrl, data, additionalHeaders || {});
    }
    put(requestUrl, data, additionalHeaders) {
        return this.request('PUT', requestUrl, data, additionalHeaders || {});
    }
    head(requestUrl, additionalHeaders) {
        return this.request('HEAD', requestUrl, null, additionalHeaders || {});
    }
    sendStream(verb, requestUrl, stream, additionalHeaders) {
        return this.request(verb, requestUrl, stream, additionalHeaders);
    }
    /**
     * Gets a typed object from an endpoint
     * Be aware that not found returns a null.  Other errors (4xx, 5xx) reject the promise
     */
    async getJson(requestUrl, additionalHeaders = {}) {
        additionalHeaders[Headers.Accept] = this._getExistingOrDefaultHeader(additionalHeaders, Headers.Accept, MediaTypes.ApplicationJson);
        let res = await this.get(requestUrl, additionalHeaders);
        return this._processResponse(res, this.requestOptions);
    }
    async postJson(requestUrl, obj, additionalHeaders = {}) {
        let data = JSON.stringify(obj, null, 2);
        additionalHeaders[Headers.Accept] = this._getExistingOrDefaultHeader(additionalHeaders, Headers.Accept, MediaTypes.ApplicationJson);
        additionalHeaders[Headers.ContentType] = this._getExistingOrDefaultHeader(additionalHeaders, Headers.ContentType, MediaTypes.ApplicationJson);
        let res = await this.post(requestUrl, data, additionalHeaders);
        return this._processResponse(res, this.requestOptions);
    }
    async putJson(requestUrl, obj, additionalHeaders = {}) {
        let data = JSON.stringify(obj, null, 2);
        additionalHeaders[Headers.Accept] = this._getExistingOrDefaultHeader(additionalHeaders, Headers.Accept, MediaTypes.ApplicationJson);
        additionalHeaders[Headers.ContentType] = this._getExistingOrDefaultHeader(additionalHeaders, Headers.ContentType, MediaTypes.ApplicationJson);
        let res = await this.put(requestUrl, data, additionalHeaders);
        return this._processResponse(res, this.requestOptions);
    }
    async patchJson(requestUrl, obj, additionalHeaders = {}) {
        let data = JSON.stringify(obj, null, 2);
        additionalHeaders[Headers.Accept] = this._getExistingOrDefaultHeader(additionalHeaders, Headers.Accept, MediaTypes.ApplicationJson);
        additionalHeaders[Headers.ContentType] = this._getExistingOrDefaultHeader(additionalHeaders, Headers.ContentType, MediaTypes.ApplicationJson);
        let res = await this.patch(requestUrl, data, additionalHeaders);
        return this._processResponse(res, this.requestOptions);
    }
    /**
     * Makes a raw http request.
     * All other methods such as get, post, patch, and request ultimately call this.
     * Prefer get, del, post and patch
     */
    async request(verb, requestUrl, data, headers) {
        if (this._disposed) {
            throw new Error('Client has already been disposed.');
        }
        let parsedUrl = new URL(requestUrl);
        let info = this._prepareRequest(verb, parsedUrl, headers);
        // Only perform retries on reads since writes may not be idempotent.
        let maxTries = this._allowRetries && RetryableHttpVerbs.indexOf(verb) != -1
            ? this._maxRetries + 1
            : 1;
        let numTries = 0;
        let response;
        while (numTries < maxTries) {
            response = await this.requestRaw(info, data);
            // Check if it's an authentication challenge
            if (response &&
                response.message &&
                response.message.statusCode === HttpCodes.Unauthorized) {
                let authenticationHandler;
                for (let i = 0; i < this.handlers.length; i++) {
                    if (this.handlers[i].canHandleAuthentication(response)) {
                        authenticationHandler = this.handlers[i];
                        break;
                    }
                }
                if (authenticationHandler) {
                    return authenticationHandler.handleAuthentication(this, info, data);
                }
                else {
                    // We have received an unauthorized response but have no handlers to handle it.
                    // Let the response return to the caller.
                    return response;
                }
            }
            let redirectsRemaining = this._maxRedirects;
            while (HttpRedirectCodes.indexOf(response.message.statusCode) != -1 &&
                this._allowRedirects &&
                redirectsRemaining > 0) {
                const redirectUrl = response.message.headers['location'];
                if (!redirectUrl) {
                    // if there's no location to redirect to, we won't
                    break;
                }
                let parsedRedirectUrl = new URL(redirectUrl);
                if (parsedUrl.protocol == 'https:' &&
                    parsedUrl.protocol != parsedRedirectUrl.protocol &&
                    !this._allowRedirectDowngrade) {
                    throw new Error('Redirect from HTTPS to HTTP protocol. This downgrade is not allowed for security reasons. If you want to allow this behavior, set the allowRedirectDowngrade option to true.');
                }
                // we need to finish reading the response before reassigning response
                // which will leak the open socket.
                await response.readBody();
                // strip authorization header if redirected to a different hostname
                if (parsedRedirectUrl.hostname !== parsedUrl.hostname) {
                    for (let header in headers) {
                        // header names are case insensitive
                        if (header.toLowerCase() === 'authorization') {
                            delete headers[header];
                        }
                    }
                }
                // let's make the request with the new redirectUrl
                info = this._prepareRequest(verb, parsedRedirectUrl, headers);
                response = await this.requestRaw(info, data);
                redirectsRemaining--;
            }
            if (HttpResponseRetryCodes.indexOf(response.message.statusCode) == -1) {
                // If not a retry code, return immediately instead of retrying
                return response;
            }
            numTries += 1;
            if (numTries < maxTries) {
                await response.readBody();
                await this._performExponentialBackoff(numTries);
            }
        }
        return response;
    }
    /**
     * Needs to be called if keepAlive is set to true in request options.
     */
    dispose() {
        if (this._agent) {
            this._agent.destroy();
        }
        this._disposed = true;
    }
    /**
     * Raw request.
     * @param info
     * @param data
     */
    requestRaw(info, data) {
        return new Promise((resolve, reject) => {
            let callbackForResult = function (err, res) {
                if (err) {
                    reject(err);
                }
                resolve(res);
            };
            this.requestRawWithCallback(info, data, callbackForResult);
        });
    }
    /**
     * Raw request with callback.
     * @param info
     * @param data
     * @param onResult
     */
    requestRawWithCallback(info, data, onResult) {
        let socket;
        if (typeof data === 'string') {
            info.options.headers['Content-Length'] = Buffer.byteLength(data, 'utf8');
        }
        let callbackCalled = false;
        let handleResult = (err, res) => {
            if (!callbackCalled) {
                callbackCalled = true;
                onResult(err, res);
            }
        };
        let req = info.httpModule.request(info.options, (msg) => {
            let res = new HttpClientResponse(msg);
            handleResult(null, res);
        });
        req.on('socket', sock => {
            socket = sock;
        });
        // If we ever get disconnected, we want the socket to timeout eventually
        req.setTimeout(this._socketTimeout || 3 * 60000, () => {
            if (socket) {
                socket.end();
            }
            handleResult(new Error('Request timeout: ' + info.options.path), null);
        });
        req.on('error', function (err) {
            // err has statusCode property
            // res should have headers
            handleResult(err, null);
        });
        if (data && typeof data === 'string') {
            req.write(data, 'utf8');
        }
        if (data && typeof data !== 'string') {
            data.on('close', function () {
                req.end();
            });
            data.pipe(req);
        }
        else {
            req.end();
        }
    }
    /**
     * Gets an http agent. This function is useful when you need an http agent that handles
     * routing through a proxy server - depending upon the url and proxy environment variables.
     * @param serverUrl  The server URL where the request will be sent. For example, https://api.github.com
     */
    getAgent(serverUrl) {
        let parsedUrl = new URL(serverUrl);
        return this._getAgent(parsedUrl);
    }
    _prepareRequest(method, requestUrl, headers) {
        const info = {};
        info.parsedUrl = requestUrl;
        const usingSsl = info.parsedUrl.protocol === 'https:';
        info.httpModule = usingSsl ? https : http;
        const defaultPort = usingSsl ? 443 : 80;
        info.options = {};
        info.options.host = info.parsedUrl.hostname;
        info.options.port = info.parsedUrl.port
            ? parseInt(info.parsedUrl.port)
            : defaultPort;
        info.options.path =
            (info.parsedUrl.pathname || '') + (info.parsedUrl.search || '');
        info.options.method = method;
        info.options.headers = this._mergeHeaders(headers);
        if (this.userAgent != null) {
            info.options.headers['user-agent'] = this.userAgent;
        }
        info.options.agent = this._getAgent(info.parsedUrl);
        // gives handlers an opportunity to participate
        if (this.handlers) {
            this.handlers.forEach(handler => {
                handler.prepareRequest(info.options);
            });
        }
        return info;
    }
    _mergeHeaders(headers) {
        const lowercaseKeys = obj => Object.keys(obj).reduce((c, k) => ((c[k.toLowerCase()] = obj[k]), c), {});
        if (this.requestOptions && this.requestOptions.headers) {
            return Object.assign({}, lowercaseKeys(this.requestOptions.headers), lowercaseKeys(headers));
        }
        return lowercaseKeys(headers || {});
    }
    _getExistingOrDefaultHeader(additionalHeaders, header, _default) {
        const lowercaseKeys = obj => Object.keys(obj).reduce((c, k) => ((c[k.toLowerCase()] = obj[k]), c), {});
        let clientHeader;
        if (this.requestOptions && this.requestOptions.headers) {
            clientHeader = lowercaseKeys(this.requestOptions.headers)[header];
        }
        return additionalHeaders[header] || clientHeader || _default;
    }
    _getAgent(parsedUrl) {
        let agent;
        let proxyUrl = pm.getProxyUrl(parsedUrl);
        let useProxy = proxyUrl && proxyUrl.hostname;
        if (this._keepAlive && useProxy) {
            agent = this._proxyAgent;
        }
        if (this._keepAlive && !useProxy) {
            agent = this._agent;
        }
        // if agent is already assigned use that agent.
        if (!!agent) {
            return agent;
        }
        const usingSsl = parsedUrl.protocol === 'https:';
        let maxSockets = 100;
        if (!!this.requestOptions) {
            maxSockets = this.requestOptions.maxSockets || http.globalAgent.maxSockets;
        }
        if (useProxy) {
            // If using proxy, need tunnel
            if (!tunnel) {
                tunnel = __webpack_require__(4294);
            }
            const agentOptions = {
                maxSockets: maxSockets,
                keepAlive: this._keepAlive,
                proxy: {
                    proxyAuth: `${proxyUrl.username}:${proxyUrl.password}`,
                    host: proxyUrl.hostname,
                    port: proxyUrl.port
                }
            };
            let tunnelAgent;
            const overHttps = proxyUrl.protocol === 'https:';
            if (usingSsl) {
                tunnelAgent = overHttps ? tunnel.httpsOverHttps : tunnel.httpsOverHttp;
            }
            else {
                tunnelAgent = overHttps ? tunnel.httpOverHttps : tunnel.httpOverHttp;
            }
            agent = tunnelAgent(agentOptions);
            this._proxyAgent = agent;
        }
        // if reusing agent across request and tunneling agent isn't assigned create a new agent
        if (this._keepAlive && !agent) {
            const options = { keepAlive: this._keepAlive, maxSockets: maxSockets };
            agent = usingSsl ? new https.Agent(options) : new http.Agent(options);
            this._agent = agent;
        }
        // if not using private agent and tunnel agent isn't setup then use global agent
        if (!agent) {
            agent = usingSsl ? https.globalAgent : http.globalAgent;
        }
        if (usingSsl && this._ignoreSslError) {
            // we don't want to set NODE_TLS_REJECT_UNAUTHORIZED=0 since that will affect request for entire process
            // http.RequestOptions doesn't expose a way to modify RequestOptions.agent.options
            // we have to cast it to any and change it directly
            agent.options = Object.assign(agent.options || {}, {
                rejectUnauthorized: false
            });
        }
        return agent;
    }
    _performExponentialBackoff(retryNumber) {
        retryNumber = Math.min(ExponentialBackoffCeiling, retryNumber);
        const ms = ExponentialBackoffTimeSlice * Math.pow(2, retryNumber);
        return new Promise(resolve => setTimeout(() => resolve(), ms));
    }
    static dateTimeDeserializer(key, value) {
        if (typeof value === 'string') {
            let a = new Date(value);
            if (!isNaN(a.valueOf())) {
                return a;
            }
        }
        return value;
    }
    async _processResponse(res, options) {
        return new Promise(async (resolve, reject) => {
            const statusCode = res.message.statusCode;
            const response = {
                statusCode: statusCode,
                result: null,
                headers: {}
            };
            // not found leads to null obj returned
            if (statusCode == HttpCodes.NotFound) {
                resolve(response);
            }
            let obj;
            let contents;
            // get the result from the body
            try {
                contents = await res.readBody();
                if (contents && contents.length > 0) {
                    if (options && options.deserializeDates) {
                        obj = JSON.parse(contents, HttpClient.dateTimeDeserializer);
                    }
                    else {
                        obj = JSON.parse(contents);
                    }
                    response.result = obj;
                }
                response.headers = res.message.headers;
            }
            catch (err) {
                // Invalid resource (contents not json);  leaving result obj null
            }
            // note that 3xx redirects are handled by the http layer.
            if (statusCode > 299) {
                let msg;
                // if exception/error in body, attempt to get better error
                if (obj && obj.message) {
                    msg = obj.message;
                }
                else if (contents && contents.length > 0) {
                    // it may be the case that the exception is in the body message as string
                    msg = contents;
                }
                else {
                    msg = 'Failed request: (' + statusCode + ')';
                }
                let err = new HttpClientError(msg, statusCode);
                err.result = response.result;
                reject(err);
            }
            else {
                resolve(response);
            }
        });
    }
}
exports.HttpClient = HttpClient;


/***/ }),

/***/ 6443:
/***/ ((__unused_webpack_module, exports) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
function getProxyUrl(reqUrl) {
    let usingSsl = reqUrl.protocol === 'https:';
    let proxyUrl;
    if (checkBypass(reqUrl)) {
        return proxyUrl;
    }
    let proxyVar;
    if (usingSsl) {
        proxyVar = process.env['https_proxy'] || process.env['HTTPS_PROXY'];
    }
    else {
        proxyVar = process.env['http_proxy'] || process.env['HTTP_PROXY'];
    }
    if (proxyVar) {
        proxyUrl = new URL(proxyVar);
    }
    return proxyUrl;
}
exports.getProxyUrl = getProxyUrl;
function checkBypass(reqUrl) {
    if (!reqUrl.hostname) {
        return false;
    }
    let noProxy = process.env['no_proxy'] || process.env['NO_PROXY'] || '';
    if (!noProxy) {
        return false;
    }
    // Determine the request port
    let reqPort;
    if (reqUrl.port) {
        reqPort = Number(reqUrl.port);
    }
    else if (reqUrl.protocol === 'http:') {
        reqPort = 80;
    }
    else if (reqUrl.protocol === 'https:') {
        reqPort = 443;
    }
    // Format the request hostname and hostname with port
    let upperReqHosts = [reqUrl.hostname.toUpperCase()];
    if (typeof reqPort === 'number') {
        upperReqHosts.push(`${upperReqHosts[0]}:${reqPort}`);
    }
    // Compare request host against noproxy
    for (let upperNoProxyItem of noProxy
        .split(',')
        .map(x => x.trim().toUpperCase())
        .filter(x => x)) {
        if (upperReqHosts.some(x => x === upperNoProxyItem)) {
            return true;
        }
    }
    return false;
}
exports.checkBypass = checkBypass;


/***/ }),

/***/ 334:
/***/ ((__unused_webpack_module, exports) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({ value: true }));

async function auth(token) {
  const tokenType = token.split(/\./).length === 3 ? "app" : /^v\d+\./.test(token) ? "installation" : "oauth";
  return {
    type: "token",
    token: token,
    tokenType
  };
}

/**
 * Prefix token for usage in the Authorization header
 *
 * @param token OAuth token or JSON Web Token
 */
function withAuthorizationPrefix(token) {
  if (token.split(/\./).length === 3) {
    return `bearer ${token}`;
  }

  return `token ${token}`;
}

async function hook(token, request, route, parameters) {
  const endpoint = request.endpoint.merge(route, parameters);
  endpoint.headers.authorization = withAuthorizationPrefix(token);
  return request(endpoint);
}

const createTokenAuth = function createTokenAuth(token) {
  if (!token) {
    throw new Error("[@octokit/auth-token] No token passed to createTokenAuth");
  }

  if (typeof token !== "string") {
    throw new Error("[@octokit/auth-token] Token passed to createTokenAuth is not a string");
  }

  token = token.replace(/^(token|bearer) +/i, "");
  return Object.assign(auth.bind(null, token), {
    hook: hook.bind(null, token)
  });
};

exports.createTokenAuth = createTokenAuth;
//# sourceMappingURL=index.js.map


/***/ }),

/***/ 6762:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({ value: true }));

var universalUserAgent = __webpack_require__(5030);
var beforeAfterHook = __webpack_require__(3682);
var request = __webpack_require__(6234);
var graphql = __webpack_require__(8467);
var authToken = __webpack_require__(334);

function _objectWithoutPropertiesLoose(source, excluded) {
  if (source == null) return {};
  var target = {};
  var sourceKeys = Object.keys(source);
  var key, i;

  for (i = 0; i < sourceKeys.length; i++) {
    key = sourceKeys[i];
    if (excluded.indexOf(key) >= 0) continue;
    target[key] = source[key];
  }

  return target;
}

function _objectWithoutProperties(source, excluded) {
  if (source == null) return {};

  var target = _objectWithoutPropertiesLoose(source, excluded);

  var key, i;

  if (Object.getOwnPropertySymbols) {
    var sourceSymbolKeys = Object.getOwnPropertySymbols(source);

    for (i = 0; i < sourceSymbolKeys.length; i++) {
      key = sourceSymbolKeys[i];
      if (excluded.indexOf(key) >= 0) continue;
      if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue;
      target[key] = source[key];
    }
  }

  return target;
}

const VERSION = "3.2.1";

class Octokit {
  constructor(options = {}) {
    const hook = new beforeAfterHook.Collection();
    const requestDefaults = {
      baseUrl: request.request.endpoint.DEFAULTS.baseUrl,
      headers: {},
      request: Object.assign({}, options.request, {
        hook: hook.bind(null, "request")
      }),
      mediaType: {
        previews: [],
        format: ""
      }
    }; // prepend default user agent with `options.userAgent` if set

    requestDefaults.headers["user-agent"] = [options.userAgent, `octokit-core.js/${VERSION} ${universalUserAgent.getUserAgent()}`].filter(Boolean).join(" ");

    if (options.baseUrl) {
      requestDefaults.baseUrl = options.baseUrl;
    }

    if (options.previews) {
      requestDefaults.mediaType.previews = options.previews;
    }

    if (options.timeZone) {
      requestDefaults.headers["time-zone"] = options.timeZone;
    }

    this.request = request.request.defaults(requestDefaults);
    this.graphql = graphql.withCustomRequest(this.request).defaults(requestDefaults);
    this.log = Object.assign({
      debug: () => {},
      info: () => {},
      warn: console.warn.bind(console),
      error: console.error.bind(console)
    }, options.log);
    this.hook = hook; // (1) If neither `options.authStrategy` nor `options.auth` are set, the `octokit` instance
    //     is unauthenticated. The `this.auth()` method is a no-op and no request hook is registered.
    // (2) If only `options.auth` is set, use the default token authentication strategy.
    // (3) If `options.authStrategy` is set then use it and pass in `options.auth`. Always pass own request as many strategies accept a custom request instance.
    // TODO: type `options.auth` based on `options.authStrategy`.

    if (!options.authStrategy) {
      if (!options.auth) {
        // (1)
        this.auth = async () => ({
          type: "unauthenticated"
        });
      } else {
        // (2)
        const auth = authToken.createTokenAuth(options.auth); // @ts-ignore  ¯\_(ツ)_/¯

        hook.wrap("request", auth.hook);
        this.auth = auth;
      }
    } else {
      const {
        authStrategy
      } = options,
            otherOptions = _objectWithoutProperties(options, ["authStrategy"]);

      const auth = authStrategy(Object.assign({
        request: this.request,
        log: this.log,
        // we pass the current octokit instance as well as its constructor options
        // to allow for authentication strategies that return a new octokit instance
        // that shares the same internal state as the current one. The original
        // requirement for this was the "event-octokit" authentication strategy
        // of https://github.com/probot/octokit-auth-probot.
        octokit: this,
        octokitOptions: otherOptions
      }, options.auth)); // @ts-ignore  ¯\_(ツ)_/¯

      hook.wrap("request", auth.hook);
      this.auth = auth;
    } // apply plugins
    // https://stackoverflow.com/a/16345172


    const classConstructor = this.constructor;
    classConstructor.plugins.forEach(plugin => {
      Object.assign(this, plugin(this, options));
    });
  }

  static defaults(defaults) {
    const OctokitWithDefaults = class extends this {
      constructor(...args) {
        const options = args[0] || {};

        if (typeof defaults === "function") {
          super(defaults(options));
          return;
        }

        super(Object.assign({}, defaults, options, options.userAgent && defaults.userAgent ? {
          userAgent: `${options.userAgent} ${defaults.userAgent}`
        } : null));
      }

    };
    return OctokitWithDefaults;
  }
  /**
   * Attach a plugin (or many) to your Octokit instance.
   *
   * @example
   * const API = Octokit.plugin(plugin1, plugin2, plugin3, ...)
   */


  static plugin(...newPlugins) {
    var _a;

    const currentPlugins = this.plugins;
    const NewOctokit = (_a = class extends this {}, _a.plugins = currentPlugins.concat(newPlugins.filter(plugin => !currentPlugins.includes(plugin))), _a);
    return NewOctokit;
  }

}
Octokit.VERSION = VERSION;
Octokit.plugins = [];

exports.Octokit = Octokit;
//# sourceMappingURL=index.js.map


/***/ }),

/***/ 9440:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({ value: true }));

var isPlainObject = __webpack_require__(558);
var universalUserAgent = __webpack_require__(5030);

function lowercaseKeys(object) {
  if (!object) {
    return {};
  }

  return Object.keys(object).reduce((newObj, key) => {
    newObj[key.toLowerCase()] = object[key];
    return newObj;
  }, {});
}

function mergeDeep(defaults, options) {
  const result = Object.assign({}, defaults);
  Object.keys(options).forEach(key => {
    if (isPlainObject.isPlainObject(options[key])) {
      if (!(key in defaults)) Object.assign(result, {
        [key]: options[key]
      });else result[key] = mergeDeep(defaults[key], options[key]);
    } else {
      Object.assign(result, {
        [key]: options[key]
      });
    }
  });
  return result;
}

function removeUndefinedProperties(obj) {
  for (const key in obj) {
    if (obj[key] === undefined) {
      delete obj[key];
    }
  }

  return obj;
}

function merge(defaults, route, options) {
  if (typeof route === "string") {
    let [method, url] = route.split(" ");
    options = Object.assign(url ? {
      method,
      url
    } : {
      url: method
    }, options);
  } else {
    options = Object.assign({}, route);
  } // lowercase header names before merging with defaults to avoid duplicates


  options.headers = lowercaseKeys(options.headers); // remove properties with undefined values before merging

  removeUndefinedProperties(options);
  removeUndefinedProperties(options.headers);
  const mergedOptions = mergeDeep(defaults || {}, options); // mediaType.previews arrays are merged, instead of overwritten

  if (defaults && defaults.mediaType.previews.length) {
    mergedOptions.mediaType.previews = defaults.mediaType.previews.filter(preview => !mergedOptions.mediaType.previews.includes(preview)).concat(mergedOptions.mediaType.previews);
  }

  mergedOptions.mediaType.previews = mergedOptions.mediaType.previews.map(preview => preview.replace(/-preview/, ""));
  return mergedOptions;
}

function addQueryParameters(url, parameters) {
  const separator = /\?/.test(url) ? "&" : "?";
  const names = Object.keys(parameters);

  if (names.length === 0) {
    return url;
  }

  return url + separator + names.map(name => {
    if (name === "q") {
      return "q=" + parameters.q.split("+").map(encodeURIComponent).join("+");
    }

    return `${name}=${encodeURIComponent(parameters[name])}`;
  }).join("&");
}

const urlVariableRegex = /\{[^}]+\}/g;

function removeNonChars(variableName) {
  return variableName.replace(/^\W+|\W+$/g, "").split(/,/);
}

function extractUrlVariableNames(url) {
  const matches = url.match(urlVariableRegex);

  if (!matches) {
    return [];
  }

  return matches.map(removeNonChars).reduce((a, b) => a.concat(b), []);
}

function omit(object, keysToOmit) {
  return Object.keys(object).filter(option => !keysToOmit.includes(option)).reduce((obj, key) => {
    obj[key] = object[key];
    return obj;
  }, {});
}

// Based on https://github.com/bramstein/url-template, licensed under BSD
// TODO: create separate package.
//
// Copyright (c) 2012-2014, Bram Stein
// All rights reserved.
// Redistribution and use in source and binary forms, with or without
// modification, are permitted provided that the following conditions
// are met:
//  1. Redistributions of source code must retain the above copyright
//     notice, this list of conditions and the following disclaimer.
//  2. Redistributions in binary form must reproduce the above copyright
//     notice, this list of conditions and the following disclaimer in the
//     documentation and/or other materials provided with the distribution.
//  3. The name of the author may not be used to endorse or promote products
//     derived from this software without specific prior written permission.
// THIS SOFTWARE IS PROVIDED BY THE AUTHOR "AS IS" AND ANY EXPRESS OR IMPLIED
// WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
// MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO
// EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
// INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
// BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
// DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
// OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
// NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
// EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

/* istanbul ignore file */
function encodeReserved(str) {
  return str.split(/(%[0-9A-Fa-f]{2})/g).map(function (part) {
    if (!/%[0-9A-Fa-f]/.test(part)) {
      part = encodeURI(part).replace(/%5B/g, "[").replace(/%5D/g, "]");
    }

    return part;
  }).join("");
}

function encodeUnreserved(str) {
  return encodeURIComponent(str).replace(/[!'()*]/g, function (c) {
    return "%" + c.charCodeAt(0).toString(16).toUpperCase();
  });
}

function encodeValue(operator, value, key) {
  value = operator === "+" || operator === "#" ? encodeReserved(value) : encodeUnreserved(value);

  if (key) {
    return encodeUnreserved(key) + "=" + value;
  } else {
    return value;
  }
}

function isDefined(value) {
  return value !== undefined && value !== null;
}

function isKeyOperator(operator) {
  return operator === ";" || operator === "&" || operator === "?";
}

function getValues(context, operator, key, modifier) {
  var value = context[key],
      result = [];

  if (isDefined(value) && value !== "") {
    if (typeof value === "string" || typeof value === "number" || typeof value === "boolean") {
      value = value.toString();

      if (modifier && modifier !== "*") {
        value = value.substring(0, parseInt(modifier, 10));
      }

      result.push(encodeValue(operator, value, isKeyOperator(operator) ? key : ""));
    } else {
      if (modifier === "*") {
        if (Array.isArray(value)) {
          value.filter(isDefined).forEach(function (value) {
            result.push(encodeValue(operator, value, isKeyOperator(operator) ? key : ""));
          });
        } else {
          Object.keys(value).forEach(function (k) {
            if (isDefined(value[k])) {
              result.push(encodeValue(operator, value[k], k));
            }
          });
        }
      } else {
        const tmp = [];

        if (Array.isArray(value)) {
          value.filter(isDefined).forEach(function (value) {
            tmp.push(encodeValue(operator, value));
          });
        } else {
          Object.keys(value).forEach(function (k) {
            if (isDefined(value[k])) {
              tmp.push(encodeUnreserved(k));
              tmp.push(encodeValue(operator, value[k].toString()));
            }
          });
        }

        if (isKeyOperator(operator)) {
          result.push(encodeUnreserved(key) + "=" + tmp.join(","));
        } else if (tmp.length !== 0) {
          result.push(tmp.join(","));
        }
      }
    }
  } else {
    if (operator === ";") {
      if (isDefined(value)) {
        result.push(encodeUnreserved(key));
      }
    } else if (value === "" && (operator === "&" || operator === "?")) {
      result.push(encodeUnreserved(key) + "=");
    } else if (value === "") {
      result.push("");
    }
  }

  return result;
}

function parseUrl(template) {
  return {
    expand: expand.bind(null, template)
  };
}

function expand(template, context) {
  var operators = ["+", "#", ".", "/", ";", "?", "&"];
  return template.replace(/\{([^\{\}]+)\}|([^\{\}]+)/g, function (_, expression, literal) {
    if (expression) {
      let operator = "";
      const values = [];

      if (operators.indexOf(expression.charAt(0)) !== -1) {
        operator = expression.charAt(0);
        expression = expression.substr(1);
      }

      expression.split(/,/g).forEach(function (variable) {
        var tmp = /([^:\*]*)(?::(\d+)|(\*))?/.exec(variable);
        values.push(getValues(context, operator, tmp[1], tmp[2] || tmp[3]));
      });

      if (operator && operator !== "+") {
        var separator = ",";

        if (operator === "?") {
          separator = "&";
        } else if (operator !== "#") {
          separator = operator;
        }

        return (values.length !== 0 ? operator : "") + values.join(separator);
      } else {
        return values.join(",");
      }
    } else {
      return encodeReserved(literal);
    }
  });
}

function parse(options) {
  // https://fetch.spec.whatwg.org/#methods
  let method = options.method.toUpperCase(); // replace :varname with {varname} to make it RFC 6570 compatible

  let url = (options.url || "/").replace(/:([a-z]\w+)/g, "{$1}");
  let headers = Object.assign({}, options.headers);
  let body;
  let parameters = omit(options, ["method", "baseUrl", "url", "headers", "request", "mediaType"]); // extract variable names from URL to calculate remaining variables later

  const urlVariableNames = extractUrlVariableNames(url);
  url = parseUrl(url).expand(parameters);

  if (!/^http/.test(url)) {
    url = options.baseUrl + url;
  }

  const omittedParameters = Object.keys(options).filter(option => urlVariableNames.includes(option)).concat("baseUrl");
  const remainingParameters = omit(parameters, omittedParameters);
  const isBinaryRequest = /application\/octet-stream/i.test(headers.accept);

  if (!isBinaryRequest) {
    if (options.mediaType.format) {
      // e.g. application/vnd.github.v3+json => application/vnd.github.v3.raw
      headers.accept = headers.accept.split(/,/).map(preview => preview.replace(/application\/vnd(\.\w+)(\.v3)?(\.\w+)?(\+json)?$/, `application/vnd$1$2.${options.mediaType.format}`)).join(",");
    }

    if (options.mediaType.previews.length) {
      const previewsFromAcceptHeader = headers.accept.match(/[\w-]+(?=-preview)/g) || [];
      headers.accept = previewsFromAcceptHeader.concat(options.mediaType.previews).map(preview => {
        const format = options.mediaType.format ? `.${options.mediaType.format}` : "+json";
        return `application/vnd.github.${preview}-preview${format}`;
      }).join(",");
    }
  } // for GET/HEAD requests, set URL query parameters from remaining parameters
  // for PATCH/POST/PUT/DELETE requests, set request body from remaining parameters


  if (["GET", "HEAD"].includes(method)) {
    url = addQueryParameters(url, remainingParameters);
  } else {
    if ("data" in remainingParameters) {
      body = remainingParameters.data;
    } else {
      if (Object.keys(remainingParameters).length) {
        body = remainingParameters;
      } else {
        headers["content-length"] = 0;
      }
    }
  } // default content-type for JSON if body is set


  if (!headers["content-type"] && typeof body !== "undefined") {
    headers["content-type"] = "application/json; charset=utf-8";
  } // GitHub expects 'content-length: 0' header for PUT/PATCH requests without body.
  // fetch does not allow to set `content-length` header, but we can set body to an empty string


  if (["PATCH", "PUT"].includes(method) && typeof body === "undefined") {
    body = "";
  } // Only return body/request keys if present


  return Object.assign({
    method,
    url,
    headers
  }, typeof body !== "undefined" ? {
    body
  } : null, options.request ? {
    request: options.request
  } : null);
}

function endpointWithDefaults(defaults, route, options) {
  return parse(merge(defaults, route, options));
}

function withDefaults(oldDefaults, newDefaults) {
  const DEFAULTS = merge(oldDefaults, newDefaults);
  const endpoint = endpointWithDefaults.bind(null, DEFAULTS);
  return Object.assign(endpoint, {
    DEFAULTS,
    defaults: withDefaults.bind(null, DEFAULTS),
    merge: merge.bind(null, DEFAULTS),
    parse
  });
}

const VERSION = "6.0.9";

const userAgent = `octokit-endpoint.js/${VERSION} ${universalUserAgent.getUserAgent()}`; // DEFAULTS has all properties set that EndpointOptions has, except url.
// So we use RequestParameters and add method as additional required property.

const DEFAULTS = {
  method: "GET",
  baseUrl: "https://api.github.com",
  headers: {
    accept: "application/vnd.github.v3+json",
    "user-agent": userAgent
  },
  mediaType: {
    format: "",
    previews: []
  }
};

const endpoint = withDefaults(null, DEFAULTS);

exports.endpoint = endpoint;
//# sourceMappingURL=index.js.map


/***/ }),

/***/ 558:
/***/ ((__unused_webpack_module, exports) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({ value: true }));

/*!
 * is-plain-object <https://github.com/jonschlinkert/is-plain-object>
 *
 * Copyright (c) 2014-2017, Jon Schlinkert.
 * Released under the MIT License.
 */

function isObject(o) {
  return Object.prototype.toString.call(o) === '[object Object]';
}

function isPlainObject(o) {
  var ctor,prot;

  if (isObject(o) === false) return false;

  // If has modified constructor
  ctor = o.constructor;
  if (ctor === undefined) return true;

  // If has modified prototype
  prot = ctor.prototype;
  if (isObject(prot) === false) return false;

  // If constructor does not have an Object-specific method
  if (prot.hasOwnProperty('isPrototypeOf') === false) {
    return false;
  }

  // Most likely a plain Object
  return true;
}

exports.isPlainObject = isPlainObject;


/***/ }),

/***/ 8467:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({ value: true }));

var request = __webpack_require__(6234);
var universalUserAgent = __webpack_require__(5030);

const VERSION = "4.5.7";

class GraphqlError extends Error {
  constructor(request, response) {
    const message = response.data.errors[0].message;
    super(message);
    Object.assign(this, response.data);
    Object.assign(this, {
      headers: response.headers
    });
    this.name = "GraphqlError";
    this.request = request; // Maintains proper stack trace (only available on V8)

    /* istanbul ignore next */

    if (Error.captureStackTrace) {
      Error.captureStackTrace(this, this.constructor);
    }
  }

}

const NON_VARIABLE_OPTIONS = ["method", "baseUrl", "url", "headers", "request", "query", "mediaType"];
const GHES_V3_SUFFIX_REGEX = /\/api\/v3\/?$/;
function graphql(request, query, options) {
  if (typeof query === "string" && options && "query" in options) {
    return Promise.reject(new Error(`[@octokit/graphql] "query" cannot be used as variable name`));
  }

  const parsedOptions = typeof query === "string" ? Object.assign({
    query
  }, options) : query;
  const requestOptions = Object.keys(parsedOptions).reduce((result, key) => {
    if (NON_VARIABLE_OPTIONS.includes(key)) {
      result[key] = parsedOptions[key];
      return result;
    }

    if (!result.variables) {
      result.variables = {};
    }

    result.variables[key] = parsedOptions[key];
    return result;
  }, {}); // workaround for GitHub Enterprise baseUrl set with /api/v3 suffix
  // https://github.com/octokit/auth-app.js/issues/111#issuecomment-657610451

  const baseUrl = parsedOptions.baseUrl || request.endpoint.DEFAULTS.baseUrl;

  if (GHES_V3_SUFFIX_REGEX.test(baseUrl)) {
    requestOptions.url = baseUrl.replace(GHES_V3_SUFFIX_REGEX, "/api/graphql");
  }

  return request(requestOptions).then(response => {
    if (response.data.errors) {
      const headers = {};

      for (const key of Object.keys(response.headers)) {
        headers[key] = response.headers[key];
      }

      throw new GraphqlError(requestOptions, {
        headers,
        data: response.data
      });
    }

    return response.data.data;
  });
}

function withDefaults(request$1, newDefaults) {
  const newRequest = request$1.defaults(newDefaults);

  const newApi = (query, options) => {
    return graphql(newRequest, query, options);
  };

  return Object.assign(newApi, {
    defaults: withDefaults.bind(null, newRequest),
    endpoint: request.request.endpoint
  });
}

const graphql$1 = withDefaults(request.request, {
  headers: {
    "user-agent": `octokit-graphql.js/${VERSION} ${universalUserAgent.getUserAgent()}`
  },
  method: "POST",
  url: "/graphql"
});
function withCustomRequest(customRequest) {
  return withDefaults(customRequest, {
    method: "POST",
    url: "/graphql"
  });
}

exports.graphql = graphql$1;
exports.withCustomRequest = withCustomRequest;
//# sourceMappingURL=index.js.map


/***/ }),

/***/ 4193:
/***/ ((__unused_webpack_module, exports) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({ value: true }));

const VERSION = "2.6.0";

/**
 * Some “list” response that can be paginated have a different response structure
 *
 * They have a `total_count` key in the response (search also has `incomplete_results`,
 * /installation/repositories also has `repository_selection`), as well as a key with
 * the list of the items which name varies from endpoint to endpoint.
 *
 * Octokit normalizes these responses so that paginated results are always returned following
 * the same structure. One challenge is that if the list response has only one page, no Link
 * header is provided, so this header alone is not sufficient to check wether a response is
 * paginated or not.
 *
 * We check if a "total_count" key is present in the response data, but also make sure that
 * a "url" property is not, as the "Get the combined status for a specific ref" endpoint would
 * otherwise match: https://developer.github.com/v3/repos/statuses/#get-the-combined-status-for-a-specific-ref
 */
function normalizePaginatedListResponse(response) {
  const responseNeedsNormalization = "total_count" in response.data && !("url" in response.data);
  if (!responseNeedsNormalization) return response; // keep the additional properties intact as there is currently no other way
  // to retrieve the same information.

  const incompleteResults = response.data.incomplete_results;
  const repositorySelection = response.data.repository_selection;
  const totalCount = response.data.total_count;
  delete response.data.incomplete_results;
  delete response.data.repository_selection;
  delete response.data.total_count;
  const namespaceKey = Object.keys(response.data)[0];
  const data = response.data[namespaceKey];
  response.data = data;

  if (typeof incompleteResults !== "undefined") {
    response.data.incomplete_results = incompleteResults;
  }

  if (typeof repositorySelection !== "undefined") {
    response.data.repository_selection = repositorySelection;
  }

  response.data.total_count = totalCount;
  return response;
}

function iterator(octokit, route, parameters) {
  const options = typeof route === "function" ? route.endpoint(parameters) : octokit.request.endpoint(route, parameters);
  const requestMethod = typeof route === "function" ? route : octokit.request;
  const method = options.method;
  const headers = options.headers;
  let url = options.url;
  return {
    [Symbol.asyncIterator]: () => ({
      async next() {
        if (!url) return {
          done: true
        };
        const response = await requestMethod({
          method,
          url,
          headers
        });
        const normalizedResponse = normalizePaginatedListResponse(response); // `response.headers.link` format:
        // '<https://api.github.com/users/aseemk/followers?page=2>; rel="next", <https://api.github.com/users/aseemk/followers?page=2>; rel="last"'
        // sets `url` to undefined if "next" URL is not present or `link` header is not set

        url = ((normalizedResponse.headers.link || "").match(/<([^>]+)>;\s*rel="next"/) || [])[1];
        return {
          value: normalizedResponse
        };
      }

    })
  };
}

function paginate(octokit, route, parameters, mapFn) {
  if (typeof parameters === "function") {
    mapFn = parameters;
    parameters = undefined;
  }

  return gather(octokit, [], iterator(octokit, route, parameters)[Symbol.asyncIterator](), mapFn);
}

function gather(octokit, results, iterator, mapFn) {
  return iterator.next().then(result => {
    if (result.done) {
      return results;
    }

    let earlyExit = false;

    function done() {
      earlyExit = true;
    }

    results = results.concat(mapFn ? mapFn(result.value, done) : result.value.data);

    if (earlyExit) {
      return results;
    }

    return gather(octokit, results, iterator, mapFn);
  });
}

const composePaginateRest = Object.assign(paginate, {
  iterator
});

/**
 * @param octokit Octokit instance
 * @param options Options passed to Octokit constructor
 */

function paginateRest(octokit) {
  return {
    paginate: Object.assign(paginate.bind(null, octokit), {
      iterator: iterator.bind(null, octokit)
    })
  };
}
paginateRest.VERSION = VERSION;

exports.composePaginateRest = composePaginateRest;
exports.paginateRest = paginateRest;
//# sourceMappingURL=index.js.map


/***/ }),

/***/ 3044:
/***/ ((__unused_webpack_module, exports) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({ value: true }));

const Endpoints = {
  actions: {
    addSelectedRepoToOrgSecret: ["PUT /orgs/{org}/actions/secrets/{secret_name}/repositories/{repository_id}"],
    cancelWorkflowRun: ["POST /repos/{owner}/{repo}/actions/runs/{run_id}/cancel"],
    createOrUpdateOrgSecret: ["PUT /orgs/{org}/actions/secrets/{secret_name}"],
    createOrUpdateRepoSecret: ["PUT /repos/{owner}/{repo}/actions/secrets/{secret_name}"],
    createRegistrationTokenForOrg: ["POST /orgs/{org}/actions/runners/registration-token"],
    createRegistrationTokenForRepo: ["POST /repos/{owner}/{repo}/actions/runners/registration-token"],
    createRemoveTokenForOrg: ["POST /orgs/{org}/actions/runners/remove-token"],
    createRemoveTokenForRepo: ["POST /repos/{owner}/{repo}/actions/runners/remove-token"],
    createWorkflowDispatch: ["POST /repos/{owner}/{repo}/actions/workflows/{workflow_id}/dispatches"],
    deleteArtifact: ["DELETE /repos/{owner}/{repo}/actions/artifacts/{artifact_id}"],
    deleteOrgSecret: ["DELETE /orgs/{org}/actions/secrets/{secret_name}"],
    deleteRepoSecret: ["DELETE /repos/{owner}/{repo}/actions/secrets/{secret_name}"],
    deleteSelfHostedRunnerFromOrg: ["DELETE /orgs/{org}/actions/runners/{runner_id}"],
    deleteSelfHostedRunnerFromRepo: ["DELETE /repos/{owner}/{repo}/actions/runners/{runner_id}"],
    deleteWorkflowRun: ["DELETE /repos/{owner}/{repo}/actions/runs/{run_id}"],
    deleteWorkflowRunLogs: ["DELETE /repos/{owner}/{repo}/actions/runs/{run_id}/logs"],
    downloadArtifact: ["GET /repos/{owner}/{repo}/actions/artifacts/{artifact_id}/{archive_format}"],
    downloadJobLogsForWorkflowRun: ["GET /repos/{owner}/{repo}/actions/jobs/{job_id}/logs"],
    downloadWorkflowRunLogs: ["GET /repos/{owner}/{repo}/actions/runs/{run_id}/logs"],
    getArtifact: ["GET /repos/{owner}/{repo}/actions/artifacts/{artifact_id}"],
    getJobForWorkflowRun: ["GET /repos/{owner}/{repo}/actions/jobs/{job_id}"],
    getOrgPublicKey: ["GET /orgs/{org}/actions/secrets/public-key"],
    getOrgSecret: ["GET /orgs/{org}/actions/secrets/{secret_name}"],
    getRepoPublicKey: ["GET /repos/{owner}/{repo}/actions/secrets/public-key"],
    getRepoSecret: ["GET /repos/{owner}/{repo}/actions/secrets/{secret_name}"],
    getSelfHostedRunnerForOrg: ["GET /orgs/{org}/actions/runners/{runner_id}"],
    getSelfHostedRunnerForRepo: ["GET /repos/{owner}/{repo}/actions/runners/{runner_id}"],
    getWorkflow: ["GET /repos/{owner}/{repo}/actions/workflows/{workflow_id}"],
    getWorkflowRun: ["GET /repos/{owner}/{repo}/actions/runs/{run_id}"],
    getWorkflowRunUsage: ["GET /repos/{owner}/{repo}/actions/runs/{run_id}/timing"],
    getWorkflowUsage: ["GET /repos/{owner}/{repo}/actions/workflows/{workflow_id}/timing"],
    listArtifactsForRepo: ["GET /repos/{owner}/{repo}/actions/artifacts"],
    listJobsForWorkflowRun: ["GET /repos/{owner}/{repo}/actions/runs/{run_id}/jobs"],
    listOrgSecrets: ["GET /orgs/{org}/actions/secrets"],
    listRepoSecrets: ["GET /repos/{owner}/{repo}/actions/secrets"],
    listRepoWorkflows: ["GET /repos/{owner}/{repo}/actions/workflows"],
    listRunnerApplicationsForOrg: ["GET /orgs/{org}/actions/runners/downloads"],
    listRunnerApplicationsForRepo: ["GET /repos/{owner}/{repo}/actions/runners/downloads"],
    listSelectedReposForOrgSecret: ["GET /orgs/{org}/actions/secrets/{secret_name}/repositories"],
    listSelfHostedRunnersForOrg: ["GET /orgs/{org}/actions/runners"],
    listSelfHostedRunnersForRepo: ["GET /repos/{owner}/{repo}/actions/runners"],
    listWorkflowRunArtifacts: ["GET /repos/{owner}/{repo}/actions/runs/{run_id}/artifacts"],
    listWorkflowRuns: ["GET /repos/{owner}/{repo}/actions/workflows/{workflow_id}/runs"],
    listWorkflowRunsForRepo: ["GET /repos/{owner}/{repo}/actions/runs"],
    reRunWorkflow: ["POST /repos/{owner}/{repo}/actions/runs/{run_id}/rerun"],
    removeSelectedRepoFromOrgSecret: ["DELETE /orgs/{org}/actions/secrets/{secret_name}/repositories/{repository_id}"],
    setSelectedReposForOrgSecret: ["PUT /orgs/{org}/actions/secrets/{secret_name}/repositories"]
  },
  activity: {
    checkRepoIsStarredByAuthenticatedUser: ["GET /user/starred/{owner}/{repo}"],
    deleteRepoSubscription: ["DELETE /repos/{owner}/{repo}/subscription"],
    deleteThreadSubscription: ["DELETE /notifications/threads/{thread_id}/subscription"],
    getFeeds: ["GET /feeds"],
    getRepoSubscription: ["GET /repos/{owner}/{repo}/subscription"],
    getThread: ["GET /notifications/threads/{thread_id}"],
    getThreadSubscriptionForAuthenticatedUser: ["GET /notifications/threads/{thread_id}/subscription"],
    listEventsForAuthenticatedUser: ["GET /users/{username}/events"],
    listNotificationsForAuthenticatedUser: ["GET /notifications"],
    listOrgEventsForAuthenticatedUser: ["GET /users/{username}/events/orgs/{org}"],
    listPublicEvents: ["GET /events"],
    listPublicEventsForRepoNetwork: ["GET /networks/{owner}/{repo}/events"],
    listPublicEventsForUser: ["GET /users/{username}/events/public"],
    listPublicOrgEvents: ["GET /orgs/{org}/events"],
    listReceivedEventsForUser: ["GET /users/{username}/received_events"],
    listReceivedPublicEventsForUser: ["GET /users/{username}/received_events/public"],
    listRepoEvents: ["GET /repos/{owner}/{repo}/events"],
    listRepoNotificationsForAuthenticatedUser: ["GET /repos/{owner}/{repo}/notifications"],
    listReposStarredByAuthenticatedUser: ["GET /user/starred"],
    listReposStarredByUser: ["GET /users/{username}/starred"],
    listReposWatchedByUser: ["GET /users/{username}/subscriptions"],
    listStargazersForRepo: ["GET /repos/{owner}/{repo}/stargazers"],
    listWatchedReposForAuthenticatedUser: ["GET /user/subscriptions"],
    listWatchersForRepo: ["GET /repos/{owner}/{repo}/subscribers"],
    markNotificationsAsRead: ["PUT /notifications"],
    markRepoNotificationsAsRead: ["PUT /repos/{owner}/{repo}/notifications"],
    markThreadAsRead: ["PATCH /notifications/threads/{thread_id}"],
    setRepoSubscription: ["PUT /repos/{owner}/{repo}/subscription"],
    setThreadSubscription: ["PUT /notifications/threads/{thread_id}/subscription"],
    starRepoForAuthenticatedUser: ["PUT /user/starred/{owner}/{repo}"],
    unstarRepoForAuthenticatedUser: ["DELETE /user/starred/{owner}/{repo}"]
  },
  apps: {
    addRepoToInstallation: ["PUT /user/installations/{installation_id}/repositories/{repository_id}"],
    checkToken: ["POST /applications/{client_id}/token"],
    createContentAttachment: ["POST /content_references/{content_reference_id}/attachments", {
      mediaType: {
        previews: ["corsair"]
      }
    }],
    createFromManifest: ["POST /app-manifests/{code}/conversions"],
    createInstallationAccessToken: ["POST /app/installations/{installation_id}/access_tokens"],
    deleteAuthorization: ["DELETE /applications/{client_id}/grant"],
    deleteInstallation: ["DELETE /app/installations/{installation_id}"],
    deleteToken: ["DELETE /applications/{client_id}/token"],
    getAuthenticated: ["GET /app"],
    getBySlug: ["GET /apps/{app_slug}"],
    getInstallation: ["GET /app/installations/{installation_id}"],
    getOrgInstallation: ["GET /orgs/{org}/installation"],
    getRepoInstallation: ["GET /repos/{owner}/{repo}/installation"],
    getSubscriptionPlanForAccount: ["GET /marketplace_listing/accounts/{account_id}"],
    getSubscriptionPlanForAccountStubbed: ["GET /marketplace_listing/stubbed/accounts/{account_id}"],
    getUserInstallation: ["GET /users/{username}/installation"],
    listAccountsForPlan: ["GET /marketplace_listing/plans/{plan_id}/accounts"],
    listAccountsForPlanStubbed: ["GET /marketplace_listing/stubbed/plans/{plan_id}/accounts"],
    listInstallationReposForAuthenticatedUser: ["GET /user/installations/{installation_id}/repositories"],
    listInstallations: ["GET /app/installations"],
    listInstallationsForAuthenticatedUser: ["GET /user/installations"],
    listPlans: ["GET /marketplace_listing/plans"],
    listPlansStubbed: ["GET /marketplace_listing/stubbed/plans"],
    listReposAccessibleToInstallation: ["GET /installation/repositories"],
    listSubscriptionsForAuthenticatedUser: ["GET /user/marketplace_purchases"],
    listSubscriptionsForAuthenticatedUserStubbed: ["GET /user/marketplace_purchases/stubbed"],
    removeRepoFromInstallation: ["DELETE /user/installations/{installation_id}/repositories/{repository_id}"],
    resetToken: ["PATCH /applications/{client_id}/token"],
    revokeInstallationAccessToken: ["DELETE /installation/token"],
    suspendInstallation: ["PUT /app/installations/{installation_id}/suspended"],
    unsuspendInstallation: ["DELETE /app/installations/{installation_id}/suspended"]
  },
  billing: {
    getGithubActionsBillingOrg: ["GET /orgs/{org}/settings/billing/actions"],
    getGithubActionsBillingUser: ["GET /users/{username}/settings/billing/actions"],
    getGithubPackagesBillingOrg: ["GET /orgs/{org}/settings/billing/packages"],
    getGithubPackagesBillingUser: ["GET /users/{username}/settings/billing/packages"],
    getSharedStorageBillingOrg: ["GET /orgs/{org}/settings/billing/shared-storage"],
    getSharedStorageBillingUser: ["GET /users/{username}/settings/billing/shared-storage"]
  },
  checks: {
    create: ["POST /repos/{owner}/{repo}/check-runs", {
      mediaType: {
        previews: ["antiope"]
      }
    }],
    createSuite: ["POST /repos/{owner}/{repo}/check-suites", {
      mediaType: {
        previews: ["antiope"]
      }
    }],
    get: ["GET /repos/{owner}/{repo}/check-runs/{check_run_id}", {
      mediaType: {
        previews: ["antiope"]
      }
    }],
    getSuite: ["GET /repos/{owner}/{repo}/check-suites/{check_suite_id}", {
      mediaType: {
        previews: ["antiope"]
      }
    }],
    listAnnotations: ["GET /repos/{owner}/{repo}/check-runs/{check_run_id}/annotations", {
      mediaType: {
        previews: ["antiope"]
      }
    }],
    listForRef: ["GET /repos/{owner}/{repo}/commits/{ref}/check-runs", {
      mediaType: {
        previews: ["antiope"]
      }
    }],
    listForSuite: ["GET /repos/{owner}/{repo}/check-suites/{check_suite_id}/check-runs", {
      mediaType: {
        previews: ["antiope"]
      }
    }],
    listSuitesForRef: ["GET /repos/{owner}/{repo}/commits/{ref}/check-suites", {
      mediaType: {
        previews: ["antiope"]
      }
    }],
    rerequestSuite: ["POST /repos/{owner}/{repo}/check-suites/{check_suite_id}/rerequest", {
      mediaType: {
        previews: ["antiope"]
      }
    }],
    setSuitesPreferences: ["PATCH /repos/{owner}/{repo}/check-suites/preferences", {
      mediaType: {
        previews: ["antiope"]
      }
    }],
    update: ["PATCH /repos/{owner}/{repo}/check-runs/{check_run_id}", {
      mediaType: {
        previews: ["antiope"]
      }
    }]
  },
  codeScanning: {
    getAlert: ["GET /repos/{owner}/{repo}/code-scanning/alerts/{alert_number}", {}, {
      renamedParameters: {
        alert_id: "alert_number"
      }
    }],
    listAlertsForRepo: ["GET /repos/{owner}/{repo}/code-scanning/alerts"],
    listRecentAnalyses: ["GET /repos/{owner}/{repo}/code-scanning/analyses"],
    updateAlert: ["PATCH /repos/{owner}/{repo}/code-scanning/alerts/{alert_number}"],
    uploadSarif: ["POST /repos/{owner}/{repo}/code-scanning/sarifs"]
  },
  codesOfConduct: {
    getAllCodesOfConduct: ["GET /codes_of_conduct", {
      mediaType: {
        previews: ["scarlet-witch"]
      }
    }],
    getConductCode: ["GET /codes_of_conduct/{key}", {
      mediaType: {
        previews: ["scarlet-witch"]
      }
    }],
    getForRepo: ["GET /repos/{owner}/{repo}/community/code_of_conduct", {
      mediaType: {
        previews: ["scarlet-witch"]
      }
    }]
  },
  emojis: {
    get: ["GET /emojis"]
  },
  gists: {
    checkIsStarred: ["GET /gists/{gist_id}/star"],
    create: ["POST /gists"],
    createComment: ["POST /gists/{gist_id}/comments"],
    delete: ["DELETE /gists/{gist_id}"],
    deleteComment: ["DELETE /gists/{gist_id}/comments/{comment_id}"],
    fork: ["POST /gists/{gist_id}/forks"],
    get: ["GET /gists/{gist_id}"],
    getComment: ["GET /gists/{gist_id}/comments/{comment_id}"],
    getRevision: ["GET /gists/{gist_id}/{sha}"],
    list: ["GET /gists"],
    listComments: ["GET /gists/{gist_id}/comments"],
    listCommits: ["GET /gists/{gist_id}/commits"],
    listForUser: ["GET /users/{username}/gists"],
    listForks: ["GET /gists/{gist_id}/forks"],
    listPublic: ["GET /gists/public"],
    listStarred: ["GET /gists/starred"],
    star: ["PUT /gists/{gist_id}/star"],
    unstar: ["DELETE /gists/{gist_id}/star"],
    update: ["PATCH /gists/{gist_id}"],
    updateComment: ["PATCH /gists/{gist_id}/comments/{comment_id}"]
  },
  git: {
    createBlob: ["POST /repos/{owner}/{repo}/git/blobs"],
    createCommit: ["POST /repos/{owner}/{repo}/git/commits"],
    createRef: ["POST /repos/{owner}/{repo}/git/refs"],
    createTag: ["POST /repos/{owner}/{repo}/git/tags"],
    createTree: ["POST /repos/{owner}/{repo}/git/trees"],
    deleteRef: ["DELETE /repos/{owner}/{repo}/git/refs/{ref}"],
    getBlob: ["GET /repos/{owner}/{repo}/git/blobs/{file_sha}"],
    getCommit: ["GET /repos/{owner}/{repo}/git/commits/{commit_sha}"],
    getRef: ["GET /repos/{owner}/{repo}/git/ref/{ref}"],
    getTag: ["GET /repos/{owner}/{repo}/git/tags/{tag_sha}"],
    getTree: ["GET /repos/{owner}/{repo}/git/trees/{tree_sha}"],
    listMatchingRefs: ["GET /repos/{owner}/{repo}/git/matching-refs/{ref}"],
    updateRef: ["PATCH /repos/{owner}/{repo}/git/refs/{ref}"]
  },
  gitignore: {
    getAllTemplates: ["GET /gitignore/templates"],
    getTemplate: ["GET /gitignore/templates/{name}"]
  },
  interactions: {
    getRestrictionsForOrg: ["GET /orgs/{org}/interaction-limits", {
      mediaType: {
        previews: ["sombra"]
      }
    }],
    getRestrictionsForRepo: ["GET /repos/{owner}/{repo}/interaction-limits", {
      mediaType: {
        previews: ["sombra"]
      }
    }],
    removeRestrictionsForOrg: ["DELETE /orgs/{org}/interaction-limits", {
      mediaType: {
        previews: ["sombra"]
      }
    }],
    removeRestrictionsForRepo: ["DELETE /repos/{owner}/{repo}/interaction-limits", {
      mediaType: {
        previews: ["sombra"]
      }
    }],
    setRestrictionsForOrg: ["PUT /orgs/{org}/interaction-limits", {
      mediaType: {
        previews: ["sombra"]
      }
    }],
    setRestrictionsForRepo: ["PUT /repos/{owner}/{repo}/interaction-limits", {
      mediaType: {
        previews: ["sombra"]
      }
    }]
  },
  issues: {
    addAssignees: ["POST /repos/{owner}/{repo}/issues/{issue_number}/assignees"],
    addLabels: ["POST /repos/{owner}/{repo}/issues/{issue_number}/labels"],
    checkUserCanBeAssigned: ["GET /repos/{owner}/{repo}/assignees/{assignee}"],
    create: ["POST /repos/{owner}/{repo}/issues"],
    createComment: ["POST /repos/{owner}/{repo}/issues/{issue_number}/comments"],
    createLabel: ["POST /repos/{owner}/{repo}/labels"],
    createMilestone: ["POST /repos/{owner}/{repo}/milestones"],
    deleteComment: ["DELETE /repos/{owner}/{repo}/issues/comments/{comment_id}"],
    deleteLabel: ["DELETE /repos/{owner}/{repo}/labels/{name}"],
    deleteMilestone: ["DELETE /repos/{owner}/{repo}/milestones/{milestone_number}"],
    get: ["GET /repos/{owner}/{repo}/issues/{issue_number}"],
    getComment: ["GET /repos/{owner}/{repo}/issues/comments/{comment_id}"],
    getEvent: ["GET /repos/{owner}/{repo}/issues/events/{event_id}"],
    getLabel: ["GET /repos/{owner}/{repo}/labels/{name}"],
    getMilestone: ["GET /repos/{owner}/{repo}/milestones/{milestone_number}"],
    list: ["GET /issues"],
    listAssignees: ["GET /repos/{owner}/{repo}/assignees"],
    listComments: ["GET /repos/{owner}/{repo}/issues/{issue_number}/comments"],
    listCommentsForRepo: ["GET /repos/{owner}/{repo}/issues/comments"],
    listEvents: ["GET /repos/{owner}/{repo}/issues/{issue_number}/events"],
    listEventsForRepo: ["GET /repos/{owner}/{repo}/issues/events"],
    listEventsForTimeline: ["GET /repos/{owner}/{repo}/issues/{issue_number}/timeline", {
      mediaType: {
        previews: ["mockingbird"]
      }
    }],
    listForAuthenticatedUser: ["GET /user/issues"],
    listForOrg: ["GET /orgs/{org}/issues"],
    listForRepo: ["GET /repos/{owner}/{repo}/issues"],
    listLabelsForMilestone: ["GET /repos/{owner}/{repo}/milestones/{milestone_number}/labels"],
    listLabelsForRepo: ["GET /repos/{owner}/{repo}/labels"],
    listLabelsOnIssue: ["GET /repos/{owner}/{repo}/issues/{issue_number}/labels"],
    listMilestones: ["GET /repos/{owner}/{repo}/milestones"],
    lock: ["PUT /repos/{owner}/{repo}/issues/{issue_number}/lock"],
    removeAllLabels: ["DELETE /repos/{owner}/{repo}/issues/{issue_number}/labels"],
    removeAssignees: ["DELETE /repos/{owner}/{repo}/issues/{issue_number}/assignees"],
    removeLabel: ["DELETE /repos/{owner}/{repo}/issues/{issue_number}/labels/{name}"],
    setLabels: ["PUT /repos/{owner}/{repo}/issues/{issue_number}/labels"],
    unlock: ["DELETE /repos/{owner}/{repo}/issues/{issue_number}/lock"],
    update: ["PATCH /repos/{owner}/{repo}/issues/{issue_number}"],
    updateComment: ["PATCH /repos/{owner}/{repo}/issues/comments/{comment_id}"],
    updateLabel: ["PATCH /repos/{owner}/{repo}/labels/{name}"],
    updateMilestone: ["PATCH /repos/{owner}/{repo}/milestones/{milestone_number}"]
  },
  licenses: {
    get: ["GET /licenses/{license}"],
    getAllCommonlyUsed: ["GET /licenses"],
    getForRepo: ["GET /repos/{owner}/{repo}/license"]
  },
  markdown: {
    render: ["POST /markdown"],
    renderRaw: ["POST /markdown/raw", {
      headers: {
        "content-type": "text/plain; charset=utf-8"
      }
    }]
  },
  meta: {
    get: ["GET /meta"]
  },
  migrations: {
    cancelImport: ["DELETE /repos/{owner}/{repo}/import"],
    deleteArchiveForAuthenticatedUser: ["DELETE /user/migrations/{migration_id}/archive", {
      mediaType: {
        previews: ["wyandotte"]
      }
    }],
    deleteArchiveForOrg: ["DELETE /orgs/{org}/migrations/{migration_id}/archive", {
      mediaType: {
        previews: ["wyandotte"]
      }
    }],
    downloadArchiveForOrg: ["GET /orgs/{org}/migrations/{migration_id}/archive", {
      mediaType: {
        previews: ["wyandotte"]
      }
    }],
    getArchiveForAuthenticatedUser: ["GET /user/migrations/{migration_id}/archive", {
      mediaType: {
        previews: ["wyandotte"]
      }
    }],
    getCommitAuthors: ["GET /repos/{owner}/{repo}/import/authors"],
    getImportStatus: ["GET /repos/{owner}/{repo}/import"],
    getLargeFiles: ["GET /repos/{owner}/{repo}/import/large_files"],
    getStatusForAuthenticatedUser: ["GET /user/migrations/{migration_id}", {
      mediaType: {
        previews: ["wyandotte"]
      }
    }],
    getStatusForOrg: ["GET /orgs/{org}/migrations/{migration_id}", {
      mediaType: {
        previews: ["wyandotte"]
      }
    }],
    listForAuthenticatedUser: ["GET /user/migrations", {
      mediaType: {
        previews: ["wyandotte"]
      }
    }],
    listForOrg: ["GET /orgs/{org}/migrations", {
      mediaType: {
        previews: ["wyandotte"]
      }
    }],
    listReposForOrg: ["GET /orgs/{org}/migrations/{migration_id}/repositories", {
      mediaType: {
        previews: ["wyandotte"]
      }
    }],
    listReposForUser: ["GET /user/migrations/{migration_id}/repositories", {
      mediaType: {
        previews: ["wyandotte"]
      }
    }],
    mapCommitAuthor: ["PATCH /repos/{owner}/{repo}/import/authors/{author_id}"],
    setLfsPreference: ["PATCH /repos/{owner}/{repo}/import/lfs"],
    startForAuthenticatedUser: ["POST /user/migrations"],
    startForOrg: ["POST /orgs/{org}/migrations"],
    startImport: ["PUT /repos/{owner}/{repo}/import"],
    unlockRepoForAuthenticatedUser: ["DELETE /user/migrations/{migration_id}/repos/{repo_name}/lock", {
      mediaType: {
        previews: ["wyandotte"]
      }
    }],
    unlockRepoForOrg: ["DELETE /orgs/{org}/migrations/{migration_id}/repos/{repo_name}/lock", {
      mediaType: {
        previews: ["wyandotte"]
      }
    }],
    updateImport: ["PATCH /repos/{owner}/{repo}/import"]
  },
  orgs: {
    blockUser: ["PUT /orgs/{org}/blocks/{username}"],
    checkBlockedUser: ["GET /orgs/{org}/blocks/{username}"],
    checkMembershipForUser: ["GET /orgs/{org}/members/{username}"],
    checkPublicMembershipForUser: ["GET /orgs/{org}/public_members/{username}"],
    convertMemberToOutsideCollaborator: ["PUT /orgs/{org}/outside_collaborators/{username}"],
    createInvitation: ["POST /orgs/{org}/invitations"],
    createWebhook: ["POST /orgs/{org}/hooks"],
    deleteWebhook: ["DELETE /orgs/{org}/hooks/{hook_id}"],
    get: ["GET /orgs/{org}"],
    getMembershipForAuthenticatedUser: ["GET /user/memberships/orgs/{org}"],
    getMembershipForUser: ["GET /orgs/{org}/memberships/{username}"],
    getWebhook: ["GET /orgs/{org}/hooks/{hook_id}"],
    list: ["GET /organizations"],
    listAppInstallations: ["GET /orgs/{org}/installations"],
    listBlockedUsers: ["GET /orgs/{org}/blocks"],
    listForAuthenticatedUser: ["GET /user/orgs"],
    listForUser: ["GET /users/{username}/orgs"],
    listInvitationTeams: ["GET /orgs/{org}/invitations/{invitation_id}/teams"],
    listMembers: ["GET /orgs/{org}/members"],
    listMembershipsForAuthenticatedUser: ["GET /user/memberships/orgs"],
    listOutsideCollaborators: ["GET /orgs/{org}/outside_collaborators"],
    listPendingInvitations: ["GET /orgs/{org}/invitations"],
    listPublicMembers: ["GET /orgs/{org}/public_members"],
    listWebhooks: ["GET /orgs/{org}/hooks"],
    pingWebhook: ["POST /orgs/{org}/hooks/{hook_id}/pings"],
    removeMember: ["DELETE /orgs/{org}/members/{username}"],
    removeMembershipForUser: ["DELETE /orgs/{org}/memberships/{username}"],
    removeOutsideCollaborator: ["DELETE /orgs/{org}/outside_collaborators/{username}"],
    removePublicMembershipForAuthenticatedUser: ["DELETE /orgs/{org}/public_members/{username}"],
    setMembershipForUser: ["PUT /orgs/{org}/memberships/{username}"],
    setPublicMembershipForAuthenticatedUser: ["PUT /orgs/{org}/public_members/{username}"],
    unblockUser: ["DELETE /orgs/{org}/blocks/{username}"],
    update: ["PATCH /orgs/{org}"],
    updateMembershipForAuthenticatedUser: ["PATCH /user/memberships/orgs/{org}"],
    updateWebhook: ["PATCH /orgs/{org}/hooks/{hook_id}"]
  },
  projects: {
    addCollaborator: ["PUT /projects/{project_id}/collaborators/{username}", {
      mediaType: {
        previews: ["inertia"]
      }
    }],
    createCard: ["POST /projects/columns/{column_id}/cards", {
      mediaType: {
        previews: ["inertia"]
      }
    }],
    createColumn: ["POST /projects/{project_id}/columns", {
      mediaType: {
        previews: ["inertia"]
      }
    }],
    createForAuthenticatedUser: ["POST /user/projects", {
      mediaType: {
        previews: ["inertia"]
      }
    }],
    createForOrg: ["POST /orgs/{org}/projects", {
      mediaType: {
        previews: ["inertia"]
      }
    }],
    createForRepo: ["POST /repos/{owner}/{repo}/projects", {
      mediaType: {
        previews: ["inertia"]
      }
    }],
    delete: ["DELETE /projects/{project_id}", {
      mediaType: {
        previews: ["inertia"]
      }
    }],
    deleteCard: ["DELETE /projects/columns/cards/{card_id}", {
      mediaType: {
        previews: ["inertia"]
      }
    }],
    deleteColumn: ["DELETE /projects/columns/{column_id}", {
      mediaType: {
        previews: ["inertia"]
      }
    }],
    get: ["GET /projects/{project_id}", {
      mediaType: {
        previews: ["inertia"]
      }
    }],
    getCard: ["GET /projects/columns/cards/{card_id}", {
      mediaType: {
        previews: ["inertia"]
      }
    }],
    getColumn: ["GET /projects/columns/{column_id}", {
      mediaType: {
        previews: ["inertia"]
      }
    }],
    getPermissionForUser: ["GET /projects/{project_id}/collaborators/{username}/permission", {
      mediaType: {
        previews: ["inertia"]
      }
    }],
    listCards: ["GET /projects/columns/{column_id}/cards", {
      mediaType: {
        previews: ["inertia"]
      }
    }],
    listCollaborators: ["GET /projects/{project_id}/collaborators", {
      mediaType: {
        previews: ["inertia"]
      }
    }],
    listColumns: ["GET /projects/{project_id}/columns", {
      mediaType: {
        previews: ["inertia"]
      }
    }],
    listForOrg: ["GET /orgs/{org}/projects", {
      mediaType: {
        previews: ["inertia"]
      }
    }],
    listForRepo: ["GET /repos/{owner}/{repo}/projects", {
      mediaType: {
        previews: ["inertia"]
      }
    }],
    listForUser: ["GET /users/{username}/projects", {
      mediaType: {
        previews: ["inertia"]
      }
    }],
    moveCard: ["POST /projects/columns/cards/{card_id}/moves", {
      mediaType: {
        previews: ["inertia"]
      }
    }],
    moveColumn: ["POST /projects/columns/{column_id}/moves", {
      mediaType: {
        previews: ["inertia"]
      }
    }],
    removeCollaborator: ["DELETE /projects/{project_id}/collaborators/{username}", {
      mediaType: {
        previews: ["inertia"]
      }
    }],
    update: ["PATCH /projects/{project_id}", {
      mediaType: {
        previews: ["inertia"]
      }
    }],
    updateCard: ["PATCH /projects/columns/cards/{card_id}", {
      mediaType: {
        previews: ["inertia"]
      }
    }],
    updateColumn: ["PATCH /projects/columns/{column_id}", {
      mediaType: {
        previews: ["inertia"]
      }
    }]
  },
  pulls: {
    checkIfMerged: ["GET /repos/{owner}/{repo}/pulls/{pull_number}/merge"],
    create: ["POST /repos/{owner}/{repo}/pulls"],
    createReplyForReviewComment: ["POST /repos/{owner}/{repo}/pulls/{pull_number}/comments/{comment_id}/replies"],
    createReview: ["POST /repos/{owner}/{repo}/pulls/{pull_number}/reviews"],
    createReviewComment: ["POST /repos/{owner}/{repo}/pulls/{pull_number}/comments"],
    deletePendingReview: ["DELETE /repos/{owner}/{repo}/pulls/{pull_number}/reviews/{review_id}"],
    deleteReviewComment: ["DELETE /repos/{owner}/{repo}/pulls/comments/{comment_id}"],
    dismissReview: ["PUT /repos/{owner}/{repo}/pulls/{pull_number}/reviews/{review_id}/dismissals"],
    get: ["GET /repos/{owner}/{repo}/pulls/{pull_number}"],
    getReview: ["GET /repos/{owner}/{repo}/pulls/{pull_number}/reviews/{review_id}"],
    getReviewComment: ["GET /repos/{owner}/{repo}/pulls/comments/{comment_id}"],
    list: ["GET /repos/{owner}/{repo}/pulls"],
    listCommentsForReview: ["GET /repos/{owner}/{repo}/pulls/{pull_number}/reviews/{review_id}/comments"],
    listCommits: ["GET /repos/{owner}/{repo}/pulls/{pull_number}/commits"],
    listFiles: ["GET /repos/{owner}/{repo}/pulls/{pull_number}/files"],
    listRequestedReviewers: ["GET /repos/{owner}/{repo}/pulls/{pull_number}/requested_reviewers"],
    listReviewComments: ["GET /repos/{owner}/{repo}/pulls/{pull_number}/comments"],
    listReviewCommentsForRepo: ["GET /repos/{owner}/{repo}/pulls/comments"],
    listReviews: ["GET /repos/{owner}/{repo}/pulls/{pull_number}/reviews"],
    merge: ["PUT /repos/{owner}/{repo}/pulls/{pull_number}/merge"],
    removeRequestedReviewers: ["DELETE /repos/{owner}/{repo}/pulls/{pull_number}/requested_reviewers"],
    requestReviewers: ["POST /repos/{owner}/{repo}/pulls/{pull_number}/requested_reviewers"],
    submitReview: ["POST /repos/{owner}/{repo}/pulls/{pull_number}/reviews/{review_id}/events"],
    update: ["PATCH /repos/{owner}/{repo}/pulls/{pull_number}"],
    updateBranch: ["PUT /repos/{owner}/{repo}/pulls/{pull_number}/update-branch", {
      mediaType: {
        previews: ["lydian"]
      }
    }],
    updateReview: ["PUT /repos/{owner}/{repo}/pulls/{pull_number}/reviews/{review_id}"],
    updateReviewComment: ["PATCH /repos/{owner}/{repo}/pulls/comments/{comment_id}"]
  },
  rateLimit: {
    get: ["GET /rate_limit"]
  },
  reactions: {
    createForCommitComment: ["POST /repos/{owner}/{repo}/comments/{comment_id}/reactions", {
      mediaType: {
        previews: ["squirrel-girl"]
      }
    }],
    createForIssue: ["POST /repos/{owner}/{repo}/issues/{issue_number}/reactions", {
      mediaType: {
        previews: ["squirrel-girl"]
      }
    }],
    createForIssueComment: ["POST /repos/{owner}/{repo}/issues/comments/{comment_id}/reactions", {
      mediaType: {
        previews: ["squirrel-girl"]
      }
    }],
    createForPullRequestReviewComment: ["POST /repos/{owner}/{repo}/pulls/comments/{comment_id}/reactions", {
      mediaType: {
        previews: ["squirrel-girl"]
      }
    }],
    createForTeamDiscussionCommentInOrg: ["POST /orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/comments/{comment_number}/reactions", {
      mediaType: {
        previews: ["squirrel-girl"]
      }
    }],
    createForTeamDiscussionInOrg: ["POST /orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/reactions", {
      mediaType: {
        previews: ["squirrel-girl"]
      }
    }],
    deleteForCommitComment: ["DELETE /repos/{owner}/{repo}/comments/{comment_id}/reactions/{reaction_id}", {
      mediaType: {
        previews: ["squirrel-girl"]
      }
    }],
    deleteForIssue: ["DELETE /repos/{owner}/{repo}/issues/{issue_number}/reactions/{reaction_id}", {
      mediaType: {
        previews: ["squirrel-girl"]
      }
    }],
    deleteForIssueComment: ["DELETE /repos/{owner}/{repo}/issues/comments/{comment_id}/reactions/{reaction_id}", {
      mediaType: {
        previews: ["squirrel-girl"]
      }
    }],
    deleteForPullRequestComment: ["DELETE /repos/{owner}/{repo}/pulls/comments/{comment_id}/reactions/{reaction_id}", {
      mediaType: {
        previews: ["squirrel-girl"]
      }
    }],
    deleteForTeamDiscussion: ["DELETE /orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/reactions/{reaction_id}", {
      mediaType: {
        previews: ["squirrel-girl"]
      }
    }],
    deleteForTeamDiscussionComment: ["DELETE /orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/comments/{comment_number}/reactions/{reaction_id}", {
      mediaType: {
        previews: ["squirrel-girl"]
      }
    }],
    deleteLegacy: ["DELETE /reactions/{reaction_id}", {
      mediaType: {
        previews: ["squirrel-girl"]
      }
    }, {
      deprecated: "octokit.reactions.deleteLegacy() is deprecated, see https://developer.github.com/v3/reactions/#delete-a-reaction-legacy"
    }],
    listForCommitComment: ["GET /repos/{owner}/{repo}/comments/{comment_id}/reactions", {
      mediaType: {
        previews: ["squirrel-girl"]
      }
    }],
    listForIssue: ["GET /repos/{owner}/{repo}/issues/{issue_number}/reactions", {
      mediaType: {
        previews: ["squirrel-girl"]
      }
    }],
    listForIssueComment: ["GET /repos/{owner}/{repo}/issues/comments/{comment_id}/reactions", {
      mediaType: {
        previews: ["squirrel-girl"]
      }
    }],
    listForPullRequestReviewComment: ["GET /repos/{owner}/{repo}/pulls/comments/{comment_id}/reactions", {
      mediaType: {
        previews: ["squirrel-girl"]
      }
    }],
    listForTeamDiscussionCommentInOrg: ["GET /orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/comments/{comment_number}/reactions", {
      mediaType: {
        previews: ["squirrel-girl"]
      }
    }],
    listForTeamDiscussionInOrg: ["GET /orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/reactions", {
      mediaType: {
        previews: ["squirrel-girl"]
      }
    }]
  },
  repos: {
    acceptInvitation: ["PATCH /user/repository_invitations/{invitation_id}"],
    addAppAccessRestrictions: ["POST /repos/{owner}/{repo}/branches/{branch}/protection/restrictions/apps", {}, {
      mapToData: "apps"
    }],
    addCollaborator: ["PUT /repos/{owner}/{repo}/collaborators/{username}"],
    addStatusCheckContexts: ["POST /repos/{owner}/{repo}/branches/{branch}/protection/required_status_checks/contexts", {}, {
      mapToData: "contexts"
    }],
    addTeamAccessRestrictions: ["POST /repos/{owner}/{repo}/branches/{branch}/protection/restrictions/teams", {}, {
      mapToData: "teams"
    }],
    addUserAccessRestrictions: ["POST /repos/{owner}/{repo}/branches/{branch}/protection/restrictions/users", {}, {
      mapToData: "users"
    }],
    checkCollaborator: ["GET /repos/{owner}/{repo}/collaborators/{username}"],
    checkVulnerabilityAlerts: ["GET /repos/{owner}/{repo}/vulnerability-alerts", {
      mediaType: {
        previews: ["dorian"]
      }
    }],
    compareCommits: ["GET /repos/{owner}/{repo}/compare/{base}...{head}"],
    createCommitComment: ["POST /repos/{owner}/{repo}/commits/{commit_sha}/comments"],
    createCommitSignatureProtection: ["POST /repos/{owner}/{repo}/branches/{branch}/protection/required_signatures", {
      mediaType: {
        previews: ["zzzax"]
      }
    }],
    createCommitStatus: ["POST /repos/{owner}/{repo}/statuses/{sha}"],
    createDeployKey: ["POST /repos/{owner}/{repo}/keys"],
    createDeployment: ["POST /repos/{owner}/{repo}/deployments"],
    createDeploymentStatus: ["POST /repos/{owner}/{repo}/deployments/{deployment_id}/statuses"],
    createDispatchEvent: ["POST /repos/{owner}/{repo}/dispatches"],
    createForAuthenticatedUser: ["POST /user/repos"],
    createFork: ["POST /repos/{owner}/{repo}/forks"],
    createInOrg: ["POST /orgs/{org}/repos"],
    createOrUpdateFileContents: ["PUT /repos/{owner}/{repo}/contents/{path}"],
    createPagesSite: ["POST /repos/{owner}/{repo}/pages", {
      mediaType: {
        previews: ["switcheroo"]
      }
    }],
    createRelease: ["POST /repos/{owner}/{repo}/releases"],
    createUsingTemplate: ["POST /repos/{template_owner}/{template_repo}/generate", {
      mediaType: {
        previews: ["baptiste"]
      }
    }],
    createWebhook: ["POST /repos/{owner}/{repo}/hooks"],
    declineInvitation: ["DELETE /user/repository_invitations/{invitation_id}"],
    delete: ["DELETE /repos/{owner}/{repo}"],
    deleteAccessRestrictions: ["DELETE /repos/{owner}/{repo}/branches/{branch}/protection/restrictions"],
    deleteAdminBranchProtection: ["DELETE /repos/{owner}/{repo}/branches/{branch}/protection/enforce_admins"],
    deleteBranchProtection: ["DELETE /repos/{owner}/{repo}/branches/{branch}/protection"],
    deleteCommitComment: ["DELETE /repos/{owner}/{repo}/comments/{comment_id}"],
    deleteCommitSignatureProtection: ["DELETE /repos/{owner}/{repo}/branches/{branch}/protection/required_signatures", {
      mediaType: {
        previews: ["zzzax"]
      }
    }],
    deleteDeployKey: ["DELETE /repos/{owner}/{repo}/keys/{key_id}"],
    deleteDeployment: ["DELETE /repos/{owner}/{repo}/deployments/{deployment_id}"],
    deleteFile: ["DELETE /repos/{owner}/{repo}/contents/{path}"],
    deleteInvitation: ["DELETE /repos/{owner}/{repo}/invitations/{invitation_id}"],
    deletePagesSite: ["DELETE /repos/{owner}/{repo}/pages", {
      mediaType: {
        previews: ["switcheroo"]
      }
    }],
    deletePullRequestReviewProtection: ["DELETE /repos/{owner}/{repo}/branches/{branch}/protection/required_pull_request_reviews"],
    deleteRelease: ["DELETE /repos/{owner}/{repo}/releases/{release_id}"],
    deleteReleaseAsset: ["DELETE /repos/{owner}/{repo}/releases/assets/{asset_id}"],
    deleteWebhook: ["DELETE /repos/{owner}/{repo}/hooks/{hook_id}"],
    disableAutomatedSecurityFixes: ["DELETE /repos/{owner}/{repo}/automated-security-fixes", {
      mediaType: {
        previews: ["london"]
      }
    }],
    disableVulnerabilityAlerts: ["DELETE /repos/{owner}/{repo}/vulnerability-alerts", {
      mediaType: {
        previews: ["dorian"]
      }
    }],
    downloadArchive: ["GET /repos/{owner}/{repo}/{archive_format}/{ref}"],
    enableAutomatedSecurityFixes: ["PUT /repos/{owner}/{repo}/automated-security-fixes", {
      mediaType: {
        previews: ["london"]
      }
    }],
    enableVulnerabilityAlerts: ["PUT /repos/{owner}/{repo}/vulnerability-alerts", {
      mediaType: {
        previews: ["dorian"]
      }
    }],
    get: ["GET /repos/{owner}/{repo}"],
    getAccessRestrictions: ["GET /repos/{owner}/{repo}/branches/{branch}/protection/restrictions"],
    getAdminBranchProtection: ["GET /repos/{owner}/{repo}/branches/{branch}/protection/enforce_admins"],
    getAllStatusCheckContexts: ["GET /repos/{owner}/{repo}/branches/{branch}/protection/required_status_checks/contexts"],
    getAllTopics: ["GET /repos/{owner}/{repo}/topics", {
      mediaType: {
        previews: ["mercy"]
      }
    }],
    getAppsWithAccessToProtectedBranch: ["GET /repos/{owner}/{repo}/branches/{branch}/protection/restrictions/apps"],
    getBranch: ["GET /repos/{owner}/{repo}/branches/{branch}"],
    getBranchProtection: ["GET /repos/{owner}/{repo}/branches/{branch}/protection"],
    getClones: ["GET /repos/{owner}/{repo}/traffic/clones"],
    getCodeFrequencyStats: ["GET /repos/{owner}/{repo}/stats/code_frequency"],
    getCollaboratorPermissionLevel: ["GET /repos/{owner}/{repo}/collaborators/{username}/permission"],
    getCombinedStatusForRef: ["GET /repos/{owner}/{repo}/commits/{ref}/status"],
    getCommit: ["GET /repos/{owner}/{repo}/commits/{ref}"],
    getCommitActivityStats: ["GET /repos/{owner}/{repo}/stats/commit_activity"],
    getCommitComment: ["GET /repos/{owner}/{repo}/comments/{comment_id}"],
    getCommitSignatureProtection: ["GET /repos/{owner}/{repo}/branches/{branch}/protection/required_signatures", {
      mediaType: {
        previews: ["zzzax"]
      }
    }],
    getCommunityProfileMetrics: ["GET /repos/{owner}/{repo}/community/profile", {
      mediaType: {
        previews: ["black-panther"]
      }
    }],
    getContent: ["GET /repos/{owner}/{repo}/contents/{path}"],
    getContributorsStats: ["GET /repos/{owner}/{repo}/stats/contributors"],
    getDeployKey: ["GET /repos/{owner}/{repo}/keys/{key_id}"],
    getDeployment: ["GET /repos/{owner}/{repo}/deployments/{deployment_id}"],
    getDeploymentStatus: ["GET /repos/{owner}/{repo}/deployments/{deployment_id}/statuses/{status_id}"],
    getLatestPagesBuild: ["GET /repos/{owner}/{repo}/pages/builds/latest"],
    getLatestRelease: ["GET /repos/{owner}/{repo}/releases/latest"],
    getPages: ["GET /repos/{owner}/{repo}/pages"],
    getPagesBuild: ["GET /repos/{owner}/{repo}/pages/builds/{build_id}"],
    getParticipationStats: ["GET /repos/{owner}/{repo}/stats/participation"],
    getPullRequestReviewProtection: ["GET /repos/{owner}/{repo}/branches/{branch}/protection/required_pull_request_reviews"],
    getPunchCardStats: ["GET /repos/{owner}/{repo}/stats/punch_card"],
    getReadme: ["GET /repos/{owner}/{repo}/readme"],
    getRelease: ["GET /repos/{owner}/{repo}/releases/{release_id}"],
    getReleaseAsset: ["GET /repos/{owner}/{repo}/releases/assets/{asset_id}"],
    getReleaseByTag: ["GET /repos/{owner}/{repo}/releases/tags/{tag}"],
    getStatusChecksProtection: ["GET /repos/{owner}/{repo}/branches/{branch}/protection/required_status_checks"],
    getTeamsWithAccessToProtectedBranch: ["GET /repos/{owner}/{repo}/branches/{branch}/protection/restrictions/teams"],
    getTopPaths: ["GET /repos/{owner}/{repo}/traffic/popular/paths"],
    getTopReferrers: ["GET /repos/{owner}/{repo}/traffic/popular/referrers"],
    getUsersWithAccessToProtectedBranch: ["GET /repos/{owner}/{repo}/branches/{branch}/protection/restrictions/users"],
    getViews: ["GET /repos/{owner}/{repo}/traffic/views"],
    getWebhook: ["GET /repos/{owner}/{repo}/hooks/{hook_id}"],
    listBranches: ["GET /repos/{owner}/{repo}/branches"],
    listBranchesForHeadCommit: ["GET /repos/{owner}/{repo}/commits/{commit_sha}/branches-where-head", {
      mediaType: {
        previews: ["groot"]
      }
    }],
    listCollaborators: ["GET /repos/{owner}/{repo}/collaborators"],
    listCommentsForCommit: ["GET /repos/{owner}/{repo}/commits/{commit_sha}/comments"],
    listCommitCommentsForRepo: ["GET /repos/{owner}/{repo}/comments"],
    listCommitStatusesForRef: ["GET /repos/{owner}/{repo}/commits/{ref}/statuses"],
    listCommits: ["GET /repos/{owner}/{repo}/commits"],
    listContributors: ["GET /repos/{owner}/{repo}/contributors"],
    listDeployKeys: ["GET /repos/{owner}/{repo}/keys"],
    listDeploymentStatuses: ["GET /repos/{owner}/{repo}/deployments/{deployment_id}/statuses"],
    listDeployments: ["GET /repos/{owner}/{repo}/deployments"],
    listForAuthenticatedUser: ["GET /user/repos"],
    listForOrg: ["GET /orgs/{org}/repos"],
    listForUser: ["GET /users/{username}/repos"],
    listForks: ["GET /repos/{owner}/{repo}/forks"],
    listInvitations: ["GET /repos/{owner}/{repo}/invitations"],
    listInvitationsForAuthenticatedUser: ["GET /user/repository_invitations"],
    listLanguages: ["GET /repos/{owner}/{repo}/languages"],
    listPagesBuilds: ["GET /repos/{owner}/{repo}/pages/builds"],
    listPublic: ["GET /repositories"],
    listPullRequestsAssociatedWithCommit: ["GET /repos/{owner}/{repo}/commits/{commit_sha}/pulls", {
      mediaType: {
        previews: ["groot"]
      }
    }],
    listReleaseAssets: ["GET /repos/{owner}/{repo}/releases/{release_id}/assets"],
    listReleases: ["GET /repos/{owner}/{repo}/releases"],
    listTags: ["GET /repos/{owner}/{repo}/tags"],
    listTeams: ["GET /repos/{owner}/{repo}/teams"],
    listWebhooks: ["GET /repos/{owner}/{repo}/hooks"],
    merge: ["POST /repos/{owner}/{repo}/merges"],
    pingWebhook: ["POST /repos/{owner}/{repo}/hooks/{hook_id}/pings"],
    removeAppAccessRestrictions: ["DELETE /repos/{owner}/{repo}/branches/{branch}/protection/restrictions/apps", {}, {
      mapToData: "apps"
    }],
    removeCollaborator: ["DELETE /repos/{owner}/{repo}/collaborators/{username}"],
    removeStatusCheckContexts: ["DELETE /repos/{owner}/{repo}/branches/{branch}/protection/required_status_checks/contexts", {}, {
      mapToData: "contexts"
    }],
    removeStatusCheckProtection: ["DELETE /repos/{owner}/{repo}/branches/{branch}/protection/required_status_checks"],
    removeTeamAccessRestrictions: ["DELETE /repos/{owner}/{repo}/branches/{branch}/protection/restrictions/teams", {}, {
      mapToData: "teams"
    }],
    removeUserAccessRestrictions: ["DELETE /repos/{owner}/{repo}/branches/{branch}/protection/restrictions/users", {}, {
      mapToData: "users"
    }],
    replaceAllTopics: ["PUT /repos/{owner}/{repo}/topics", {
      mediaType: {
        previews: ["mercy"]
      }
    }],
    requestPagesBuild: ["POST /repos/{owner}/{repo}/pages/builds"],
    setAdminBranchProtection: ["POST /repos/{owner}/{repo}/branches/{branch}/protection/enforce_admins"],
    setAppAccessRestrictions: ["PUT /repos/{owner}/{repo}/branches/{branch}/protection/restrictions/apps", {}, {
      mapToData: "apps"
    }],
    setStatusCheckContexts: ["PUT /repos/{owner}/{repo}/branches/{branch}/protection/required_status_checks/contexts", {}, {
      mapToData: "contexts"
    }],
    setTeamAccessRestrictions: ["PUT /repos/{owner}/{repo}/branches/{branch}/protection/restrictions/teams", {}, {
      mapToData: "teams"
    }],
    setUserAccessRestrictions: ["PUT /repos/{owner}/{repo}/branches/{branch}/protection/restrictions/users", {}, {
      mapToData: "users"
    }],
    testPushWebhook: ["POST /repos/{owner}/{repo}/hooks/{hook_id}/tests"],
    transfer: ["POST /repos/{owner}/{repo}/transfer"],
    update: ["PATCH /repos/{owner}/{repo}"],
    updateBranchProtection: ["PUT /repos/{owner}/{repo}/branches/{branch}/protection"],
    updateCommitComment: ["PATCH /repos/{owner}/{repo}/comments/{comment_id}"],
    updateInformationAboutPagesSite: ["PUT /repos/{owner}/{repo}/pages"],
    updateInvitation: ["PATCH /repos/{owner}/{repo}/invitations/{invitation_id}"],
    updatePullRequestReviewProtection: ["PATCH /repos/{owner}/{repo}/branches/{branch}/protection/required_pull_request_reviews"],
    updateRelease: ["PATCH /repos/{owner}/{repo}/releases/{release_id}"],
    updateReleaseAsset: ["PATCH /repos/{owner}/{repo}/releases/assets/{asset_id}"],
    updateStatusCheckPotection: ["PATCH /repos/{owner}/{repo}/branches/{branch}/protection/required_status_checks"],
    updateWebhook: ["PATCH /repos/{owner}/{repo}/hooks/{hook_id}"],
    uploadReleaseAsset: ["POST /repos/{owner}/{repo}/releases/{release_id}/assets{?name,label}", {
      baseUrl: "https://uploads.github.com"
    }]
  },
  search: {
    code: ["GET /search/code"],
    commits: ["GET /search/commits", {
      mediaType: {
        previews: ["cloak"]
      }
    }],
    issuesAndPullRequests: ["GET /search/issues"],
    labels: ["GET /search/labels"],
    repos: ["GET /search/repositories"],
    topics: ["GET /search/topics", {
      mediaType: {
        previews: ["mercy"]
      }
    }],
    users: ["GET /search/users"]
  },
  teams: {
    addOrUpdateMembershipForUserInOrg: ["PUT /orgs/{org}/teams/{team_slug}/memberships/{username}"],
    addOrUpdateProjectPermissionsInOrg: ["PUT /orgs/{org}/teams/{team_slug}/projects/{project_id}", {
      mediaType: {
        previews: ["inertia"]
      }
    }],
    addOrUpdateRepoPermissionsInOrg: ["PUT /orgs/{org}/teams/{team_slug}/repos/{owner}/{repo}"],
    checkPermissionsForProjectInOrg: ["GET /orgs/{org}/teams/{team_slug}/projects/{project_id}", {
      mediaType: {
        previews: ["inertia"]
      }
    }],
    checkPermissionsForRepoInOrg: ["GET /orgs/{org}/teams/{team_slug}/repos/{owner}/{repo}"],
    create: ["POST /orgs/{org}/teams"],
    createDiscussionCommentInOrg: ["POST /orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/comments"],
    createDiscussionInOrg: ["POST /orgs/{org}/teams/{team_slug}/discussions"],
    deleteDiscussionCommentInOrg: ["DELETE /orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/comments/{comment_number}"],
    deleteDiscussionInOrg: ["DELETE /orgs/{org}/teams/{team_slug}/discussions/{discussion_number}"],
    deleteInOrg: ["DELETE /orgs/{org}/teams/{team_slug}"],
    getByName: ["GET /orgs/{org}/teams/{team_slug}"],
    getDiscussionCommentInOrg: ["GET /orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/comments/{comment_number}"],
    getDiscussionInOrg: ["GET /orgs/{org}/teams/{team_slug}/discussions/{discussion_number}"],
    getMembershipForUserInOrg: ["GET /orgs/{org}/teams/{team_slug}/memberships/{username}"],
    list: ["GET /orgs/{org}/teams"],
    listChildInOrg: ["GET /orgs/{org}/teams/{team_slug}/teams"],
    listDiscussionCommentsInOrg: ["GET /orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/comments"],
    listDiscussionsInOrg: ["GET /orgs/{org}/teams/{team_slug}/discussions"],
    listForAuthenticatedUser: ["GET /user/teams"],
    listMembersInOrg: ["GET /orgs/{org}/teams/{team_slug}/members"],
    listPendingInvitationsInOrg: ["GET /orgs/{org}/teams/{team_slug}/invitations"],
    listProjectsInOrg: ["GET /orgs/{org}/teams/{team_slug}/projects", {
      mediaType: {
        previews: ["inertia"]
      }
    }],
    listReposInOrg: ["GET /orgs/{org}/teams/{team_slug}/repos"],
    removeMembershipForUserInOrg: ["DELETE /orgs/{org}/teams/{team_slug}/memberships/{username}"],
    removeProjectInOrg: ["DELETE /orgs/{org}/teams/{team_slug}/projects/{project_id}"],
    removeRepoInOrg: ["DELETE /orgs/{org}/teams/{team_slug}/repos/{owner}/{repo}"],
    updateDiscussionCommentInOrg: ["PATCH /orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/comments/{comment_number}"],
    updateDiscussionInOrg: ["PATCH /orgs/{org}/teams/{team_slug}/discussions/{discussion_number}"],
    updateInOrg: ["PATCH /orgs/{org}/teams/{team_slug}"]
  },
  users: {
    addEmailForAuthenticated: ["POST /user/emails"],
    block: ["PUT /user/blocks/{username}"],
    checkBlocked: ["GET /user/blocks/{username}"],
    checkFollowingForUser: ["GET /users/{username}/following/{target_user}"],
    checkPersonIsFollowedByAuthenticated: ["GET /user/following/{username}"],
    createGpgKeyForAuthenticated: ["POST /user/gpg_keys"],
    createPublicSshKeyForAuthenticated: ["POST /user/keys"],
    deleteEmailForAuthenticated: ["DELETE /user/emails"],
    deleteGpgKeyForAuthenticated: ["DELETE /user/gpg_keys/{gpg_key_id}"],
    deletePublicSshKeyForAuthenticated: ["DELETE /user/keys/{key_id}"],
    follow: ["PUT /user/following/{username}"],
    getAuthenticated: ["GET /user"],
    getByUsername: ["GET /users/{username}"],
    getContextForUser: ["GET /users/{username}/hovercard"],
    getGpgKeyForAuthenticated: ["GET /user/gpg_keys/{gpg_key_id}"],
    getPublicSshKeyForAuthenticated: ["GET /user/keys/{key_id}"],
    list: ["GET /users"],
    listBlockedByAuthenticated: ["GET /user/blocks"],
    listEmailsForAuthenticated: ["GET /user/emails"],
    listFollowedByAuthenticated: ["GET /user/following"],
    listFollowersForAuthenticatedUser: ["GET /user/followers"],
    listFollowersForUser: ["GET /users/{username}/followers"],
    listFollowingForUser: ["GET /users/{username}/following"],
    listGpgKeysForAuthenticated: ["GET /user/gpg_keys"],
    listGpgKeysForUser: ["GET /users/{username}/gpg_keys"],
    listPublicEmailsForAuthenticated: ["GET /user/public_emails"],
    listPublicKeysForUser: ["GET /users/{username}/keys"],
    listPublicSshKeysForAuthenticated: ["GET /user/keys"],
    setPrimaryEmailVisibilityForAuthenticated: ["PATCH /user/email/visibility"],
    unblock: ["DELETE /user/blocks/{username}"],
    unfollow: ["DELETE /user/following/{username}"],
    updateAuthenticated: ["PATCH /user"]
  }
};

const VERSION = "4.2.1";

function endpointsToMethods(octokit, endpointsMap) {
  const newMethods = {};

  for (const [scope, endpoints] of Object.entries(endpointsMap)) {
    for (const [methodName, endpoint] of Object.entries(endpoints)) {
      const [route, defaults, decorations] = endpoint;
      const [method, url] = route.split(/ /);
      const endpointDefaults = Object.assign({
        method,
        url
      }, defaults);

      if (!newMethods[scope]) {
        newMethods[scope] = {};
      }

      const scopeMethods = newMethods[scope];

      if (decorations) {
        scopeMethods[methodName] = decorate(octokit, scope, methodName, endpointDefaults, decorations);
        continue;
      }

      scopeMethods[methodName] = octokit.request.defaults(endpointDefaults);
    }
  }

  return newMethods;
}

function decorate(octokit, scope, methodName, defaults, decorations) {
  const requestWithDefaults = octokit.request.defaults(defaults);
  /* istanbul ignore next */

  function withDecorations(...args) {
    // @ts-ignore https://github.com/microsoft/TypeScript/issues/25488
    let options = requestWithDefaults.endpoint.merge(...args); // There are currently no other decorations than `.mapToData`

    if (decorations.mapToData) {
      options = Object.assign({}, options, {
        data: options[decorations.mapToData],
        [decorations.mapToData]: undefined
      });
      return requestWithDefaults(options);
    }

    if (decorations.renamed) {
      const [newScope, newMethodName] = decorations.renamed;
      octokit.log.warn(`octokit.${scope}.${methodName}() has been renamed to octokit.${newScope}.${newMethodName}()`);
    }

    if (decorations.deprecated) {
      octokit.log.warn(decorations.deprecated);
    }

    if (decorations.renamedParameters) {
      // @ts-ignore https://github.com/microsoft/TypeScript/issues/25488
      const options = requestWithDefaults.endpoint.merge(...args);

      for (const [name, alias] of Object.entries(decorations.renamedParameters)) {
        if (name in options) {
          octokit.log.warn(`"${name}" parameter is deprecated for "octokit.${scope}.${methodName}()". Use "${alias}" instead`);

          if (!(alias in options)) {
            options[alias] = options[name];
          }

          delete options[name];
        }
      }

      return requestWithDefaults(options);
    } // @ts-ignore https://github.com/microsoft/TypeScript/issues/25488


    return requestWithDefaults(...args);
  }

  return Object.assign(withDecorations, requestWithDefaults);
}

/**
 * This plugin is a 1:1 copy of internal @octokit/rest plugins. The primary
 * goal is to rebuild @octokit/rest on top of @octokit/core. Once that is
 * done, we will remove the registerEndpoints methods and return the methods
 * directly as with the other plugins. At that point we will also remove the
 * legacy workarounds and deprecations.
 *
 * See the plan at
 * https://github.com/octokit/plugin-rest-endpoint-methods.js/pull/1
 */

function restEndpointMethods(octokit) {
  return endpointsToMethods(octokit, Endpoints);
}
restEndpointMethods.VERSION = VERSION;

exports.restEndpointMethods = restEndpointMethods;
//# sourceMappingURL=index.js.map


/***/ }),

/***/ 537:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({ value: true }));

function _interopDefault (ex) { return (ex && (typeof ex === 'object') && 'default' in ex) ? ex['default'] : ex; }

var deprecation = __webpack_require__(8932);
var once = _interopDefault(__webpack_require__(1223));

const logOnce = once(deprecation => console.warn(deprecation));
/**
 * Error with extra properties to help with debugging
 */

class RequestError extends Error {
  constructor(message, statusCode, options) {
    super(message); // Maintains proper stack trace (only available on V8)

    /* istanbul ignore next */

    if (Error.captureStackTrace) {
      Error.captureStackTrace(this, this.constructor);
    }

    this.name = "HttpError";
    this.status = statusCode;
    Object.defineProperty(this, "code", {
      get() {
        logOnce(new deprecation.Deprecation("[@octokit/request-error] `error.code` is deprecated, use `error.status`."));
        return statusCode;
      }

    });
    this.headers = options.headers || {}; // redact request credentials without mutating original request options

    const requestCopy = Object.assign({}, options.request);

    if (options.request.headers.authorization) {
      requestCopy.headers = Object.assign({}, options.request.headers, {
        authorization: options.request.headers.authorization.replace(/ .*$/, " [REDACTED]")
      });
    }

    requestCopy.url = requestCopy.url // client_id & client_secret can be passed as URL query parameters to increase rate limit
    // see https://developer.github.com/v3/#increasing-the-unauthenticated-rate-limit-for-oauth-applications
    .replace(/\bclient_secret=\w+/g, "client_secret=[REDACTED]") // OAuth tokens can be passed as URL query parameters, although it is not recommended
    // see https://developer.github.com/v3/#oauth2-token-sent-in-a-header
    .replace(/\baccess_token=\w+/g, "access_token=[REDACTED]");
    this.request = requestCopy;
  }

}

exports.RequestError = RequestError;
//# sourceMappingURL=index.js.map


/***/ }),

/***/ 6234:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({ value: true }));

function _interopDefault (ex) { return (ex && (typeof ex === 'object') && 'default' in ex) ? ex['default'] : ex; }

var endpoint = __webpack_require__(9440);
var universalUserAgent = __webpack_require__(5030);
var isPlainObject = __webpack_require__(9062);
var nodeFetch = _interopDefault(__webpack_require__(467));
var requestError = __webpack_require__(537);

const VERSION = "5.4.10";

function getBufferResponse(response) {
  return response.arrayBuffer();
}

function fetchWrapper(requestOptions) {
  if (isPlainObject.isPlainObject(requestOptions.body) || Array.isArray(requestOptions.body)) {
    requestOptions.body = JSON.stringify(requestOptions.body);
  }

  let headers = {};
  let status;
  let url;
  const fetch = requestOptions.request && requestOptions.request.fetch || nodeFetch;
  return fetch(requestOptions.url, Object.assign({
    method: requestOptions.method,
    body: requestOptions.body,
    headers: requestOptions.headers,
    redirect: requestOptions.redirect
  }, requestOptions.request)).then(response => {
    url = response.url;
    status = response.status;

    for (const keyAndValue of response.headers) {
      headers[keyAndValue[0]] = keyAndValue[1];
    }

    if (status === 204 || status === 205) {
      return;
    } // GitHub API returns 200 for HEAD requests


    if (requestOptions.method === "HEAD") {
      if (status < 400) {
        return;
      }

      throw new requestError.RequestError(response.statusText, status, {
        headers,
        request: requestOptions
      });
    }

    if (status === 304) {
      throw new requestError.RequestError("Not modified", status, {
        headers,
        request: requestOptions
      });
    }

    if (status >= 400) {
      return response.text().then(message => {
        const error = new requestError.RequestError(message, status, {
          headers,
          request: requestOptions
        });

        try {
          let responseBody = JSON.parse(error.message);
          Object.assign(error, responseBody);
          let errors = responseBody.errors; // Assumption `errors` would always be in Array format

          error.message = error.message + ": " + errors.map(JSON.stringify).join(", ");
        } catch (e) {// ignore, see octokit/rest.js#684
        }

        throw error;
      });
    }

    const contentType = response.headers.get("content-type");

    if (/application\/json/.test(contentType)) {
      return response.json();
    }

    if (!contentType || /^text\/|charset=utf-8$/.test(contentType)) {
      return response.text();
    }

    return getBufferResponse(response);
  }).then(data => {
    return {
      status,
      url,
      headers,
      data
    };
  }).catch(error => {
    if (error instanceof requestError.RequestError) {
      throw error;
    }

    throw new requestError.RequestError(error.message, 500, {
      headers,
      request: requestOptions
    });
  });
}

function withDefaults(oldEndpoint, newDefaults) {
  const endpoint = oldEndpoint.defaults(newDefaults);

  const newApi = function (route, parameters) {
    const endpointOptions = endpoint.merge(route, parameters);

    if (!endpointOptions.request || !endpointOptions.request.hook) {
      return fetchWrapper(endpoint.parse(endpointOptions));
    }

    const request = (route, parameters) => {
      return fetchWrapper(endpoint.parse(endpoint.merge(route, parameters)));
    };

    Object.assign(request, {
      endpoint,
      defaults: withDefaults.bind(null, endpoint)
    });
    return endpointOptions.request.hook(request, endpointOptions);
  };

  return Object.assign(newApi, {
    endpoint,
    defaults: withDefaults.bind(null, endpoint)
  });
}

const request = withDefaults(endpoint.endpoint, {
  headers: {
    "user-agent": `octokit-request.js/${VERSION} ${universalUserAgent.getUserAgent()}`
  }
});

exports.request = request;
//# sourceMappingURL=index.js.map


/***/ }),

/***/ 9062:
/***/ ((__unused_webpack_module, exports) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({ value: true }));

/*!
 * is-plain-object <https://github.com/jonschlinkert/is-plain-object>
 *
 * Copyright (c) 2014-2017, Jon Schlinkert.
 * Released under the MIT License.
 */

function isObject(o) {
  return Object.prototype.toString.call(o) === '[object Object]';
}

function isPlainObject(o) {
  var ctor,prot;

  if (isObject(o) === false) return false;

  // If has modified constructor
  ctor = o.constructor;
  if (ctor === undefined) return true;

  // If has modified prototype
  prot = ctor.prototype;
  if (isObject(prot) === false) return false;

  // If constructor does not have an Object-specific method
  if (prot.hasOwnProperty('isPrototypeOf') === false) {
    return false;
  }

  // Most likely a plain Object
  return true;
}

exports.isPlainObject = isPlainObject;


/***/ }),

/***/ 9417:
/***/ ((module) => {

"use strict";

module.exports = balanced;
function balanced(a, b, str) {
  if (a instanceof RegExp) a = maybeMatch(a, str);
  if (b instanceof RegExp) b = maybeMatch(b, str);

  var r = range(a, b, str);

  return r && {
    start: r[0],
    end: r[1],
    pre: str.slice(0, r[0]),
    body: str.slice(r[0] + a.length, r[1]),
    post: str.slice(r[1] + b.length)
  };
}

function maybeMatch(reg, str) {
  var m = str.match(reg);
  return m ? m[0] : null;
}

balanced.range = range;
function range(a, b, str) {
  var begs, beg, left, right, result;
  var ai = str.indexOf(a);
  var bi = str.indexOf(b, ai + 1);
  var i = ai;

  if (ai >= 0 && bi > 0) {
    begs = [];
    left = str.length;

    while (i >= 0 && !result) {
      if (i == ai) {
        begs.push(i);
        ai = str.indexOf(a, i + 1);
      } else if (begs.length == 1) {
        result = [ begs.pop(), bi ];
      } else {
        beg = begs.pop();
        if (beg < left) {
          left = beg;
          right = bi;
        }

        bi = str.indexOf(b, i + 1);
      }

      i = ai < bi && ai >= 0 ? ai : bi;
    }

    if (begs.length) {
      result = [ left, right ];
    }
  }

  return result;
}


/***/ }),

/***/ 3682:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var register = __webpack_require__(4670)
var addHook = __webpack_require__(5549)
var removeHook = __webpack_require__(6819)

// bind with array of arguments: https://stackoverflow.com/a/21792913
var bind = Function.bind
var bindable = bind.bind(bind)

function bindApi (hook, state, name) {
  var removeHookRef = bindable(removeHook, null).apply(null, name ? [state, name] : [state])
  hook.api = { remove: removeHookRef }
  hook.remove = removeHookRef

  ;['before', 'error', 'after', 'wrap'].forEach(function (kind) {
    var args = name ? [state, kind, name] : [state, kind]
    hook[kind] = hook.api[kind] = bindable(addHook, null).apply(null, args)
  })
}

function HookSingular () {
  var singularHookName = 'h'
  var singularHookState = {
    registry: {}
  }
  var singularHook = register.bind(null, singularHookState, singularHookName)
  bindApi(singularHook, singularHookState, singularHookName)
  return singularHook
}

function HookCollection () {
  var state = {
    registry: {}
  }

  var hook = register.bind(null, state)
  bindApi(hook, state)

  return hook
}

var collectionHookDeprecationMessageDisplayed = false
function Hook () {
  if (!collectionHookDeprecationMessageDisplayed) {
    console.warn('[before-after-hook]: "Hook()" repurposing warning, use "Hook.Collection()". Read more: https://git.io/upgrade-before-after-hook-to-1.4')
    collectionHookDeprecationMessageDisplayed = true
  }
  return HookCollection()
}

Hook.Singular = HookSingular.bind()
Hook.Collection = HookCollection.bind()

module.exports = Hook
// expose constructors as a named property for TypeScript
module.exports.Hook = Hook
module.exports.Singular = Hook.Singular
module.exports.Collection = Hook.Collection


/***/ }),

/***/ 5549:
/***/ ((module) => {

module.exports = addHook

function addHook (state, kind, name, hook) {
  var orig = hook
  if (!state.registry[name]) {
    state.registry[name] = []
  }

  if (kind === 'before') {
    hook = function (method, options) {
      return Promise.resolve()
        .then(orig.bind(null, options))
        .then(method.bind(null, options))
    }
  }

  if (kind === 'after') {
    hook = function (method, options) {
      var result
      return Promise.resolve()
        .then(method.bind(null, options))
        .then(function (result_) {
          result = result_
          return orig(result, options)
        })
        .then(function () {
          return result
        })
    }
  }

  if (kind === 'error') {
    hook = function (method, options) {
      return Promise.resolve()
        .then(method.bind(null, options))
        .catch(function (error) {
          return orig(error, options)
        })
    }
  }

  state.registry[name].push({
    hook: hook,
    orig: orig
  })
}


/***/ }),

/***/ 4670:
/***/ ((module) => {

module.exports = register

function register (state, name, method, options) {
  if (typeof method !== 'function') {
    throw new Error('method for before hook must be a function')
  }

  if (!options) {
    options = {}
  }

  if (Array.isArray(name)) {
    return name.reverse().reduce(function (callback, name) {
      return register.bind(null, state, name, callback, options)
    }, method)()
  }

  return Promise.resolve()
    .then(function () {
      if (!state.registry[name]) {
        return method(options)
      }

      return (state.registry[name]).reduce(function (method, registered) {
        return registered.hook.bind(null, method, options)
      }, method)()
    })
}


/***/ }),

/***/ 6819:
/***/ ((module) => {

module.exports = removeHook

function removeHook (state, name, method) {
  if (!state.registry[name]) {
    return
  }

  var index = state.registry[name]
    .map(function (registered) { return registered.orig })
    .indexOf(method)

  if (index === -1) {
    return
  }

  state.registry[name].splice(index, 1)
}


/***/ }),

/***/ 3717:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var concatMap = __webpack_require__(6891);
var balanced = __webpack_require__(9417);

module.exports = expandTop;

var escSlash = '\0SLASH'+Math.random()+'\0';
var escOpen = '\0OPEN'+Math.random()+'\0';
var escClose = '\0CLOSE'+Math.random()+'\0';
var escComma = '\0COMMA'+Math.random()+'\0';
var escPeriod = '\0PERIOD'+Math.random()+'\0';

function numeric(str) {
  return parseInt(str, 10) == str
    ? parseInt(str, 10)
    : str.charCodeAt(0);
}

function escapeBraces(str) {
  return str.split('\\\\').join(escSlash)
            .split('\\{').join(escOpen)
            .split('\\}').join(escClose)
            .split('\\,').join(escComma)
            .split('\\.').join(escPeriod);
}

function unescapeBraces(str) {
  return str.split(escSlash).join('\\')
            .split(escOpen).join('{')
            .split(escClose).join('}')
            .split(escComma).join(',')
            .split(escPeriod).join('.');
}


// Basically just str.split(","), but handling cases
// where we have nested braced sections, which should be
// treated as individual members, like {a,{b,c},d}
function parseCommaParts(str) {
  if (!str)
    return [''];

  var parts = [];
  var m = balanced('{', '}', str);

  if (!m)
    return str.split(',');

  var pre = m.pre;
  var body = m.body;
  var post = m.post;
  var p = pre.split(',');

  p[p.length-1] += '{' + body + '}';
  var postParts = parseCommaParts(post);
  if (post.length) {
    p[p.length-1] += postParts.shift();
    p.push.apply(p, postParts);
  }

  parts.push.apply(parts, p);

  return parts;
}

function expandTop(str) {
  if (!str)
    return [];

  // I don't know why Bash 4.3 does this, but it does.
  // Anything starting with {} will have the first two bytes preserved
  // but *only* at the top level, so {},a}b will not expand to anything,
  // but a{},b}c will be expanded to [a}c,abc].
  // One could argue that this is a bug in Bash, but since the goal of
  // this module is to match Bash's rules, we escape a leading {}
  if (str.substr(0, 2) === '{}') {
    str = '\\{\\}' + str.substr(2);
  }

  return expand(escapeBraces(str), true).map(unescapeBraces);
}

function identity(e) {
  return e;
}

function embrace(str) {
  return '{' + str + '}';
}
function isPadded(el) {
  return /^-?0\d/.test(el);
}

function lte(i, y) {
  return i <= y;
}
function gte(i, y) {
  return i >= y;
}

function expand(str, isTop) {
  var expansions = [];

  var m = balanced('{', '}', str);
  if (!m || /\$$/.test(m.pre)) return [str];

  var isNumericSequence = /^-?\d+\.\.-?\d+(?:\.\.-?\d+)?$/.test(m.body);
  var isAlphaSequence = /^[a-zA-Z]\.\.[a-zA-Z](?:\.\.-?\d+)?$/.test(m.body);
  var isSequence = isNumericSequence || isAlphaSequence;
  var isOptions = m.body.indexOf(',') >= 0;
  if (!isSequence && !isOptions) {
    // {a},b}
    if (m.post.match(/,.*\}/)) {
      str = m.pre + '{' + m.body + escClose + m.post;
      return expand(str);
    }
    return [str];
  }

  var n;
  if (isSequence) {
    n = m.body.split(/\.\./);
  } else {
    n = parseCommaParts(m.body);
    if (n.length === 1) {
      // x{{a,b}}y ==> x{a}y x{b}y
      n = expand(n[0], false).map(embrace);
      if (n.length === 1) {
        var post = m.post.length
          ? expand(m.post, false)
          : [''];
        return post.map(function(p) {
          return m.pre + n[0] + p;
        });
      }
    }
  }

  // at this point, n is the parts, and we know it's not a comma set
  // with a single entry.

  // no need to expand pre, since it is guaranteed to be free of brace-sets
  var pre = m.pre;
  var post = m.post.length
    ? expand(m.post, false)
    : [''];

  var N;

  if (isSequence) {
    var x = numeric(n[0]);
    var y = numeric(n[1]);
    var width = Math.max(n[0].length, n[1].length)
    var incr = n.length == 3
      ? Math.abs(numeric(n[2]))
      : 1;
    var test = lte;
    var reverse = y < x;
    if (reverse) {
      incr *= -1;
      test = gte;
    }
    var pad = n.some(isPadded);

    N = [];

    for (var i = x; test(i, y); i += incr) {
      var c;
      if (isAlphaSequence) {
        c = String.fromCharCode(i);
        if (c === '\\')
          c = '';
      } else {
        c = String(i);
        if (pad) {
          var need = width - c.length;
          if (need > 0) {
            var z = new Array(need + 1).join('0');
            if (i < 0)
              c = '-' + z + c.slice(1);
            else
              c = z + c;
          }
        }
      }
      N.push(c);
    }
  } else {
    N = concatMap(n, function(el) { return expand(el, false) });
  }

  for (var j = 0; j < N.length; j++) {
    for (var k = 0; k < post.length; k++) {
      var expansion = pre + N[j] + post[k];
      if (!isTop || isSequence || expansion)
        expansions.push(expansion);
    }
  }

  return expansions;
}



/***/ }),

/***/ 8307:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

/* istanbul ignore file - tricky to import some things from this module during testing */
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.Parser = exports.generateParserModule = exports.generateParserFactory = exports.createSyntaxDiagramsCode = exports.clearCache = exports.validateGrammar = exports.resolveGrammar = exports.assignOccurrenceIndices = exports.GAstVisitor = exports.serializeProduction = exports.serializeGrammar = exports.Terminal = exports.Rule = exports.RepetitionWithSeparator = exports.RepetitionMandatoryWithSeparator = exports.RepetitionMandatory = exports.Repetition = exports.Option = exports.NonTerminal = exports.Alternative = exports.Alternation = exports.defaultLexerErrorProvider = exports.NoViableAltException = exports.NotAllInputParsedException = exports.MismatchedTokenException = exports.isRecognitionException = exports.EarlyExitException = exports.defaultParserErrorProvider = exports.defaultGrammarValidatorErrorProvider = exports.defaultGrammarResolverErrorProvider = exports.tokenName = exports.tokenMatcher = exports.tokenLabel = exports.EOF = exports.createTokenInstance = exports.createToken = exports.LexerDefinitionErrorType = exports.Lexer = exports.EMPTY_ALT = exports.ParserDefinitionErrorType = exports.EmbeddedActionsParser = exports.CstParser = exports.VERSION = void 0;
// semantic version
var version_1 = __webpack_require__(2376);
Object.defineProperty(exports, "VERSION", ({ enumerable: true, get: function () { return version_1.VERSION; } }));
var parser_1 = __webpack_require__(602);
Object.defineProperty(exports, "CstParser", ({ enumerable: true, get: function () { return parser_1.CstParser; } }));
Object.defineProperty(exports, "EmbeddedActionsParser", ({ enumerable: true, get: function () { return parser_1.EmbeddedActionsParser; } }));
Object.defineProperty(exports, "ParserDefinitionErrorType", ({ enumerable: true, get: function () { return parser_1.ParserDefinitionErrorType; } }));
Object.defineProperty(exports, "EMPTY_ALT", ({ enumerable: true, get: function () { return parser_1.EMPTY_ALT; } }));
var lexer_public_1 = __webpack_require__(2595);
Object.defineProperty(exports, "Lexer", ({ enumerable: true, get: function () { return lexer_public_1.Lexer; } }));
Object.defineProperty(exports, "LexerDefinitionErrorType", ({ enumerable: true, get: function () { return lexer_public_1.LexerDefinitionErrorType; } }));
// Tokens utilities
var tokens_public_1 = __webpack_require__(8497);
Object.defineProperty(exports, "createToken", ({ enumerable: true, get: function () { return tokens_public_1.createToken; } }));
Object.defineProperty(exports, "createTokenInstance", ({ enumerable: true, get: function () { return tokens_public_1.createTokenInstance; } }));
Object.defineProperty(exports, "EOF", ({ enumerable: true, get: function () { return tokens_public_1.EOF; } }));
Object.defineProperty(exports, "tokenLabel", ({ enumerable: true, get: function () { return tokens_public_1.tokenLabel; } }));
Object.defineProperty(exports, "tokenMatcher", ({ enumerable: true, get: function () { return tokens_public_1.tokenMatcher; } }));
Object.defineProperty(exports, "tokenName", ({ enumerable: true, get: function () { return tokens_public_1.tokenName; } }));
// Other Utilities
var errors_public_1 = __webpack_require__(8376);
Object.defineProperty(exports, "defaultGrammarResolverErrorProvider", ({ enumerable: true, get: function () { return errors_public_1.defaultGrammarResolverErrorProvider; } }));
Object.defineProperty(exports, "defaultGrammarValidatorErrorProvider", ({ enumerable: true, get: function () { return errors_public_1.defaultGrammarValidatorErrorProvider; } }));
Object.defineProperty(exports, "defaultParserErrorProvider", ({ enumerable: true, get: function () { return errors_public_1.defaultParserErrorProvider; } }));
var exceptions_public_1 = __webpack_require__(172);
Object.defineProperty(exports, "EarlyExitException", ({ enumerable: true, get: function () { return exceptions_public_1.EarlyExitException; } }));
Object.defineProperty(exports, "isRecognitionException", ({ enumerable: true, get: function () { return exceptions_public_1.isRecognitionException; } }));
Object.defineProperty(exports, "MismatchedTokenException", ({ enumerable: true, get: function () { return exceptions_public_1.MismatchedTokenException; } }));
Object.defineProperty(exports, "NotAllInputParsedException", ({ enumerable: true, get: function () { return exceptions_public_1.NotAllInputParsedException; } }));
Object.defineProperty(exports, "NoViableAltException", ({ enumerable: true, get: function () { return exceptions_public_1.NoViableAltException; } }));
var lexer_errors_public_1 = __webpack_require__(1940);
Object.defineProperty(exports, "defaultLexerErrorProvider", ({ enumerable: true, get: function () { return lexer_errors_public_1.defaultLexerErrorProvider; } }));
// grammar reflection API
var gast_public_1 = __webpack_require__(5129);
Object.defineProperty(exports, "Alternation", ({ enumerable: true, get: function () { return gast_public_1.Alternation; } }));
Object.defineProperty(exports, "Alternative", ({ enumerable: true, get: function () { return gast_public_1.Alternative; } }));
Object.defineProperty(exports, "NonTerminal", ({ enumerable: true, get: function () { return gast_public_1.NonTerminal; } }));
Object.defineProperty(exports, "Option", ({ enumerable: true, get: function () { return gast_public_1.Option; } }));
Object.defineProperty(exports, "Repetition", ({ enumerable: true, get: function () { return gast_public_1.Repetition; } }));
Object.defineProperty(exports, "RepetitionMandatory", ({ enumerable: true, get: function () { return gast_public_1.RepetitionMandatory; } }));
Object.defineProperty(exports, "RepetitionMandatoryWithSeparator", ({ enumerable: true, get: function () { return gast_public_1.RepetitionMandatoryWithSeparator; } }));
Object.defineProperty(exports, "RepetitionWithSeparator", ({ enumerable: true, get: function () { return gast_public_1.RepetitionWithSeparator; } }));
Object.defineProperty(exports, "Rule", ({ enumerable: true, get: function () { return gast_public_1.Rule; } }));
Object.defineProperty(exports, "Terminal", ({ enumerable: true, get: function () { return gast_public_1.Terminal; } }));
// GAST Utilities
var gast_public_2 = __webpack_require__(5129);
Object.defineProperty(exports, "serializeGrammar", ({ enumerable: true, get: function () { return gast_public_2.serializeGrammar; } }));
Object.defineProperty(exports, "serializeProduction", ({ enumerable: true, get: function () { return gast_public_2.serializeProduction; } }));
var gast_visitor_public_1 = __webpack_require__(2671);
Object.defineProperty(exports, "GAstVisitor", ({ enumerable: true, get: function () { return gast_visitor_public_1.GAstVisitor; } }));
var gast_resolver_public_1 = __webpack_require__(3629);
Object.defineProperty(exports, "assignOccurrenceIndices", ({ enumerable: true, get: function () { return gast_resolver_public_1.assignOccurrenceIndices; } }));
Object.defineProperty(exports, "resolveGrammar", ({ enumerable: true, get: function () { return gast_resolver_public_1.resolveGrammar; } }));
Object.defineProperty(exports, "validateGrammar", ({ enumerable: true, get: function () { return gast_resolver_public_1.validateGrammar; } }));
/* istanbul ignore next */
function clearCache() {
    console.warn("The clearCache function was 'soft' removed from the Chevrotain API." +
        "\n\t It performs no action other than printing this message." +
        "\n\t Please avoid using it as it will be completely removed in the future");
}
exports.clearCache = clearCache;
var render_public_1 = __webpack_require__(1383);
Object.defineProperty(exports, "createSyntaxDiagramsCode", ({ enumerable: true, get: function () { return render_public_1.createSyntaxDiagramsCode; } }));
var generate_public_1 = __webpack_require__(5771);
Object.defineProperty(exports, "generateParserFactory", ({ enumerable: true, get: function () { return generate_public_1.generateParserFactory; } }));
Object.defineProperty(exports, "generateParserModule", ({ enumerable: true, get: function () { return generate_public_1.generateParserModule; } }));
var Parser = /** @class */ (function () {
    function Parser() {
        throw new Error("The Parser class has been deprecated, use CstParser or EmbeddedActionsParser instead.\t\n" +
            "See: https://sap.github.io/chevrotain/docs/changes/BREAKING_CHANGES.html#_7-0-0");
    }
    return Parser;
}());
exports.Parser = Parser;
//# sourceMappingURL=api.js.map

/***/ }),

/***/ 1383:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.createSyntaxDiagramsCode = void 0;
var version_1 = __webpack_require__(2376);
function createSyntaxDiagramsCode(grammar, _a) {
    var _b = _a === void 0 ? {} : _a, _c = _b.resourceBase, resourceBase = _c === void 0 ? "https://unpkg.com/chevrotain@" + version_1.VERSION + "/diagrams/" : _c, _d = _b.css, css = _d === void 0 ? "https://unpkg.com/chevrotain@" + version_1.VERSION + "/diagrams/diagrams.css" : _d;
    var header = "\n<!-- This is a generated file -->\n<!DOCTYPE html>\n<meta charset=\"utf-8\">\n<style>\n  body {\n    background-color: hsl(30, 20%, 95%)\n  }\n</style>\n\n";
    var cssHtml = "\n<link rel='stylesheet' href='" + css + "'>\n";
    var scripts = "\n<script src='" + resourceBase + "vendor/railroad-diagrams.js'></script>\n<script src='" + resourceBase + "src/diagrams_builder.js'></script>\n<script src='" + resourceBase + "src/diagrams_behavior.js'></script>\n<script src='" + resourceBase + "src/main.js'></script>\n";
    var diagramsDiv = "\n<div id=\"diagrams\" align=\"center\"></div>    \n";
    var serializedGrammar = "\n<script>\n    window.serializedGrammar = " + JSON.stringify(grammar, null, "  ") + ";\n</script>\n";
    var initLogic = "\n<script>\n    var diagramsDiv = document.getElementById(\"diagrams\");\n    main.drawDiagramsFromSerializedGrammar(serializedGrammar, diagramsDiv);\n</script>\n";
    return (header + cssHtml + scripts + diagramsDiv + serializedGrammar + initLogic);
}
exports.createSyntaxDiagramsCode = createSyntaxDiagramsCode;
//# sourceMappingURL=render_public.js.map

/***/ }),

/***/ 2650:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.genSingleAlt = exports.genAlternation = exports.genNonTerminal = exports.genTerminal = exports.genRule = exports.genAllRules = exports.genClass = exports.genWrapperFunction = exports.genUmdModule = void 0;
var utils_1 = __webpack_require__(3739);
var gast_public_1 = __webpack_require__(5129);
/**
 * Missing features
 * 1. Rule arguments
 * 2. Gates
 * 3. embedded actions
 */
var NL = "\n";
function genUmdModule(options) {
    return "\n(function (root, factory) {\n    if (typeof define === 'function' && define.amd) {\n        // AMD. Register as an anonymous module.\n        define(['chevrotain'], factory);\n    } else if (typeof module === 'object' && module.exports) {\n        // Node. Does not work with strict CommonJS, but\n        // only CommonJS-like environments that support module.exports,\n        // like Node.\n        module.exports = factory(require('chevrotain'));\n    } else {\n        // Browser globals (root is window)\n        root.returnExports = factory(root.b);\n    }\n}(typeof self !== 'undefined' ? self : this, function (chevrotain) {\n\n" + genClass(options) + "\n    \nreturn {\n    " + options.name + ": " + options.name + " \n}\n}));\n";
}
exports.genUmdModule = genUmdModule;
function genWrapperFunction(options) {
    return "    \n" + genClass(options) + "\nreturn new " + options.name + "(tokenVocabulary, config)    \n";
}
exports.genWrapperFunction = genWrapperFunction;
function genClass(options) {
    // TODO: how to pass the token vocabulary? Constructor? other?
    var result = "\nfunction " + options.name + "(tokenVocabulary, config) {\n    // invoke super constructor\n    // No support for embedded actions currently, so we can 'hardcode'\n    // The use of CstParser.\n    chevrotain.CstParser.call(this, tokenVocabulary, config)\n\n    const $ = this\n\n    " + genAllRules(options.rules) + "\n\n    // very important to call this after all the rules have been defined.\n    // otherwise the parser may not work correctly as it will lack information\n    // derived during the self analysis phase.\n    this.performSelfAnalysis(this)\n}\n\n// inheritance as implemented in javascript in the previous decade... :(\n" + options.name + ".prototype = Object.create(chevrotain.CstParser.prototype)\n" + options.name + ".prototype.constructor = " + options.name + "    \n    ";
    return result;
}
exports.genClass = genClass;
function genAllRules(rules) {
    var rulesText = utils_1.map(rules, function (currRule) {
        return genRule(currRule, 1);
    });
    return rulesText.join("\n");
}
exports.genAllRules = genAllRules;
function genRule(prod, n) {
    var result = indent(n, "$.RULE(\"" + prod.name + "\", function() {") + NL;
    result += genDefinition(prod.definition, n + 1);
    result += indent(n + 1, "})") + NL;
    return result;
}
exports.genRule = genRule;
function genTerminal(prod, n) {
    var name = prod.terminalType.name;
    // TODO: potential performance optimization, avoid tokenMap Dictionary access
    return indent(n, "$.CONSUME" + prod.idx + "(this.tokensMap." + name + ")" + NL);
}
exports.genTerminal = genTerminal;
function genNonTerminal(prod, n) {
    return indent(n, "$.SUBRULE" + prod.idx + "($." + prod.nonTerminalName + ")" + NL);
}
exports.genNonTerminal = genNonTerminal;
function genAlternation(prod, n) {
    var result = indent(n, "$.OR" + prod.idx + "([") + NL;
    var alts = utils_1.map(prod.definition, function (altDef) { return genSingleAlt(altDef, n + 1); });
    result += alts.join("," + NL);
    result += NL + indent(n, "])" + NL);
    return result;
}
exports.genAlternation = genAlternation;
function genSingleAlt(prod, n) {
    var result = indent(n, "{") + NL;
    result += indent(n + 1, "ALT: function() {") + NL;
    result += genDefinition(prod.definition, n + 1);
    result += indent(n + 1, "}") + NL;
    result += indent(n, "}");
    return result;
}
exports.genSingleAlt = genSingleAlt;
function genProd(prod, n) {
    /* istanbul ignore else */
    if (prod instanceof gast_public_1.NonTerminal) {
        return genNonTerminal(prod, n);
    }
    else if (prod instanceof gast_public_1.Option) {
        return genDSLRule("OPTION", prod, n);
    }
    else if (prod instanceof gast_public_1.RepetitionMandatory) {
        return genDSLRule("AT_LEAST_ONE", prod, n);
    }
    else if (prod instanceof gast_public_1.RepetitionMandatoryWithSeparator) {
        return genDSLRule("AT_LEAST_ONE_SEP", prod, n);
    }
    else if (prod instanceof gast_public_1.RepetitionWithSeparator) {
        return genDSLRule("MANY_SEP", prod, n);
    }
    else if (prod instanceof gast_public_1.Repetition) {
        return genDSLRule("MANY", prod, n);
    }
    else if (prod instanceof gast_public_1.Alternation) {
        return genAlternation(prod, n);
    }
    else if (prod instanceof gast_public_1.Terminal) {
        return genTerminal(prod, n);
    }
    else if (prod instanceof gast_public_1.Alternative) {
        return genDefinition(prod.definition, n);
    }
    else {
        throw Error("non exhaustive match");
    }
}
function genDSLRule(dslName, prod, n) {
    var result = indent(n, "$." + (dslName + prod.idx) + "(");
    if (prod.separator) {
        result += "{" + NL;
        result +=
            indent(n + 1, "SEP: this.tokensMap." + prod.separator.name) + "," + NL;
        result += "DEF: " + genDefFunction(prod.definition, n + 2) + NL;
        result += indent(n, "}") + NL;
    }
    else {
        result += genDefFunction(prod.definition, n + 1);
    }
    result += indent(n, ")") + NL;
    return result;
}
function genDefFunction(definition, n) {
    var def = "function() {" + NL;
    def += genDefinition(definition, n);
    def += indent(n, "}") + NL;
    return def;
}
function genDefinition(def, n) {
    var result = "";
    utils_1.forEach(def, function (prod) {
        result += genProd(prod, n + 1);
    });
    return result;
}
function indent(howMuch, text) {
    var spaces = Array(howMuch * 4 + 1).join(" ");
    return spaces + text;
}
//# sourceMappingURL=generate.js.map

/***/ }),

/***/ 5771:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.generateParserModule = exports.generateParserFactory = void 0;
var generate_1 = __webpack_require__(2650);
function generateParserFactory(options) {
    var wrapperText = generate_1.genWrapperFunction({
        name: options.name,
        rules: options.rules
    });
    var constructorWrapper = new Function("tokenVocabulary", "config", "chevrotain", wrapperText);
    return function (config) {
        return constructorWrapper(options.tokenVocabulary, config, 
        // TODO: check how the require is transpiled/webpacked
        __webpack_require__(8307));
    };
}
exports.generateParserFactory = generateParserFactory;
function generateParserModule(options) {
    return generate_1.genUmdModule({ name: options.name, rules: options.rules });
}
exports.generateParserModule = generateParserModule;
//# sourceMappingURL=generate_public.js.map

/***/ }),

/***/ 7256:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.defineNameProp = exports.functionName = exports.classNameFromInstance = void 0;
var utils_1 = __webpack_require__(3739);
function classNameFromInstance(instance) {
    return functionName(instance.constructor);
}
exports.classNameFromInstance = classNameFromInstance;
var NAME = "name";
/**
 * Utility to obtain Function names.
 * Note that there should not be an assumptions on the result of this function.
 * E.g: When running from minified source code the result may be auto generated.
 */
function functionName(func) {
    // Engines that support Function.prototype.name OR the nth (n>1) time after
    // the name has been computed in the following else block.
    var existingNameProp = func.name;
    /* istanbul ignore else - too many hacks for IE/old versions of node.js here*/
    if (existingNameProp) {
        return existingNameProp;
    }
    else {
        return "anonymous";
    }
}
exports.functionName = functionName;
/**
 * @returns {boolean} - has the property been successfully defined
 */
function defineNameProp(obj, nameValue) {
    var namePropDescriptor = Object.getOwnPropertyDescriptor(obj, NAME);
    /* istanbul ignore else -> will only run in old versions of node.js */
    if (utils_1.isUndefined(namePropDescriptor) || namePropDescriptor.configurable) {
        Object.defineProperty(obj, NAME, {
            enumerable: false,
            configurable: true,
            writable: false,
            value: nameValue
        });
        return true;
    }
    /* istanbul ignore next -> will only run in old versions of node.js */
    return false;
}
exports.defineNameProp = defineNameProp;
//# sourceMappingURL=lang_extensions.js.map

/***/ }),

/***/ 469:
/***/ ((__unused_webpack_module, exports) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.IN = void 0;
// TODO: can this be removed? where is it used?
exports.IN = "_~IN~_";
//# sourceMappingURL=constants.js.map

/***/ }),

/***/ 4678:
/***/ ((__unused_webpack_module, exports) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.addNoneTerminalToCst = exports.addTerminalToCst = exports.setNodeLocationFull = exports.setNodeLocationOnlyOffset = void 0;
/**
 * This nodeLocation tracking is not efficient and should only be used
 * when error recovery is enabled or the Token Vector contains virtual Tokens
 * (e.g, Python Indent/Outdent)
 * As it executes the calculation for every single terminal/nonTerminal
 * and does not rely on the fact the token vector is **sorted**
 */
function setNodeLocationOnlyOffset(currNodeLocation, newLocationInfo) {
    // First (valid) update for this cst node
    if (isNaN(currNodeLocation.startOffset) === true) {
        // assumption1: Token location information is either NaN or a valid number
        // assumption2: Token location information is fully valid if it exist
        // (both start/end offsets exist and are numbers).
        currNodeLocation.startOffset = newLocationInfo.startOffset;
        currNodeLocation.endOffset = newLocationInfo.endOffset;
    }
    // Once the startOffset has been updated with a valid number it should never receive
    // any farther updates as the Token vector is sorted.
    // We still have to check this this condition for every new possible location info
    // because with error recovery enabled we may encounter invalid tokens (NaN location props)
    else if (currNodeLocation.endOffset < newLocationInfo.endOffset === true) {
        currNodeLocation.endOffset = newLocationInfo.endOffset;
    }
}
exports.setNodeLocationOnlyOffset = setNodeLocationOnlyOffset;
/**
 * This nodeLocation tracking is not efficient and should only be used
 * when error recovery is enabled or the Token Vector contains virtual Tokens
 * (e.g, Python Indent/Outdent)
 * As it executes the calculation for every single terminal/nonTerminal
 * and does not rely on the fact the token vector is **sorted**
 */
function setNodeLocationFull(currNodeLocation, newLocationInfo) {
    // First (valid) update for this cst node
    if (isNaN(currNodeLocation.startOffset) === true) {
        // assumption1: Token location information is either NaN or a valid number
        // assumption2: Token location information is fully valid if it exist
        // (all start/end props exist and are numbers).
        currNodeLocation.startOffset = newLocationInfo.startOffset;
        currNodeLocation.startColumn = newLocationInfo.startColumn;
        currNodeLocation.startLine = newLocationInfo.startLine;
        currNodeLocation.endOffset = newLocationInfo.endOffset;
        currNodeLocation.endColumn = newLocationInfo.endColumn;
        currNodeLocation.endLine = newLocationInfo.endLine;
    }
    // Once the start props has been updated with a valid number it should never receive
    // any farther updates as the Token vector is sorted.
    // We still have to check this this condition for every new possible location info
    // because with error recovery enabled we may encounter invalid tokens (NaN location props)
    else if (currNodeLocation.endOffset < newLocationInfo.endOffset === true) {
        currNodeLocation.endOffset = newLocationInfo.endOffset;
        currNodeLocation.endColumn = newLocationInfo.endColumn;
        currNodeLocation.endLine = newLocationInfo.endLine;
    }
}
exports.setNodeLocationFull = setNodeLocationFull;
function addTerminalToCst(node, token, tokenTypeName) {
    if (node.children[tokenTypeName] === undefined) {
        node.children[tokenTypeName] = [token];
    }
    else {
        node.children[tokenTypeName].push(token);
    }
}
exports.addTerminalToCst = addTerminalToCst;
function addNoneTerminalToCst(node, ruleName, ruleResult) {
    if (node.children[ruleName] === undefined) {
        node.children[ruleName] = [ruleResult];
    }
    else {
        node.children[ruleName].push(ruleResult);
    }
}
exports.addNoneTerminalToCst = addNoneTerminalToCst;
//# sourceMappingURL=cst.js.map

/***/ }),

/***/ 2784:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.validateRedundantMethods = exports.validateMissingCstMethods = exports.validateVisitor = exports.CstVisitorDefinitionError = exports.createBaseVisitorConstructorWithDefaults = exports.createBaseSemanticVisitorConstructor = exports.defaultVisit = void 0;
var utils_1 = __webpack_require__(3739);
var lang_extensions_1 = __webpack_require__(7256);
var checks_1 = __webpack_require__(3155);
function defaultVisit(ctx, param) {
    var childrenNames = utils_1.keys(ctx);
    var childrenNamesLength = childrenNames.length;
    for (var i = 0; i < childrenNamesLength; i++) {
        var currChildName = childrenNames[i];
        var currChildArray = ctx[currChildName];
        var currChildArrayLength = currChildArray.length;
        for (var j = 0; j < currChildArrayLength; j++) {
            var currChild = currChildArray[j];
            // distinction between Tokens Children and CstNode children
            if (currChild.tokenTypeIdx === undefined) {
                this[currChild.name](currChild.children, param);
            }
        }
    }
    // defaultVisit does not support generic out param
    return undefined;
}
exports.defaultVisit = defaultVisit;
function createBaseSemanticVisitorConstructor(grammarName, ruleNames) {
    var derivedConstructor = function () { };
    // can be overwritten according to:
    // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/
    // name?redirectlocale=en-US&redirectslug=JavaScript%2FReference%2FGlobal_Objects%2FFunction%2Fname
    lang_extensions_1.defineNameProp(derivedConstructor, grammarName + "BaseSemantics");
    var semanticProto = {
        visit: function (cstNode, param) {
            // enables writing more concise visitor methods when CstNode has only a single child
            if (utils_1.isArray(cstNode)) {
                // A CST Node's children dictionary can never have empty arrays as values
                // If a key is defined there will be at least one element in the corresponding value array.
                cstNode = cstNode[0];
            }
            // enables passing optional CstNodes concisely.
            if (utils_1.isUndefined(cstNode)) {
                return undefined;
            }
            return this[cstNode.name](cstNode.children, param);
        },
        validateVisitor: function () {
            var semanticDefinitionErrors = validateVisitor(this, ruleNames);
            if (!utils_1.isEmpty(semanticDefinitionErrors)) {
                var errorMessages = utils_1.map(semanticDefinitionErrors, function (currDefError) { return currDefError.msg; });
                throw Error("Errors Detected in CST Visitor <" + lang_extensions_1.functionName(this.constructor) + ">:\n\t" + ("" + errorMessages.join("\n\n").replace(/\n/g, "\n\t")));
            }
        }
    };
    derivedConstructor.prototype = semanticProto;
    derivedConstructor.prototype.constructor = derivedConstructor;
    derivedConstructor._RULE_NAMES = ruleNames;
    return derivedConstructor;
}
exports.createBaseSemanticVisitorConstructor = createBaseSemanticVisitorConstructor;
function createBaseVisitorConstructorWithDefaults(grammarName, ruleNames, baseConstructor) {
    var derivedConstructor = function () { };
    // can be overwritten according to:
    // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/
    // name?redirectlocale=en-US&redirectslug=JavaScript%2FReference%2FGlobal_Objects%2FFunction%2Fname
    lang_extensions_1.defineNameProp(derivedConstructor, grammarName + "BaseSemanticsWithDefaults");
    var withDefaultsProto = Object.create(baseConstructor.prototype);
    utils_1.forEach(ruleNames, function (ruleName) {
        withDefaultsProto[ruleName] = defaultVisit;
    });
    derivedConstructor.prototype = withDefaultsProto;
    derivedConstructor.prototype.constructor = derivedConstructor;
    return derivedConstructor;
}
exports.createBaseVisitorConstructorWithDefaults = createBaseVisitorConstructorWithDefaults;
var CstVisitorDefinitionError;
(function (CstVisitorDefinitionError) {
    CstVisitorDefinitionError[CstVisitorDefinitionError["REDUNDANT_METHOD"] = 0] = "REDUNDANT_METHOD";
    CstVisitorDefinitionError[CstVisitorDefinitionError["MISSING_METHOD"] = 1] = "MISSING_METHOD";
})(CstVisitorDefinitionError = exports.CstVisitorDefinitionError || (exports.CstVisitorDefinitionError = {}));
function validateVisitor(visitorInstance, ruleNames) {
    var missingErrors = validateMissingCstMethods(visitorInstance, ruleNames);
    var redundantErrors = validateRedundantMethods(visitorInstance, ruleNames);
    return missingErrors.concat(redundantErrors);
}
exports.validateVisitor = validateVisitor;
function validateMissingCstMethods(visitorInstance, ruleNames) {
    var errors = utils_1.map(ruleNames, function (currRuleName) {
        if (!utils_1.isFunction(visitorInstance[currRuleName])) {
            return {
                msg: "Missing visitor method: <" + currRuleName + "> on " + lang_extensions_1.functionName(visitorInstance.constructor) + " CST Visitor.",
                type: CstVisitorDefinitionError.MISSING_METHOD,
                methodName: currRuleName
            };
        }
    });
    return utils_1.compact(errors);
}
exports.validateMissingCstMethods = validateMissingCstMethods;
var VALID_PROP_NAMES = ["constructor", "visit", "validateVisitor"];
function validateRedundantMethods(visitorInstance, ruleNames) {
    var errors = [];
    for (var prop in visitorInstance) {
        if (checks_1.validTermsPattern.test(prop) &&
            utils_1.isFunction(visitorInstance[prop]) &&
            !utils_1.contains(VALID_PROP_NAMES, prop) &&
            !utils_1.contains(ruleNames, prop)) {
            errors.push({
                msg: "Redundant visitor method: <" + prop + "> on " + lang_extensions_1.functionName(visitorInstance.constructor) + " CST Visitor\n" +
                    "There is no Grammar Rule corresponding to this method's name.\n" +
                    ("For utility methods on visitor classes use methods names that do not match /" + checks_1.validTermsPattern.source + "/."),
                type: CstVisitorDefinitionError.REDUNDANT_METHOD,
                methodName: prop
            });
        }
    }
    return errors;
}
exports.validateRedundantMethods = validateRedundantMethods;
//# sourceMappingURL=cst_visitor.js.map

/***/ }),

/***/ 8376:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.defaultGrammarValidatorErrorProvider = exports.defaultGrammarResolverErrorProvider = exports.defaultParserErrorProvider = void 0;
var tokens_public_1 = __webpack_require__(8497);
var utils = __webpack_require__(3739);
var utils_1 = __webpack_require__(3739);
var gast_public_1 = __webpack_require__(5129);
var gast_1 = __webpack_require__(1487);
exports.defaultParserErrorProvider = {
    buildMismatchTokenMessage: function (_a) {
        var expected = _a.expected, actual = _a.actual, previous = _a.previous, ruleName = _a.ruleName;
        var hasLabel = tokens_public_1.hasTokenLabel(expected);
        var expectedMsg = hasLabel
            ? "--> " + tokens_public_1.tokenLabel(expected) + " <--"
            : "token of type --> " + expected.name + " <--";
        var msg = "Expecting " + expectedMsg + " but found --> '" + actual.image + "' <--";
        return msg;
    },
    buildNotAllInputParsedMessage: function (_a) {
        var firstRedundant = _a.firstRedundant, ruleName = _a.ruleName;
        return "Redundant input, expecting EOF but found: " + firstRedundant.image;
    },
    buildNoViableAltMessage: function (_a) {
        var expectedPathsPerAlt = _a.expectedPathsPerAlt, actual = _a.actual, previous = _a.previous, customUserDescription = _a.customUserDescription, ruleName = _a.ruleName;
        var errPrefix = "Expecting: ";
        // TODO: issue: No Viable Alternative Error may have incomplete details. #502
        var actualText = utils_1.first(actual).image;
        var errSuffix = "\nbut found: '" + actualText + "'";
        if (customUserDescription) {
            return errPrefix + customUserDescription + errSuffix;
        }
        else {
            var allLookAheadPaths = utils_1.reduce(expectedPathsPerAlt, function (result, currAltPaths) { return result.concat(currAltPaths); }, []);
            var nextValidTokenSequences = utils_1.map(allLookAheadPaths, function (currPath) {
                return "[" + utils_1.map(currPath, function (currTokenType) { return tokens_public_1.tokenLabel(currTokenType); }).join(", ") + "]";
            });
            var nextValidSequenceItems = utils_1.map(nextValidTokenSequences, function (itemMsg, idx) { return "  " + (idx + 1) + ". " + itemMsg; });
            var calculatedDescription = "one of these possible Token sequences:\n" + nextValidSequenceItems.join("\n");
            return errPrefix + calculatedDescription + errSuffix;
        }
    },
    buildEarlyExitMessage: function (_a) {
        var expectedIterationPaths = _a.expectedIterationPaths, actual = _a.actual, customUserDescription = _a.customUserDescription, ruleName = _a.ruleName;
        var errPrefix = "Expecting: ";
        // TODO: issue: No Viable Alternative Error may have incomplete details. #502
        var actualText = utils_1.first(actual).image;
        var errSuffix = "\nbut found: '" + actualText + "'";
        if (customUserDescription) {
            return errPrefix + customUserDescription + errSuffix;
        }
        else {
            var nextValidTokenSequences = utils_1.map(expectedIterationPaths, function (currPath) {
                return "[" + utils_1.map(currPath, function (currTokenType) { return tokens_public_1.tokenLabel(currTokenType); }).join(",") + "]";
            });
            var calculatedDescription = "expecting at least one iteration which starts with one of these possible Token sequences::\n  " +
                ("<" + nextValidTokenSequences.join(" ,") + ">");
            return errPrefix + calculatedDescription + errSuffix;
        }
    }
};
Object.freeze(exports.defaultParserErrorProvider);
exports.defaultGrammarResolverErrorProvider = {
    buildRuleNotFoundError: function (topLevelRule, undefinedRule) {
        var msg = "Invalid grammar, reference to a rule which is not defined: ->" +
            undefinedRule.nonTerminalName +
            "<-\n" +
            "inside top level rule: ->" +
            topLevelRule.name +
            "<-";
        return msg;
    }
};
exports.defaultGrammarValidatorErrorProvider = {
    buildDuplicateFoundError: function (topLevelRule, duplicateProds) {
        function getExtraProductionArgument(prod) {
            if (prod instanceof gast_public_1.Terminal) {
                return prod.terminalType.name;
            }
            else if (prod instanceof gast_public_1.NonTerminal) {
                return prod.nonTerminalName;
            }
            else {
                return "";
            }
        }
        var topLevelName = topLevelRule.name;
        var duplicateProd = utils_1.first(duplicateProds);
        var index = duplicateProd.idx;
        var dslName = gast_1.getProductionDslName(duplicateProd);
        var extraArgument = getExtraProductionArgument(duplicateProd);
        var hasExplicitIndex = index > 0;
        var msg = "->" + dslName + (hasExplicitIndex ? index : "") + "<- " + (extraArgument ? "with argument: ->" + extraArgument + "<-" : "") + "\n                  appears more than once (" + duplicateProds.length + " times) in the top level rule: ->" + topLevelName + "<-.                  \n                  For further details see: https://sap.github.io/chevrotain/docs/FAQ.html#NUMERICAL_SUFFIXES \n                  ";
        // white space trimming time! better to trim afterwards as it allows to use WELL formatted multi line template strings...
        msg = msg.replace(/[ \t]+/g, " ");
        msg = msg.replace(/\s\s+/g, "\n");
        return msg;
    },
    buildNamespaceConflictError: function (rule) {
        var errMsg = "Namespace conflict found in grammar.\n" +
            ("The grammar has both a Terminal(Token) and a Non-Terminal(Rule) named: <" + rule.name + ">.\n") +
            "To resolve this make sure each Terminal and Non-Terminal names are unique\n" +
            "This is easy to accomplish by using the convention that Terminal names start with an uppercase letter\n" +
            "and Non-Terminal names start with a lower case letter.";
        return errMsg;
    },
    buildAlternationPrefixAmbiguityError: function (options) {
        var pathMsg = utils_1.map(options.prefixPath, function (currTok) {
            return tokens_public_1.tokenLabel(currTok);
        }).join(", ");
        var occurrence = options.alternation.idx === 0 ? "" : options.alternation.idx;
        var errMsg = "Ambiguous alternatives: <" + options.ambiguityIndices.join(" ,") + "> due to common lookahead prefix\n" +
            ("in <OR" + occurrence + "> inside <" + options.topLevelRule.name + "> Rule,\n") +
            ("<" + pathMsg + "> may appears as a prefix path in all these alternatives.\n") +
            "See: https://sap.github.io/chevrotain/docs/guide/resolving_grammar_errors.html#COMMON_PREFIX\n" +
            "For Further details.";
        return errMsg;
    },
    buildAlternationAmbiguityError: function (options) {
        var pathMsg = utils_1.map(options.prefixPath, function (currtok) {
            return tokens_public_1.tokenLabel(currtok);
        }).join(", ");
        var occurrence = options.alternation.idx === 0 ? "" : options.alternation.idx;
        var currMessage = "Ambiguous Alternatives Detected: <" + options.ambiguityIndices.join(" ,") + "> in <OR" + occurrence + ">" +
            (" inside <" + options.topLevelRule.name + "> Rule,\n") +
            ("<" + pathMsg + "> may appears as a prefix path in all these alternatives.\n");
        currMessage =
            currMessage +
                "See: https://sap.github.io/chevrotain/docs/guide/resolving_grammar_errors.html#AMBIGUOUS_ALTERNATIVES\n" +
                "For Further details.";
        return currMessage;
    },
    buildEmptyRepetitionError: function (options) {
        var dslName = gast_1.getProductionDslName(options.repetition);
        if (options.repetition.idx !== 0) {
            dslName += options.repetition.idx;
        }
        var errMsg = "The repetition <" + dslName + "> within Rule <" + options.topLevelRule.name + "> can never consume any tokens.\n" +
            "This could lead to an infinite loop.";
        return errMsg;
    },
    buildTokenNameError: function (options) {
        var tokTypeName = options.tokenType.name;
        var errMsg = "Invalid Grammar Token name: ->" + tokTypeName + "<- it must match the pattern: ->" + options.expectedPattern.toString() + "<-";
        return errMsg;
    },
    buildEmptyAlternationError: function (options) {
        var errMsg = "Ambiguous empty alternative: <" + (options.emptyChoiceIdx + 1) + ">" +
            (" in <OR" + options.alternation.idx + "> inside <" + options.topLevelRule.name + "> Rule.\n") +
            "Only the last alternative may be an empty alternative.";
        return errMsg;
    },
    buildTooManyAlternativesError: function (options) {
        var errMsg = "An Alternation cannot have more than 256 alternatives:\n" +
            ("<OR" + options.alternation.idx + "> inside <" + options.topLevelRule.name + "> Rule.\n has " + (options.alternation.definition.length + 1) + " alternatives.");
        return errMsg;
    },
    buildLeftRecursionError: function (options) {
        var ruleName = options.topLevelRule.name;
        var pathNames = utils.map(options.leftRecursionPath, function (currRule) { return currRule.name; });
        var leftRecursivePath = ruleName + " --> " + pathNames
            .concat([ruleName])
            .join(" --> ");
        var errMsg = "Left Recursion found in grammar.\n" +
            ("rule: <" + ruleName + "> can be invoked from itself (directly or indirectly)\n") +
            ("without consuming any Tokens. The grammar path that causes this is: \n " + leftRecursivePath + "\n") +
            " To fix this refactor your grammar to remove the left recursion.\n" +
            "see: https://en.wikipedia.org/wiki/LL_parser#Left_Factoring.";
        return errMsg;
    },
    buildInvalidRuleNameError: function (options) {
        var ruleName = options.topLevelRule.name;
        var expectedPatternString = options.expectedPattern.toString();
        var errMsg = "Invalid grammar rule name: ->" + ruleName + "<- it must match the pattern: ->" + expectedPatternString + "<-";
        return errMsg;
    },
    buildDuplicateRuleNameError: function (options) {
        var ruleName;
        if (options.topLevelRule instanceof gast_public_1.Rule) {
            ruleName = options.topLevelRule.name;
        }
        else {
            ruleName = options.topLevelRule;
        }
        var errMsg = "Duplicate definition, rule: ->" + ruleName + "<- is already defined in the grammar: ->" + options.grammarName + "<-";
        return errMsg;
    }
};
//# sourceMappingURL=errors_public.js.map

/***/ }),

/***/ 172:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.EarlyExitException = exports.NotAllInputParsedException = exports.NoViableAltException = exports.MismatchedTokenException = exports.isRecognitionException = void 0;
var utils_1 = __webpack_require__(3739);
var MISMATCHED_TOKEN_EXCEPTION = "MismatchedTokenException";
var NO_VIABLE_ALT_EXCEPTION = "NoViableAltException";
var EARLY_EXIT_EXCEPTION = "EarlyExitException";
var NOT_ALL_INPUT_PARSED_EXCEPTION = "NotAllInputParsedException";
var RECOGNITION_EXCEPTION_NAMES = [
    MISMATCHED_TOKEN_EXCEPTION,
    NO_VIABLE_ALT_EXCEPTION,
    EARLY_EXIT_EXCEPTION,
    NOT_ALL_INPUT_PARSED_EXCEPTION
];
Object.freeze(RECOGNITION_EXCEPTION_NAMES);
// hacks to bypass no support for custom Errors in javascript/typescript
function isRecognitionException(error) {
    // can't do instanceof on hacked custom js exceptions
    return utils_1.contains(RECOGNITION_EXCEPTION_NAMES, error.name);
}
exports.isRecognitionException = isRecognitionException;
function MismatchedTokenException(message, token, previousToken) {
    this.name = MISMATCHED_TOKEN_EXCEPTION;
    this.message = message;
    this.token = token;
    this.previousToken = previousToken;
    this.resyncedTokens = [];
}
exports.MismatchedTokenException = MismatchedTokenException;
// must use the "Error.prototype" instead of "new Error"
// because the stack trace points to where "new Error" was invoked"
MismatchedTokenException.prototype = Error.prototype;
function NoViableAltException(message, token, previousToken) {
    this.name = NO_VIABLE_ALT_EXCEPTION;
    this.message = message;
    this.token = token;
    this.previousToken = previousToken;
    this.resyncedTokens = [];
}
exports.NoViableAltException = NoViableAltException;
NoViableAltException.prototype = Error.prototype;
function NotAllInputParsedException(message, token) {
    this.name = NOT_ALL_INPUT_PARSED_EXCEPTION;
    this.message = message;
    this.token = token;
    this.resyncedTokens = [];
}
exports.NotAllInputParsedException = NotAllInputParsedException;
NotAllInputParsedException.prototype = Error.prototype;
function EarlyExitException(message, token, previousToken) {
    this.name = EARLY_EXIT_EXCEPTION;
    this.message = message;
    this.token = token;
    this.previousToken = previousToken;
    this.resyncedTokens = [];
}
exports.EarlyExitException = EarlyExitException;
EarlyExitException.prototype = Error.prototype;
//# sourceMappingURL=exceptions_public.js.map

/***/ }),

/***/ 3155:
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.checkPrefixAlternativesAmbiguities = exports.validateSomeNonEmptyLookaheadPath = exports.validateTooManyAlts = exports.RepetionCollector = exports.validateAmbiguousAlternationAlternatives = exports.validateEmptyOrAlternative = exports.getFirstNoneTerminal = exports.validateNoLeftRecursion = exports.validateRuleIsOverridden = exports.validateRuleDoesNotAlreadyExist = exports.validateTokenName = exports.validateRuleName = exports.validTermsPattern = exports.OccurrenceValidationCollector = exports.identifyProductionForDuplicates = exports.validateGrammar = void 0;
var utils = __webpack_require__(3739);
var utils_1 = __webpack_require__(3739);
var parser_1 = __webpack_require__(602);
var gast_1 = __webpack_require__(1487);
var lookahead_1 = __webpack_require__(364);
var interpreter_1 = __webpack_require__(9943);
var gast_public_1 = __webpack_require__(5129);
var gast_visitor_public_1 = __webpack_require__(2671);
function validateGrammar(topLevels, globalMaxLookahead, tokenTypes, errMsgProvider, grammarName) {
    var duplicateErrors = utils.map(topLevels, function (currTopLevel) {
        return validateDuplicateProductions(currTopLevel, errMsgProvider);
    });
    var leftRecursionErrors = utils.map(topLevels, function (currTopRule) {
        return validateNoLeftRecursion(currTopRule, currTopRule, errMsgProvider);
    });
    var emptyAltErrors = [];
    var ambiguousAltsErrors = [];
    var emptyRepetitionErrors = [];
    // left recursion could cause infinite loops in the following validations.
    // It is safest to first have the user fix the left recursion errors first and only then examine Further issues.
    if (utils_1.every(leftRecursionErrors, utils_1.isEmpty)) {
        emptyAltErrors = utils_1.map(topLevels, function (currTopRule) {
            return validateEmptyOrAlternative(currTopRule, errMsgProvider);
        });
        ambiguousAltsErrors = utils_1.map(topLevels, function (currTopRule) {
            return validateAmbiguousAlternationAlternatives(currTopRule, globalMaxLookahead, errMsgProvider);
        });
        emptyRepetitionErrors = validateSomeNonEmptyLookaheadPath(topLevels, globalMaxLookahead, errMsgProvider);
    }
    var termsNamespaceConflictErrors = checkTerminalAndNoneTerminalsNameSpace(topLevels, tokenTypes, errMsgProvider);
    var tokenNameErrors = utils.map(tokenTypes, function (currTokType) {
        return validateTokenName(currTokType, errMsgProvider);
    });
    var tooManyAltsErrors = utils_1.map(topLevels, function (curRule) {
        return validateTooManyAlts(curRule, errMsgProvider);
    });
    var ruleNameErrors = utils_1.map(topLevels, function (curRule) {
        return validateRuleName(curRule, errMsgProvider);
    });
    var duplicateRulesError = utils_1.map(topLevels, function (curRule) {
        return validateRuleDoesNotAlreadyExist(curRule, topLevels, grammarName, errMsgProvider);
    });
    return (utils.flatten(duplicateErrors.concat(tokenNameErrors, emptyRepetitionErrors, leftRecursionErrors, emptyAltErrors, ambiguousAltsErrors, termsNamespaceConflictErrors, tooManyAltsErrors, ruleNameErrors, duplicateRulesError)));
}
exports.validateGrammar = validateGrammar;
function validateDuplicateProductions(topLevelRule, errMsgProvider) {
    var collectorVisitor = new OccurrenceValidationCollector();
    topLevelRule.accept(collectorVisitor);
    var allRuleProductions = collectorVisitor.allProductions;
    var productionGroups = utils.groupBy(allRuleProductions, identifyProductionForDuplicates);
    var duplicates = utils.pick(productionGroups, function (currGroup) {
        return currGroup.length > 1;
    });
    var errors = utils.map(utils.values(duplicates), function (currDuplicates) {
        var firstProd = utils.first(currDuplicates);
        var msg = errMsgProvider.buildDuplicateFoundError(topLevelRule, currDuplicates);
        var dslName = gast_1.getProductionDslName(firstProd);
        var defError = {
            message: msg,
            type: parser_1.ParserDefinitionErrorType.DUPLICATE_PRODUCTIONS,
            ruleName: topLevelRule.name,
            dslName: dslName,
            occurrence: firstProd.idx
        };
        var param = getExtraProductionArgument(firstProd);
        if (param) {
            defError.parameter = param;
        }
        return defError;
    });
    return errors;
}
function identifyProductionForDuplicates(prod) {
    return gast_1.getProductionDslName(prod) + "_#_" + prod.idx + "_#_" + getExtraProductionArgument(prod);
}
exports.identifyProductionForDuplicates = identifyProductionForDuplicates;
function getExtraProductionArgument(prod) {
    if (prod instanceof gast_public_1.Terminal) {
        return prod.terminalType.name;
    }
    else if (prod instanceof gast_public_1.NonTerminal) {
        return prod.nonTerminalName;
    }
    else {
        return "";
    }
}
var OccurrenceValidationCollector = /** @class */ (function (_super) {
    __extends(OccurrenceValidationCollector, _super);
    function OccurrenceValidationCollector() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.allProductions = [];
        return _this;
    }
    OccurrenceValidationCollector.prototype.visitNonTerminal = function (subrule) {
        this.allProductions.push(subrule);
    };
    OccurrenceValidationCollector.prototype.visitOption = function (option) {
        this.allProductions.push(option);
    };
    OccurrenceValidationCollector.prototype.visitRepetitionWithSeparator = function (manySep) {
        this.allProductions.push(manySep);
    };
    OccurrenceValidationCollector.prototype.visitRepetitionMandatory = function (atLeastOne) {
        this.allProductions.push(atLeastOne);
    };
    OccurrenceValidationCollector.prototype.visitRepetitionMandatoryWithSeparator = function (atLeastOneSep) {
        this.allProductions.push(atLeastOneSep);
    };
    OccurrenceValidationCollector.prototype.visitRepetition = function (many) {
        this.allProductions.push(many);
    };
    OccurrenceValidationCollector.prototype.visitAlternation = function (or) {
        this.allProductions.push(or);
    };
    OccurrenceValidationCollector.prototype.visitTerminal = function (terminal) {
        this.allProductions.push(terminal);
    };
    return OccurrenceValidationCollector;
}(gast_visitor_public_1.GAstVisitor));
exports.OccurrenceValidationCollector = OccurrenceValidationCollector;
exports.validTermsPattern = /^[a-zA-Z_]\w*$/;
// TODO: remove this limitation now that we use recorders
function validateRuleName(rule, errMsgProvider) {
    var errors = [];
    var ruleName = rule.name;
    if (!ruleName.match(exports.validTermsPattern)) {
        errors.push({
            message: errMsgProvider.buildInvalidRuleNameError({
                topLevelRule: rule,
                expectedPattern: exports.validTermsPattern
            }),
            type: parser_1.ParserDefinitionErrorType.INVALID_RULE_NAME,
            ruleName: ruleName
        });
    }
    return errors;
}
exports.validateRuleName = validateRuleName;
// TODO: remove this limitation now that we use recorders
function validateTokenName(tokenType, errMsgProvider) {
    var errors = [];
    var tokTypeName = tokenType.name;
    if (!tokTypeName.match(exports.validTermsPattern)) {
        errors.push({
            message: errMsgProvider.buildTokenNameError({
                tokenType: tokenType,
                expectedPattern: exports.validTermsPattern
            }),
            type: parser_1.ParserDefinitionErrorType.INVALID_TOKEN_NAME
        });
    }
    return errors;
}
exports.validateTokenName = validateTokenName;
function validateRuleDoesNotAlreadyExist(rule, allRules, className, errMsgProvider) {
    var errors = [];
    var occurrences = utils_1.reduce(allRules, function (result, curRule) {
        if (curRule.name === rule.name) {
            return result + 1;
        }
        return result;
    }, 0);
    if (occurrences > 1) {
        var errMsg = errMsgProvider.buildDuplicateRuleNameError({
            topLevelRule: rule,
            grammarName: className
        });
        errors.push({
            message: errMsg,
            type: parser_1.ParserDefinitionErrorType.DUPLICATE_RULE_NAME,
            ruleName: rule.name
        });
    }
    return errors;
}
exports.validateRuleDoesNotAlreadyExist = validateRuleDoesNotAlreadyExist;
// TODO: is there anyway to get only the rule names of rules inherited from the super grammars?
// This is not part of the IGrammarErrorProvider because the validation cannot be performed on
// The grammar structure, only at runtime.
function validateRuleIsOverridden(ruleName, definedRulesNames, className) {
    var errors = [];
    var errMsg;
    if (!utils.contains(definedRulesNames, ruleName)) {
        errMsg =
            "Invalid rule override, rule: ->" + ruleName + "<- cannot be overridden in the grammar: ->" + className + "<-" +
                "as it is not defined in any of the super grammars ";
        errors.push({
            message: errMsg,
            type: parser_1.ParserDefinitionErrorType.INVALID_RULE_OVERRIDE,
            ruleName: ruleName
        });
    }
    return errors;
}
exports.validateRuleIsOverridden = validateRuleIsOverridden;
function validateNoLeftRecursion(topRule, currRule, errMsgProvider, path) {
    if (path === void 0) { path = []; }
    var errors = [];
    var nextNonTerminals = getFirstNoneTerminal(currRule.definition);
    if (utils.isEmpty(nextNonTerminals)) {
        return [];
    }
    else {
        var ruleName = topRule.name;
        var foundLeftRecursion = utils.contains(nextNonTerminals, topRule);
        if (foundLeftRecursion) {
            errors.push({
                message: errMsgProvider.buildLeftRecursionError({
                    topLevelRule: topRule,
                    leftRecursionPath: path
                }),
                type: parser_1.ParserDefinitionErrorType.LEFT_RECURSION,
                ruleName: ruleName
            });
        }
        // we are only looking for cyclic paths leading back to the specific topRule
        // other cyclic paths are ignored, we still need this difference to avoid infinite loops...
        var validNextSteps = utils.difference(nextNonTerminals, path.concat([topRule]));
        var errorsFromNextSteps = utils.map(validNextSteps, function (currRefRule) {
            var newPath = utils.cloneArr(path);
            newPath.push(currRefRule);
            return validateNoLeftRecursion(topRule, currRefRule, errMsgProvider, newPath);
        });
        return errors.concat(utils.flatten(errorsFromNextSteps));
    }
}
exports.validateNoLeftRecursion = validateNoLeftRecursion;
function getFirstNoneTerminal(definition) {
    var result = [];
    if (utils.isEmpty(definition)) {
        return result;
    }
    var firstProd = utils.first(definition);
    /* istanbul ignore else */
    if (firstProd instanceof gast_public_1.NonTerminal) {
        result.push(firstProd.referencedRule);
    }
    else if (firstProd instanceof gast_public_1.Alternative ||
        firstProd instanceof gast_public_1.Option ||
        firstProd instanceof gast_public_1.RepetitionMandatory ||
        firstProd instanceof gast_public_1.RepetitionMandatoryWithSeparator ||
        firstProd instanceof gast_public_1.RepetitionWithSeparator ||
        firstProd instanceof gast_public_1.Repetition) {
        result = result.concat(getFirstNoneTerminal(firstProd.definition));
    }
    else if (firstProd instanceof gast_public_1.Alternation) {
        // each sub definition in alternation is a FLAT
        result = utils.flatten(utils.map(firstProd.definition, function (currSubDef) {
            return getFirstNoneTerminal(currSubDef.definition);
        }));
    }
    else if (firstProd instanceof gast_public_1.Terminal) {
        // nothing to see, move along
    }
    else {
        throw Error("non exhaustive match");
    }
    var isFirstOptional = gast_1.isOptionalProd(firstProd);
    var hasMore = definition.length > 1;
    if (isFirstOptional && hasMore) {
        var rest = utils.drop(definition);
        return result.concat(getFirstNoneTerminal(rest));
    }
    else {
        return result;
    }
}
exports.getFirstNoneTerminal = getFirstNoneTerminal;
var OrCollector = /** @class */ (function (_super) {
    __extends(OrCollector, _super);
    function OrCollector() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.alternations = [];
        return _this;
    }
    OrCollector.prototype.visitAlternation = function (node) {
        this.alternations.push(node);
    };
    return OrCollector;
}(gast_visitor_public_1.GAstVisitor));
function validateEmptyOrAlternative(topLevelRule, errMsgProvider) {
    var orCollector = new OrCollector();
    topLevelRule.accept(orCollector);
    var ors = orCollector.alternations;
    var errors = utils.reduce(ors, function (errors, currOr) {
        var exceptLast = utils.dropRight(currOr.definition);
        var currErrors = utils.map(exceptLast, function (currAlternative, currAltIdx) {
            var possibleFirstInAlt = interpreter_1.nextPossibleTokensAfter([currAlternative], [], null, 1);
            if (utils.isEmpty(possibleFirstInAlt)) {
                return {
                    message: errMsgProvider.buildEmptyAlternationError({
                        topLevelRule: topLevelRule,
                        alternation: currOr,
                        emptyChoiceIdx: currAltIdx
                    }),
                    type: parser_1.ParserDefinitionErrorType.NONE_LAST_EMPTY_ALT,
                    ruleName: topLevelRule.name,
                    occurrence: currOr.idx,
                    alternative: currAltIdx + 1
                };
            }
            else {
                return null;
            }
        });
        return errors.concat(utils.compact(currErrors));
    }, []);
    return errors;
}
exports.validateEmptyOrAlternative = validateEmptyOrAlternative;
function validateAmbiguousAlternationAlternatives(topLevelRule, globalMaxLookahead, errMsgProvider) {
    var orCollector = new OrCollector();
    topLevelRule.accept(orCollector);
    var ors = orCollector.alternations;
    // New Handling of ignoring ambiguities
    // - https://github.com/SAP/chevrotain/issues/869
    ors = utils_1.reject(ors, function (currOr) { return currOr.ignoreAmbiguities === true; });
    var errors = utils.reduce(ors, function (result, currOr) {
        var currOccurrence = currOr.idx;
        var actualMaxLookahead = currOr.maxLookahead || globalMaxLookahead;
        var alternatives = lookahead_1.getLookaheadPathsForOr(currOccurrence, topLevelRule, actualMaxLookahead, currOr);
        var altsAmbiguityErrors = checkAlternativesAmbiguities(alternatives, currOr, topLevelRule, errMsgProvider);
        var altsPrefixAmbiguityErrors = checkPrefixAlternativesAmbiguities(alternatives, currOr, topLevelRule, errMsgProvider);
        return result.concat(altsAmbiguityErrors, altsPrefixAmbiguityErrors);
    }, []);
    return errors;
}
exports.validateAmbiguousAlternationAlternatives = validateAmbiguousAlternationAlternatives;
var RepetionCollector = /** @class */ (function (_super) {
    __extends(RepetionCollector, _super);
    function RepetionCollector() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.allProductions = [];
        return _this;
    }
    RepetionCollector.prototype.visitRepetitionWithSeparator = function (manySep) {
        this.allProductions.push(manySep);
    };
    RepetionCollector.prototype.visitRepetitionMandatory = function (atLeastOne) {
        this.allProductions.push(atLeastOne);
    };
    RepetionCollector.prototype.visitRepetitionMandatoryWithSeparator = function (atLeastOneSep) {
        this.allProductions.push(atLeastOneSep);
    };
    RepetionCollector.prototype.visitRepetition = function (many) {
        this.allProductions.push(many);
    };
    return RepetionCollector;
}(gast_visitor_public_1.GAstVisitor));
exports.RepetionCollector = RepetionCollector;
function validateTooManyAlts(topLevelRule, errMsgProvider) {
    var orCollector = new OrCollector();
    topLevelRule.accept(orCollector);
    var ors = orCollector.alternations;
    var errors = utils.reduce(ors, function (errors, currOr) {
        if (currOr.definition.length > 255) {
            errors.push({
                message: errMsgProvider.buildTooManyAlternativesError({
                    topLevelRule: topLevelRule,
                    alternation: currOr
                }),
                type: parser_1.ParserDefinitionErrorType.TOO_MANY_ALTS,
                ruleName: topLevelRule.name,
                occurrence: currOr.idx
            });
        }
        return errors;
    }, []);
    return errors;
}
exports.validateTooManyAlts = validateTooManyAlts;
function validateSomeNonEmptyLookaheadPath(topLevelRules, maxLookahead, errMsgProvider) {
    var errors = [];
    utils_1.forEach(topLevelRules, function (currTopRule) {
        var collectorVisitor = new RepetionCollector();
        currTopRule.accept(collectorVisitor);
        var allRuleProductions = collectorVisitor.allProductions;
        utils_1.forEach(allRuleProductions, function (currProd) {
            var prodType = lookahead_1.getProdType(currProd);
            var actualMaxLookahead = currProd.maxLookahead || maxLookahead;
            var currOccurrence = currProd.idx;
            var paths = lookahead_1.getLookaheadPathsForOptionalProd(currOccurrence, currTopRule, prodType, actualMaxLookahead);
            var pathsInsideProduction = paths[0];
            if (utils_1.isEmpty(utils_1.flatten(pathsInsideProduction))) {
                var errMsg = errMsgProvider.buildEmptyRepetitionError({
                    topLevelRule: currTopRule,
                    repetition: currProd
                });
                errors.push({
                    message: errMsg,
                    type: parser_1.ParserDefinitionErrorType.NO_NON_EMPTY_LOOKAHEAD,
                    ruleName: currTopRule.name
                });
            }
        });
    });
    return errors;
}
exports.validateSomeNonEmptyLookaheadPath = validateSomeNonEmptyLookaheadPath;
function checkAlternativesAmbiguities(alternatives, alternation, rule, errMsgProvider) {
    var foundAmbiguousPaths = [];
    var identicalAmbiguities = utils_1.reduce(alternatives, function (result, currAlt, currAltIdx) {
        // ignore (skip) ambiguities with this alternative
        if (alternation.definition[currAltIdx].ignoreAmbiguities === true) {
            return result;
        }
        utils_1.forEach(currAlt, function (currPath) {
            var altsCurrPathAppearsIn = [currAltIdx];
            utils_1.forEach(alternatives, function (currOtherAlt, currOtherAltIdx) {
                if (currAltIdx !== currOtherAltIdx &&
                    lookahead_1.containsPath(currOtherAlt, currPath) &&
                    // ignore (skip) ambiguities with this "other" alternative
                    alternation.definition[currOtherAltIdx].ignoreAmbiguities !== true) {
                    altsCurrPathAppearsIn.push(currOtherAltIdx);
                }
            });
            if (altsCurrPathAppearsIn.length > 1 &&
                !lookahead_1.containsPath(foundAmbiguousPaths, currPath)) {
                foundAmbiguousPaths.push(currPath);
                result.push({
                    alts: altsCurrPathAppearsIn,
                    path: currPath
                });
            }
        });
        return result;
    }, []);
    var currErrors = utils.map(identicalAmbiguities, function (currAmbDescriptor) {
        var ambgIndices = utils_1.map(currAmbDescriptor.alts, function (currAltIdx) { return currAltIdx + 1; });
        var currMessage = errMsgProvider.buildAlternationAmbiguityError({
            topLevelRule: rule,
            alternation: alternation,
            ambiguityIndices: ambgIndices,
            prefixPath: currAmbDescriptor.path
        });
        return {
            message: currMessage,
            type: parser_1.ParserDefinitionErrorType.AMBIGUOUS_ALTS,
            ruleName: rule.name,
            occurrence: alternation.idx,
            alternatives: [currAmbDescriptor.alts]
        };
    });
    return currErrors;
}
function checkPrefixAlternativesAmbiguities(alternatives, alternation, rule, errMsgProvider) {
    var errors = [];
    // flatten
    var pathsAndIndices = utils_1.reduce(alternatives, function (result, currAlt, idx) {
        var currPathsAndIdx = utils_1.map(currAlt, function (currPath) {
            return { idx: idx, path: currPath };
        });
        return result.concat(currPathsAndIdx);
    }, []);
    utils_1.forEach(pathsAndIndices, function (currPathAndIdx) {
        var alternativeGast = alternation.definition[currPathAndIdx.idx];
        // ignore (skip) ambiguities with this alternative
        if (alternativeGast.ignoreAmbiguities === true) {
            return;
        }
        var targetIdx = currPathAndIdx.idx;
        var targetPath = currPathAndIdx.path;
        var prefixAmbiguitiesPathsAndIndices = utils_1.findAll(pathsAndIndices, function (searchPathAndIdx) {
            // prefix ambiguity can only be created from lower idx (higher priority) path
            return (
            // ignore (skip) ambiguities with this "other" alternative
            alternation.definition[searchPathAndIdx.idx].ignoreAmbiguities !==
                true &&
                searchPathAndIdx.idx < targetIdx &&
                // checking for strict prefix because identical lookaheads
                // will be be detected using a different validation.
                lookahead_1.isStrictPrefixOfPath(searchPathAndIdx.path, targetPath));
        });
        var currPathPrefixErrors = utils_1.map(prefixAmbiguitiesPathsAndIndices, function (currAmbPathAndIdx) {
            var ambgIndices = [currAmbPathAndIdx.idx + 1, targetIdx + 1];
            var occurrence = alternation.idx === 0 ? "" : alternation.idx;
            var message = errMsgProvider.buildAlternationPrefixAmbiguityError({
                topLevelRule: rule,
                alternation: alternation,
                ambiguityIndices: ambgIndices,
                prefixPath: currAmbPathAndIdx.path
            });
            return {
                message: message,
                type: parser_1.ParserDefinitionErrorType.AMBIGUOUS_PREFIX_ALTS,
                ruleName: rule.name,
                occurrence: occurrence,
                alternatives: ambgIndices
            };
        });
        errors = errors.concat(currPathPrefixErrors);
    });
    return errors;
}
exports.checkPrefixAlternativesAmbiguities = checkPrefixAlternativesAmbiguities;
function checkTerminalAndNoneTerminalsNameSpace(topLevels, tokenTypes, errMsgProvider) {
    var errors = [];
    var tokenNames = utils_1.map(tokenTypes, function (currToken) { return currToken.name; });
    utils_1.forEach(topLevels, function (currRule) {
        var currRuleName = currRule.name;
        if (utils_1.contains(tokenNames, currRuleName)) {
            var errMsg = errMsgProvider.buildNamespaceConflictError(currRule);
            errors.push({
                message: errMsg,
                type: parser_1.ParserDefinitionErrorType.CONFLICT_TOKENS_RULES_NAMESPACE,
                ruleName: currRuleName
            });
        }
    });
    return errors;
}
//# sourceMappingURL=checks.js.map

/***/ }),

/***/ 935:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.firstForTerminal = exports.firstForBranching = exports.firstForSequence = exports.first = void 0;
var utils_1 = __webpack_require__(3739);
var gast_public_1 = __webpack_require__(5129);
var gast_1 = __webpack_require__(1487);
function first(prod) {
    /* istanbul ignore else */
    if (prod instanceof gast_public_1.NonTerminal) {
        // this could in theory cause infinite loops if
        // (1) prod A refs prod B.
        // (2) prod B refs prod A
        // (3) AB can match the empty set
        // in other words a cycle where everything is optional so the first will keep
        // looking ahead for the next optional part and will never exit
        // currently there is no safeguard for this unique edge case because
        // (1) not sure a grammar in which this can happen is useful for anything (productive)
        return first(prod.referencedRule);
    }
    else if (prod instanceof gast_public_1.Terminal) {
        return firstForTerminal(prod);
    }
    else if (gast_1.isSequenceProd(prod)) {
        return firstForSequence(prod);
    }
    else if (gast_1.isBranchingProd(prod)) {
        return firstForBranching(prod);
    }
    else {
        throw Error("non exhaustive match");
    }
}
exports.first = first;
function firstForSequence(prod) {
    var firstSet = [];
    var seq = prod.definition;
    var nextSubProdIdx = 0;
    var hasInnerProdsRemaining = seq.length > nextSubProdIdx;
    var currSubProd;
    // so we enter the loop at least once (if the definition is not empty
    var isLastInnerProdOptional = true;
    // scan a sequence until it's end or until we have found a NONE optional production in it
    while (hasInnerProdsRemaining && isLastInnerProdOptional) {
        currSubProd = seq[nextSubProdIdx];
        isLastInnerProdOptional = gast_1.isOptionalProd(currSubProd);
        firstSet = firstSet.concat(first(currSubProd));
        nextSubProdIdx = nextSubProdIdx + 1;
        hasInnerProdsRemaining = seq.length > nextSubProdIdx;
    }
    return utils_1.uniq(firstSet);
}
exports.firstForSequence = firstForSequence;
function firstForBranching(prod) {
    var allAlternativesFirsts = utils_1.map(prod.definition, function (innerProd) {
        return first(innerProd);
    });
    return utils_1.uniq(utils_1.flatten(allAlternativesFirsts));
}
exports.firstForBranching = firstForBranching;
function firstForTerminal(terminal) {
    return [terminal.terminalType];
}
exports.firstForTerminal = firstForTerminal;
//# sourceMappingURL=first.js.map

/***/ }),

/***/ 6961:
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.buildInProdFollowPrefix = exports.buildBetweenProdsFollowPrefix = exports.computeAllProdsFollows = exports.ResyncFollowsWalker = void 0;
var rest_1 = __webpack_require__(1287);
var first_1 = __webpack_require__(935);
var utils_1 = __webpack_require__(3739);
var constants_1 = __webpack_require__(469);
var gast_public_1 = __webpack_require__(5129);
// This ResyncFollowsWalker computes all of the follows required for RESYNC
// (skipping reference production).
var ResyncFollowsWalker = /** @class */ (function (_super) {
    __extends(ResyncFollowsWalker, _super);
    function ResyncFollowsWalker(topProd) {
        var _this = _super.call(this) || this;
        _this.topProd = topProd;
        _this.follows = {};
        return _this;
    }
    ResyncFollowsWalker.prototype.startWalking = function () {
        this.walk(this.topProd);
        return this.follows;
    };
    ResyncFollowsWalker.prototype.walkTerminal = function (terminal, currRest, prevRest) {
        // do nothing! just like in the public sector after 13:00
    };
    ResyncFollowsWalker.prototype.walkProdRef = function (refProd, currRest, prevRest) {
        var followName = buildBetweenProdsFollowPrefix(refProd.referencedRule, refProd.idx) +
            this.topProd.name;
        var fullRest = currRest.concat(prevRest);
        var restProd = new gast_public_1.Alternative({ definition: fullRest });
        var t_in_topProd_follows = first_1.first(restProd);
        this.follows[followName] = t_in_topProd_follows;
    };
    return ResyncFollowsWalker;
}(rest_1.RestWalker));
exports.ResyncFollowsWalker = ResyncFollowsWalker;
function computeAllProdsFollows(topProductions) {
    var reSyncFollows = {};
    utils_1.forEach(topProductions, function (topProd) {
        var currRefsFollow = new ResyncFollowsWalker(topProd).startWalking();
        utils_1.assign(reSyncFollows, currRefsFollow);
    });
    return reSyncFollows;
}
exports.computeAllProdsFollows = computeAllProdsFollows;
function buildBetweenProdsFollowPrefix(inner, occurenceInParent) {
    return inner.name + occurenceInParent + constants_1.IN;
}
exports.buildBetweenProdsFollowPrefix = buildBetweenProdsFollowPrefix;
function buildInProdFollowPrefix(terminal) {
    var terminalName = terminal.terminalType.name;
    return terminalName + terminal.idx + constants_1.IN;
}
exports.buildInProdFollowPrefix = buildInProdFollowPrefix;
//# sourceMappingURL=follow.js.map

/***/ }),

/***/ 1487:
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.collectMethods = exports.DslMethodsCollectorVisitor = exports.getProductionDslName = exports.isBranchingProd = exports.isOptionalProd = exports.isSequenceProd = void 0;
var utils_1 = __webpack_require__(3739);
var gast_public_1 = __webpack_require__(5129);
var gast_visitor_public_1 = __webpack_require__(2671);
function isSequenceProd(prod) {
    return (prod instanceof gast_public_1.Alternative ||
        prod instanceof gast_public_1.Option ||
        prod instanceof gast_public_1.Repetition ||
        prod instanceof gast_public_1.RepetitionMandatory ||
        prod instanceof gast_public_1.RepetitionMandatoryWithSeparator ||
        prod instanceof gast_public_1.RepetitionWithSeparator ||
        prod instanceof gast_public_1.Terminal ||
        prod instanceof gast_public_1.Rule);
}
exports.isSequenceProd = isSequenceProd;
function isOptionalProd(prod, alreadyVisited) {
    if (alreadyVisited === void 0) { alreadyVisited = []; }
    var isDirectlyOptional = prod instanceof gast_public_1.Option ||
        prod instanceof gast_public_1.Repetition ||
        prod instanceof gast_public_1.RepetitionWithSeparator;
    if (isDirectlyOptional) {
        return true;
    }
    // note that this can cause infinite loop if one optional empty TOP production has a cyclic dependency with another
    // empty optional top rule
    // may be indirectly optional ((A?B?C?) | (D?E?F?))
    if (prod instanceof gast_public_1.Alternation) {
        // for OR its enough for just one of the alternatives to be optional
        return utils_1.some(prod.definition, function (subProd) {
            return isOptionalProd(subProd, alreadyVisited);
        });
    }
    else if (prod instanceof gast_public_1.NonTerminal && utils_1.contains(alreadyVisited, prod)) {
        // avoiding stack overflow due to infinite recursion
        return false;
    }
    else if (prod instanceof gast_public_1.AbstractProduction) {
        if (prod instanceof gast_public_1.NonTerminal) {
            alreadyVisited.push(prod);
        }
        return utils_1.every(prod.definition, function (subProd) {
            return isOptionalProd(subProd, alreadyVisited);
        });
    }
    else {
        return false;
    }
}
exports.isOptionalProd = isOptionalProd;
function isBranchingProd(prod) {
    return prod instanceof gast_public_1.Alternation;
}
exports.isBranchingProd = isBranchingProd;
function getProductionDslName(prod) {
    /* istanbul ignore else */
    if (prod instanceof gast_public_1.NonTerminal) {
        return "SUBRULE";
    }
    else if (prod instanceof gast_public_1.Option) {
        return "OPTION";
    }
    else if (prod instanceof gast_public_1.Alternation) {
        return "OR";
    }
    else if (prod instanceof gast_public_1.RepetitionMandatory) {
        return "AT_LEAST_ONE";
    }
    else if (prod instanceof gast_public_1.RepetitionMandatoryWithSeparator) {
        return "AT_LEAST_ONE_SEP";
    }
    else if (prod instanceof gast_public_1.RepetitionWithSeparator) {
        return "MANY_SEP";
    }
    else if (prod instanceof gast_public_1.Repetition) {
        return "MANY";
    }
    else if (prod instanceof gast_public_1.Terminal) {
        return "CONSUME";
    }
    else {
        throw Error("non exhaustive match");
    }
}
exports.getProductionDslName = getProductionDslName;
var DslMethodsCollectorVisitor = /** @class */ (function (_super) {
    __extends(DslMethodsCollectorVisitor, _super);
    function DslMethodsCollectorVisitor() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        // A minus is never valid in an identifier name
        _this.separator = "-";
        _this.dslMethods = {
            option: [],
            alternation: [],
            repetition: [],
            repetitionWithSeparator: [],
            repetitionMandatory: [],
            repetitionMandatoryWithSeparator: []
        };
        return _this;
    }
    DslMethodsCollectorVisitor.prototype.reset = function () {
        this.dslMethods = {
            option: [],
            alternation: [],
            repetition: [],
            repetitionWithSeparator: [],
            repetitionMandatory: [],
            repetitionMandatoryWithSeparator: []
        };
    };
    DslMethodsCollectorVisitor.prototype.visitTerminal = function (terminal) {
        var key = terminal.terminalType.name + this.separator + "Terminal";
        if (!utils_1.has(this.dslMethods, key)) {
            this.dslMethods[key] = [];
        }
        this.dslMethods[key].push(terminal);
    };
    DslMethodsCollectorVisitor.prototype.visitNonTerminal = function (subrule) {
        var key = subrule.nonTerminalName + this.separator + "Terminal";
        if (!utils_1.has(this.dslMethods, key)) {
            this.dslMethods[key] = [];
        }
        this.dslMethods[key].push(subrule);
    };
    DslMethodsCollectorVisitor.prototype.visitOption = function (option) {
        this.dslMethods.option.push(option);
    };
    DslMethodsCollectorVisitor.prototype.visitRepetitionWithSeparator = function (manySep) {
        this.dslMethods.repetitionWithSeparator.push(manySep);
    };
    DslMethodsCollectorVisitor.prototype.visitRepetitionMandatory = function (atLeastOne) {
        this.dslMethods.repetitionMandatory.push(atLeastOne);
    };
    DslMethodsCollectorVisitor.prototype.visitRepetitionMandatoryWithSeparator = function (atLeastOneSep) {
        this.dslMethods.repetitionMandatoryWithSeparator.push(atLeastOneSep);
    };
    DslMethodsCollectorVisitor.prototype.visitRepetition = function (many) {
        this.dslMethods.repetition.push(many);
    };
    DslMethodsCollectorVisitor.prototype.visitAlternation = function (or) {
        this.dslMethods.alternation.push(or);
    };
    return DslMethodsCollectorVisitor;
}(gast_visitor_public_1.GAstVisitor));
exports.DslMethodsCollectorVisitor = DslMethodsCollectorVisitor;
var collectorVisitor = new DslMethodsCollectorVisitor();
function collectMethods(rule) {
    collectorVisitor.reset();
    rule.accept(collectorVisitor);
    var dslMethods = collectorVisitor.dslMethods;
    // avoid uncleaned references
    collectorVisitor.reset();
    return dslMethods;
}
exports.collectMethods = collectMethods;
//# sourceMappingURL=gast.js.map

/***/ }),

/***/ 5129:
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.serializeProduction = exports.serializeGrammar = exports.Terminal = exports.Alternation = exports.RepetitionWithSeparator = exports.Repetition = exports.RepetitionMandatoryWithSeparator = exports.RepetitionMandatory = exports.Option = exports.Alternative = exports.Rule = exports.NonTerminal = exports.AbstractProduction = void 0;
var utils_1 = __webpack_require__(3739);
var tokens_public_1 = __webpack_require__(8497);
var AbstractProduction = /** @class */ (function () {
    function AbstractProduction(_definition) {
        this._definition = _definition;
    }
    Object.defineProperty(AbstractProduction.prototype, "definition", {
        get: function () {
            return this._definition;
        },
        set: function (value) {
            this._definition = value;
        },
        enumerable: false,
        configurable: true
    });
    AbstractProduction.prototype.accept = function (visitor) {
        visitor.visit(this);
        utils_1.forEach(this.definition, function (prod) {
            prod.accept(visitor);
        });
    };
    return AbstractProduction;
}());
exports.AbstractProduction = AbstractProduction;
var NonTerminal = /** @class */ (function (_super) {
    __extends(NonTerminal, _super);
    function NonTerminal(options) {
        var _this = _super.call(this, []) || this;
        _this.idx = 1;
        utils_1.assign(_this, utils_1.pick(options, function (v) { return v !== undefined; }));
        return _this;
    }
    Object.defineProperty(NonTerminal.prototype, "definition", {
        get: function () {
            if (this.referencedRule !== undefined) {
                return this.referencedRule.definition;
            }
            return [];
        },
        set: function (definition) {
            // immutable
        },
        enumerable: false,
        configurable: true
    });
    NonTerminal.prototype.accept = function (visitor) {
        visitor.visit(this);
        // don't visit children of a reference, we will get cyclic infinite loops if we do so
    };
    return NonTerminal;
}(AbstractProduction));
exports.NonTerminal = NonTerminal;
var Rule = /** @class */ (function (_super) {
    __extends(Rule, _super);
    function Rule(options) {
        var _this = _super.call(this, options.definition) || this;
        _this.orgText = "";
        utils_1.assign(_this, utils_1.pick(options, function (v) { return v !== undefined; }));
        return _this;
    }
    return Rule;
}(AbstractProduction));
exports.Rule = Rule;
var Alternative = /** @class */ (function (_super) {
    __extends(Alternative, _super);
    function Alternative(options) {
        var _this = _super.call(this, options.definition) || this;
        _this.ignoreAmbiguities = false;
        utils_1.assign(_this, utils_1.pick(options, function (v) { return v !== undefined; }));
        return _this;
    }
    return Alternative;
}(AbstractProduction));
exports.Alternative = Alternative;
var Option = /** @class */ (function (_super) {
    __extends(Option, _super);
    function Option(options) {
        var _this = _super.call(this, options.definition) || this;
        _this.idx = 1;
        utils_1.assign(_this, utils_1.pick(options, function (v) { return v !== undefined; }));
        return _this;
    }
    return Option;
}(AbstractProduction));
exports.Option = Option;
var RepetitionMandatory = /** @class */ (function (_super) {
    __extends(RepetitionMandatory, _super);
    function RepetitionMandatory(options) {
        var _this = _super.call(this, options.definition) || this;
        _this.idx = 1;
        utils_1.assign(_this, utils_1.pick(options, function (v) { return v !== undefined; }));
        return _this;
    }
    return RepetitionMandatory;
}(AbstractProduction));
exports.RepetitionMandatory = RepetitionMandatory;
var RepetitionMandatoryWithSeparator = /** @class */ (function (_super) {
    __extends(RepetitionMandatoryWithSeparator, _super);
    function RepetitionMandatoryWithSeparator(options) {
        var _this = _super.call(this, options.definition) || this;
        _this.idx = 1;
        utils_1.assign(_this, utils_1.pick(options, function (v) { return v !== undefined; }));
        return _this;
    }
    return RepetitionMandatoryWithSeparator;
}(AbstractProduction));
exports.RepetitionMandatoryWithSeparator = RepetitionMandatoryWithSeparator;
var Repetition = /** @class */ (function (_super) {
    __extends(Repetition, _super);
    function Repetition(options) {
        var _this = _super.call(this, options.definition) || this;
        _this.idx = 1;
        utils_1.assign(_this, utils_1.pick(options, function (v) { return v !== undefined; }));
        return _this;
    }
    return Repetition;
}(AbstractProduction));
exports.Repetition = Repetition;
var RepetitionWithSeparator = /** @class */ (function (_super) {
    __extends(RepetitionWithSeparator, _super);
    function RepetitionWithSeparator(options) {
        var _this = _super.call(this, options.definition) || this;
        _this.idx = 1;
        utils_1.assign(_this, utils_1.pick(options, function (v) { return v !== undefined; }));
        return _this;
    }
    return RepetitionWithSeparator;
}(AbstractProduction));
exports.RepetitionWithSeparator = RepetitionWithSeparator;
var Alternation = /** @class */ (function (_super) {
    __extends(Alternation, _super);
    function Alternation(options) {
        var _this = _super.call(this, options.definition) || this;
        _this.idx = 1;
        _this.ignoreAmbiguities = false;
        _this.hasPredicates = false;
        utils_1.assign(_this, utils_1.pick(options, function (v) { return v !== undefined; }));
        return _this;
    }
    Object.defineProperty(Alternation.prototype, "definition", {
        get: function () {
            return this._definition;
        },
        set: function (value) {
            this._definition = value;
        },
        enumerable: false,
        configurable: true
    });
    return Alternation;
}(AbstractProduction));
exports.Alternation = Alternation;
var Terminal = /** @class */ (function () {
    function Terminal(options) {
        this.idx = 1;
        utils_1.assign(this, utils_1.pick(options, function (v) { return v !== undefined; }));
    }
    Terminal.prototype.accept = function (visitor) {
        visitor.visit(this);
    };
    return Terminal;
}());
exports.Terminal = Terminal;
function serializeGrammar(topRules) {
    return utils_1.map(topRules, serializeProduction);
}
exports.serializeGrammar = serializeGrammar;
function serializeProduction(node) {
    function convertDefinition(definition) {
        return utils_1.map(definition, serializeProduction);
    }
    /* istanbul ignore else */
    if (node instanceof NonTerminal) {
        return {
            type: "NonTerminal",
            name: node.nonTerminalName,
            idx: node.idx
        };
    }
    else if (node instanceof Alternative) {
        return {
            type: "Alternative",
            definition: convertDefinition(node.definition)
        };
    }
    else if (node instanceof Option) {
        return {
            type: "Option",
            idx: node.idx,
            definition: convertDefinition(node.definition)
        };
    }
    else if (node instanceof RepetitionMandatory) {
        return {
            type: "RepetitionMandatory",
            idx: node.idx,
            definition: convertDefinition(node.definition)
        };
    }
    else if (node instanceof RepetitionMandatoryWithSeparator) {
        return {
            type: "RepetitionMandatoryWithSeparator",
            idx: node.idx,
            separator: (serializeProduction(new Terminal({ terminalType: node.separator }))),
            definition: convertDefinition(node.definition)
        };
    }
    else if (node instanceof RepetitionWithSeparator) {
        return {
            type: "RepetitionWithSeparator",
            idx: node.idx,
            separator: (serializeProduction(new Terminal({ terminalType: node.separator }))),
            definition: convertDefinition(node.definition)
        };
    }
    else if (node instanceof Repetition) {
        return {
            type: "Repetition",
            idx: node.idx,
            definition: convertDefinition(node.definition)
        };
    }
    else if (node instanceof Alternation) {
        return {
            type: "Alternation",
            idx: node.idx,
            definition: convertDefinition(node.definition)
        };
    }
    else if (node instanceof Terminal) {
        var serializedTerminal = {
            type: "Terminal",
            name: node.terminalType.name,
            label: tokens_public_1.tokenLabel(node.terminalType),
            idx: node.idx
        };
        var pattern = node.terminalType.PATTERN;
        if (node.terminalType.PATTERN) {
            serializedTerminal.pattern = utils_1.isRegExp(pattern)
                ? pattern.source
                : pattern;
        }
        return serializedTerminal;
    }
    else if (node instanceof Rule) {
        return {
            type: "Rule",
            name: node.name,
            orgText: node.orgText,
            definition: convertDefinition(node.definition)
        };
    }
    else {
        throw Error("non exhaustive match");
    }
}
exports.serializeProduction = serializeProduction;
//# sourceMappingURL=gast_public.js.map

/***/ }),

/***/ 3629:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.assignOccurrenceIndices = exports.validateGrammar = exports.resolveGrammar = void 0;
var utils_1 = __webpack_require__(3739);
var resolver_1 = __webpack_require__(190);
var checks_1 = __webpack_require__(3155);
var errors_public_1 = __webpack_require__(8376);
var gast_1 = __webpack_require__(1487);
function resolveGrammar(options) {
    options = utils_1.defaults(options, {
        errMsgProvider: errors_public_1.defaultGrammarResolverErrorProvider
    });
    var topRulesTable = {};
    utils_1.forEach(options.rules, function (rule) {
        topRulesTable[rule.name] = rule;
    });
    return resolver_1.resolveGrammar(topRulesTable, options.errMsgProvider);
}
exports.resolveGrammar = resolveGrammar;
function validateGrammar(options) {
    options = utils_1.defaults(options, {
        errMsgProvider: errors_public_1.defaultGrammarValidatorErrorProvider
    });
    return checks_1.validateGrammar(options.rules, options.maxLookahead, options.tokenTypes, options.errMsgProvider, options.grammarName);
}
exports.validateGrammar = validateGrammar;
function assignOccurrenceIndices(options) {
    utils_1.forEach(options.rules, function (currRule) {
        var methodsCollector = new gast_1.DslMethodsCollectorVisitor();
        currRule.accept(methodsCollector);
        utils_1.forEach(methodsCollector.dslMethods, function (methods) {
            utils_1.forEach(methods, function (currMethod, arrIdx) {
                currMethod.idx = arrIdx + 1;
            });
        });
    });
}
exports.assignOccurrenceIndices = assignOccurrenceIndices;
//# sourceMappingURL=gast_resolver_public.js.map

/***/ }),

/***/ 2671:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.GAstVisitor = void 0;
var gast_public_1 = __webpack_require__(5129);
var GAstVisitor = /** @class */ (function () {
    function GAstVisitor() {
    }
    GAstVisitor.prototype.visit = function (node) {
        var nodeAny = node;
        switch (nodeAny.constructor) {
            case gast_public_1.NonTerminal:
                return this.visitNonTerminal(nodeAny);
            case gast_public_1.Alternative:
                return this.visitAlternative(nodeAny);
            case gast_public_1.Option:
                return this.visitOption(nodeAny);
            case gast_public_1.RepetitionMandatory:
                return this.visitRepetitionMandatory(nodeAny);
            case gast_public_1.RepetitionMandatoryWithSeparator:
                return this.visitRepetitionMandatoryWithSeparator(nodeAny);
            case gast_public_1.RepetitionWithSeparator:
                return this.visitRepetitionWithSeparator(nodeAny);
            case gast_public_1.Repetition:
                return this.visitRepetition(nodeAny);
            case gast_public_1.Alternation:
                return this.visitAlternation(nodeAny);
            case gast_public_1.Terminal:
                return this.visitTerminal(nodeAny);
            case gast_public_1.Rule:
                return this.visitRule(nodeAny);
            /* istanbul ignore next */
            default:
                throw Error("non exhaustive match");
        }
    };
    GAstVisitor.prototype.visitNonTerminal = function (node) { };
    GAstVisitor.prototype.visitAlternative = function (node) { };
    GAstVisitor.prototype.visitOption = function (node) { };
    GAstVisitor.prototype.visitRepetition = function (node) { };
    GAstVisitor.prototype.visitRepetitionMandatory = function (node) { };
    GAstVisitor.prototype.visitRepetitionMandatoryWithSeparator = function (node) { };
    GAstVisitor.prototype.visitRepetitionWithSeparator = function (node) { };
    GAstVisitor.prototype.visitAlternation = function (node) { };
    GAstVisitor.prototype.visitTerminal = function (node) { };
    GAstVisitor.prototype.visitRule = function (node) { };
    return GAstVisitor;
}());
exports.GAstVisitor = GAstVisitor;
//# sourceMappingURL=gast_visitor_public.js.map

/***/ }),

/***/ 9943:
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";

/* istanbul ignore next */ var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.nextPossibleTokensAfter = exports.possiblePathsFrom = exports.NextTerminalAfterAtLeastOneSepWalker = exports.NextTerminalAfterAtLeastOneWalker = exports.NextTerminalAfterManySepWalker = exports.NextTerminalAfterManyWalker = exports.AbstractNextTerminalAfterProductionWalker = exports.NextAfterTokenWalker = exports.AbstractNextPossibleTokensWalker = void 0;
var rest_1 = __webpack_require__(1287);
var utils_1 = __webpack_require__(3739);
var first_1 = __webpack_require__(935);
var gast_public_1 = __webpack_require__(5129);
var AbstractNextPossibleTokensWalker = /** @class */ (function (_super) {
    __extends(AbstractNextPossibleTokensWalker, _super);
    function AbstractNextPossibleTokensWalker(topProd, path) {
        var _this = _super.call(this) /* istanbul ignore next */ || this;
        _this.topProd = topProd;
        _this.path = path;
        _this.possibleTokTypes = [];
        _this.nextProductionName = "";
        _this.nextProductionOccurrence = 0;
        _this.found = false;
        _this.isAtEndOfPath = false;
        return _this;
    }
    AbstractNextPossibleTokensWalker.prototype.startWalking = function () {
        this.found = false;
        if (this.path.ruleStack[0] !== this.topProd.name) {
            throw Error("The path does not start with the walker's top Rule!");
        }
        // immutable for the win
        this.ruleStack = utils_1.cloneArr(this.path.ruleStack).reverse(); // intelij bug requires assertion
        this.occurrenceStack = utils_1.cloneArr(this.path.occurrenceStack).reverse(); // intelij bug requires assertion
        // already verified that the first production is valid, we now seek the 2nd production
        this.ruleStack.pop();
        this.occurrenceStack.pop();
        this.updateExpectedNext();
        this.walk(this.topProd);
        return this.possibleTokTypes;
    };
    AbstractNextPossibleTokensWalker.prototype.walk = function (prod, prevRest) {
        if (prevRest === void 0) { prevRest = []; }
        // stop scanning once we found the path
        if (!this.found) {
            _super.prototype.walk.call(this, prod, prevRest);
        }
    };
    AbstractNextPossibleTokensWalker.prototype.walkProdRef = function (refProd, currRest, prevRest) {
        // found the next production, need to keep walking in it
        if (refProd.referencedRule.name === this.nextProductionName &&
            refProd.idx === this.nextProductionOccurrence) {
            var fullRest = currRest.concat(prevRest);
            this.updateExpectedNext();
            this.walk(refProd.referencedRule, fullRest);
        }
    };
    AbstractNextPossibleTokensWalker.prototype.updateExpectedNext = function () {
        // need to consume the Terminal
        if (utils_1.isEmpty(this.ruleStack)) {
            // must reset nextProductionXXX to avoid walking down another Top Level production while what we are
            // really seeking is the last Terminal...
            this.nextProductionName = "";
            this.nextProductionOccurrence = 0;
            this.isAtEndOfPath = true;
        }
        else {
            this.nextProductionName = this.ruleStack.pop();
            this.nextProductionOccurrence = this.occurrenceStack.pop();
        }
    };
    return AbstractNextPossibleTokensWalker;
}(rest_1.RestWalker));
exports.AbstractNextPossibleTokensWalker = AbstractNextPossibleTokensWalker;
var NextAfterTokenWalker = /** @class */ (function (_super) {
    __extends(NextAfterTokenWalker, _super);
    function NextAfterTokenWalker(topProd, path) {
        var _this = _super.call(this, topProd, path) /* istanbul ignore next */ || this;
        _this.path = path;
        _this.nextTerminalName = "";
        _this.nextTerminalOccurrence = 0;
        _this.nextTerminalName = _this.path.lastTok.name;
        _this.nextTerminalOccurrence = _this.path.lastTokOccurrence;
        return _this;
    }
    NextAfterTokenWalker.prototype.walkTerminal = function (terminal, currRest, prevRest) {
        if (this.isAtEndOfPath &&
            terminal.terminalType.name === this.nextTerminalName &&
            terminal.idx === this.nextTerminalOccurrence &&
            !this.found) {
            var fullRest = currRest.concat(prevRest);
            var restProd = new gast_public_1.Alternative({ definition: fullRest });
            this.possibleTokTypes = first_1.first(restProd);
            this.found = true;
        }
    };
    return NextAfterTokenWalker;
}(AbstractNextPossibleTokensWalker));
exports.NextAfterTokenWalker = NextAfterTokenWalker;
/**
 * This walker only "walks" a single "TOP" level in the Grammar Ast, this means
 * it never "follows" production refs
 */
var AbstractNextTerminalAfterProductionWalker = /** @class */ (function (_super) {
    __extends(AbstractNextTerminalAfterProductionWalker, _super);
    function AbstractNextTerminalAfterProductionWalker(topRule, occurrence) {
        var _this = _super.call(this) /* istanbul ignore next */ || this;
        _this.topRule = topRule;
        _this.occurrence = occurrence;
        _this.result = {
            token: undefined,
            occurrence: undefined,
            isEndOfRule: undefined
        };
        return _this;
    }
    AbstractNextTerminalAfterProductionWalker.prototype.startWalking = function () {
        this.walk(this.topRule);
        return this.result;
    };
    return AbstractNextTerminalAfterProductionWalker;
}(rest_1.RestWalker));
exports.AbstractNextTerminalAfterProductionWalker = AbstractNextTerminalAfterProductionWalker;
var NextTerminalAfterManyWalker = /** @class */ (function (_super) {
    __extends(NextTerminalAfterManyWalker, _super);
    function NextTerminalAfterManyWalker() {
        return _super !== null && _super.apply(this, arguments) /* istanbul ignore next */ || this;
    }
    NextTerminalAfterManyWalker.prototype.walkMany = function (manyProd, currRest, prevRest) {
        if (manyProd.idx === this.occurrence) {
            var firstAfterMany = utils_1.first(currRest.concat(prevRest));
            this.result.isEndOfRule = firstAfterMany === undefined;
            if (firstAfterMany instanceof gast_public_1.Terminal) {
                this.result.token = firstAfterMany.terminalType;
                this.result.occurrence = firstAfterMany.idx;
            }
        }
        else {
            _super.prototype.walkMany.call(this, manyProd, currRest, prevRest);
        }
    };
    return NextTerminalAfterManyWalker;
}(AbstractNextTerminalAfterProductionWalker));
exports.NextTerminalAfterManyWalker = NextTerminalAfterManyWalker;
var NextTerminalAfterManySepWalker = /** @class */ (function (_super) {
    __extends(NextTerminalAfterManySepWalker, _super);
    function NextTerminalAfterManySepWalker() {
        return _super !== null && _super.apply(this, arguments) /* istanbul ignore next */ || this;
    }
    NextTerminalAfterManySepWalker.prototype.walkManySep = function (manySepProd, currRest, prevRest) {
        if (manySepProd.idx === this.occurrence) {
            var firstAfterManySep = utils_1.first(currRest.concat(prevRest));
            this.result.isEndOfRule = firstAfterManySep === undefined;
            if (firstAfterManySep instanceof gast_public_1.Terminal) {
                this.result.token = firstAfterManySep.terminalType;
                this.result.occurrence = firstAfterManySep.idx;
            }
        }
        else {
            _super.prototype.walkManySep.call(this, manySepProd, currRest, prevRest);
        }
    };
    return NextTerminalAfterManySepWalker;
}(AbstractNextTerminalAfterProductionWalker));
exports.NextTerminalAfterManySepWalker = NextTerminalAfterManySepWalker;
var NextTerminalAfterAtLeastOneWalker = /** @class */ (function (_super) {
    __extends(NextTerminalAfterAtLeastOneWalker, _super);
    function NextTerminalAfterAtLeastOneWalker() {
        return _super !== null && _super.apply(this, arguments) /* istanbul ignore next */ || this;
    }
    NextTerminalAfterAtLeastOneWalker.prototype.walkAtLeastOne = function (atLeastOneProd, currRest, prevRest) {
        if (atLeastOneProd.idx === this.occurrence) {
            var firstAfterAtLeastOne = utils_1.first(currRest.concat(prevRest));
            this.result.isEndOfRule = firstAfterAtLeastOne === undefined;
            if (firstAfterAtLeastOne instanceof gast_public_1.Terminal) {
                this.result.token = firstAfterAtLeastOne.terminalType;
                this.result.occurrence = firstAfterAtLeastOne.idx;
            }
        }
        else {
            _super.prototype.walkAtLeastOne.call(this, atLeastOneProd, currRest, prevRest);
        }
    };
    return NextTerminalAfterAtLeastOneWalker;
}(AbstractNextTerminalAfterProductionWalker));
exports.NextTerminalAfterAtLeastOneWalker = NextTerminalAfterAtLeastOneWalker;
// TODO: reduce code duplication in the AfterWalkers
var NextTerminalAfterAtLeastOneSepWalker = /** @class */ (function (_super) {
    __extends(NextTerminalAfterAtLeastOneSepWalker, _super);
    function NextTerminalAfterAtLeastOneSepWalker() {
        return _super !== null && _super.apply(this, arguments) /* istanbul ignore next */ || this;
    }
    NextTerminalAfterAtLeastOneSepWalker.prototype.walkAtLeastOneSep = function (atleastOneSepProd, currRest, prevRest) {
        if (atleastOneSepProd.idx === this.occurrence) {
            var firstAfterfirstAfterAtLeastOneSep = utils_1.first(currRest.concat(prevRest));
            this.result.isEndOfRule = firstAfterfirstAfterAtLeastOneSep === undefined;
            if (firstAfterfirstAfterAtLeastOneSep instanceof gast_public_1.Terminal) {
                this.result.token = firstAfterfirstAfterAtLeastOneSep.terminalType;
                this.result.occurrence = firstAfterfirstAfterAtLeastOneSep.idx;
            }
        }
        else {
            _super.prototype.walkAtLeastOneSep.call(this, atleastOneSepProd, currRest, prevRest);
        }
    };
    return NextTerminalAfterAtLeastOneSepWalker;
}(AbstractNextTerminalAfterProductionWalker));
exports.NextTerminalAfterAtLeastOneSepWalker = NextTerminalAfterAtLeastOneSepWalker;
function possiblePathsFrom(targetDef, maxLength, currPath) {
    if (currPath === void 0) { currPath = []; }
    // avoid side effects
    currPath = utils_1.cloneArr(currPath);
    var result = [];
    var i = 0;
    // TODO: avoid inner funcs
    function remainingPathWith(nextDef) {
        return nextDef.concat(utils_1.drop(targetDef, i + 1));
    }
    // TODO: avoid inner funcs
    function getAlternativesForProd(definition) {
        var alternatives = possiblePathsFrom(remainingPathWith(definition), maxLength, currPath);
        return result.concat(alternatives);
    }
    /**
     * Mandatory productions will halt the loop as the paths computed from their recursive calls will already contain the
     * following (rest) of the targetDef.
     *
     * For optional productions (Option/Repetition/...) the loop will continue to represent the paths that do not include the
     * the optional production.
     */
    while (currPath.length < maxLength && i < targetDef.length) {
        var prod = targetDef[i];
        /* istanbul ignore else */
        if (prod instanceof gast_public_1.Alternative) {
            return getAlternativesForProd(prod.definition);
        }
        else if (prod instanceof gast_public_1.NonTerminal) {
            return getAlternativesForProd(prod.definition);
        }
        else if (prod instanceof gast_public_1.Option) {
            result = getAlternativesForProd(prod.definition);
        }
        else if (prod instanceof gast_public_1.RepetitionMandatory) {
            var newDef = prod.definition.concat([
                new gast_public_1.Repetition({
                    definition: prod.definition
                })
            ]);
            return getAlternativesForProd(newDef);
        }
        else if (prod instanceof gast_public_1.RepetitionMandatoryWithSeparator) {
            var newDef = [
                new gast_public_1.Alternative({ definition: prod.definition }),
                new gast_public_1.Repetition({
                    definition: [new gast_public_1.Terminal({ terminalType: prod.separator })].concat(prod.definition)
                })
            ];
            return getAlternativesForProd(newDef);
        }
        else if (prod instanceof gast_public_1.RepetitionWithSeparator) {
            var newDef = prod.definition.concat([
                new gast_public_1.Repetition({
                    definition: [new gast_public_1.Terminal({ terminalType: prod.separator })].concat(prod.definition)
                })
            ]);
            result = getAlternativesForProd(newDef);
        }
        else if (prod instanceof gast_public_1.Repetition) {
            var newDef = prod.definition.concat([
                new gast_public_1.Repetition({
                    definition: prod.definition
                })
            ]);
            result = getAlternativesForProd(newDef);
        }
        else if (prod instanceof gast_public_1.Alternation) {
            utils_1.forEach(prod.definition, function (currAlt) {
                // TODO: this is a limited check for empty alternatives
                //   It would prevent a common case of infinite loops during parser initialization.
                //   However **in-directly** empty alternatives may still cause issues.
                if (utils_1.isEmpty(currAlt.definition) === false) {
                    result = getAlternativesForProd(currAlt.definition);
                }
            });
            return result;
        }
        else if (prod instanceof gast_public_1.Terminal) {
            currPath.push(prod.terminalType);
        }
        else {
            throw Error("non exhaustive match");
        }
        i++;
    }
    result.push({
        partialPath: currPath,
        suffixDef: utils_1.drop(targetDef, i)
    });
    return result;
}
exports.possiblePathsFrom = possiblePathsFrom;
function nextPossibleTokensAfter(initialDef, tokenVector, tokMatcher, maxLookAhead) {
    var EXIT_NON_TERMINAL = "EXIT_NONE_TERMINAL";
    // to avoid creating a new Array each time.
    var EXIT_NON_TERMINAL_ARR = [EXIT_NON_TERMINAL];
    var EXIT_ALTERNATIVE = "EXIT_ALTERNATIVE";
    var foundCompletePath = false;
    var tokenVectorLength = tokenVector.length;
    var minimalAlternativesIndex = tokenVectorLength - maxLookAhead - 1;
    var result = [];
    var possiblePaths = [];
    possiblePaths.push({
        idx: -1,
        def: initialDef,
        ruleStack: [],
        occurrenceStack: []
    });
    while (!utils_1.isEmpty(possiblePaths)) {
        var currPath = possiblePaths.pop();
        // skip alternatives if no more results can be found (assuming deterministic grammar with fixed lookahead)
        if (currPath === EXIT_ALTERNATIVE) {
            if (foundCompletePath &&
                utils_1.last(possiblePaths).idx <= minimalAlternativesIndex) {
                // remove irrelevant alternative
                possiblePaths.pop();
            }
            continue;
        }
        var currDef = currPath.def;
        var currIdx = currPath.idx;
        var currRuleStack = currPath.ruleStack;
        var currOccurrenceStack = currPath.occurrenceStack;
        // For Example: an empty path could exist in a valid grammar in the case of an EMPTY_ALT
        if (utils_1.isEmpty(currDef)) {
            continue;
        }
        var prod = currDef[0];
        /* istanbul ignore else */
        if (prod === EXIT_NON_TERMINAL) {
            var nextPath = {
                idx: currIdx,
                def: utils_1.drop(currDef),
                ruleStack: utils_1.dropRight(currRuleStack),
                occurrenceStack: utils_1.dropRight(currOccurrenceStack)
            };
            possiblePaths.push(nextPath);
        }
        else if (prod instanceof gast_public_1.Terminal) {
            /* istanbul ignore else */
            if (currIdx < tokenVectorLength - 1) {
                var nextIdx = currIdx + 1;
                var actualToken = tokenVector[nextIdx];
                if (tokMatcher(actualToken, prod.terminalType)) {
                    var nextPath = {
                        idx: nextIdx,
                        def: utils_1.drop(currDef),
                        ruleStack: currRuleStack,
                        occurrenceStack: currOccurrenceStack
                    };
                    possiblePaths.push(nextPath);
                }
                // end of the line
            }
            else if (currIdx === tokenVectorLength - 1) {
                // IGNORE ABOVE ELSE
                result.push({
                    nextTokenType: prod.terminalType,
                    nextTokenOccurrence: prod.idx,
                    ruleStack: currRuleStack,
                    occurrenceStack: currOccurrenceStack
                });
                foundCompletePath = true;
            }
            else {
                throw Error("non exhaustive match");
            }
        }
        else if (prod instanceof gast_public_1.NonTerminal) {
            var newRuleStack = utils_1.cloneArr(currRuleStack);
            newRuleStack.push(prod.nonTerminalName);
            var newOccurrenceStack = utils_1.cloneArr(currOccurrenceStack);
            newOccurrenceStack.push(prod.idx);
            var nextPath = {
                idx: currIdx,
                def: prod.definition.concat(EXIT_NON_TERMINAL_ARR, utils_1.drop(currDef)),
                ruleStack: newRuleStack,
                occurrenceStack: newOccurrenceStack
            };
            possiblePaths.push(nextPath);
        }
        else if (prod instanceof gast_public_1.Option) {
            // the order of alternatives is meaningful, FILO (Last path will be traversed first).
            var nextPathWithout = {
                idx: currIdx,
                def: utils_1.drop(currDef),
                ruleStack: currRuleStack,
                occurrenceStack: currOccurrenceStack
            };
            possiblePaths.push(nextPathWithout);
            // required marker to avoid backtracking paths whose higher priority alternatives already matched
            possiblePaths.push(EXIT_ALTERNATIVE);
            var nextPathWith = {
                idx: currIdx,
                def: prod.definition.concat(utils_1.drop(currDef)),
                ruleStack: currRuleStack,
                occurrenceStack: currOccurrenceStack
            };
            possiblePaths.push(nextPathWith);
        }
        else if (prod instanceof gast_public_1.RepetitionMandatory) {
            // TODO:(THE NEW operators here take a while...) (convert once?)
            var secondIteration = new gast_public_1.Repetition({
                definition: prod.definition,
                idx: prod.idx
            });
            var nextDef = prod.definition.concat([secondIteration], utils_1.drop(currDef));
            var nextPath = {
                idx: currIdx,
                def: nextDef,
                ruleStack: currRuleStack,
                occurrenceStack: currOccurrenceStack
            };
            possiblePaths.push(nextPath);
        }
        else if (prod instanceof gast_public_1.RepetitionMandatoryWithSeparator) {
            // TODO:(THE NEW operators here take a while...) (convert once?)
            var separatorGast = new gast_public_1.Terminal({
                terminalType: prod.separator
            });
            var secondIteration = new gast_public_1.Repetition({
                definition: [separatorGast].concat(prod.definition),
                idx: prod.idx
            });
            var nextDef = prod.definition.concat([secondIteration], utils_1.drop(currDef));
            var nextPath = {
                idx: currIdx,
                def: nextDef,
                ruleStack: currRuleStack,
                occurrenceStack: currOccurrenceStack
            };
            possiblePaths.push(nextPath);
        }
        else if (prod instanceof gast_public_1.RepetitionWithSeparator) {
            // the order of alternatives is meaningful, FILO (Last path will be traversed first).
            var nextPathWithout = {
                idx: currIdx,
                def: utils_1.drop(currDef),
                ruleStack: currRuleStack,
                occurrenceStack: currOccurrenceStack
            };
            possiblePaths.push(nextPathWithout);
            // required marker to avoid backtracking paths whose higher priority alternatives already matched
            possiblePaths.push(EXIT_ALTERNATIVE);
            var separatorGast = new gast_public_1.Terminal({
                terminalType: prod.separator
            });
            var nthRepetition = new gast_public_1.Repetition({
                definition: [separatorGast].concat(prod.definition),
                idx: prod.idx
            });
            var nextDef = prod.definition.concat([nthRepetition], utils_1.drop(currDef));
            var nextPathWith = {
                idx: currIdx,
                def: nextDef,
                ruleStack: currRuleStack,
                occurrenceStack: currOccurrenceStack
            };
            possiblePaths.push(nextPathWith);
        }
        else if (prod instanceof gast_public_1.Repetition) {
            // the order of alternatives is meaningful, FILO (Last path will be traversed first).
            var nextPathWithout = {
                idx: currIdx,
                def: utils_1.drop(currDef),
                ruleStack: currRuleStack,
                occurrenceStack: currOccurrenceStack
            };
            possiblePaths.push(nextPathWithout);
            // required marker to avoid backtracking paths whose higher priority alternatives already matched
            possiblePaths.push(EXIT_ALTERNATIVE);
            // TODO: an empty repetition will cause infinite loops here, will the parser detect this in selfAnalysis?
            var nthRepetition = new gast_public_1.Repetition({
                definition: prod.definition,
                idx: prod.idx
            });
            var nextDef = prod.definition.concat([nthRepetition], utils_1.drop(currDef));
            var nextPathWith = {
                idx: currIdx,
                def: nextDef,
                ruleStack: currRuleStack,
                occurrenceStack: currOccurrenceStack
            };
            possiblePaths.push(nextPathWith);
        }
        else if (prod instanceof gast_public_1.Alternation) {
            // the order of alternatives is meaningful, FILO (Last path will be traversed first).
            for (var i = prod.definition.length - 1; i >= 0; i--) {
                var currAlt = prod.definition[i];
                var currAltPath = {
                    idx: currIdx,
                    def: currAlt.definition.concat(utils_1.drop(currDef)),
                    ruleStack: currRuleStack,
                    occurrenceStack: currOccurrenceStack
                };
                possiblePaths.push(currAltPath);
                possiblePaths.push(EXIT_ALTERNATIVE);
            }
        }
        else if (prod instanceof gast_public_1.Alternative) {
            possiblePaths.push({
                idx: currIdx,
                def: prod.definition.concat(utils_1.drop(currDef)),
                ruleStack: currRuleStack,
                occurrenceStack: currOccurrenceStack
            });
        }
        else if (prod instanceof gast_public_1.Rule) {
            // last because we should only encounter at most a single one of these per invocation.
            possiblePaths.push(expandTopLevelRule(prod, currIdx, currRuleStack, currOccurrenceStack));
        }
        else {
            throw Error("non exhaustive match");
        }
    }
    return result;
}
exports.nextPossibleTokensAfter = nextPossibleTokensAfter;
function expandTopLevelRule(topRule, currIdx, currRuleStack, currOccurrenceStack) {
    var newRuleStack = utils_1.cloneArr(currRuleStack);
    newRuleStack.push(topRule.name);
    var newCurrOccurrenceStack = utils_1.cloneArr(currOccurrenceStack);
    // top rule is always assumed to have been called with occurrence index 1
    newCurrOccurrenceStack.push(1);
    return {
        idx: currIdx,
        def: topRule.definition,
        ruleStack: newRuleStack,
        occurrenceStack: newCurrOccurrenceStack
    };
}
//# sourceMappingURL=interpreter.js.map

/***/ }),

/***/ 15:
/***/ ((__unused_webpack_module, exports) => {

"use strict";

// Lookahead keys are 32Bit integers in the form
// TTTTTTTT-ZZZZZZZZZZZZ-YYYY-XXXXXXXX
// XXXX -> Occurrence Index bitmap.
// YYYY -> DSL Method Type bitmap.
// ZZZZZZZZZZZZZZZ -> Rule short Index bitmap.
// TTTTTTTTT -> alternation alternative index bitmap
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.getKeyForAutomaticLookahead = exports.AT_LEAST_ONE_SEP_IDX = exports.MANY_SEP_IDX = exports.AT_LEAST_ONE_IDX = exports.MANY_IDX = exports.OPTION_IDX = exports.OR_IDX = exports.BITS_FOR_ALT_IDX = exports.BITS_FOR_RULE_IDX = exports.BITS_FOR_OCCURRENCE_IDX = exports.BITS_FOR_METHOD_TYPE = void 0;
exports.BITS_FOR_METHOD_TYPE = 4;
exports.BITS_FOR_OCCURRENCE_IDX = 8;
exports.BITS_FOR_RULE_IDX = 12;
// TODO: validation, this means that there may at most 2^8 --> 256 alternatives for an alternation.
exports.BITS_FOR_ALT_IDX = 8;
// short string used as part of mapping keys.
// being short improves the performance when composing KEYS for maps out of these
// The 5 - 8 bits (16 possible values, are reserved for the DSL method indices)
/* tslint:disable */
exports.OR_IDX = 1 << exports.BITS_FOR_OCCURRENCE_IDX;
exports.OPTION_IDX = 2 << exports.BITS_FOR_OCCURRENCE_IDX;
exports.MANY_IDX = 3 << exports.BITS_FOR_OCCURRENCE_IDX;
exports.AT_LEAST_ONE_IDX = 4 << exports.BITS_FOR_OCCURRENCE_IDX;
exports.MANY_SEP_IDX = 5 << exports.BITS_FOR_OCCURRENCE_IDX;
exports.AT_LEAST_ONE_SEP_IDX = 6 << exports.BITS_FOR_OCCURRENCE_IDX;
/* tslint:enable */
// this actually returns a number, but it is always used as a string (object prop key)
function getKeyForAutomaticLookahead(ruleIdx, dslMethodIdx, occurrence) {
    /* tslint:disable */
    return occurrence | dslMethodIdx | ruleIdx;
    /* tslint:enable */
}
exports.getKeyForAutomaticLookahead = getKeyForAutomaticLookahead;
var BITS_START_FOR_ALT_IDX = 32 - exports.BITS_FOR_ALT_IDX;
//# sourceMappingURL=keys.js.map

/***/ }),

/***/ 364:
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.areTokenCategoriesNotUsed = exports.isStrictPrefixOfPath = exports.containsPath = exports.getLookaheadPathsForOptionalProd = exports.getLookaheadPathsForOr = exports.lookAheadSequenceFromAlternatives = exports.buildSingleAlternativeLookaheadFunction = exports.buildAlternativesLookAheadFunc = exports.buildLookaheadFuncForOptionalProd = exports.buildLookaheadFuncForOr = exports.getProdType = exports.PROD_TYPE = void 0;
var utils_1 = __webpack_require__(3739);
var interpreter_1 = __webpack_require__(9943);
var rest_1 = __webpack_require__(1287);
var tokens_1 = __webpack_require__(4141);
var gast_public_1 = __webpack_require__(5129);
var gast_visitor_public_1 = __webpack_require__(2671);
var PROD_TYPE;
(function (PROD_TYPE) {
    PROD_TYPE[PROD_TYPE["OPTION"] = 0] = "OPTION";
    PROD_TYPE[PROD_TYPE["REPETITION"] = 1] = "REPETITION";
    PROD_TYPE[PROD_TYPE["REPETITION_MANDATORY"] = 2] = "REPETITION_MANDATORY";
    PROD_TYPE[PROD_TYPE["REPETITION_MANDATORY_WITH_SEPARATOR"] = 3] = "REPETITION_MANDATORY_WITH_SEPARATOR";
    PROD_TYPE[PROD_TYPE["REPETITION_WITH_SEPARATOR"] = 4] = "REPETITION_WITH_SEPARATOR";
    PROD_TYPE[PROD_TYPE["ALTERNATION"] = 5] = "ALTERNATION";
})(PROD_TYPE = exports.PROD_TYPE || (exports.PROD_TYPE = {}));
function getProdType(prod) {
    /* istanbul ignore else */
    if (prod instanceof gast_public_1.Option) {
        return PROD_TYPE.OPTION;
    }
    else if (prod instanceof gast_public_1.Repetition) {
        return PROD_TYPE.REPETITION;
    }
    else if (prod instanceof gast_public_1.RepetitionMandatory) {
        return PROD_TYPE.REPETITION_MANDATORY;
    }
    else if (prod instanceof gast_public_1.RepetitionMandatoryWithSeparator) {
        return PROD_TYPE.REPETITION_MANDATORY_WITH_SEPARATOR;
    }
    else if (prod instanceof gast_public_1.RepetitionWithSeparator) {
        return PROD_TYPE.REPETITION_WITH_SEPARATOR;
    }
    else if (prod instanceof gast_public_1.Alternation) {
        return PROD_TYPE.ALTERNATION;
    }
    else {
        throw Error("non exhaustive match");
    }
}
exports.getProdType = getProdType;
function buildLookaheadFuncForOr(occurrence, ruleGrammar, maxLookahead, hasPredicates, dynamicTokensEnabled, laFuncBuilder) {
    var lookAheadPaths = getLookaheadPathsForOr(occurrence, ruleGrammar, maxLookahead);
    var tokenMatcher = areTokenCategoriesNotUsed(lookAheadPaths)
        ? tokens_1.tokenStructuredMatcherNoCategories
        : tokens_1.tokenStructuredMatcher;
    return laFuncBuilder(lookAheadPaths, hasPredicates, tokenMatcher, dynamicTokensEnabled);
}
exports.buildLookaheadFuncForOr = buildLookaheadFuncForOr;
/**
 *  When dealing with an Optional production (OPTION/MANY/2nd iteration of AT_LEAST_ONE/...) we need to compare
 *  the lookahead "inside" the production and the lookahead immediately "after" it in the same top level rule (context free).
 *
 *  Example: given a production:
 *  ABC(DE)?DF
 *
 *  The optional '(DE)?' should only be entered if we see 'DE'. a single Token 'D' is not sufficient to distinguish between the two
 *  alternatives.
 *
 *  @returns A Lookahead function which will return true IFF the parser should parse the Optional production.
 */
function buildLookaheadFuncForOptionalProd(occurrence, ruleGrammar, k, dynamicTokensEnabled, prodType, lookaheadBuilder) {
    var lookAheadPaths = getLookaheadPathsForOptionalProd(occurrence, ruleGrammar, prodType, k);
    var tokenMatcher = areTokenCategoriesNotUsed(lookAheadPaths)
        ? tokens_1.tokenStructuredMatcherNoCategories
        : tokens_1.tokenStructuredMatcher;
    return lookaheadBuilder(lookAheadPaths[0], tokenMatcher, dynamicTokensEnabled);
}
exports.buildLookaheadFuncForOptionalProd = buildLookaheadFuncForOptionalProd;
function buildAlternativesLookAheadFunc(alts, hasPredicates, tokenMatcher, dynamicTokensEnabled) {
    var numOfAlts = alts.length;
    var areAllOneTokenLookahead = utils_1.every(alts, function (currAlt) {
        return utils_1.every(currAlt, function (currPath) {
            return currPath.length === 1;
        });
    });
    // This version takes into account the predicates as well.
    if (hasPredicates) {
        /**
         * @returns {number} - The chosen alternative index
         */
        return function (orAlts) {
            // unfortunately the predicates must be extracted every single time
            // as they cannot be cached due to references to parameters(vars) which are no longer valid.
            // note that in the common case of no predicates, no cpu time will be wasted on this (see else block)
            var predicates = utils_1.map(orAlts, function (currAlt) { return currAlt.GATE; });
            for (var t = 0; t < numOfAlts; t++) {
                var currAlt = alts[t];
                var currNumOfPaths = currAlt.length;
                var currPredicate = predicates[t];
                if (currPredicate !== undefined && currPredicate.call(this) === false) {
                    // if the predicate does not match there is no point in checking the paths
                    continue;
                }
                nextPath: for (var j = 0; j < currNumOfPaths; j++) {
                    var currPath = currAlt[j];
                    var currPathLength = currPath.length;
                    for (var i = 0; i < currPathLength; i++) {
                        var nextToken = this.LA(i + 1);
                        if (tokenMatcher(nextToken, currPath[i]) === false) {
                            // mismatch in current path
                            // try the next pth
                            continue nextPath;
                        }
                    }
                    // found a full path that matches.
                    // this will also work for an empty ALT as the loop will be skipped
                    return t;
                }
                // none of the paths for the current alternative matched
                // try the next alternative
            }
            // none of the alternatives could be matched
            return undefined;
        };
    }
    else if (areAllOneTokenLookahead && !dynamicTokensEnabled) {
        // optimized (common) case of all the lookaheads paths requiring only
        // a single token lookahead. These Optimizations cannot work if dynamically defined Tokens are used.
        var singleTokenAlts = utils_1.map(alts, function (currAlt) {
            return utils_1.flatten(currAlt);
        });
        var choiceToAlt_1 = utils_1.reduce(singleTokenAlts, function (result, currAlt, idx) {
            utils_1.forEach(currAlt, function (currTokType) {
                if (!utils_1.has(result, currTokType.tokenTypeIdx)) {
                    result[currTokType.tokenTypeIdx] = idx;
                }
                utils_1.forEach(currTokType.categoryMatches, function (currExtendingType) {
                    if (!utils_1.has(result, currExtendingType)) {
                        result[currExtendingType] = idx;
                    }
                });
            });
            return result;
        }, []);
        /**
         * @returns {number} - The chosen alternative index
         */
        return function () {
            var nextToken = this.LA(1);
            return choiceToAlt_1[nextToken.tokenTypeIdx];
        };
    }
    else {
        // optimized lookahead without needing to check the predicates at all.
        // this causes code duplication which is intentional to improve performance.
        /**
         * @returns {number} - The chosen alternative index
         */
        return function () {
            for (var t = 0; t < numOfAlts; t++) {
                var currAlt = alts[t];
                var currNumOfPaths = currAlt.length;
                nextPath: for (var j = 0; j < currNumOfPaths; j++) {
                    var currPath = currAlt[j];
                    var currPathLength = currPath.length;
                    for (var i = 0; i < currPathLength; i++) {
                        var nextToken = this.LA(i + 1);
                        if (tokenMatcher(nextToken, currPath[i]) === false) {
                            // mismatch in current path
                            // try the next pth
                            continue nextPath;
                        }
                    }
                    // found a full path that matches.
                    // this will also work for an empty ALT as the loop will be skipped
                    return t;
                }
                // none of the paths for the current alternative matched
                // try the next alternative
            }
            // none of the alternatives could be matched
            return undefined;
        };
    }
}
exports.buildAlternativesLookAheadFunc = buildAlternativesLookAheadFunc;
function buildSingleAlternativeLookaheadFunction(alt, tokenMatcher, dynamicTokensEnabled) {
    var areAllOneTokenLookahead = utils_1.every(alt, function (currPath) {
        return currPath.length === 1;
    });
    var numOfPaths = alt.length;
    // optimized (common) case of all the lookaheads paths requiring only
    // a single token lookahead.
    if (areAllOneTokenLookahead && !dynamicTokensEnabled) {
        var singleTokensTypes = utils_1.flatten(alt);
        if (singleTokensTypes.length === 1 &&
            utils_1.isEmpty(singleTokensTypes[0].categoryMatches)) {
            var expectedTokenType = singleTokensTypes[0];
            var expectedTokenUniqueKey_1 = expectedTokenType.tokenTypeIdx;
            return function () {
                return this.LA(1).tokenTypeIdx === expectedTokenUniqueKey_1;
            };
        }
        else {
            var choiceToAlt_2 = utils_1.reduce(singleTokensTypes, function (result, currTokType, idx) {
                result[currTokType.tokenTypeIdx] = true;
                utils_1.forEach(currTokType.categoryMatches, function (currExtendingType) {
                    result[currExtendingType] = true;
                });
                return result;
            }, []);
            return function () {
                var nextToken = this.LA(1);
                return choiceToAlt_2[nextToken.tokenTypeIdx] === true;
            };
        }
    }
    else {
        return function () {
            nextPath: for (var j = 0; j < numOfPaths; j++) {
                var currPath = alt[j];
                var currPathLength = currPath.length;
                for (var i = 0; i < currPathLength; i++) {
                    var nextToken = this.LA(i + 1);
                    if (tokenMatcher(nextToken, currPath[i]) === false) {
                        // mismatch in current path
                        // try the next pth
                        continue nextPath;
                    }
                }
                // found a full path that matches.
                return true;
            }
            // none of the paths matched
            return false;
        };
    }
}
exports.buildSingleAlternativeLookaheadFunction = buildSingleAlternativeLookaheadFunction;
var RestDefinitionFinderWalker = /** @class */ (function (_super) {
    __extends(RestDefinitionFinderWalker, _super);
    function RestDefinitionFinderWalker(topProd, targetOccurrence, targetProdType) {
        var _this = _super.call(this) || this;
        _this.topProd = topProd;
        _this.targetOccurrence = targetOccurrence;
        _this.targetProdType = targetProdType;
        return _this;
    }
    RestDefinitionFinderWalker.prototype.startWalking = function () {
        this.walk(this.topProd);
        return this.restDef;
    };
    RestDefinitionFinderWalker.prototype.checkIsTarget = function (node, expectedProdType, currRest, prevRest) {
        if (node.idx === this.targetOccurrence &&
            this.targetProdType === expectedProdType) {
            this.restDef = currRest.concat(prevRest);
            return true;
        }
        // performance optimization, do not iterate over the entire Grammar ast after we have found the target
        return false;
    };
    RestDefinitionFinderWalker.prototype.walkOption = function (optionProd, currRest, prevRest) {
        if (!this.checkIsTarget(optionProd, PROD_TYPE.OPTION, currRest, prevRest)) {
            _super.prototype.walkOption.call(this, optionProd, currRest, prevRest);
        }
    };
    RestDefinitionFinderWalker.prototype.walkAtLeastOne = function (atLeastOneProd, currRest, prevRest) {
        if (!this.checkIsTarget(atLeastOneProd, PROD_TYPE.REPETITION_MANDATORY, currRest, prevRest)) {
            _super.prototype.walkOption.call(this, atLeastOneProd, currRest, prevRest);
        }
    };
    RestDefinitionFinderWalker.prototype.walkAtLeastOneSep = function (atLeastOneSepProd, currRest, prevRest) {
        if (!this.checkIsTarget(atLeastOneSepProd, PROD_TYPE.REPETITION_MANDATORY_WITH_SEPARATOR, currRest, prevRest)) {
            _super.prototype.walkOption.call(this, atLeastOneSepProd, currRest, prevRest);
        }
    };
    RestDefinitionFinderWalker.prototype.walkMany = function (manyProd, currRest, prevRest) {
        if (!this.checkIsTarget(manyProd, PROD_TYPE.REPETITION, currRest, prevRest)) {
            _super.prototype.walkOption.call(this, manyProd, currRest, prevRest);
        }
    };
    RestDefinitionFinderWalker.prototype.walkManySep = function (manySepProd, currRest, prevRest) {
        if (!this.checkIsTarget(manySepProd, PROD_TYPE.REPETITION_WITH_SEPARATOR, currRest, prevRest)) {
            _super.prototype.walkOption.call(this, manySepProd, currRest, prevRest);
        }
    };
    return RestDefinitionFinderWalker;
}(rest_1.RestWalker));
/**
 * Returns the definition of a target production in a top level level rule.
 */
var InsideDefinitionFinderVisitor = /** @class */ (function (_super) {
    __extends(InsideDefinitionFinderVisitor, _super);
    function InsideDefinitionFinderVisitor(targetOccurrence, targetProdType, targetRef) {
        var _this = _super.call(this) || this;
        _this.targetOccurrence = targetOccurrence;
        _this.targetProdType = targetProdType;
        _this.targetRef = targetRef;
        _this.result = [];
        return _this;
    }
    InsideDefinitionFinderVisitor.prototype.checkIsTarget = function (node, expectedProdName) {
        if (node.idx === this.targetOccurrence &&
            this.targetProdType === expectedProdName &&
            (this.targetRef === undefined || node === this.targetRef)) {
            this.result = node.definition;
        }
    };
    InsideDefinitionFinderVisitor.prototype.visitOption = function (node) {
        this.checkIsTarget(node, PROD_TYPE.OPTION);
    };
    InsideDefinitionFinderVisitor.prototype.visitRepetition = function (node) {
        this.checkIsTarget(node, PROD_TYPE.REPETITION);
    };
    InsideDefinitionFinderVisitor.prototype.visitRepetitionMandatory = function (node) {
        this.checkIsTarget(node, PROD_TYPE.REPETITION_MANDATORY);
    };
    InsideDefinitionFinderVisitor.prototype.visitRepetitionMandatoryWithSeparator = function (node) {
        this.checkIsTarget(node, PROD_TYPE.REPETITION_MANDATORY_WITH_SEPARATOR);
    };
    InsideDefinitionFinderVisitor.prototype.visitRepetitionWithSeparator = function (node) {
        this.checkIsTarget(node, PROD_TYPE.REPETITION_WITH_SEPARATOR);
    };
    InsideDefinitionFinderVisitor.prototype.visitAlternation = function (node) {
        this.checkIsTarget(node, PROD_TYPE.ALTERNATION);
    };
    return InsideDefinitionFinderVisitor;
}(gast_visitor_public_1.GAstVisitor));
function initializeArrayOfArrays(size) {
    var result = new Array(size);
    for (var i = 0; i < size; i++) {
        result[i] = [];
    }
    return result;
}
/**
 * A sort of hash function between a Path in the grammar and a string.
 * Note that this returns multiple "hashes" to support the scenario of token categories.
 * -  A single path with categories may match multiple **actual** paths.
 */
function pathToHashKeys(path) {
    var keys = [""];
    for (var i = 0; i < path.length; i++) {
        var tokType = path[i];
        var longerKeys = [];
        for (var j = 0; j < keys.length; j++) {
            var currShorterKey = keys[j];
            longerKeys.push(currShorterKey + "_" + tokType.tokenTypeIdx);
            for (var t = 0; t < tokType.categoryMatches.length; t++) {
                var categoriesKeySuffix = "_" + tokType.categoryMatches[t];
                longerKeys.push(currShorterKey + categoriesKeySuffix);
            }
        }
        keys = longerKeys;
    }
    return keys;
}
/**
 * Imperative style due to being called from a hot spot
 */
function isUniquePrefixHash(altKnownPathsKeys, searchPathKeys, idx) {
    for (var currAltIdx = 0; currAltIdx < altKnownPathsKeys.length; currAltIdx++) {
        // We only want to test vs the other alternatives
        if (currAltIdx === idx) {
            continue;
        }
        var otherAltKnownPathsKeys = altKnownPathsKeys[currAltIdx];
        for (var searchIdx = 0; searchIdx < searchPathKeys.length; searchIdx++) {
            var searchKey = searchPathKeys[searchIdx];
            if (otherAltKnownPathsKeys[searchKey] === true) {
                return false;
            }
        }
    }
    // None of the SearchPathKeys were found in any of the other alternatives
    return true;
}
function lookAheadSequenceFromAlternatives(altsDefs, k) {
    var partialAlts = utils_1.map(altsDefs, function (currAlt) { return interpreter_1.possiblePathsFrom([currAlt], 1); });
    var finalResult = initializeArrayOfArrays(partialAlts.length);
    var altsHashes = utils_1.map(partialAlts, function (currAltPaths) {
        var dict = {};
        utils_1.forEach(currAltPaths, function (item) {
            var keys = pathToHashKeys(item.partialPath);
            utils_1.forEach(keys, function (currKey) {
                dict[currKey] = true;
            });
        });
        return dict;
    });
    var newData = partialAlts;
    // maxLookahead loop
    for (var pathLength = 1; pathLength <= k; pathLength++) {
        var currDataset = newData;
        newData = initializeArrayOfArrays(currDataset.length);
        var _loop_1 = function (altIdx) {
            var currAltPathsAndSuffixes = currDataset[altIdx];
            // paths in current alternative loop
            for (var currPathIdx = 0; currPathIdx < currAltPathsAndSuffixes.length; currPathIdx++) {
                var currPathPrefix = currAltPathsAndSuffixes[currPathIdx].partialPath;
                var suffixDef = currAltPathsAndSuffixes[currPathIdx].suffixDef;
                var prefixKeys = pathToHashKeys(currPathPrefix);
                var isUnique = isUniquePrefixHash(altsHashes, prefixKeys, altIdx);
                // End of the line for this path.
                if (isUnique || utils_1.isEmpty(suffixDef) || currPathPrefix.length === k) {
                    var currAltResult = finalResult[altIdx];
                    // TODO: Can we implement a containsPath using Maps/Dictionaries?
                    if (containsPath(currAltResult, currPathPrefix) === false) {
                        currAltResult.push(currPathPrefix);
                        // Update all new  keys for the current path.
                        for (var j = 0; j < prefixKeys.length; j++) {
                            var currKey = prefixKeys[j];
                            altsHashes[altIdx][currKey] = true;
                        }
                    }
                }
                // Expand longer paths
                else {
                    var newPartialPathsAndSuffixes = interpreter_1.possiblePathsFrom(suffixDef, pathLength + 1, currPathPrefix);
                    newData[altIdx] = newData[altIdx].concat(newPartialPathsAndSuffixes);
                    // Update keys for new known paths
                    utils_1.forEach(newPartialPathsAndSuffixes, function (item) {
                        var prefixKeys = pathToHashKeys(item.partialPath);
                        utils_1.forEach(prefixKeys, function (key) {
                            altsHashes[altIdx][key] = true;
                        });
                    });
                }
            }
        };
        // alternatives loop
        for (var altIdx = 0; altIdx < currDataset.length; altIdx++) {
            _loop_1(altIdx);
        }
    }
    return finalResult;
}
exports.lookAheadSequenceFromAlternatives = lookAheadSequenceFromAlternatives;
function getLookaheadPathsForOr(occurrence, ruleGrammar, k, orProd) {
    var visitor = new InsideDefinitionFinderVisitor(occurrence, PROD_TYPE.ALTERNATION, orProd);
    ruleGrammar.accept(visitor);
    return lookAheadSequenceFromAlternatives(visitor.result, k);
}
exports.getLookaheadPathsForOr = getLookaheadPathsForOr;
function getLookaheadPathsForOptionalProd(occurrence, ruleGrammar, prodType, k) {
    var insideDefVisitor = new InsideDefinitionFinderVisitor(occurrence, prodType);
    ruleGrammar.accept(insideDefVisitor);
    var insideDef = insideDefVisitor.result;
    var afterDefWalker = new RestDefinitionFinderWalker(ruleGrammar, occurrence, prodType);
    var afterDef = afterDefWalker.startWalking();
    var insideFlat = new gast_public_1.Alternative({ definition: insideDef });
    var afterFlat = new gast_public_1.Alternative({ definition: afterDef });
    return lookAheadSequenceFromAlternatives([insideFlat, afterFlat], k);
}
exports.getLookaheadPathsForOptionalProd = getLookaheadPathsForOptionalProd;
function containsPath(alternative, searchPath) {
    compareOtherPath: for (var i = 0; i < alternative.length; i++) {
        var otherPath = alternative[i];
        if (otherPath.length !== searchPath.length) {
            continue;
        }
        for (var j = 0; j < otherPath.length; j++) {
            var searchTok = searchPath[j];
            var otherTok = otherPath[j];
            var matchingTokens = searchTok === otherTok ||
                otherTok.categoryMatchesMap[searchTok.tokenTypeIdx] !== undefined;
            if (matchingTokens === false) {
                continue compareOtherPath;
            }
        }
        return true;
    }
    return false;
}
exports.containsPath = containsPath;
function isStrictPrefixOfPath(prefix, other) {
    return (prefix.length < other.length &&
        utils_1.every(prefix, function (tokType, idx) {
            var otherTokType = other[idx];
            return (tokType === otherTokType ||
                otherTokType.categoryMatchesMap[tokType.tokenTypeIdx]);
        }));
}
exports.isStrictPrefixOfPath = isStrictPrefixOfPath;
function areTokenCategoriesNotUsed(lookAheadPaths) {
    return utils_1.every(lookAheadPaths, function (singleAltPaths) {
        return utils_1.every(singleAltPaths, function (singlePath) {
            return utils_1.every(singlePath, function (token) { return utils_1.isEmpty(token.categoryMatches); });
        });
    });
}
exports.areTokenCategoriesNotUsed = areTokenCategoriesNotUsed;
//# sourceMappingURL=lookahead.js.map

/***/ }),

/***/ 190:
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.GastRefResolverVisitor = exports.resolveGrammar = void 0;
var parser_1 = __webpack_require__(602);
var utils_1 = __webpack_require__(3739);
var gast_visitor_public_1 = __webpack_require__(2671);
function resolveGrammar(topLevels, errMsgProvider) {
    var refResolver = new GastRefResolverVisitor(topLevels, errMsgProvider);
    refResolver.resolveRefs();
    return refResolver.errors;
}
exports.resolveGrammar = resolveGrammar;
var GastRefResolverVisitor = /** @class */ (function (_super) {
    __extends(GastRefResolverVisitor, _super);
    function GastRefResolverVisitor(nameToTopRule, errMsgProvider) {
        var _this = _super.call(this) || this;
        _this.nameToTopRule = nameToTopRule;
        _this.errMsgProvider = errMsgProvider;
        _this.errors = [];
        return _this;
    }
    GastRefResolverVisitor.prototype.resolveRefs = function () {
        var _this = this;
        utils_1.forEach(utils_1.values(this.nameToTopRule), function (prod) {
            _this.currTopLevel = prod;
            prod.accept(_this);
        });
    };
    GastRefResolverVisitor.prototype.visitNonTerminal = function (node) {
        var ref = this.nameToTopRule[node.nonTerminalName];
        if (!ref) {
            var msg = this.errMsgProvider.buildRuleNotFoundError(this.currTopLevel, node);
            this.errors.push({
                message: msg,
                type: parser_1.ParserDefinitionErrorType.UNRESOLVED_SUBRULE_REF,
                ruleName: this.currTopLevel.name,
                unresolvedRefName: node.nonTerminalName
            });
        }
        else {
            node.referencedRule = ref;
        }
    };
    return GastRefResolverVisitor;
}(gast_visitor_public_1.GAstVisitor));
exports.GastRefResolverVisitor = GastRefResolverVisitor;
//# sourceMappingURL=resolver.js.map

/***/ }),

/***/ 1287:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.RestWalker = void 0;
var utils_1 = __webpack_require__(3739);
var gast_public_1 = __webpack_require__(5129);
/**
 *  A Grammar Walker that computes the "remaining" grammar "after" a productions in the grammar.
 */
var RestWalker = /** @class */ (function () {
    function RestWalker() {
    }
    RestWalker.prototype.walk = function (prod, prevRest) {
        var _this = this;
        if (prevRest === void 0) { prevRest = []; }
        utils_1.forEach(prod.definition, function (subProd, index) {
            var currRest = utils_1.drop(prod.definition, index + 1);
            /* istanbul ignore else */
            if (subProd instanceof gast_public_1.NonTerminal) {
                _this.walkProdRef(subProd, currRest, prevRest);
            }
            else if (subProd instanceof gast_public_1.Terminal) {
                _this.walkTerminal(subProd, currRest, prevRest);
            }
            else if (subProd instanceof gast_public_1.Alternative) {
                _this.walkFlat(subProd, currRest, prevRest);
            }
            else if (subProd instanceof gast_public_1.Option) {
                _this.walkOption(subProd, currRest, prevRest);
            }
            else if (subProd instanceof gast_public_1.RepetitionMandatory) {
                _this.walkAtLeastOne(subProd, currRest, prevRest);
            }
            else if (subProd instanceof gast_public_1.RepetitionMandatoryWithSeparator) {
                _this.walkAtLeastOneSep(subProd, currRest, prevRest);
            }
            else if (subProd instanceof gast_public_1.RepetitionWithSeparator) {
                _this.walkManySep(subProd, currRest, prevRest);
            }
            else if (subProd instanceof gast_public_1.Repetition) {
                _this.walkMany(subProd, currRest, prevRest);
            }
            else if (subProd instanceof gast_public_1.Alternation) {
                _this.walkOr(subProd, currRest, prevRest);
            }
            else {
                throw Error("non exhaustive match");
            }
        });
    };
    RestWalker.prototype.walkTerminal = function (terminal, currRest, prevRest) { };
    RestWalker.prototype.walkProdRef = function (refProd, currRest, prevRest) { };
    RestWalker.prototype.walkFlat = function (flatProd, currRest, prevRest) {
        // ABCDEF => after the D the rest is EF
        var fullOrRest = currRest.concat(prevRest);
        this.walk(flatProd, fullOrRest);
    };
    RestWalker.prototype.walkOption = function (optionProd, currRest, prevRest) {
        // ABC(DE)?F => after the (DE)? the rest is F
        var fullOrRest = currRest.concat(prevRest);
        this.walk(optionProd, fullOrRest);
    };
    RestWalker.prototype.walkAtLeastOne = function (atLeastOneProd, currRest, prevRest) {
        // ABC(DE)+F => after the (DE)+ the rest is (DE)?F
        var fullAtLeastOneRest = [
            new gast_public_1.Option({ definition: atLeastOneProd.definition })
        ].concat(currRest, prevRest);
        this.walk(atLeastOneProd, fullAtLeastOneRest);
    };
    RestWalker.prototype.walkAtLeastOneSep = function (atLeastOneSepProd, currRest, prevRest) {
        // ABC DE(,DE)* F => after the (,DE)+ the rest is (,DE)?F
        var fullAtLeastOneSepRest = restForRepetitionWithSeparator(atLeastOneSepProd, currRest, prevRest);
        this.walk(atLeastOneSepProd, fullAtLeastOneSepRest);
    };
    RestWalker.prototype.walkMany = function (manyProd, currRest, prevRest) {
        // ABC(DE)*F => after the (DE)* the rest is (DE)?F
        var fullManyRest = [
            new gast_public_1.Option({ definition: manyProd.definition })
        ].concat(currRest, prevRest);
        this.walk(manyProd, fullManyRest);
    };
    RestWalker.prototype.walkManySep = function (manySepProd, currRest, prevRest) {
        // ABC (DE(,DE)*)? F => after the (,DE)* the rest is (,DE)?F
        var fullManySepRest = restForRepetitionWithSeparator(manySepProd, currRest, prevRest);
        this.walk(manySepProd, fullManySepRest);
    };
    RestWalker.prototype.walkOr = function (orProd, currRest, prevRest) {
        var _this = this;
        // ABC(D|E|F)G => when finding the (D|E|F) the rest is G
        var fullOrRest = currRest.concat(prevRest);
        // walk all different alternatives
        utils_1.forEach(orProd.definition, function (alt) {
            // wrapping each alternative in a single definition wrapper
            // to avoid errors in computing the rest of that alternative in the invocation to computeInProdFollows
            // (otherwise for OR([alt1,alt2]) alt2 will be considered in 'rest' of alt1
            var prodWrapper = new gast_public_1.Alternative({ definition: [alt] });
            _this.walk(prodWrapper, fullOrRest);
        });
    };
    return RestWalker;
}());
exports.RestWalker = RestWalker;
function restForRepetitionWithSeparator(repSepProd, currRest, prevRest) {
    var repSepRest = [
        new gast_public_1.Option({
            definition: [new gast_public_1.Terminal({ terminalType: repSepProd.separator })].concat(repSepProd.definition)
        })
    ];
    var fullRepSepRest = repSepRest.concat(currRest, prevRest);
    return fullRepSepRest;
}
//# sourceMappingURL=rest.js.map

/***/ }),

/***/ 602:
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.EmbeddedActionsParser = exports.CstParser = exports.Parser = exports.EMPTY_ALT = exports.ParserDefinitionErrorType = exports.DEFAULT_RULE_CONFIG = exports.DEFAULT_PARSER_CONFIG = exports.END_OF_FILE = void 0;
var utils_1 = __webpack_require__(3739);
var follow_1 = __webpack_require__(6961);
var tokens_public_1 = __webpack_require__(8497);
var errors_public_1 = __webpack_require__(8376);
var gast_resolver_public_1 = __webpack_require__(3629);
var recoverable_1 = __webpack_require__(8565);
var looksahead_1 = __webpack_require__(2485);
var tree_builder_1 = __webpack_require__(5184);
var lexer_adapter_1 = __webpack_require__(8833);
var recognizer_api_1 = __webpack_require__(8809);
var recognizer_engine_1 = __webpack_require__(4645);
var error_handler_1 = __webpack_require__(1617);
var context_assist_1 = __webpack_require__(9366);
var gast_recorder_1 = __webpack_require__(8561);
var perf_tracer_1 = __webpack_require__(4166);
exports.END_OF_FILE = tokens_public_1.createTokenInstance(tokens_public_1.EOF, "", NaN, NaN, NaN, NaN, NaN, NaN);
Object.freeze(exports.END_OF_FILE);
exports.DEFAULT_PARSER_CONFIG = Object.freeze({
    recoveryEnabled: false,
    maxLookahead: 3,
    dynamicTokensEnabled: false,
    outputCst: true,
    errorMessageProvider: errors_public_1.defaultParserErrorProvider,
    nodeLocationTracking: "none",
    traceInitPerf: false,
    skipValidations: false
});
exports.DEFAULT_RULE_CONFIG = Object.freeze({
    recoveryValueFunc: function () { return undefined; },
    resyncEnabled: true
});
var ParserDefinitionErrorType;
(function (ParserDefinitionErrorType) {
    ParserDefinitionErrorType[ParserDefinitionErrorType["INVALID_RULE_NAME"] = 0] = "INVALID_RULE_NAME";
    ParserDefinitionErrorType[ParserDefinitionErrorType["DUPLICATE_RULE_NAME"] = 1] = "DUPLICATE_RULE_NAME";
    ParserDefinitionErrorType[ParserDefinitionErrorType["INVALID_RULE_OVERRIDE"] = 2] = "INVALID_RULE_OVERRIDE";
    ParserDefinitionErrorType[ParserDefinitionErrorType["DUPLICATE_PRODUCTIONS"] = 3] = "DUPLICATE_PRODUCTIONS";
    ParserDefinitionErrorType[ParserDefinitionErrorType["UNRESOLVED_SUBRULE_REF"] = 4] = "UNRESOLVED_SUBRULE_REF";
    ParserDefinitionErrorType[ParserDefinitionErrorType["LEFT_RECURSION"] = 5] = "LEFT_RECURSION";
    ParserDefinitionErrorType[ParserDefinitionErrorType["NONE_LAST_EMPTY_ALT"] = 6] = "NONE_LAST_EMPTY_ALT";
    ParserDefinitionErrorType[ParserDefinitionErrorType["AMBIGUOUS_ALTS"] = 7] = "AMBIGUOUS_ALTS";
    ParserDefinitionErrorType[ParserDefinitionErrorType["CONFLICT_TOKENS_RULES_NAMESPACE"] = 8] = "CONFLICT_TOKENS_RULES_NAMESPACE";
    ParserDefinitionErrorType[ParserDefinitionErrorType["INVALID_TOKEN_NAME"] = 9] = "INVALID_TOKEN_NAME";
    ParserDefinitionErrorType[ParserDefinitionErrorType["NO_NON_EMPTY_LOOKAHEAD"] = 10] = "NO_NON_EMPTY_LOOKAHEAD";
    ParserDefinitionErrorType[ParserDefinitionErrorType["AMBIGUOUS_PREFIX_ALTS"] = 11] = "AMBIGUOUS_PREFIX_ALTS";
    ParserDefinitionErrorType[ParserDefinitionErrorType["TOO_MANY_ALTS"] = 12] = "TOO_MANY_ALTS";
})(ParserDefinitionErrorType = exports.ParserDefinitionErrorType || (exports.ParserDefinitionErrorType = {}));
function EMPTY_ALT(value) {
    if (value === void 0) { value = undefined; }
    return function () {
        return value;
    };
}
exports.EMPTY_ALT = EMPTY_ALT;
var Parser = /** @class */ (function () {
    function Parser(tokenVocabulary, config) {
        this.definitionErrors = [];
        this.selfAnalysisDone = false;
        var that = this;
        that.initErrorHandler(config);
        that.initLexerAdapter();
        that.initLooksAhead(config);
        that.initRecognizerEngine(tokenVocabulary, config);
        that.initRecoverable(config);
        that.initTreeBuilder(config);
        that.initContentAssist();
        that.initGastRecorder(config);
        that.initPerformanceTracer(config);
        if (utils_1.has(config, "ignoredIssues")) {
            throw new Error("The <ignoredIssues> IParserConfig property has been deprecated.\n\t" +
                "Please use the <IGNORE_AMBIGUITIES> flag on the relevant DSL method instead.\n\t" +
                "See: https://sap.github.io/chevrotain/docs/guide/resolving_grammar_errors.html#IGNORING_AMBIGUITIES\n\t" +
                "For further details.");
        }
        this.skipValidations = utils_1.has(config, "skipValidations")
            ? config.skipValidations
            : exports.DEFAULT_PARSER_CONFIG.skipValidations;
    }
    /**
     *  @deprecated use the **instance** method with the same name instead
     */
    Parser.performSelfAnalysis = function (parserInstance) {
        throw Error("The **static** `performSelfAnalysis` method has been deprecated." +
            "\t\nUse the **instance** method with the same name instead.");
    };
    Parser.prototype.performSelfAnalysis = function () {
        var _this = this;
        this.TRACE_INIT("performSelfAnalysis", function () {
            var defErrorsMsgs;
            _this.selfAnalysisDone = true;
            var className = _this.className;
            _this.TRACE_INIT("toFastProps", function () {
                // Without this voodoo magic the parser would be x3-x4 slower
                // It seems it is better to invoke `toFastProperties` **before**
                // Any manipulations of the `this` object done during the recording phase.
                utils_1.toFastProperties(_this);
            });
            _this.TRACE_INIT("Grammar Recording", function () {
                try {
                    _this.enableRecording();
                    // Building the GAST
                    utils_1.forEach(_this.definedRulesNames, function (currRuleName) {
                        var wrappedRule = _this[currRuleName];
                        var originalGrammarAction = wrappedRule["originalGrammarAction"];
                        var recordedRuleGast = undefined;
                        _this.TRACE_INIT(currRuleName + " Rule", function () {
                            recordedRuleGast = _this.topLevelRuleRecord(currRuleName, originalGrammarAction);
                        });
                        _this.gastProductionsCache[currRuleName] = recordedRuleGast;
                    });
                }
                finally {
                    _this.disableRecording();
                }
            });
            var resolverErrors = [];
            _this.TRACE_INIT("Grammar Resolving", function () {
                resolverErrors = gast_resolver_public_1.resolveGrammar({
                    rules: utils_1.values(_this.gastProductionsCache)
                });
                _this.definitionErrors.push.apply(_this.definitionErrors, resolverErrors); // mutability for the win?
            });
            _this.TRACE_INIT("Grammar Validations", function () {
                // only perform additional grammar validations IFF no resolving errors have occurred.
                // as unresolved grammar may lead to unhandled runtime exceptions in the follow up validations.
                if (utils_1.isEmpty(resolverErrors) && _this.skipValidations === false) {
                    var validationErrors = gast_resolver_public_1.validateGrammar({
                        rules: utils_1.values(_this.gastProductionsCache),
                        maxLookahead: _this.maxLookahead,
                        tokenTypes: utils_1.values(_this.tokensMap),
                        errMsgProvider: errors_public_1.defaultGrammarValidatorErrorProvider,
                        grammarName: className
                    });
                    _this.definitionErrors.push.apply(_this.definitionErrors, validationErrors); // mutability for the win?
                }
            });
            // this analysis may fail if the grammar is not perfectly valid
            if (utils_1.isEmpty(_this.definitionErrors)) {
                // The results of these computations are not needed unless error recovery is enabled.
                if (_this.recoveryEnabled) {
                    _this.TRACE_INIT("computeAllProdsFollows", function () {
                        var allFollows = follow_1.computeAllProdsFollows(utils_1.values(_this.gastProductionsCache));
                        _this.resyncFollows = allFollows;
                    });
                }
                _this.TRACE_INIT("ComputeLookaheadFunctions", function () {
                    _this.preComputeLookaheadFunctions(utils_1.values(_this.gastProductionsCache));
                });
            }
            if (!Parser.DEFER_DEFINITION_ERRORS_HANDLING &&
                !utils_1.isEmpty(_this.definitionErrors)) {
                defErrorsMsgs = utils_1.map(_this.definitionErrors, function (defError) { return defError.message; });
                throw new Error("Parser Definition Errors detected:\n " + defErrorsMsgs.join("\n-------------------------------\n"));
            }
        });
    };
    // Set this flag to true if you don't want the Parser to throw error when problems in it's definition are detected.
    // (normally during the parser's constructor).
    // This is a design time flag, it will not affect the runtime error handling of the parser, just design time errors,
    // for example: duplicate rule names, referencing an unresolved subrule, ect...
    // This flag should not be enabled during normal usage, it is used in special situations, for example when
    // needing to display the parser definition errors in some GUI(online playground).
    Parser.DEFER_DEFINITION_ERRORS_HANDLING = false;
    return Parser;
}());
exports.Parser = Parser;
utils_1.applyMixins(Parser, [
    recoverable_1.Recoverable,
    looksahead_1.LooksAhead,
    tree_builder_1.TreeBuilder,
    lexer_adapter_1.LexerAdapter,
    recognizer_engine_1.RecognizerEngine,
    recognizer_api_1.RecognizerApi,
    error_handler_1.ErrorHandler,
    context_assist_1.ContentAssist,
    gast_recorder_1.GastRecorder,
    perf_tracer_1.PerformanceTracer
]);
var CstParser = /** @class */ (function (_super) {
    __extends(CstParser, _super);
    function CstParser(tokenVocabulary, config) {
        if (config === void 0) { config = exports.DEFAULT_PARSER_CONFIG; }
        var _this = this;
        var configClone = utils_1.cloneObj(config);
        configClone.outputCst = true;
        _this = _super.call(this, tokenVocabulary, configClone) || this;
        return _this;
    }
    return CstParser;
}(Parser));
exports.CstParser = CstParser;
var EmbeddedActionsParser = /** @class */ (function (_super) {
    __extends(EmbeddedActionsParser, _super);
    function EmbeddedActionsParser(tokenVocabulary, config) {
        if (config === void 0) { config = exports.DEFAULT_PARSER_CONFIG; }
        var _this = this;
        var configClone = utils_1.cloneObj(config);
        configClone.outputCst = false;
        _this = _super.call(this, tokenVocabulary, configClone) || this;
        return _this;
    }
    return EmbeddedActionsParser;
}(Parser));
exports.EmbeddedActionsParser = EmbeddedActionsParser;
//# sourceMappingURL=parser.js.map

/***/ }),

/***/ 9366:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.ContentAssist = void 0;
var interpreter_1 = __webpack_require__(9943);
var utils_1 = __webpack_require__(3739);
var ContentAssist = /** @class */ (function () {
    function ContentAssist() {
    }
    ContentAssist.prototype.initContentAssist = function () { };
    ContentAssist.prototype.computeContentAssist = function (startRuleName, precedingInput) {
        var startRuleGast = this.gastProductionsCache[startRuleName];
        if (utils_1.isUndefined(startRuleGast)) {
            throw Error("Rule ->" + startRuleName + "<- does not exist in this grammar.");
        }
        return interpreter_1.nextPossibleTokensAfter([startRuleGast], precedingInput, this.tokenMatcher, this.maxLookahead);
    };
    // TODO: should this be a member method or a utility? it does not have any state or usage of 'this'...
    // TODO: should this be more explicitly part of the public API?
    ContentAssist.prototype.getNextPossibleTokenTypes = function (grammarPath) {
        var topRuleName = utils_1.first(grammarPath.ruleStack);
        var gastProductions = this.getGAstProductions();
        var topProduction = gastProductions[topRuleName];
        var nextPossibleTokenTypes = new interpreter_1.NextAfterTokenWalker(topProduction, grammarPath).startWalking();
        return nextPossibleTokenTypes;
    };
    return ContentAssist;
}());
exports.ContentAssist = ContentAssist;
//# sourceMappingURL=context_assist.js.map

/***/ }),

/***/ 1617:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.ErrorHandler = void 0;
var exceptions_public_1 = __webpack_require__(172);
var utils_1 = __webpack_require__(3739);
var lookahead_1 = __webpack_require__(364);
var parser_1 = __webpack_require__(602);
/**
 * Trait responsible for runtime parsing errors.
 */
var ErrorHandler = /** @class */ (function () {
    function ErrorHandler() {
    }
    ErrorHandler.prototype.initErrorHandler = function (config) {
        this._errors = [];
        this.errorMessageProvider = utils_1.has(config, "errorMessageProvider")
            ? config.errorMessageProvider
            : parser_1.DEFAULT_PARSER_CONFIG.errorMessageProvider;
    };
    ErrorHandler.prototype.SAVE_ERROR = function (error) {
        if (exceptions_public_1.isRecognitionException(error)) {
            error.context = {
                ruleStack: this.getHumanReadableRuleStack(),
                ruleOccurrenceStack: utils_1.cloneArr(this.RULE_OCCURRENCE_STACK)
            };
            this._errors.push(error);
            return error;
        }
        else {
            throw Error("Trying to save an Error which is not a RecognitionException");
        }
    };
    Object.defineProperty(ErrorHandler.prototype, "errors", {
        get: function () {
            return utils_1.cloneArr(this._errors);
        },
        set: function (newErrors) {
            this._errors = newErrors;
        },
        enumerable: false,
        configurable: true
    });
    // TODO: consider caching the error message computed information
    ErrorHandler.prototype.raiseEarlyExitException = function (occurrence, prodType, userDefinedErrMsg) {
        var ruleName = this.getCurrRuleFullName();
        var ruleGrammar = this.getGAstProductions()[ruleName];
        var lookAheadPathsPerAlternative = lookahead_1.getLookaheadPathsForOptionalProd(occurrence, ruleGrammar, prodType, this.maxLookahead);
        var insideProdPaths = lookAheadPathsPerAlternative[0];
        var actualTokens = [];
        for (var i = 1; i <= this.maxLookahead; i++) {
            actualTokens.push(this.LA(i));
        }
        var msg = this.errorMessageProvider.buildEarlyExitMessage({
            expectedIterationPaths: insideProdPaths,
            actual: actualTokens,
            previous: this.LA(0),
            customUserDescription: userDefinedErrMsg,
            ruleName: ruleName
        });
        throw this.SAVE_ERROR(new exceptions_public_1.EarlyExitException(msg, this.LA(1), this.LA(0)));
    };
    // TODO: consider caching the error message computed information
    ErrorHandler.prototype.raiseNoAltException = function (occurrence, errMsgTypes) {
        var ruleName = this.getCurrRuleFullName();
        var ruleGrammar = this.getGAstProductions()[ruleName];
        // TODO: getLookaheadPathsForOr can be slow for large enough maxLookahead and certain grammars, consider caching ?
        var lookAheadPathsPerAlternative = lookahead_1.getLookaheadPathsForOr(occurrence, ruleGrammar, this.maxLookahead);
        var actualTokens = [];
        for (var i = 1; i <= this.maxLookahead; i++) {
            actualTokens.push(this.LA(i));
        }
        var previousToken = this.LA(0);
        var errMsg = this.errorMessageProvider.buildNoViableAltMessage({
            expectedPathsPerAlt: lookAheadPathsPerAlternative,
            actual: actualTokens,
            previous: previousToken,
            customUserDescription: errMsgTypes,
            ruleName: this.getCurrRuleFullName()
        });
        throw this.SAVE_ERROR(new exceptions_public_1.NoViableAltException(errMsg, this.LA(1), previousToken));
    };
    return ErrorHandler;
}());
exports.ErrorHandler = ErrorHandler;
//# sourceMappingURL=error_handler.js.map

/***/ }),

/***/ 8561:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.GastRecorder = void 0;
var utils_1 = __webpack_require__(3739);
var gast_public_1 = __webpack_require__(5129);
var lexer_public_1 = __webpack_require__(2595);
var tokens_1 = __webpack_require__(4141);
var tokens_public_1 = __webpack_require__(8497);
var parser_1 = __webpack_require__(602);
var keys_1 = __webpack_require__(15);
var RECORDING_NULL_OBJECT = {
    description: "This Object indicates the Parser is during Recording Phase"
};
Object.freeze(RECORDING_NULL_OBJECT);
var HANDLE_SEPARATOR = true;
var MAX_METHOD_IDX = Math.pow(2, keys_1.BITS_FOR_OCCURRENCE_IDX) - 1;
var RFT = tokens_public_1.createToken({ name: "RECORDING_PHASE_TOKEN", pattern: lexer_public_1.Lexer.NA });
tokens_1.augmentTokenTypes([RFT]);
var RECORDING_PHASE_TOKEN = tokens_public_1.createTokenInstance(RFT, "This IToken indicates the Parser is in Recording Phase\n\t" +
    "" +
    "See: https://sap.github.io/chevrotain/docs/guide/internals.html#grammar-recording for details", 
// Using "-1" instead of NaN (as in EOF) because an actual number is less likely to
// cause errors if the output of LA or CONSUME would be (incorrectly) used during the recording phase.
-1, -1, -1, -1, -1, -1);
Object.freeze(RECORDING_PHASE_TOKEN);
var RECORDING_PHASE_CSTNODE = {
    name: "This CSTNode indicates the Parser is in Recording Phase\n\t" +
        "See: https://sap.github.io/chevrotain/docs/guide/internals.html#grammar-recording for details",
    children: {}
};
/**
 * This trait handles the creation of the GAST structure for Chevrotain Grammars
 */
var GastRecorder = /** @class */ (function () {
    function GastRecorder() {
    }
    GastRecorder.prototype.initGastRecorder = function (config) {
        this.recordingProdStack = [];
        this.RECORDING_PHASE = false;
    };
    GastRecorder.prototype.enableRecording = function () {
        var _this = this;
        this.RECORDING_PHASE = true;
        this.TRACE_INIT("Enable Recording", function () {
            var _loop_1 = function (i) {
                var idx = i > 0 ? i : "";
                _this["CONSUME" + idx] = function (arg1, arg2) {
                    return this.consumeInternalRecord(arg1, i, arg2);
                };
                _this["SUBRULE" + idx] = function (arg1, arg2) {
                    return this.subruleInternalRecord(arg1, i, arg2);
                };
                _this["OPTION" + idx] = function (arg1) {
                    return this.optionInternalRecord(arg1, i);
                };
                _this["OR" + idx] = function (arg1) {
                    return this.orInternalRecord(arg1, i);
                };
                _this["MANY" + idx] = function (arg1) {
                    this.manyInternalRecord(i, arg1);
                };
                _this["MANY_SEP" + idx] = function (arg1) {
                    this.manySepFirstInternalRecord(i, arg1);
                };
                _this["AT_LEAST_ONE" + idx] = function (arg1) {
                    this.atLeastOneInternalRecord(i, arg1);
                };
                _this["AT_LEAST_ONE_SEP" + idx] = function (arg1) {
                    this.atLeastOneSepFirstInternalRecord(i, arg1);
                };
            };
            /**
             * Warning Dark Voodoo Magic upcoming!
             * We are "replacing" the public parsing DSL methods API
             * With **new** alternative implementations on the Parser **instance**
             *
             * So far this is the only way I've found to avoid performance regressions during parsing time.
             * - Approx 30% performance regression was measured on Chrome 75 Canary when attempting to replace the "internal"
             *   implementations directly instead.
             */
            for (var i = 0; i < 10; i++) {
                _loop_1(i);
            }
            // DSL methods with the idx(suffix) as an argument
            _this["consume"] = function (idx, arg1, arg2) {
                return this.consumeInternalRecord(arg1, idx, arg2);
            };
            _this["subrule"] = function (idx, arg1, arg2) {
                return this.subruleInternalRecord(arg1, idx, arg2);
            };
            _this["option"] = function (idx, arg1) {
                return this.optionInternalRecord(arg1, idx);
            };
            _this["or"] = function (idx, arg1) {
                return this.orInternalRecord(arg1, idx);
            };
            _this["many"] = function (idx, arg1) {
                this.manyInternalRecord(idx, arg1);
            };
            _this["atLeastOne"] = function (idx, arg1) {
                this.atLeastOneInternalRecord(idx, arg1);
            };
            _this.ACTION = _this.ACTION_RECORD;
            _this.BACKTRACK = _this.BACKTRACK_RECORD;
            _this.LA = _this.LA_RECORD;
        });
    };
    GastRecorder.prototype.disableRecording = function () {
        var _this = this;
        this.RECORDING_PHASE = false;
        // By deleting these **instance** properties, any future invocation
        // will be deferred to the original methods on the **prototype** object
        // This seems to get rid of any incorrect optimizations that V8 may
        // do during the recording phase.
        this.TRACE_INIT("Deleting Recording methods", function () {
            for (var i = 0; i < 10; i++) {
                var idx = i > 0 ? i : "";
                delete _this["CONSUME" + idx];
                delete _this["SUBRULE" + idx];
                delete _this["OPTION" + idx];
                delete _this["OR" + idx];
                delete _this["MANY" + idx];
                delete _this["MANY_SEP" + idx];
                delete _this["AT_LEAST_ONE" + idx];
                delete _this["AT_LEAST_ONE_SEP" + idx];
            }
            delete _this["consume"];
            delete _this["subrule"];
            delete _this["option"];
            delete _this["or"];
            delete _this["many"];
            delete _this["atLeastOne"];
            delete _this.ACTION;
            delete _this.BACKTRACK;
            delete _this.LA;
        });
    };
    // TODO: is there any way to use this method to check no
    //   Parser methods are called inside an ACTION?
    //   Maybe try/catch/finally on ACTIONS while disabling the recorders state changes?
    GastRecorder.prototype.ACTION_RECORD = function (impl) {
        // NO-OP during recording
        return;
    };
    // Executing backtracking logic will break our recording logic assumptions
    GastRecorder.prototype.BACKTRACK_RECORD = function (grammarRule, args) {
        return function () { return true; };
    };
    // LA is part of the official API and may be used for custom lookahead logic
    // by end users who may forget to wrap it in ACTION or inside a GATE
    GastRecorder.prototype.LA_RECORD = function (howMuch) {
        // We cannot use the RECORD_PHASE_TOKEN here because someone may depend
        // On LA return EOF at the end of the input so an infinite loop may occur.
        return parser_1.END_OF_FILE;
    };
    GastRecorder.prototype.topLevelRuleRecord = function (name, def) {
        try {
            var newTopLevelRule = new gast_public_1.Rule({ definition: [], name: name });
            newTopLevelRule.name = name;
            this.recordingProdStack.push(newTopLevelRule);
            def.call(this);
            this.recordingProdStack.pop();
            return newTopLevelRule;
        }
        catch (originalError) {
            if (originalError.KNOWN_RECORDER_ERROR !== true) {
                try {
                    originalError.message =
                        originalError.message +
                            '\n\t This error was thrown during the "grammar recording phase" For more info see:\n\t' +
                            "https://sap.github.io/chevrotain/docs/guide/internals.html#grammar-recording";
                }
                catch (mutabilityError) {
                    // We may not be able to modify the original error object
                    throw originalError;
                }
            }
            throw originalError;
        }
    };
    // Implementation of parsing DSL
    GastRecorder.prototype.optionInternalRecord = function (actionORMethodDef, occurrence) {
        return recordProd.call(this, gast_public_1.Option, actionORMethodDef, occurrence);
    };
    GastRecorder.prototype.atLeastOneInternalRecord = function (occurrence, actionORMethodDef) {
        recordProd.call(this, gast_public_1.RepetitionMandatory, actionORMethodDef, occurrence);
    };
    GastRecorder.prototype.atLeastOneSepFirstInternalRecord = function (occurrence, options) {
        recordProd.call(this, gast_public_1.RepetitionMandatoryWithSeparator, options, occurrence, HANDLE_SEPARATOR);
    };
    GastRecorder.prototype.manyInternalRecord = function (occurrence, actionORMethodDef) {
        recordProd.call(this, gast_public_1.Repetition, actionORMethodDef, occurrence);
    };
    GastRecorder.prototype.manySepFirstInternalRecord = function (occurrence, options) {
        recordProd.call(this, gast_public_1.RepetitionWithSeparator, options, occurrence, HANDLE_SEPARATOR);
    };
    GastRecorder.prototype.orInternalRecord = function (altsOrOpts, occurrence) {
        return recordOrProd.call(this, altsOrOpts, occurrence);
    };
    GastRecorder.prototype.subruleInternalRecord = function (ruleToCall, occurrence, options) {
        assertMethodIdxIsValid(occurrence);
        if (!ruleToCall || utils_1.has(ruleToCall, "ruleName") === false) {
            var error = new Error("<SUBRULE" + getIdxSuffix(occurrence) + "> argument is invalid" +
                (" expecting a Parser method reference but got: <" + JSON.stringify(ruleToCall) + ">") +
                ("\n inside top level rule: <" + this.recordingProdStack[0].name + ">"));
            error.KNOWN_RECORDER_ERROR = true;
            throw error;
        }
        var prevProd = utils_1.peek(this.recordingProdStack);
        var ruleName = ruleToCall["ruleName"];
        var newNoneTerminal = new gast_public_1.NonTerminal({
            idx: occurrence,
            nonTerminalName: ruleName,
            // The resolving of the `referencedRule` property will be done once all the Rule's GASTs have been created
            referencedRule: undefined
        });
        prevProd.definition.push(newNoneTerminal);
        return this.outputCst ? RECORDING_PHASE_CSTNODE : RECORDING_NULL_OBJECT;
    };
    GastRecorder.prototype.consumeInternalRecord = function (tokType, occurrence, options) {
        assertMethodIdxIsValid(occurrence);
        if (!tokens_1.hasShortKeyProperty(tokType)) {
            var error = new Error("<CONSUME" + getIdxSuffix(occurrence) + "> argument is invalid" +
                (" expecting a TokenType reference but got: <" + JSON.stringify(tokType) + ">") +
                ("\n inside top level rule: <" + this.recordingProdStack[0].name + ">"));
            error.KNOWN_RECORDER_ERROR = true;
            throw error;
        }
        var prevProd = utils_1.peek(this.recordingProdStack);
        var newNoneTerminal = new gast_public_1.Terminal({
            idx: occurrence,
            terminalType: tokType
        });
        prevProd.definition.push(newNoneTerminal);
        return RECORDING_PHASE_TOKEN;
    };
    return GastRecorder;
}());
exports.GastRecorder = GastRecorder;
function recordProd(prodConstructor, mainProdArg, occurrence, handleSep) {
    if (handleSep === void 0) { handleSep = false; }
    assertMethodIdxIsValid(occurrence);
    var prevProd = utils_1.peek(this.recordingProdStack);
    var grammarAction = utils_1.isFunction(mainProdArg) ? mainProdArg : mainProdArg.DEF;
    var newProd = new prodConstructor({ definition: [], idx: occurrence });
    if (handleSep) {
        newProd.separator = mainProdArg.SEP;
    }
    if (utils_1.has(mainProdArg, "MAX_LOOKAHEAD")) {
        newProd.maxLookahead = mainProdArg.MAX_LOOKAHEAD;
    }
    this.recordingProdStack.push(newProd);
    grammarAction.call(this);
    prevProd.definition.push(newProd);
    this.recordingProdStack.pop();
    return RECORDING_NULL_OBJECT;
}
function recordOrProd(mainProdArg, occurrence) {
    var _this = this;
    assertMethodIdxIsValid(occurrence);
    var prevProd = utils_1.peek(this.recordingProdStack);
    // Only an array of alternatives
    var hasOptions = utils_1.isArray(mainProdArg) === false;
    var alts = hasOptions === false ? mainProdArg : mainProdArg.DEF;
    var newOrProd = new gast_public_1.Alternation({
        definition: [],
        idx: occurrence,
        ignoreAmbiguities: hasOptions && mainProdArg.IGNORE_AMBIGUITIES === true
    });
    if (utils_1.has(mainProdArg, "MAX_LOOKAHEAD")) {
        newOrProd.maxLookahead = mainProdArg.MAX_LOOKAHEAD;
    }
    var hasPredicates = utils_1.some(alts, function (currAlt) { return utils_1.isFunction(currAlt.GATE); });
    newOrProd.hasPredicates = hasPredicates;
    prevProd.definition.push(newOrProd);
    utils_1.forEach(alts, function (currAlt) {
        var currAltFlat = new gast_public_1.Alternative({ definition: [] });
        newOrProd.definition.push(currAltFlat);
        if (utils_1.has(currAlt, "IGNORE_AMBIGUITIES")) {
            currAltFlat.ignoreAmbiguities = currAlt.IGNORE_AMBIGUITIES;
        }
        // **implicit** ignoreAmbiguities due to usage of gate
        else if (utils_1.has(currAlt, "GATE")) {
            currAltFlat.ignoreAmbiguities = true;
        }
        _this.recordingProdStack.push(currAltFlat);
        currAlt.ALT.call(_this);
        _this.recordingProdStack.pop();
    });
    return RECORDING_NULL_OBJECT;
}
function getIdxSuffix(idx) {
    return idx === 0 ? "" : "" + idx;
}
function assertMethodIdxIsValid(idx) {
    if (idx < 0 || idx > MAX_METHOD_IDX) {
        var error = new Error(
        // The stack trace will contain all the needed details
        "Invalid DSL Method idx value: <" + idx + ">\n\t" +
            ("Idx value must be a none negative value smaller than " + (MAX_METHOD_IDX + 1)));
        error.KNOWN_RECORDER_ERROR = true;
        throw error;
    }
}
//# sourceMappingURL=gast_recorder.js.map

/***/ }),

/***/ 8833:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.LexerAdapter = void 0;
var parser_1 = __webpack_require__(602);
/**
 * Trait responsible abstracting over the interaction with Lexer output (Token vector).
 *
 * This could be generalized to support other kinds of lexers, e.g.
 * - Just in Time Lexing / Lexer-Less parsing.
 * - Streaming Lexer.
 */
var LexerAdapter = /** @class */ (function () {
    function LexerAdapter() {
    }
    LexerAdapter.prototype.initLexerAdapter = function () {
        this.tokVector = [];
        this.tokVectorLength = 0;
        this.currIdx = -1;
    };
    Object.defineProperty(LexerAdapter.prototype, "input", {
        get: function () {
            return this.tokVector;
        },
        set: function (newInput) {
            // @ts-ignore - `this parameter` not supported in setters/getters
            //   - https://www.typescriptlang.org/docs/handbook/functions.html#this-parameters
            if (this.selfAnalysisDone !== true) {
                throw Error("Missing <performSelfAnalysis> invocation at the end of the Parser's constructor.");
            }
            // @ts-ignore - `this parameter` not supported in setters/getters
            //   - https://www.typescriptlang.org/docs/handbook/functions.html#this-parameters
            this.reset();
            this.tokVector = newInput;
            this.tokVectorLength = newInput.length;
        },
        enumerable: false,
        configurable: true
    });
    // skips a token and returns the next token
    LexerAdapter.prototype.SKIP_TOKEN = function () {
        if (this.currIdx <= this.tokVector.length - 2) {
            this.consumeToken();
            return this.LA(1);
        }
        else {
            return parser_1.END_OF_FILE;
        }
    };
    // Lexer (accessing Token vector) related methods which can be overridden to implement lazy lexers
    // or lexers dependent on parser context.
    LexerAdapter.prototype.LA = function (howMuch) {
        var soughtIdx = this.currIdx + howMuch;
        if (soughtIdx < 0 || this.tokVectorLength <= soughtIdx) {
            return parser_1.END_OF_FILE;
        }
        else {
            return this.tokVector[soughtIdx];
        }
    };
    LexerAdapter.prototype.consumeToken = function () {
        this.currIdx++;
    };
    LexerAdapter.prototype.exportLexerState = function () {
        return this.currIdx;
    };
    LexerAdapter.prototype.importLexerState = function (newState) {
        this.currIdx = newState;
    };
    LexerAdapter.prototype.resetLexerState = function () {
        this.currIdx = -1;
    };
    LexerAdapter.prototype.moveToTerminatedState = function () {
        this.currIdx = this.tokVector.length - 1;
    };
    LexerAdapter.prototype.getLexerPosition = function () {
        return this.exportLexerState();
    };
    return LexerAdapter;
}());
exports.LexerAdapter = LexerAdapter;
//# sourceMappingURL=lexer_adapter.js.map

/***/ }),

/***/ 2485:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.LooksAhead = void 0;
var lookahead_1 = __webpack_require__(364);
var utils_1 = __webpack_require__(3739);
var parser_1 = __webpack_require__(602);
var keys_1 = __webpack_require__(15);
var gast_1 = __webpack_require__(1487);
/**
 * Trait responsible for the lookahead related utilities and optimizations.
 */
var LooksAhead = /** @class */ (function () {
    function LooksAhead() {
    }
    LooksAhead.prototype.initLooksAhead = function (config) {
        this.dynamicTokensEnabled = utils_1.has(config, "dynamicTokensEnabled")
            ? config.dynamicTokensEnabled
            : parser_1.DEFAULT_PARSER_CONFIG.dynamicTokensEnabled;
        this.maxLookahead = utils_1.has(config, "maxLookahead")
            ? config.maxLookahead
            : parser_1.DEFAULT_PARSER_CONFIG.maxLookahead;
        /* istanbul ignore next - Using plain array as dictionary will be tested on older node.js versions and IE11 */
        this.lookAheadFuncsCache = utils_1.isES2015MapSupported() ? new Map() : [];
        // Performance optimization on newer engines that support ES6 Map
        // For larger Maps this is slightly faster than using a plain object (array in our case).
        /* istanbul ignore else - The else branch will be tested on older node.js versions and IE11 */
        if (utils_1.isES2015MapSupported()) {
            this.getLaFuncFromCache = this.getLaFuncFromMap;
            this.setLaFuncCache = this.setLaFuncCacheUsingMap;
        }
        else {
            this.getLaFuncFromCache = this.getLaFuncFromObj;
            this.setLaFuncCache = this.setLaFuncUsingObj;
        }
    };
    LooksAhead.prototype.preComputeLookaheadFunctions = function (rules) {
        var _this = this;
        utils_1.forEach(rules, function (currRule) {
            _this.TRACE_INIT(currRule.name + " Rule Lookahead", function () {
                var _a = gast_1.collectMethods(currRule), alternation = _a.alternation, repetition = _a.repetition, option = _a.option, repetitionMandatory = _a.repetitionMandatory, repetitionMandatoryWithSeparator = _a.repetitionMandatoryWithSeparator, repetitionWithSeparator = _a.repetitionWithSeparator;
                utils_1.forEach(alternation, function (currProd) {
                    var prodIdx = currProd.idx === 0 ? "" : currProd.idx;
                    _this.TRACE_INIT("" + gast_1.getProductionDslName(currProd) + prodIdx, function () {
                        var laFunc = lookahead_1.buildLookaheadFuncForOr(currProd.idx, currRule, currProd.maxLookahead || _this.maxLookahead, currProd.hasPredicates, _this.dynamicTokensEnabled, _this.lookAheadBuilderForAlternatives);
                        var key = keys_1.getKeyForAutomaticLookahead(_this.fullRuleNameToShort[currRule.name], keys_1.OR_IDX, currProd.idx);
                        _this.setLaFuncCache(key, laFunc);
                    });
                });
                utils_1.forEach(repetition, function (currProd) {
                    _this.computeLookaheadFunc(currRule, currProd.idx, keys_1.MANY_IDX, lookahead_1.PROD_TYPE.REPETITION, currProd.maxLookahead, gast_1.getProductionDslName(currProd));
                });
                utils_1.forEach(option, function (currProd) {
                    _this.computeLookaheadFunc(currRule, currProd.idx, keys_1.OPTION_IDX, lookahead_1.PROD_TYPE.OPTION, currProd.maxLookahead, gast_1.getProductionDslName(currProd));
                });
                utils_1.forEach(repetitionMandatory, function (currProd) {
                    _this.computeLookaheadFunc(currRule, currProd.idx, keys_1.AT_LEAST_ONE_IDX, lookahead_1.PROD_TYPE.REPETITION_MANDATORY, currProd.maxLookahead, gast_1.getProductionDslName(currProd));
                });
                utils_1.forEach(repetitionMandatoryWithSeparator, function (currProd) {
                    _this.computeLookaheadFunc(currRule, currProd.idx, keys_1.AT_LEAST_ONE_SEP_IDX, lookahead_1.PROD_TYPE.REPETITION_MANDATORY_WITH_SEPARATOR, currProd.maxLookahead, gast_1.getProductionDslName(currProd));
                });
                utils_1.forEach(repetitionWithSeparator, function (currProd) {
                    _this.computeLookaheadFunc(currRule, currProd.idx, keys_1.MANY_SEP_IDX, lookahead_1.PROD_TYPE.REPETITION_WITH_SEPARATOR, currProd.maxLookahead, gast_1.getProductionDslName(currProd));
                });
            });
        });
    };
    LooksAhead.prototype.computeLookaheadFunc = function (rule, prodOccurrence, prodKey, prodType, prodMaxLookahead, dslMethodName) {
        var _this = this;
        this.TRACE_INIT("" + dslMethodName + (prodOccurrence === 0 ? "" : prodOccurrence), function () {
            var laFunc = lookahead_1.buildLookaheadFuncForOptionalProd(prodOccurrence, rule, prodMaxLookahead || _this.maxLookahead, _this.dynamicTokensEnabled, prodType, _this.lookAheadBuilderForOptional);
            var key = keys_1.getKeyForAutomaticLookahead(_this.fullRuleNameToShort[rule.name], prodKey, prodOccurrence);
            _this.setLaFuncCache(key, laFunc);
        });
    };
    LooksAhead.prototype.lookAheadBuilderForOptional = function (alt, tokenMatcher, dynamicTokensEnabled) {
        return lookahead_1.buildSingleAlternativeLookaheadFunction(alt, tokenMatcher, dynamicTokensEnabled);
    };
    LooksAhead.prototype.lookAheadBuilderForAlternatives = function (alts, hasPredicates, tokenMatcher, dynamicTokensEnabled) {
        return lookahead_1.buildAlternativesLookAheadFunc(alts, hasPredicates, tokenMatcher, dynamicTokensEnabled);
    };
    // this actually returns a number, but it is always used as a string (object prop key)
    LooksAhead.prototype.getKeyForAutomaticLookahead = function (dslMethodIdx, occurrence) {
        var currRuleShortName = this.getLastExplicitRuleShortName();
        return keys_1.getKeyForAutomaticLookahead(currRuleShortName, dslMethodIdx, occurrence);
    };
    /* istanbul ignore next */
    LooksAhead.prototype.getLaFuncFromCache = function (key) {
        return undefined;
    };
    LooksAhead.prototype.getLaFuncFromMap = function (key) {
        return this.lookAheadFuncsCache.get(key);
    };
    /* istanbul ignore next - Using plain array as dictionary will be tested on older node.js versions and IE11 */
    LooksAhead.prototype.getLaFuncFromObj = function (key) {
        return this.lookAheadFuncsCache[key];
    };
    /* istanbul ignore next */
    LooksAhead.prototype.setLaFuncCache = function (key, value) { };
    LooksAhead.prototype.setLaFuncCacheUsingMap = function (key, value) {
        this.lookAheadFuncsCache.set(key, value);
    };
    /* istanbul ignore next - Using plain array as dictionary will be tested on older node.js versions and IE11 */
    LooksAhead.prototype.setLaFuncUsingObj = function (key, value) {
        this.lookAheadFuncsCache[key] = value;
    };
    return LooksAhead;
}());
exports.LooksAhead = LooksAhead;
//# sourceMappingURL=looksahead.js.map

/***/ }),

/***/ 4166:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.PerformanceTracer = void 0;
var utils_1 = __webpack_require__(3739);
var parser_1 = __webpack_require__(602);
/**
 * Trait responsible for runtime parsing errors.
 */
var PerformanceTracer = /** @class */ (function () {
    function PerformanceTracer() {
    }
    PerformanceTracer.prototype.initPerformanceTracer = function (config) {
        if (utils_1.has(config, "traceInitPerf")) {
            var userTraceInitPerf = config.traceInitPerf;
            var traceIsNumber = typeof userTraceInitPerf === "number";
            this.traceInitMaxIdent = traceIsNumber
                ? userTraceInitPerf
                : Infinity;
            this.traceInitPerf = traceIsNumber
                ? userTraceInitPerf > 0
                : userTraceInitPerf;
        }
        else {
            this.traceInitMaxIdent = 0;
            this.traceInitPerf = parser_1.DEFAULT_PARSER_CONFIG.traceInitPerf;
        }
        this.traceInitIndent = -1;
    };
    PerformanceTracer.prototype.TRACE_INIT = function (phaseDesc, phaseImpl) {
        // No need to optimize this using NOOP pattern because
        // It is not called in a hot spot...
        if (this.traceInitPerf === true) {
            this.traceInitIndent++;
            var indent = new Array(this.traceInitIndent + 1).join("\t");
            if (this.traceInitIndent < this.traceInitMaxIdent) {
                console.log(indent + "--> <" + phaseDesc + ">");
            }
            var _a = utils_1.timer(phaseImpl), time = _a.time, value = _a.value;
            /* istanbul ignore next - Difficult to reproduce specific performance behavior (>10ms) in tests */
            var traceMethod = time > 10 ? console.warn : console.log;
            if (this.traceInitIndent < this.traceInitMaxIdent) {
                traceMethod(indent + "<-- <" + phaseDesc + "> time: " + time + "ms");
            }
            this.traceInitIndent--;
            return value;
        }
        else {
            return phaseImpl();
        }
    };
    return PerformanceTracer;
}());
exports.PerformanceTracer = PerformanceTracer;
//# sourceMappingURL=perf_tracer.js.map

/***/ }),

/***/ 8809:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.RecognizerApi = void 0;
var utils_1 = __webpack_require__(3739);
var exceptions_public_1 = __webpack_require__(172);
var parser_1 = __webpack_require__(602);
var errors_public_1 = __webpack_require__(8376);
var checks_1 = __webpack_require__(3155);
var gast_public_1 = __webpack_require__(5129);
/**
 * This trait is responsible for implementing the public API
 * for defining Chevrotain parsers, i.e:
 * - CONSUME
 * - RULE
 * - OPTION
 * - ...
 */
var RecognizerApi = /** @class */ (function () {
    function RecognizerApi() {
    }
    RecognizerApi.prototype.ACTION = function (impl) {
        return impl.call(this);
    };
    RecognizerApi.prototype.consume = function (idx, tokType, options) {
        return this.consumeInternal(tokType, idx, options);
    };
    RecognizerApi.prototype.subrule = function (idx, ruleToCall, options) {
        return this.subruleInternal(ruleToCall, idx, options);
    };
    RecognizerApi.prototype.option = function (idx, actionORMethodDef) {
        return this.optionInternal(actionORMethodDef, idx);
    };
    RecognizerApi.prototype.or = function (idx, altsOrOpts) {
        return this.orInternal(altsOrOpts, idx);
    };
    RecognizerApi.prototype.many = function (idx, actionORMethodDef) {
        return this.manyInternal(idx, actionORMethodDef);
    };
    RecognizerApi.prototype.atLeastOne = function (idx, actionORMethodDef) {
        return this.atLeastOneInternal(idx, actionORMethodDef);
    };
    RecognizerApi.prototype.CONSUME = function (tokType, options) {
        return this.consumeInternal(tokType, 0, options);
    };
    RecognizerApi.prototype.CONSUME1 = function (tokType, options) {
        return this.consumeInternal(tokType, 1, options);
    };
    RecognizerApi.prototype.CONSUME2 = function (tokType, options) {
        return this.consumeInternal(tokType, 2, options);
    };
    RecognizerApi.prototype.CONSUME3 = function (tokType, options) {
        return this.consumeInternal(tokType, 3, options);
    };
    RecognizerApi.prototype.CONSUME4 = function (tokType, options) {
        return this.consumeInternal(tokType, 4, options);
    };
    RecognizerApi.prototype.CONSUME5 = function (tokType, options) {
        return this.consumeInternal(tokType, 5, options);
    };
    RecognizerApi.prototype.CONSUME6 = function (tokType, options) {
        return this.consumeInternal(tokType, 6, options);
    };
    RecognizerApi.prototype.CONSUME7 = function (tokType, options) {
        return this.consumeInternal(tokType, 7, options);
    };
    RecognizerApi.prototype.CONSUME8 = function (tokType, options) {
        return this.consumeInternal(tokType, 8, options);
    };
    RecognizerApi.prototype.CONSUME9 = function (tokType, options) {
        return this.consumeInternal(tokType, 9, options);
    };
    RecognizerApi.prototype.SUBRULE = function (ruleToCall, options) {
        return this.subruleInternal(ruleToCall, 0, options);
    };
    RecognizerApi.prototype.SUBRULE1 = function (ruleToCall, options) {
        return this.subruleInternal(ruleToCall, 1, options);
    };
    RecognizerApi.prototype.SUBRULE2 = function (ruleToCall, options) {
        return this.subruleInternal(ruleToCall, 2, options);
    };
    RecognizerApi.prototype.SUBRULE3 = function (ruleToCall, options) {
        return this.subruleInternal(ruleToCall, 3, options);
    };
    RecognizerApi.prototype.SUBRULE4 = function (ruleToCall, options) {
        return this.subruleInternal(ruleToCall, 4, options);
    };
    RecognizerApi.prototype.SUBRULE5 = function (ruleToCall, options) {
        return this.subruleInternal(ruleToCall, 5, options);
    };
    RecognizerApi.prototype.SUBRULE6 = function (ruleToCall, options) {
        return this.subruleInternal(ruleToCall, 6, options);
    };
    RecognizerApi.prototype.SUBRULE7 = function (ruleToCall, options) {
        return this.subruleInternal(ruleToCall, 7, options);
    };
    RecognizerApi.prototype.SUBRULE8 = function (ruleToCall, options) {
        return this.subruleInternal(ruleToCall, 8, options);
    };
    RecognizerApi.prototype.SUBRULE9 = function (ruleToCall, options) {
        return this.subruleInternal(ruleToCall, 9, options);
    };
    RecognizerApi.prototype.OPTION = function (actionORMethodDef) {
        return this.optionInternal(actionORMethodDef, 0);
    };
    RecognizerApi.prototype.OPTION1 = function (actionORMethodDef) {
        return this.optionInternal(actionORMethodDef, 1);
    };
    RecognizerApi.prototype.OPTION2 = function (actionORMethodDef) {
        return this.optionInternal(actionORMethodDef, 2);
    };
    RecognizerApi.prototype.OPTION3 = function (actionORMethodDef) {
        return this.optionInternal(actionORMethodDef, 3);
    };
    RecognizerApi.prototype.OPTION4 = function (actionORMethodDef) {
        return this.optionInternal(actionORMethodDef, 4);
    };
    RecognizerApi.prototype.OPTION5 = function (actionORMethodDef) {
        return this.optionInternal(actionORMethodDef, 5);
    };
    RecognizerApi.prototype.OPTION6 = function (actionORMethodDef) {
        return this.optionInternal(actionORMethodDef, 6);
    };
    RecognizerApi.prototype.OPTION7 = function (actionORMethodDef) {
        return this.optionInternal(actionORMethodDef, 7);
    };
    RecognizerApi.prototype.OPTION8 = function (actionORMethodDef) {
        return this.optionInternal(actionORMethodDef, 8);
    };
    RecognizerApi.prototype.OPTION9 = function (actionORMethodDef) {
        return this.optionInternal(actionORMethodDef, 9);
    };
    RecognizerApi.prototype.OR = function (altsOrOpts) {
        return this.orInternal(altsOrOpts, 0);
    };
    RecognizerApi.prototype.OR1 = function (altsOrOpts) {
        return this.orInternal(altsOrOpts, 1);
    };
    RecognizerApi.prototype.OR2 = function (altsOrOpts) {
        return this.orInternal(altsOrOpts, 2);
    };
    RecognizerApi.prototype.OR3 = function (altsOrOpts) {
        return this.orInternal(altsOrOpts, 3);
    };
    RecognizerApi.prototype.OR4 = function (altsOrOpts) {
        return this.orInternal(altsOrOpts, 4);
    };
    RecognizerApi.prototype.OR5 = function (altsOrOpts) {
        return this.orInternal(altsOrOpts, 5);
    };
    RecognizerApi.prototype.OR6 = function (altsOrOpts) {
        return this.orInternal(altsOrOpts, 6);
    };
    RecognizerApi.prototype.OR7 = function (altsOrOpts) {
        return this.orInternal(altsOrOpts, 7);
    };
    RecognizerApi.prototype.OR8 = function (altsOrOpts) {
        return this.orInternal(altsOrOpts, 8);
    };
    RecognizerApi.prototype.OR9 = function (altsOrOpts) {
        return this.orInternal(altsOrOpts, 9);
    };
    RecognizerApi.prototype.MANY = function (actionORMethodDef) {
        this.manyInternal(0, actionORMethodDef);
    };
    RecognizerApi.prototype.MANY1 = function (actionORMethodDef) {
        this.manyInternal(1, actionORMethodDef);
    };
    RecognizerApi.prototype.MANY2 = function (actionORMethodDef) {
        this.manyInternal(2, actionORMethodDef);
    };
    RecognizerApi.prototype.MANY3 = function (actionORMethodDef) {
        this.manyInternal(3, actionORMethodDef);
    };
    RecognizerApi.prototype.MANY4 = function (actionORMethodDef) {
        this.manyInternal(4, actionORMethodDef);
    };
    RecognizerApi.prototype.MANY5 = function (actionORMethodDef) {
        this.manyInternal(5, actionORMethodDef);
    };
    RecognizerApi.prototype.MANY6 = function (actionORMethodDef) {
        this.manyInternal(6, actionORMethodDef);
    };
    RecognizerApi.prototype.MANY7 = function (actionORMethodDef) {
        this.manyInternal(7, actionORMethodDef);
    };
    RecognizerApi.prototype.MANY8 = function (actionORMethodDef) {
        this.manyInternal(8, actionORMethodDef);
    };
    RecognizerApi.prototype.MANY9 = function (actionORMethodDef) {
        this.manyInternal(9, actionORMethodDef);
    };
    RecognizerApi.prototype.MANY_SEP = function (options) {
        this.manySepFirstInternal(0, options);
    };
    RecognizerApi.prototype.MANY_SEP1 = function (options) {
        this.manySepFirstInternal(1, options);
    };
    RecognizerApi.prototype.MANY_SEP2 = function (options) {
        this.manySepFirstInternal(2, options);
    };
    RecognizerApi.prototype.MANY_SEP3 = function (options) {
        this.manySepFirstInternal(3, options);
    };
    RecognizerApi.prototype.MANY_SEP4 = function (options) {
        this.manySepFirstInternal(4, options);
    };
    RecognizerApi.prototype.MANY_SEP5 = function (options) {
        this.manySepFirstInternal(5, options);
    };
    RecognizerApi.prototype.MANY_SEP6 = function (options) {
        this.manySepFirstInternal(6, options);
    };
    RecognizerApi.prototype.MANY_SEP7 = function (options) {
        this.manySepFirstInternal(7, options);
    };
    RecognizerApi.prototype.MANY_SEP8 = function (options) {
        this.manySepFirstInternal(8, options);
    };
    RecognizerApi.prototype.MANY_SEP9 = function (options) {
        this.manySepFirstInternal(9, options);
    };
    RecognizerApi.prototype.AT_LEAST_ONE = function (actionORMethodDef) {
        this.atLeastOneInternal(0, actionORMethodDef);
    };
    RecognizerApi.prototype.AT_LEAST_ONE1 = function (actionORMethodDef) {
        return this.atLeastOneInternal(1, actionORMethodDef);
    };
    RecognizerApi.prototype.AT_LEAST_ONE2 = function (actionORMethodDef) {
        this.atLeastOneInternal(2, actionORMethodDef);
    };
    RecognizerApi.prototype.AT_LEAST_ONE3 = function (actionORMethodDef) {
        this.atLeastOneInternal(3, actionORMethodDef);
    };
    RecognizerApi.prototype.AT_LEAST_ONE4 = function (actionORMethodDef) {
        this.atLeastOneInternal(4, actionORMethodDef);
    };
    RecognizerApi.prototype.AT_LEAST_ONE5 = function (actionORMethodDef) {
        this.atLeastOneInternal(5, actionORMethodDef);
    };
    RecognizerApi.prototype.AT_LEAST_ONE6 = function (actionORMethodDef) {
        this.atLeastOneInternal(6, actionORMethodDef);
    };
    RecognizerApi.prototype.AT_LEAST_ONE7 = function (actionORMethodDef) {
        this.atLeastOneInternal(7, actionORMethodDef);
    };
    RecognizerApi.prototype.AT_LEAST_ONE8 = function (actionORMethodDef) {
        this.atLeastOneInternal(8, actionORMethodDef);
    };
    RecognizerApi.prototype.AT_LEAST_ONE9 = function (actionORMethodDef) {
        this.atLeastOneInternal(9, actionORMethodDef);
    };
    RecognizerApi.prototype.AT_LEAST_ONE_SEP = function (options) {
        this.atLeastOneSepFirstInternal(0, options);
    };
    RecognizerApi.prototype.AT_LEAST_ONE_SEP1 = function (options) {
        this.atLeastOneSepFirstInternal(1, options);
    };
    RecognizerApi.prototype.AT_LEAST_ONE_SEP2 = function (options) {
        this.atLeastOneSepFirstInternal(2, options);
    };
    RecognizerApi.prototype.AT_LEAST_ONE_SEP3 = function (options) {
        this.atLeastOneSepFirstInternal(3, options);
    };
    RecognizerApi.prototype.AT_LEAST_ONE_SEP4 = function (options) {
        this.atLeastOneSepFirstInternal(4, options);
    };
    RecognizerApi.prototype.AT_LEAST_ONE_SEP5 = function (options) {
        this.atLeastOneSepFirstInternal(5, options);
    };
    RecognizerApi.prototype.AT_LEAST_ONE_SEP6 = function (options) {
        this.atLeastOneSepFirstInternal(6, options);
    };
    RecognizerApi.prototype.AT_LEAST_ONE_SEP7 = function (options) {
        this.atLeastOneSepFirstInternal(7, options);
    };
    RecognizerApi.prototype.AT_LEAST_ONE_SEP8 = function (options) {
        this.atLeastOneSepFirstInternal(8, options);
    };
    RecognizerApi.prototype.AT_LEAST_ONE_SEP9 = function (options) {
        this.atLeastOneSepFirstInternal(9, options);
    };
    RecognizerApi.prototype.RULE = function (name, implementation, config) {
        if (config === void 0) { config = parser_1.DEFAULT_RULE_CONFIG; }
        if (utils_1.contains(this.definedRulesNames, name)) {
            var errMsg = errors_public_1.defaultGrammarValidatorErrorProvider.buildDuplicateRuleNameError({
                topLevelRule: name,
                grammarName: this.className
            });
            var error = {
                message: errMsg,
                type: parser_1.ParserDefinitionErrorType.DUPLICATE_RULE_NAME,
                ruleName: name
            };
            this.definitionErrors.push(error);
        }
        this.definedRulesNames.push(name);
        var ruleImplementation = this.defineRule(name, implementation, config);
        this[name] = ruleImplementation;
        return ruleImplementation;
    };
    RecognizerApi.prototype.OVERRIDE_RULE = function (name, impl, config) {
        if (config === void 0) { config = parser_1.DEFAULT_RULE_CONFIG; }
        var ruleErrors = [];
        ruleErrors = ruleErrors.concat(checks_1.validateRuleIsOverridden(name, this.definedRulesNames, this.className));
        this.definitionErrors.push.apply(this.definitionErrors, ruleErrors); // mutability for the win
        var ruleImplementation = this.defineRule(name, impl, config);
        this[name] = ruleImplementation;
        return ruleImplementation;
    };
    RecognizerApi.prototype.BACKTRACK = function (grammarRule, args) {
        return function () {
            // save org state
            this.isBackTrackingStack.push(1);
            var orgState = this.saveRecogState();
            try {
                grammarRule.apply(this, args);
                // if no exception was thrown we have succeed parsing the rule.
                return true;
            }
            catch (e) {
                if (exceptions_public_1.isRecognitionException(e)) {
                    return false;
                }
                else {
                    throw e;
                }
            }
            finally {
                this.reloadRecogState(orgState);
                this.isBackTrackingStack.pop();
            }
        };
    };
    // GAST export APIs
    RecognizerApi.prototype.getGAstProductions = function () {
        return this.gastProductionsCache;
    };
    RecognizerApi.prototype.getSerializedGastProductions = function () {
        return gast_public_1.serializeGrammar(utils_1.values(this.gastProductionsCache));
    };
    return RecognizerApi;
}());
exports.RecognizerApi = RecognizerApi;
//# sourceMappingURL=recognizer_api.js.map

/***/ }),

/***/ 4645:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.RecognizerEngine = void 0;
var utils_1 = __webpack_require__(3739);
var keys_1 = __webpack_require__(15);
var exceptions_public_1 = __webpack_require__(172);
var lookahead_1 = __webpack_require__(364);
var interpreter_1 = __webpack_require__(9943);
var parser_1 = __webpack_require__(602);
var recoverable_1 = __webpack_require__(8565);
var tokens_public_1 = __webpack_require__(8497);
var tokens_1 = __webpack_require__(4141);
var lang_extensions_1 = __webpack_require__(7256);
/**
 * This trait is responsible for the runtime parsing engine
 * Used by the official API (recognizer_api.ts)
 */
var RecognizerEngine = /** @class */ (function () {
    function RecognizerEngine() {
    }
    RecognizerEngine.prototype.initRecognizerEngine = function (tokenVocabulary, config) {
        this.className = lang_extensions_1.classNameFromInstance(this);
        // TODO: would using an ES6 Map or plain object be faster (CST building scenario)
        this.shortRuleNameToFull = {};
        this.fullRuleNameToShort = {};
        this.ruleShortNameIdx = 256;
        this.tokenMatcher = tokens_1.tokenStructuredMatcherNoCategories;
        this.definedRulesNames = [];
        this.tokensMap = {};
        this.isBackTrackingStack = [];
        this.RULE_STACK = [];
        this.RULE_OCCURRENCE_STACK = [];
        this.gastProductionsCache = {};
        if (utils_1.has(config, "serializedGrammar")) {
            throw Error("The Parser's configuration can no longer contain a <serializedGrammar> property.\n" +
                "\tSee: https://sap.github.io/chevrotain/docs/changes/BREAKING_CHANGES.html#_6-0-0\n" +
                "\tFor Further details.");
        }
        if (utils_1.isArray(tokenVocabulary)) {
            // This only checks for Token vocabularies provided as arrays.
            // That is good enough because the main objective is to detect users of pre-V4.0 APIs
            // rather than all edge cases of empty Token vocabularies.
            if (utils_1.isEmpty(tokenVocabulary)) {
                throw Error("A Token Vocabulary cannot be empty.\n" +
                    "\tNote that the first argument for the parser constructor\n" +
                    "\tis no longer a Token vector (since v4.0).");
            }
            if (typeof tokenVocabulary[0].startOffset === "number") {
                throw Error("The Parser constructor no longer accepts a token vector as the first argument.\n" +
                    "\tSee: https://sap.github.io/chevrotain/docs/changes/BREAKING_CHANGES.html#_4-0-0\n" +
                    "\tFor Further details.");
            }
        }
        if (utils_1.isArray(tokenVocabulary)) {
            this.tokensMap = utils_1.reduce(tokenVocabulary, function (acc, tokType) {
                acc[tokType.name] = tokType;
                return acc;
            }, {});
        }
        else if (utils_1.has(tokenVocabulary, "modes") &&
            utils_1.every(utils_1.flatten(utils_1.values(tokenVocabulary.modes)), tokens_1.isTokenType)) {
            var allTokenTypes = utils_1.flatten(utils_1.values(tokenVocabulary.modes));
            var uniqueTokens = utils_1.uniq(allTokenTypes);
            this.tokensMap = utils_1.reduce(uniqueTokens, function (acc, tokType) {
                acc[tokType.name] = tokType;
                return acc;
            }, {});
        }
        else if (utils_1.isObject(tokenVocabulary)) {
            this.tokensMap = utils_1.cloneObj(tokenVocabulary);
        }
        else {
            throw new Error("<tokensDictionary> argument must be An Array of Token constructors," +
                " A dictionary of Token constructors or an IMultiModeLexerDefinition");
        }
        // always add EOF to the tokenNames -> constructors map. it is useful to assure all the input has been
        // parsed with a clear error message ("expecting EOF but found ...")
        /* tslint:disable */
        this.tokensMap["EOF"] = tokens_public_1.EOF;
        // TODO: This check may not be accurate for multi mode lexers
        var noTokenCategoriesUsed = utils_1.every(utils_1.values(tokenVocabulary), function (tokenConstructor) { return utils_1.isEmpty(tokenConstructor.categoryMatches); });
        this.tokenMatcher = noTokenCategoriesUsed
            ? tokens_1.tokenStructuredMatcherNoCategories
            : tokens_1.tokenStructuredMatcher;
        // Because ES2015+ syntax should be supported for creating Token classes
        // We cannot assume that the Token classes were created using the "extendToken" utilities
        // Therefore we must augment the Token classes both on Lexer initialization and on Parser initialization
        tokens_1.augmentTokenTypes(utils_1.values(this.tokensMap));
    };
    RecognizerEngine.prototype.defineRule = function (ruleName, impl, config) {
        if (this.selfAnalysisDone) {
            throw Error("Grammar rule <" + ruleName + "> may not be defined after the 'performSelfAnalysis' method has been called'\n" +
                "Make sure that all grammar rule definitions are done before 'performSelfAnalysis' is called.");
        }
        var resyncEnabled = utils_1.has(config, "resyncEnabled")
            ? config.resyncEnabled
            : parser_1.DEFAULT_RULE_CONFIG.resyncEnabled;
        var recoveryValueFunc = utils_1.has(config, "recoveryValueFunc")
            ? config.recoveryValueFunc
            : parser_1.DEFAULT_RULE_CONFIG.recoveryValueFunc;
        // performance optimization: Use small integers as keys for the longer human readable "full" rule names.
        // this greatly improves Map access time (as much as 8% for some performance benchmarks).
        /* tslint:disable */
        var shortName = this.ruleShortNameIdx << (keys_1.BITS_FOR_METHOD_TYPE + keys_1.BITS_FOR_OCCURRENCE_IDX);
        /* tslint:enable */
        this.ruleShortNameIdx++;
        this.shortRuleNameToFull[shortName] = ruleName;
        this.fullRuleNameToShort[ruleName] = shortName;
        function invokeRuleWithTry(args) {
            try {
                if (this.outputCst === true) {
                    impl.apply(this, args);
                    var cst = this.CST_STACK[this.CST_STACK.length - 1];
                    this.cstPostRule(cst);
                    return cst;
                }
                else {
                    return impl.apply(this, args);
                }
            }
            catch (e) {
                return this.invokeRuleCatch(e, resyncEnabled, recoveryValueFunc);
            }
            finally {
                this.ruleFinallyStateUpdate();
            }
        }
        var wrappedGrammarRule;
        wrappedGrammarRule = function (idxInCallingRule, args) {
            if (idxInCallingRule === void 0) { idxInCallingRule = 0; }
            this.ruleInvocationStateUpdate(shortName, ruleName, idxInCallingRule);
            return invokeRuleWithTry.call(this, args);
        };
        var ruleNamePropName = "ruleName";
        wrappedGrammarRule[ruleNamePropName] = ruleName;
        wrappedGrammarRule["originalGrammarAction"] = impl;
        return wrappedGrammarRule;
    };
    RecognizerEngine.prototype.invokeRuleCatch = function (e, resyncEnabledConfig, recoveryValueFunc) {
        var isFirstInvokedRule = this.RULE_STACK.length === 1;
        // note the reSync is always enabled for the first rule invocation, because we must always be able to
        // reSync with EOF and just output some INVALID ParseTree
        // during backtracking reSync recovery is disabled, otherwise we can't be certain the backtracking
        // path is really the most valid one
        var reSyncEnabled = resyncEnabledConfig && !this.isBackTracking() && this.recoveryEnabled;
        if (exceptions_public_1.isRecognitionException(e)) {
            var recogError = e;
            if (reSyncEnabled) {
                var reSyncTokType = this.findReSyncTokenType();
                if (this.isInCurrentRuleReSyncSet(reSyncTokType)) {
                    recogError.resyncedTokens = this.reSyncTo(reSyncTokType);
                    if (this.outputCst) {
                        var partialCstResult = this.CST_STACK[this.CST_STACK.length - 1];
                        partialCstResult.recoveredNode = true;
                        return partialCstResult;
                    }
                    else {
                        return recoveryValueFunc();
                    }
                }
                else {
                    if (this.outputCst) {
                        var partialCstResult = this.CST_STACK[this.CST_STACK.length - 1];
                        partialCstResult.recoveredNode = true;
                        recogError.partialCstResult = partialCstResult;
                    }
                    // to be handled Further up the call stack
                    throw recogError;
                }
            }
            else if (isFirstInvokedRule) {
                // otherwise a Redundant input error will be created as well and we cannot guarantee that this is indeed the case
                this.moveToTerminatedState();
                // the parser should never throw one of its own errors outside its flow.
                // even if error recovery is disabled
                return recoveryValueFunc();
            }
            else {
                // to be recovered Further up the call stack
                throw recogError;
            }
        }
        else {
            // some other Error type which we don't know how to handle (for example a built in JavaScript Error)
            throw e;
        }
    };
    // Implementation of parsing DSL
    RecognizerEngine.prototype.optionInternal = function (actionORMethodDef, occurrence) {
        var key = this.getKeyForAutomaticLookahead(keys_1.OPTION_IDX, occurrence);
        return this.optionInternalLogic(actionORMethodDef, occurrence, key);
    };
    RecognizerEngine.prototype.optionInternalLogic = function (actionORMethodDef, occurrence, key) {
        var _this = this;
        var lookAheadFunc = this.getLaFuncFromCache(key);
        var action;
        var predicate;
        if (actionORMethodDef.DEF !== undefined) {
            action = actionORMethodDef.DEF;
            predicate = actionORMethodDef.GATE;
            // predicate present
            if (predicate !== undefined) {
                var orgLookaheadFunction_1 = lookAheadFunc;
                lookAheadFunc = function () {
                    return predicate.call(_this) && orgLookaheadFunction_1.call(_this);
                };
            }
        }
        else {
            action = actionORMethodDef;
        }
        if (lookAheadFunc.call(this) === true) {
            return action.call(this);
        }
        return undefined;
    };
    RecognizerEngine.prototype.atLeastOneInternal = function (prodOccurrence, actionORMethodDef) {
        var laKey = this.getKeyForAutomaticLookahead(keys_1.AT_LEAST_ONE_IDX, prodOccurrence);
        return this.atLeastOneInternalLogic(prodOccurrence, actionORMethodDef, laKey);
    };
    RecognizerEngine.prototype.atLeastOneInternalLogic = function (prodOccurrence, actionORMethodDef, key) {
        var _this = this;
        var lookAheadFunc = this.getLaFuncFromCache(key);
        var action;
        var predicate;
        if (actionORMethodDef.DEF !== undefined) {
            action = actionORMethodDef.DEF;
            predicate = actionORMethodDef.GATE;
            // predicate present
            if (predicate !== undefined) {
                var orgLookaheadFunction_2 = lookAheadFunc;
                lookAheadFunc = function () {
                    return predicate.call(_this) && orgLookaheadFunction_2.call(_this);
                };
            }
        }
        else {
            action = actionORMethodDef;
        }
        if (lookAheadFunc.call(this) === true) {
            var notStuck = this.doSingleRepetition(action);
            while (lookAheadFunc.call(this) === true &&
                notStuck === true) {
                notStuck = this.doSingleRepetition(action);
            }
        }
        else {
            throw this.raiseEarlyExitException(prodOccurrence, lookahead_1.PROD_TYPE.REPETITION_MANDATORY, actionORMethodDef.ERR_MSG);
        }
        // note that while it may seem that this can cause an error because by using a recursive call to
        // AT_LEAST_ONE we change the grammar to AT_LEAST_TWO, AT_LEAST_THREE ... , the possible recursive call
        // from the tryInRepetitionRecovery(...) will only happen IFF there really are TWO/THREE/.... items.
        // Performance optimization: "attemptInRepetitionRecovery" will be defined as NOOP unless recovery is enabled
        this.attemptInRepetitionRecovery(this.atLeastOneInternal, [prodOccurrence, actionORMethodDef], lookAheadFunc, keys_1.AT_LEAST_ONE_IDX, prodOccurrence, interpreter_1.NextTerminalAfterAtLeastOneWalker);
    };
    RecognizerEngine.prototype.atLeastOneSepFirstInternal = function (prodOccurrence, options) {
        var laKey = this.getKeyForAutomaticLookahead(keys_1.AT_LEAST_ONE_SEP_IDX, prodOccurrence);
        this.atLeastOneSepFirstInternalLogic(prodOccurrence, options, laKey);
    };
    RecognizerEngine.prototype.atLeastOneSepFirstInternalLogic = function (prodOccurrence, options, key) {
        var _this = this;
        var action = options.DEF;
        var separator = options.SEP;
        var firstIterationLookaheadFunc = this.getLaFuncFromCache(key);
        // 1st iteration
        if (firstIterationLookaheadFunc.call(this) === true) {
            ;
            action.call(this);
            //  TODO: Optimization can move this function construction into "attemptInRepetitionRecovery"
            //  because it is only needed in error recovery scenarios.
            var separatorLookAheadFunc = function () {
                return _this.tokenMatcher(_this.LA(1), separator);
            };
            // 2nd..nth iterations
            while (this.tokenMatcher(this.LA(1), separator) === true) {
                // note that this CONSUME will never enter recovery because
                // the separatorLookAheadFunc checks that the separator really does exist.
                this.CONSUME(separator);
                action.call(this);
            }
            // Performance optimization: "attemptInRepetitionRecovery" will be defined as NOOP unless recovery is enabled
            this.attemptInRepetitionRecovery(this.repetitionSepSecondInternal, [
                prodOccurrence,
                separator,
                separatorLookAheadFunc,
                action,
                interpreter_1.NextTerminalAfterAtLeastOneSepWalker
            ], separatorLookAheadFunc, keys_1.AT_LEAST_ONE_SEP_IDX, prodOccurrence, interpreter_1.NextTerminalAfterAtLeastOneSepWalker);
        }
        else {
            throw this.raiseEarlyExitException(prodOccurrence, lookahead_1.PROD_TYPE.REPETITION_MANDATORY_WITH_SEPARATOR, options.ERR_MSG);
        }
    };
    RecognizerEngine.prototype.manyInternal = function (prodOccurrence, actionORMethodDef) {
        var laKey = this.getKeyForAutomaticLookahead(keys_1.MANY_IDX, prodOccurrence);
        return this.manyInternalLogic(prodOccurrence, actionORMethodDef, laKey);
    };
    RecognizerEngine.prototype.manyInternalLogic = function (prodOccurrence, actionORMethodDef, key) {
        var _this = this;
        var lookaheadFunction = this.getLaFuncFromCache(key);
        var action;
        var predicate;
        if (actionORMethodDef.DEF !== undefined) {
            action = actionORMethodDef.DEF;
            predicate = actionORMethodDef.GATE;
            // predicate present
            if (predicate !== undefined) {
                var orgLookaheadFunction_3 = lookaheadFunction;
                lookaheadFunction = function () {
                    return predicate.call(_this) && orgLookaheadFunction_3.call(_this);
                };
            }
        }
        else {
            action = actionORMethodDef;
        }
        var notStuck = true;
        while (lookaheadFunction.call(this) === true && notStuck === true) {
            notStuck = this.doSingleRepetition(action);
        }
        // Performance optimization: "attemptInRepetitionRecovery" will be defined as NOOP unless recovery is enabled
        this.attemptInRepetitionRecovery(this.manyInternal, [prodOccurrence, actionORMethodDef], lookaheadFunction, keys_1.MANY_IDX, prodOccurrence, interpreter_1.NextTerminalAfterManyWalker, 
        // The notStuck parameter is only relevant when "attemptInRepetitionRecovery"
        // is invoked from manyInternal, in the MANY_SEP case and AT_LEAST_ONE[_SEP]
        // An infinite loop cannot occur as:
        // - Either the lookahead is guaranteed to consume something (Single Token Separator)
        // - AT_LEAST_ONE by definition is guaranteed to consume something (or error out).
        notStuck);
    };
    RecognizerEngine.prototype.manySepFirstInternal = function (prodOccurrence, options) {
        var laKey = this.getKeyForAutomaticLookahead(keys_1.MANY_SEP_IDX, prodOccurrence);
        this.manySepFirstInternalLogic(prodOccurrence, options, laKey);
    };
    RecognizerEngine.prototype.manySepFirstInternalLogic = function (prodOccurrence, options, key) {
        var _this = this;
        var action = options.DEF;
        var separator = options.SEP;
        var firstIterationLaFunc = this.getLaFuncFromCache(key);
        // 1st iteration
        if (firstIterationLaFunc.call(this) === true) {
            action.call(this);
            var separatorLookAheadFunc = function () {
                return _this.tokenMatcher(_this.LA(1), separator);
            };
            // 2nd..nth iterations
            while (this.tokenMatcher(this.LA(1), separator) === true) {
                // note that this CONSUME will never enter recovery because
                // the separatorLookAheadFunc checks that the separator really does exist.
                this.CONSUME(separator);
                // No need for checking infinite loop here due to consuming the separator.
                action.call(this);
            }
            // Performance optimization: "attemptInRepetitionRecovery" will be defined as NOOP unless recovery is enabled
            this.attemptInRepetitionRecovery(this.repetitionSepSecondInternal, [
                prodOccurrence,
                separator,
                separatorLookAheadFunc,
                action,
                interpreter_1.NextTerminalAfterManySepWalker
            ], separatorLookAheadFunc, keys_1.MANY_SEP_IDX, prodOccurrence, interpreter_1.NextTerminalAfterManySepWalker);
        }
    };
    RecognizerEngine.prototype.repetitionSepSecondInternal = function (prodOccurrence, separator, separatorLookAheadFunc, action, nextTerminalAfterWalker) {
        while (separatorLookAheadFunc()) {
            // note that this CONSUME will never enter recovery because
            // the separatorLookAheadFunc checks that the separator really does exist.
            this.CONSUME(separator);
            action.call(this);
        }
        // we can only arrive to this function after an error
        // has occurred (hence the name 'second') so the following
        // IF will always be entered, its possible to remove it...
        // however it is kept to avoid confusion and be consistent.
        // Performance optimization: "attemptInRepetitionRecovery" will be defined as NOOP unless recovery is enabled
        /* istanbul ignore else */
        this.attemptInRepetitionRecovery(this.repetitionSepSecondInternal, [
            prodOccurrence,
            separator,
            separatorLookAheadFunc,
            action,
            nextTerminalAfterWalker
        ], separatorLookAheadFunc, keys_1.AT_LEAST_ONE_SEP_IDX, prodOccurrence, nextTerminalAfterWalker);
    };
    RecognizerEngine.prototype.doSingleRepetition = function (action) {
        var beforeIteration = this.getLexerPosition();
        action.call(this);
        var afterIteration = this.getLexerPosition();
        // This boolean will indicate if this repetition progressed
        // or if we are "stuck" (potential infinite loop in the repetition).
        return afterIteration > beforeIteration;
    };
    RecognizerEngine.prototype.orInternal = function (altsOrOpts, occurrence) {
        var laKey = this.getKeyForAutomaticLookahead(keys_1.OR_IDX, occurrence);
        var alts = utils_1.isArray(altsOrOpts)
            ? altsOrOpts
            : altsOrOpts.DEF;
        var laFunc = this.getLaFuncFromCache(laKey);
        var altIdxToTake = laFunc.call(this, alts);
        if (altIdxToTake !== undefined) {
            var chosenAlternative = alts[altIdxToTake];
            return chosenAlternative.ALT.call(this);
        }
        this.raiseNoAltException(occurrence, altsOrOpts.ERR_MSG);
    };
    RecognizerEngine.prototype.ruleFinallyStateUpdate = function () {
        this.RULE_STACK.pop();
        this.RULE_OCCURRENCE_STACK.pop();
        // NOOP when cst is disabled
        this.cstFinallyStateUpdate();
        if (this.RULE_STACK.length === 0 && this.isAtEndOfInput() === false) {
            var firstRedundantTok = this.LA(1);
            var errMsg = this.errorMessageProvider.buildNotAllInputParsedMessage({
                firstRedundant: firstRedundantTok,
                ruleName: this.getCurrRuleFullName()
            });
            this.SAVE_ERROR(new exceptions_public_1.NotAllInputParsedException(errMsg, firstRedundantTok));
        }
    };
    RecognizerEngine.prototype.subruleInternal = function (ruleToCall, idx, options) {
        var ruleResult;
        try {
            var args = options !== undefined ? options.ARGS : undefined;
            ruleResult = ruleToCall.call(this, idx, args);
            this.cstPostNonTerminal(ruleResult, options !== undefined && options.LABEL !== undefined
                ? options.LABEL
                : ruleToCall.ruleName);
            return ruleResult;
        }
        catch (e) {
            this.subruleInternalError(e, options, ruleToCall.ruleName);
        }
    };
    RecognizerEngine.prototype.subruleInternalError = function (e, options, ruleName) {
        if (exceptions_public_1.isRecognitionException(e) && e.partialCstResult !== undefined) {
            this.cstPostNonTerminal(e.partialCstResult, options !== undefined && options.LABEL !== undefined
                ? options.LABEL
                : ruleName);
            delete e.partialCstResult;
        }
        throw e;
    };
    RecognizerEngine.prototype.consumeInternal = function (tokType, idx, options) {
        var consumedToken;
        try {
            var nextToken = this.LA(1);
            if (this.tokenMatcher(nextToken, tokType) === true) {
                this.consumeToken();
                consumedToken = nextToken;
            }
            else {
                this.consumeInternalError(tokType, nextToken, options);
            }
        }
        catch (eFromConsumption) {
            consumedToken = this.consumeInternalRecovery(tokType, idx, eFromConsumption);
        }
        this.cstPostTerminal(options !== undefined && options.LABEL !== undefined
            ? options.LABEL
            : tokType.name, consumedToken);
        return consumedToken;
    };
    RecognizerEngine.prototype.consumeInternalError = function (tokType, nextToken, options) {
        var msg;
        var previousToken = this.LA(0);
        if (options !== undefined && options.ERR_MSG) {
            msg = options.ERR_MSG;
        }
        else {
            msg = this.errorMessageProvider.buildMismatchTokenMessage({
                expected: tokType,
                actual: nextToken,
                previous: previousToken,
                ruleName: this.getCurrRuleFullName()
            });
        }
        throw this.SAVE_ERROR(new exceptions_public_1.MismatchedTokenException(msg, nextToken, previousToken));
    };
    RecognizerEngine.prototype.consumeInternalRecovery = function (tokType, idx, eFromConsumption) {
        // no recovery allowed during backtracking, otherwise backtracking may recover invalid syntax and accept it
        // but the original syntax could have been parsed successfully without any backtracking + recovery
        if (this.recoveryEnabled &&
            // TODO: more robust checking of the exception type. Perhaps Typescript extending expressions?
            eFromConsumption.name === "MismatchedTokenException" &&
            !this.isBackTracking()) {
            var follows = this.getFollowsForInRuleRecovery(tokType, idx);
            try {
                return this.tryInRuleRecovery(tokType, follows);
            }
            catch (eFromInRuleRecovery) {
                if (eFromInRuleRecovery.name === recoverable_1.IN_RULE_RECOVERY_EXCEPTION) {
                    // failed in RuleRecovery.
                    // throw the original error in order to trigger reSync error recovery
                    throw eFromConsumption;
                }
                else {
                    throw eFromInRuleRecovery;
                }
            }
        }
        else {
            throw eFromConsumption;
        }
    };
    RecognizerEngine.prototype.saveRecogState = function () {
        // errors is a getter which will clone the errors array
        var savedErrors = this.errors;
        var savedRuleStack = utils_1.cloneArr(this.RULE_STACK);
        return {
            errors: savedErrors,
            lexerState: this.exportLexerState(),
            RULE_STACK: savedRuleStack,
            CST_STACK: this.CST_STACK
        };
    };
    RecognizerEngine.prototype.reloadRecogState = function (newState) {
        this.errors = newState.errors;
        this.importLexerState(newState.lexerState);
        this.RULE_STACK = newState.RULE_STACK;
    };
    RecognizerEngine.prototype.ruleInvocationStateUpdate = function (shortName, fullName, idxInCallingRule) {
        this.RULE_OCCURRENCE_STACK.push(idxInCallingRule);
        this.RULE_STACK.push(shortName);
        // NOOP when cst is disabled
        this.cstInvocationStateUpdate(fullName, shortName);
    };
    RecognizerEngine.prototype.isBackTracking = function () {
        return this.isBackTrackingStack.length !== 0;
    };
    RecognizerEngine.prototype.getCurrRuleFullName = function () {
        var shortName = this.getLastExplicitRuleShortName();
        return this.shortRuleNameToFull[shortName];
    };
    RecognizerEngine.prototype.shortRuleNameToFullName = function (shortName) {
        return this.shortRuleNameToFull[shortName];
    };
    RecognizerEngine.prototype.isAtEndOfInput = function () {
        return this.tokenMatcher(this.LA(1), tokens_public_1.EOF);
    };
    RecognizerEngine.prototype.reset = function () {
        this.resetLexerState();
        this.isBackTrackingStack = [];
        this.errors = [];
        this.RULE_STACK = [];
        // TODO: extract a specific reset for TreeBuilder trait
        this.CST_STACK = [];
        this.RULE_OCCURRENCE_STACK = [];
    };
    return RecognizerEngine;
}());
exports.RecognizerEngine = RecognizerEngine;
//# sourceMappingURL=recognizer_engine.js.map

/***/ }),

/***/ 8565:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.attemptInRepetitionRecovery = exports.Recoverable = exports.InRuleRecoveryException = exports.IN_RULE_RECOVERY_EXCEPTION = exports.EOF_FOLLOW_KEY = void 0;
var tokens_public_1 = __webpack_require__(8497);
var utils_1 = __webpack_require__(3739);
var exceptions_public_1 = __webpack_require__(172);
var constants_1 = __webpack_require__(469);
var parser_1 = __webpack_require__(602);
exports.EOF_FOLLOW_KEY = {};
exports.IN_RULE_RECOVERY_EXCEPTION = "InRuleRecoveryException";
function InRuleRecoveryException(message) {
    this.name = exports.IN_RULE_RECOVERY_EXCEPTION;
    this.message = message;
}
exports.InRuleRecoveryException = InRuleRecoveryException;
InRuleRecoveryException.prototype = Error.prototype;
/**
 * This trait is responsible for the error recovery and fault tolerant logic
 */
var Recoverable = /** @class */ (function () {
    function Recoverable() {
    }
    Recoverable.prototype.initRecoverable = function (config) {
        this.firstAfterRepMap = {};
        this.resyncFollows = {};
        this.recoveryEnabled = utils_1.has(config, "recoveryEnabled")
            ? config.recoveryEnabled
            : parser_1.DEFAULT_PARSER_CONFIG.recoveryEnabled;
        // performance optimization, NOOP will be inlined which
        // effectively means that this optional feature does not exist
        // when not used.
        if (this.recoveryEnabled) {
            this.attemptInRepetitionRecovery = attemptInRepetitionRecovery;
        }
    };
    Recoverable.prototype.getTokenToInsert = function (tokType) {
        var tokToInsert = tokens_public_1.createTokenInstance(tokType, "", NaN, NaN, NaN, NaN, NaN, NaN);
        tokToInsert.isInsertedInRecovery = true;
        return tokToInsert;
    };
    Recoverable.prototype.canTokenTypeBeInsertedInRecovery = function (tokType) {
        return true;
    };
    Recoverable.prototype.tryInRepetitionRecovery = function (grammarRule, grammarRuleArgs, lookAheadFunc, expectedTokType) {
        var _this = this;
        // TODO: can the resyncTokenType be cached?
        var reSyncTokType = this.findReSyncTokenType();
        var savedLexerState = this.exportLexerState();
        var resyncedTokens = [];
        var passedResyncPoint = false;
        var nextTokenWithoutResync = this.LA(1);
        var currToken = this.LA(1);
        var generateErrorMessage = function () {
            var previousToken = _this.LA(0);
            // we are preemptively re-syncing before an error has been detected, therefor we must reproduce
            // the error that would have been thrown
            var msg = _this.errorMessageProvider.buildMismatchTokenMessage({
                expected: expectedTokType,
                actual: nextTokenWithoutResync,
                previous: previousToken,
                ruleName: _this.getCurrRuleFullName()
            });
            var error = new exceptions_public_1.MismatchedTokenException(msg, nextTokenWithoutResync, _this.LA(0));
            // the first token here will be the original cause of the error, this is not part of the resyncedTokens property.
            error.resyncedTokens = utils_1.dropRight(resyncedTokens);
            _this.SAVE_ERROR(error);
        };
        while (!passedResyncPoint) {
            // re-synced to a point where we can safely exit the repetition/
            if (this.tokenMatcher(currToken, expectedTokType)) {
                generateErrorMessage();
                return; // must return here to avoid reverting the inputIdx
            }
            else if (lookAheadFunc.call(this)) {
                // we skipped enough tokens so we can resync right back into another iteration of the repetition grammar rule
                generateErrorMessage();
                // recursive invocation in other to support multiple re-syncs in the same top level repetition grammar rule
                grammarRule.apply(this, grammarRuleArgs);
                return; // must return here to avoid reverting the inputIdx
            }
            else if (this.tokenMatcher(currToken, reSyncTokType)) {
                passedResyncPoint = true;
            }
            else {
                currToken = this.SKIP_TOKEN();
                this.addToResyncTokens(currToken, resyncedTokens);
            }
        }
        // we were unable to find a CLOSER point to resync inside the Repetition, reset the state.
        // The parsing exception we were trying to prevent will happen in the NEXT parsing step. it may be handled by
        // "between rules" resync recovery later in the flow.
        this.importLexerState(savedLexerState);
    };
    Recoverable.prototype.shouldInRepetitionRecoveryBeTried = function (expectTokAfterLastMatch, nextTokIdx, notStuck) {
        // Edge case of arriving from a MANY repetition which is stuck
        // Attempting recovery in this case could cause an infinite loop
        if (notStuck === false) {
            return false;
        }
        // arguments to try and perform resync into the next iteration of the many are missing
        if (expectTokAfterLastMatch === undefined || nextTokIdx === undefined) {
            return false;
        }
        // no need to recover, next token is what we expect...
        if (this.tokenMatcher(this.LA(1), expectTokAfterLastMatch)) {
            return false;
        }
        // error recovery is disabled during backtracking as it can make the parser ignore a valid grammar path
        // and prefer some backtracking path that includes recovered errors.
        if (this.isBackTracking()) {
            return false;
        }
        // if we can perform inRule recovery (single token insertion or deletion) we always prefer that recovery algorithm
        // because if it works, it makes the least amount of changes to the input stream (greedy algorithm)
        //noinspection RedundantIfStatementJS
        if (this.canPerformInRuleRecovery(expectTokAfterLastMatch, this.getFollowsForInRuleRecovery(expectTokAfterLastMatch, nextTokIdx))) {
            return false;
        }
        return true;
    };
    // Error Recovery functionality
    Recoverable.prototype.getFollowsForInRuleRecovery = function (tokType, tokIdxInRule) {
        var grammarPath = this.getCurrentGrammarPath(tokType, tokIdxInRule);
        var follows = this.getNextPossibleTokenTypes(grammarPath);
        return follows;
    };
    Recoverable.prototype.tryInRuleRecovery = function (expectedTokType, follows) {
        if (this.canRecoverWithSingleTokenInsertion(expectedTokType, follows)) {
            var tokToInsert = this.getTokenToInsert(expectedTokType);
            return tokToInsert;
        }
        if (this.canRecoverWithSingleTokenDeletion(expectedTokType)) {
            var nextTok = this.SKIP_TOKEN();
            this.consumeToken();
            return nextTok;
        }
        throw new InRuleRecoveryException("sad sad panda");
    };
    Recoverable.prototype.canPerformInRuleRecovery = function (expectedToken, follows) {
        return (this.canRecoverWithSingleTokenInsertion(expectedToken, follows) ||
            this.canRecoverWithSingleTokenDeletion(expectedToken));
    };
    Recoverable.prototype.canRecoverWithSingleTokenInsertion = function (expectedTokType, follows) {
        var _this = this;
        if (!this.canTokenTypeBeInsertedInRecovery(expectedTokType)) {
            return false;
        }
        // must know the possible following tokens to perform single token insertion
        if (utils_1.isEmpty(follows)) {
            return false;
        }
        var mismatchedTok = this.LA(1);
        var isMisMatchedTokInFollows = utils_1.find(follows, function (possibleFollowsTokType) {
            return _this.tokenMatcher(mismatchedTok, possibleFollowsTokType);
        }) !== undefined;
        return isMisMatchedTokInFollows;
    };
    Recoverable.prototype.canRecoverWithSingleTokenDeletion = function (expectedTokType) {
        var isNextTokenWhatIsExpected = this.tokenMatcher(this.LA(2), expectedTokType);
        return isNextTokenWhatIsExpected;
    };
    Recoverable.prototype.isInCurrentRuleReSyncSet = function (tokenTypeIdx) {
        var followKey = this.getCurrFollowKey();
        var currentRuleReSyncSet = this.getFollowSetFromFollowKey(followKey);
        return utils_1.contains(currentRuleReSyncSet, tokenTypeIdx);
    };
    Recoverable.prototype.findReSyncTokenType = function () {
        var allPossibleReSyncTokTypes = this.flattenFollowSet();
        // this loop will always terminate as EOF is always in the follow stack and also always (virtually) in the input
        var nextToken = this.LA(1);
        var k = 2;
        while (true) {
            var nextTokenType = nextToken.tokenType;
            if (utils_1.contains(allPossibleReSyncTokTypes, nextTokenType)) {
                return nextTokenType;
            }
            nextToken = this.LA(k);
            k++;
        }
    };
    Recoverable.prototype.getCurrFollowKey = function () {
        // the length is at least one as we always add the ruleName to the stack before invoking the rule.
        if (this.RULE_STACK.length === 1) {
            return exports.EOF_FOLLOW_KEY;
        }
        var currRuleShortName = this.getLastExplicitRuleShortName();
        var currRuleIdx = this.getLastExplicitRuleOccurrenceIndex();
        var prevRuleShortName = this.getPreviousExplicitRuleShortName();
        return {
            ruleName: this.shortRuleNameToFullName(currRuleShortName),
            idxInCallingRule: currRuleIdx,
            inRule: this.shortRuleNameToFullName(prevRuleShortName)
        };
    };
    Recoverable.prototype.buildFullFollowKeyStack = function () {
        var _this = this;
        var explicitRuleStack = this.RULE_STACK;
        var explicitOccurrenceStack = this.RULE_OCCURRENCE_STACK;
        return utils_1.map(explicitRuleStack, function (ruleName, idx) {
            if (idx === 0) {
                return exports.EOF_FOLLOW_KEY;
            }
            return {
                ruleName: _this.shortRuleNameToFullName(ruleName),
                idxInCallingRule: explicitOccurrenceStack[idx],
                inRule: _this.shortRuleNameToFullName(explicitRuleStack[idx - 1])
            };
        });
    };
    Recoverable.prototype.flattenFollowSet = function () {
        var _this = this;
        var followStack = utils_1.map(this.buildFullFollowKeyStack(), function (currKey) {
            return _this.getFollowSetFromFollowKey(currKey);
        });
        return utils_1.flatten(followStack);
    };
    Recoverable.prototype.getFollowSetFromFollowKey = function (followKey) {
        if (followKey === exports.EOF_FOLLOW_KEY) {
            return [tokens_public_1.EOF];
        }
        var followName = followKey.ruleName + followKey.idxInCallingRule + constants_1.IN + followKey.inRule;
        return this.resyncFollows[followName];
    };
    // It does not make any sense to include a virtual EOF token in the list of resynced tokens
    // as EOF does not really exist and thus does not contain any useful information (line/column numbers)
    Recoverable.prototype.addToResyncTokens = function (token, resyncTokens) {
        if (!this.tokenMatcher(token, tokens_public_1.EOF)) {
            resyncTokens.push(token);
        }
        return resyncTokens;
    };
    Recoverable.prototype.reSyncTo = function (tokType) {
        var resyncedTokens = [];
        var nextTok = this.LA(1);
        while (this.tokenMatcher(nextTok, tokType) === false) {
            nextTok = this.SKIP_TOKEN();
            this.addToResyncTokens(nextTok, resyncedTokens);
        }
        // the last token is not part of the error.
        return utils_1.dropRight(resyncedTokens);
    };
    Recoverable.prototype.attemptInRepetitionRecovery = function (prodFunc, args, lookaheadFunc, dslMethodIdx, prodOccurrence, nextToksWalker, notStuck) {
        // by default this is a NO-OP
        // The actual implementation is with the function(not method) below
    };
    Recoverable.prototype.getCurrentGrammarPath = function (tokType, tokIdxInRule) {
        var pathRuleStack = this.getHumanReadableRuleStack();
        var pathOccurrenceStack = utils_1.cloneArr(this.RULE_OCCURRENCE_STACK);
        var grammarPath = {
            ruleStack: pathRuleStack,
            occurrenceStack: pathOccurrenceStack,
            lastTok: tokType,
            lastTokOccurrence: tokIdxInRule
        };
        return grammarPath;
    };
    Recoverable.prototype.getHumanReadableRuleStack = function () {
        var _this = this;
        return utils_1.map(this.RULE_STACK, function (currShortName) {
            return _this.shortRuleNameToFullName(currShortName);
        });
    };
    return Recoverable;
}());
exports.Recoverable = Recoverable;
function attemptInRepetitionRecovery(prodFunc, args, lookaheadFunc, dslMethodIdx, prodOccurrence, nextToksWalker, notStuck) {
    var key = this.getKeyForAutomaticLookahead(dslMethodIdx, prodOccurrence);
    var firstAfterRepInfo = this.firstAfterRepMap[key];
    if (firstAfterRepInfo === undefined) {
        var currRuleName = this.getCurrRuleFullName();
        var ruleGrammar = this.getGAstProductions()[currRuleName];
        var walker = new nextToksWalker(ruleGrammar, prodOccurrence);
        firstAfterRepInfo = walker.startWalking();
        this.firstAfterRepMap[key] = firstAfterRepInfo;
    }
    var expectTokAfterLastMatch = firstAfterRepInfo.token;
    var nextTokIdx = firstAfterRepInfo.occurrence;
    var isEndOfRule = firstAfterRepInfo.isEndOfRule;
    // special edge case of a TOP most repetition after which the input should END.
    // this will force an attempt for inRule recovery in that scenario.
    if (this.RULE_STACK.length === 1 &&
        isEndOfRule &&
        expectTokAfterLastMatch === undefined) {
        expectTokAfterLastMatch = tokens_public_1.EOF;
        nextTokIdx = 1;
    }
    if (this.shouldInRepetitionRecoveryBeTried(expectTokAfterLastMatch, nextTokIdx, notStuck)) {
        // TODO: performance optimization: instead of passing the original args here, we modify
        // the args param (or create a new one) and make sure the lookahead func is explicitly provided
        // to avoid searching the cache for it once more.
        this.tryInRepetitionRecovery(prodFunc, args, lookaheadFunc, expectTokAfterLastMatch);
    }
}
exports.attemptInRepetitionRecovery = attemptInRepetitionRecovery;
//# sourceMappingURL=recoverable.js.map

/***/ }),

/***/ 5184:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.TreeBuilder = void 0;
var cst_1 = __webpack_require__(4678);
var utils_1 = __webpack_require__(3739);
var cst_visitor_1 = __webpack_require__(2784);
var parser_1 = __webpack_require__(602);
/**
 * This trait is responsible for the CST building logic.
 */
var TreeBuilder = /** @class */ (function () {
    function TreeBuilder() {
    }
    TreeBuilder.prototype.initTreeBuilder = function (config) {
        this.CST_STACK = [];
        // outputCst is no longer exposed/defined in the pubic API
        this.outputCst = config.outputCst;
        this.nodeLocationTracking = utils_1.has(config, "nodeLocationTracking")
            ? config.nodeLocationTracking
            : parser_1.DEFAULT_PARSER_CONFIG.nodeLocationTracking;
        if (!this.outputCst) {
            this.cstInvocationStateUpdate = utils_1.NOOP;
            this.cstFinallyStateUpdate = utils_1.NOOP;
            this.cstPostTerminal = utils_1.NOOP;
            this.cstPostNonTerminal = utils_1.NOOP;
            this.cstPostRule = utils_1.NOOP;
        }
        else {
            if (/full/i.test(this.nodeLocationTracking)) {
                if (this.recoveryEnabled) {
                    this.setNodeLocationFromToken = cst_1.setNodeLocationFull;
                    this.setNodeLocationFromNode = cst_1.setNodeLocationFull;
                    this.cstPostRule = utils_1.NOOP;
                    this.setInitialNodeLocation = this.setInitialNodeLocationFullRecovery;
                }
                else {
                    this.setNodeLocationFromToken = utils_1.NOOP;
                    this.setNodeLocationFromNode = utils_1.NOOP;
                    this.cstPostRule = this.cstPostRuleFull;
                    this.setInitialNodeLocation = this.setInitialNodeLocationFullRegular;
                }
            }
            else if (/onlyOffset/i.test(this.nodeLocationTracking)) {
                if (this.recoveryEnabled) {
                    this.setNodeLocationFromToken = cst_1.setNodeLocationOnlyOffset;
                    this.setNodeLocationFromNode = cst_1.setNodeLocationOnlyOffset;
                    this.cstPostRule = utils_1.NOOP;
                    this.setInitialNodeLocation = this.setInitialNodeLocationOnlyOffsetRecovery;
                }
                else {
                    this.setNodeLocationFromToken = utils_1.NOOP;
                    this.setNodeLocationFromNode = utils_1.NOOP;
                    this.cstPostRule = this.cstPostRuleOnlyOffset;
                    this.setInitialNodeLocation = this.setInitialNodeLocationOnlyOffsetRegular;
                }
            }
            else if (/none/i.test(this.nodeLocationTracking)) {
                this.setNodeLocationFromToken = utils_1.NOOP;
                this.setNodeLocationFromNode = utils_1.NOOP;
                this.cstPostRule = utils_1.NOOP;
                this.setInitialNodeLocation = utils_1.NOOP;
            }
            else {
                throw Error("Invalid <nodeLocationTracking> config option: \"" + config.nodeLocationTracking + "\"");
            }
        }
    };
    TreeBuilder.prototype.setInitialNodeLocationOnlyOffsetRecovery = function (cstNode) {
        cstNode.location = {
            startOffset: NaN,
            endOffset: NaN
        };
    };
    TreeBuilder.prototype.setInitialNodeLocationOnlyOffsetRegular = function (cstNode) {
        cstNode.location = {
            // without error recovery the starting Location of a new CstNode is guaranteed
            // To be the next Token's startOffset (for valid inputs).
            // For invalid inputs there won't be any CSTOutput so this potential
            // inaccuracy does not matter
            startOffset: this.LA(1).startOffset,
            endOffset: NaN
        };
    };
    TreeBuilder.prototype.setInitialNodeLocationFullRecovery = function (cstNode) {
        cstNode.location = {
            startOffset: NaN,
            startLine: NaN,
            startColumn: NaN,
            endOffset: NaN,
            endLine: NaN,
            endColumn: NaN
        };
    };
    /**
       *  @see setInitialNodeLocationOnlyOffsetRegular for explanation why this work
  
       * @param cstNode
       */
    TreeBuilder.prototype.setInitialNodeLocationFullRegular = function (cstNode) {
        var nextToken = this.LA(1);
        cstNode.location = {
            startOffset: nextToken.startOffset,
            startLine: nextToken.startLine,
            startColumn: nextToken.startColumn,
            endOffset: NaN,
            endLine: NaN,
            endColumn: NaN
        };
    };
    TreeBuilder.prototype.cstInvocationStateUpdate = function (fullRuleName, shortName) {
        var cstNode = {
            name: fullRuleName,
            children: {}
        };
        this.setInitialNodeLocation(cstNode);
        this.CST_STACK.push(cstNode);
    };
    TreeBuilder.prototype.cstFinallyStateUpdate = function () {
        this.CST_STACK.pop();
    };
    TreeBuilder.prototype.cstPostRuleFull = function (ruleCstNode) {
        var prevToken = this.LA(0);
        var loc = ruleCstNode.location;
        // If this condition is true it means we consumed at least one Token
        // In this CstNode.
        if (loc.startOffset <= prevToken.startOffset === true) {
            loc.endOffset = prevToken.endOffset;
            loc.endLine = prevToken.endLine;
            loc.endColumn = prevToken.endColumn;
        }
        // "empty" CstNode edge case
        else {
            loc.startOffset = NaN;
            loc.startLine = NaN;
            loc.startColumn = NaN;
        }
    };
    TreeBuilder.prototype.cstPostRuleOnlyOffset = function (ruleCstNode) {
        var prevToken = this.LA(0);
        var loc = ruleCstNode.location;
        // If this condition is true it means we consumed at least one Token
        // In this CstNode.
        if (loc.startOffset <= prevToken.startOffset === true) {
            loc.endOffset = prevToken.endOffset;
        }
        // "empty" CstNode edge case
        else {
            loc.startOffset = NaN;
        }
    };
    TreeBuilder.prototype.cstPostTerminal = function (key, consumedToken) {
        var rootCst = this.CST_STACK[this.CST_STACK.length - 1];
        cst_1.addTerminalToCst(rootCst, consumedToken, key);
        // This is only used when **both** error recovery and CST Output are enabled.
        this.setNodeLocationFromToken(rootCst.location, consumedToken);
    };
    TreeBuilder.prototype.cstPostNonTerminal = function (ruleCstResult, ruleName) {
        var preCstNode = this.CST_STACK[this.CST_STACK.length - 1];
        cst_1.addNoneTerminalToCst(preCstNode, ruleName, ruleCstResult);
        // This is only used when **both** error recovery and CST Output are enabled.
        this.setNodeLocationFromNode(preCstNode.location, ruleCstResult.location);
    };
    TreeBuilder.prototype.getBaseCstVisitorConstructor = function () {
        if (utils_1.isUndefined(this.baseCstVisitorConstructor)) {
            var newBaseCstVisitorConstructor = cst_visitor_1.createBaseSemanticVisitorConstructor(this.className, utils_1.keys(this.gastProductionsCache));
            this.baseCstVisitorConstructor = newBaseCstVisitorConstructor;
            return newBaseCstVisitorConstructor;
        }
        return this.baseCstVisitorConstructor;
    };
    TreeBuilder.prototype.getBaseCstVisitorConstructorWithDefaults = function () {
        if (utils_1.isUndefined(this.baseCstVisitorWithDefaultsConstructor)) {
            var newConstructor = cst_visitor_1.createBaseVisitorConstructorWithDefaults(this.className, utils_1.keys(this.gastProductionsCache), this.getBaseCstVisitorConstructor());
            this.baseCstVisitorWithDefaultsConstructor = newConstructor;
            return newConstructor;
        }
        return this.baseCstVisitorWithDefaultsConstructor;
    };
    TreeBuilder.prototype.getLastExplicitRuleShortName = function () {
        var ruleStack = this.RULE_STACK;
        return ruleStack[ruleStack.length - 1];
    };
    TreeBuilder.prototype.getPreviousExplicitRuleShortName = function () {
        var ruleStack = this.RULE_STACK;
        return ruleStack[ruleStack.length - 2];
    };
    TreeBuilder.prototype.getLastExplicitRuleOccurrenceIndex = function () {
        var occurrenceStack = this.RULE_OCCURRENCE_STACK;
        return occurrenceStack[occurrenceStack.length - 1];
    };
    return TreeBuilder;
}());
exports.TreeBuilder = TreeBuilder;
//# sourceMappingURL=tree_builder.js.map

/***/ }),

/***/ 4697:
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.charCodeToOptimizedIndex = exports.minOptimizationVal = exports.buildLineBreakIssueMessage = exports.LineTerminatorOptimizedTester = exports.isShortPattern = exports.isCustomPattern = exports.cloneEmptyGroups = exports.performWarningRuntimeChecks = exports.performRuntimeChecks = exports.addStickyFlag = exports.addStartOfInput = exports.findUnreachablePatterns = exports.findModesThatDoNotExist = exports.findInvalidGroupType = exports.findDuplicatePatterns = exports.findUnsupportedFlags = exports.findStartOfInputAnchor = exports.findEmptyMatchRegExps = exports.findEndOfInputAnchor = exports.findInvalidPatterns = exports.findMissingPatterns = exports.validatePatterns = exports.analyzeTokenTypes = exports.enableSticky = exports.disableSticky = exports.SUPPORT_STICKY = exports.MODES = exports.DEFAULT_MODE = void 0;
var regexp_to_ast_1 = __webpack_require__(4303);
var lexer_public_1 = __webpack_require__(2595);
var utils_1 = __webpack_require__(3739);
var reg_exp_1 = __webpack_require__(344);
var reg_exp_parser_1 = __webpack_require__(3144);
var PATTERN = "PATTERN";
exports.DEFAULT_MODE = "defaultMode";
exports.MODES = "modes";
exports.SUPPORT_STICKY = typeof new RegExp("(?:)").sticky === "boolean";
function disableSticky() {
    exports.SUPPORT_STICKY = false;
}
exports.disableSticky = disableSticky;
function enableSticky() {
    exports.SUPPORT_STICKY = true;
}
exports.enableSticky = enableSticky;
function analyzeTokenTypes(tokenTypes, options) {
    options = utils_1.defaults(options, {
        useSticky: exports.SUPPORT_STICKY,
        debug: false,
        safeMode: false,
        positionTracking: "full",
        lineTerminatorCharacters: ["\r", "\n"],
        tracer: function (msg, action) { return action(); }
    });
    var tracer = options.tracer;
    tracer("initCharCodeToOptimizedIndexMap", function () {
        initCharCodeToOptimizedIndexMap();
    });
    var onlyRelevantTypes;
    tracer("Reject Lexer.NA", function () {
        onlyRelevantTypes = utils_1.reject(tokenTypes, function (currType) {
            return currType[PATTERN] === lexer_public_1.Lexer.NA;
        });
    });
    var hasCustom = false;
    var allTransformedPatterns;
    tracer("Transform Patterns", function () {
        hasCustom = false;
        allTransformedPatterns = utils_1.map(onlyRelevantTypes, function (currType) {
            var currPattern = currType[PATTERN];
            /* istanbul ignore else */
            if (utils_1.isRegExp(currPattern)) {
                var regExpSource = currPattern.source;
                if (regExpSource.length === 1 &&
                    // only these regExp meta characters which can appear in a length one regExp
                    regExpSource !== "^" &&
                    regExpSource !== "$" &&
                    regExpSource !== "." &&
                    !currPattern.ignoreCase) {
                    return regExpSource;
                }
                else if (regExpSource.length === 2 &&
                    regExpSource[0] === "\\" &&
                    // not a meta character
                    !utils_1.contains([
                        "d",
                        "D",
                        "s",
                        "S",
                        "t",
                        "r",
                        "n",
                        "t",
                        "0",
                        "c",
                        "b",
                        "B",
                        "f",
                        "v",
                        "w",
                        "W"
                    ], regExpSource[1])) {
                    // escaped meta Characters: /\+/ /\[/
                    // or redundant escaping: /\a/
                    // without the escaping "\"
                    return regExpSource[1];
                }
                else {
                    return options.useSticky
                        ? addStickyFlag(currPattern)
                        : addStartOfInput(currPattern);
                }
            }
            else if (utils_1.isFunction(currPattern)) {
                hasCustom = true;
                // CustomPatternMatcherFunc - custom patterns do not require any transformations, only wrapping in a RegExp Like object
                return { exec: currPattern };
            }
            else if (utils_1.has(currPattern, "exec")) {
                hasCustom = true;
                // ICustomPattern
                return currPattern;
            }
            else if (typeof currPattern === "string") {
                if (currPattern.length === 1) {
                    return currPattern;
                }
                else {
                    var escapedRegExpString = currPattern.replace(/[\\^$.*+?()[\]{}|]/g, "\\$&");
                    var wrappedRegExp = new RegExp(escapedRegExpString);
                    return options.useSticky
                        ? addStickyFlag(wrappedRegExp)
                        : addStartOfInput(wrappedRegExp);
                }
            }
            else {
                throw Error("non exhaustive match");
            }
        });
    });
    var patternIdxToType;
    var patternIdxToGroup;
    var patternIdxToLongerAltIdx;
    var patternIdxToPushMode;
    var patternIdxToPopMode;
    tracer("misc mapping", function () {
        patternIdxToType = utils_1.map(onlyRelevantTypes, function (currType) { return currType.tokenTypeIdx; });
        patternIdxToGroup = utils_1.map(onlyRelevantTypes, function (clazz) {
            var groupName = clazz.GROUP;
            /* istanbul ignore next */
            if (groupName === lexer_public_1.Lexer.SKIPPED) {
                return undefined;
            }
            else if (utils_1.isString(groupName)) {
                return groupName;
            }
            else if (utils_1.isUndefined(groupName)) {
                return false;
            }
            else {
                throw Error("non exhaustive match");
            }
        });
        patternIdxToLongerAltIdx = utils_1.map(onlyRelevantTypes, function (clazz) {
            var longerAltType = clazz.LONGER_ALT;
            if (longerAltType) {
                var longerAltIdx = utils_1.indexOf(onlyRelevantTypes, longerAltType);
                return longerAltIdx;
            }
        });
        patternIdxToPushMode = utils_1.map(onlyRelevantTypes, function (clazz) { return clazz.PUSH_MODE; });
        patternIdxToPopMode = utils_1.map(onlyRelevantTypes, function (clazz) {
            return utils_1.has(clazz, "POP_MODE");
        });
    });
    var patternIdxToCanLineTerminator;
    tracer("Line Terminator Handling", function () {
        var lineTerminatorCharCodes = getCharCodes(options.lineTerminatorCharacters);
        patternIdxToCanLineTerminator = utils_1.map(onlyRelevantTypes, function (tokType) { return false; });
        if (options.positionTracking !== "onlyOffset") {
            patternIdxToCanLineTerminator = utils_1.map(onlyRelevantTypes, function (tokType) {
                if (utils_1.has(tokType, "LINE_BREAKS")) {
                    return tokType.LINE_BREAKS;
                }
                else {
                    if (checkLineBreaksIssues(tokType, lineTerminatorCharCodes) === false) {
                        return reg_exp_1.canMatchCharCode(lineTerminatorCharCodes, tokType.PATTERN);
                    }
                }
            });
        }
    });
    var patternIdxToIsCustom;
    var patternIdxToShort;
    var emptyGroups;
    var patternIdxToConfig;
    tracer("Misc Mapping #2", function () {
        patternIdxToIsCustom = utils_1.map(onlyRelevantTypes, isCustomPattern);
        patternIdxToShort = utils_1.map(allTransformedPatterns, isShortPattern);
        emptyGroups = utils_1.reduce(onlyRelevantTypes, function (acc, clazz) {
            var groupName = clazz.GROUP;
            if (utils_1.isString(groupName) && !(groupName === lexer_public_1.Lexer.SKIPPED)) {
                acc[groupName] = [];
            }
            return acc;
        }, {});
        patternIdxToConfig = utils_1.map(allTransformedPatterns, function (x, idx) {
            return {
                pattern: allTransformedPatterns[idx],
                longerAlt: patternIdxToLongerAltIdx[idx],
                canLineTerminator: patternIdxToCanLineTerminator[idx],
                isCustom: patternIdxToIsCustom[idx],
                short: patternIdxToShort[idx],
                group: patternIdxToGroup[idx],
                push: patternIdxToPushMode[idx],
                pop: patternIdxToPopMode[idx],
                tokenTypeIdx: patternIdxToType[idx],
                tokenType: onlyRelevantTypes[idx]
            };
        });
    });
    var canBeOptimized = true;
    var charCodeToPatternIdxToConfig = [];
    if (!options.safeMode) {
        tracer("First Char Optimization", function () {
            charCodeToPatternIdxToConfig = utils_1.reduce(onlyRelevantTypes, function (result, currTokType, idx) {
                if (typeof currTokType.PATTERN === "string") {
                    var charCode = currTokType.PATTERN.charCodeAt(0);
                    var optimizedIdx = charCodeToOptimizedIndex(charCode);
                    addToMapOfArrays(result, optimizedIdx, patternIdxToConfig[idx]);
                }
                else if (utils_1.isArray(currTokType.START_CHARS_HINT)) {
                    var lastOptimizedIdx_1;
                    utils_1.forEach(currTokType.START_CHARS_HINT, function (charOrInt) {
                        var charCode = typeof charOrInt === "string"
                            ? charOrInt.charCodeAt(0)
                            : charOrInt;
                        var currOptimizedIdx = charCodeToOptimizedIndex(charCode);
                        // Avoid adding the config multiple times
                        /* istanbul ignore else */
                        // - Difficult to check this scenario effects as it is only a performance
                        //   optimization that does not change correctness
                        if (lastOptimizedIdx_1 !== currOptimizedIdx) {
                            lastOptimizedIdx_1 = currOptimizedIdx;
                            addToMapOfArrays(result, currOptimizedIdx, patternIdxToConfig[idx]);
                        }
                    });
                }
                else if (utils_1.isRegExp(currTokType.PATTERN)) {
                    if (currTokType.PATTERN.unicode) {
                        canBeOptimized = false;
                        if (options.ensureOptimizations) {
                            utils_1.PRINT_ERROR("" + reg_exp_1.failedOptimizationPrefixMsg +
                                ("\tUnable to analyze < " + currTokType.PATTERN.toString() + " > pattern.\n") +
                                "\tThe regexp unicode flag is not currently supported by the regexp-to-ast library.\n" +
                                "\tThis will disable the lexer's first char optimizations.\n" +
                                "\tFor details See: https://sap.github.io/chevrotain/docs/guide/resolving_lexer_errors.html#UNICODE_OPTIMIZE");
                        }
                    }
                    else {
                        var optimizedCodes = reg_exp_1.getOptimizedStartCodesIndices(currTokType.PATTERN, options.ensureOptimizations);
                        /* istanbul ignore if */
                        // start code will only be empty given an empty regExp or failure of regexp-to-ast library
                        // the first should be a different validation and the second cannot be tested.
                        if (utils_1.isEmpty(optimizedCodes)) {
                            // we cannot understand what codes may start possible matches
                            // The optimization correctness requires knowing start codes for ALL patterns.
                            // Not actually sure this is an error, no debug message
                            canBeOptimized = false;
                        }
                        utils_1.forEach(optimizedCodes, function (code) {
                            addToMapOfArrays(result, code, patternIdxToConfig[idx]);
                        });
                    }
                }
                else {
                    if (options.ensureOptimizations) {
                        utils_1.PRINT_ERROR("" + reg_exp_1.failedOptimizationPrefixMsg +
                            ("\tTokenType: <" + currTokType.name + "> is using a custom token pattern without providing <start_chars_hint> parameter.\n") +
                            "\tThis will disable the lexer's first char optimizations.\n" +
                            "\tFor details See: https://sap.github.io/chevrotain/docs/guide/resolving_lexer_errors.html#CUSTOM_OPTIMIZE");
                    }
                    canBeOptimized = false;
                }
                return result;
            }, []);
        });
    }
    tracer("ArrayPacking", function () {
        charCodeToPatternIdxToConfig = utils_1.packArray(charCodeToPatternIdxToConfig);
    });
    return {
        emptyGroups: emptyGroups,
        patternIdxToConfig: patternIdxToConfig,
        charCodeToPatternIdxToConfig: charCodeToPatternIdxToConfig,
        hasCustom: hasCustom,
        canBeOptimized: canBeOptimized
    };
}
exports.analyzeTokenTypes = analyzeTokenTypes;
function validatePatterns(tokenTypes, validModesNames) {
    var errors = [];
    var missingResult = findMissingPatterns(tokenTypes);
    errors = errors.concat(missingResult.errors);
    var invalidResult = findInvalidPatterns(missingResult.valid);
    var validTokenTypes = invalidResult.valid;
    errors = errors.concat(invalidResult.errors);
    errors = errors.concat(validateRegExpPattern(validTokenTypes));
    errors = errors.concat(findInvalidGroupType(validTokenTypes));
    errors = errors.concat(findModesThatDoNotExist(validTokenTypes, validModesNames));
    errors = errors.concat(findUnreachablePatterns(validTokenTypes));
    return errors;
}
exports.validatePatterns = validatePatterns;
function validateRegExpPattern(tokenTypes) {
    var errors = [];
    var withRegExpPatterns = utils_1.filter(tokenTypes, function (currTokType) {
        return utils_1.isRegExp(currTokType[PATTERN]);
    });
    errors = errors.concat(findEndOfInputAnchor(withRegExpPatterns));
    errors = errors.concat(findStartOfInputAnchor(withRegExpPatterns));
    errors = errors.concat(findUnsupportedFlags(withRegExpPatterns));
    errors = errors.concat(findDuplicatePatterns(withRegExpPatterns));
    errors = errors.concat(findEmptyMatchRegExps(withRegExpPatterns));
    return errors;
}
function findMissingPatterns(tokenTypes) {
    var tokenTypesWithMissingPattern = utils_1.filter(tokenTypes, function (currType) {
        return !utils_1.has(currType, PATTERN);
    });
    var errors = utils_1.map(tokenTypesWithMissingPattern, function (currType) {
        return {
            message: "Token Type: ->" +
                currType.name +
                "<- missing static 'PATTERN' property",
            type: lexer_public_1.LexerDefinitionErrorType.MISSING_PATTERN,
            tokenTypes: [currType]
        };
    });
    var valid = utils_1.difference(tokenTypes, tokenTypesWithMissingPattern);
    return { errors: errors, valid: valid };
}
exports.findMissingPatterns = findMissingPatterns;
function findInvalidPatterns(tokenTypes) {
    var tokenTypesWithInvalidPattern = utils_1.filter(tokenTypes, function (currType) {
        var pattern = currType[PATTERN];
        return (!utils_1.isRegExp(pattern) &&
            !utils_1.isFunction(pattern) &&
            !utils_1.has(pattern, "exec") &&
            !utils_1.isString(pattern));
    });
    var errors = utils_1.map(tokenTypesWithInvalidPattern, function (currType) {
        return {
            message: "Token Type: ->" +
                currType.name +
                "<- static 'PATTERN' can only be a RegExp, a" +
                " Function matching the {CustomPatternMatcherFunc} type or an Object matching the {ICustomPattern} interface.",
            type: lexer_public_1.LexerDefinitionErrorType.INVALID_PATTERN,
            tokenTypes: [currType]
        };
    });
    var valid = utils_1.difference(tokenTypes, tokenTypesWithInvalidPattern);
    return { errors: errors, valid: valid };
}
exports.findInvalidPatterns = findInvalidPatterns;
var end_of_input = /[^\\][\$]/;
function findEndOfInputAnchor(tokenTypes) {
    var EndAnchorFinder = /** @class */ (function (_super) {
        __extends(EndAnchorFinder, _super);
        function EndAnchorFinder() {
            var _this = _super !== null && _super.apply(this, arguments) || this;
            _this.found = false;
            return _this;
        }
        EndAnchorFinder.prototype.visitEndAnchor = function (node) {
            this.found = true;
        };
        return EndAnchorFinder;
    }(regexp_to_ast_1.BaseRegExpVisitor));
    var invalidRegex = utils_1.filter(tokenTypes, function (currType) {
        var pattern = currType[PATTERN];
        try {
            var regexpAst = reg_exp_parser_1.getRegExpAst(pattern);
            var endAnchorVisitor = new EndAnchorFinder();
            endAnchorVisitor.visit(regexpAst);
            return endAnchorVisitor.found;
        }
        catch (e) {
            // old behavior in case of runtime exceptions with regexp-to-ast.
            /* istanbul ignore next - cannot ensure an error in regexp-to-ast*/
            return end_of_input.test(pattern.source);
        }
    });
    var errors = utils_1.map(invalidRegex, function (currType) {
        return {
            message: "Unexpected RegExp Anchor Error:\n" +
                "\tToken Type: ->" +
                currType.name +
                "<- static 'PATTERN' cannot contain end of input anchor '$'\n" +
                "\tSee sap.github.io/chevrotain/docs/guide/resolving_lexer_errors.html#ANCHORS" +
                "\tfor details.",
            type: lexer_public_1.LexerDefinitionErrorType.EOI_ANCHOR_FOUND,
            tokenTypes: [currType]
        };
    });
    return errors;
}
exports.findEndOfInputAnchor = findEndOfInputAnchor;
function findEmptyMatchRegExps(tokenTypes) {
    var matchesEmptyString = utils_1.filter(tokenTypes, function (currType) {
        var pattern = currType[PATTERN];
        return pattern.test("");
    });
    var errors = utils_1.map(matchesEmptyString, function (currType) {
        return {
            message: "Token Type: ->" +
                currType.name +
                "<- static 'PATTERN' must not match an empty string",
            type: lexer_public_1.LexerDefinitionErrorType.EMPTY_MATCH_PATTERN,
            tokenTypes: [currType]
        };
    });
    return errors;
}
exports.findEmptyMatchRegExps = findEmptyMatchRegExps;
var start_of_input = /[^\\[][\^]|^\^/;
function findStartOfInputAnchor(tokenTypes) {
    var StartAnchorFinder = /** @class */ (function (_super) {
        __extends(StartAnchorFinder, _super);
        function StartAnchorFinder() {
            var _this = _super !== null && _super.apply(this, arguments) || this;
            _this.found = false;
            return _this;
        }
        StartAnchorFinder.prototype.visitStartAnchor = function (node) {
            this.found = true;
        };
        return StartAnchorFinder;
    }(regexp_to_ast_1.BaseRegExpVisitor));
    var invalidRegex = utils_1.filter(tokenTypes, function (currType) {
        var pattern = currType[PATTERN];
        try {
            var regexpAst = reg_exp_parser_1.getRegExpAst(pattern);
            var startAnchorVisitor = new StartAnchorFinder();
            startAnchorVisitor.visit(regexpAst);
            return startAnchorVisitor.found;
        }
        catch (e) {
            // old behavior in case of runtime exceptions with regexp-to-ast.
            /* istanbul ignore next - cannot ensure an error in regexp-to-ast*/
            return start_of_input.test(pattern.source);
        }
    });
    var errors = utils_1.map(invalidRegex, function (currType) {
        return {
            message: "Unexpected RegExp Anchor Error:\n" +
                "\tToken Type: ->" +
                currType.name +
                "<- static 'PATTERN' cannot contain start of input anchor '^'\n" +
                "\tSee https://sap.github.io/chevrotain/docs/guide/resolving_lexer_errors.html#ANCHORS" +
                "\tfor details.",
            type: lexer_public_1.LexerDefinitionErrorType.SOI_ANCHOR_FOUND,
            tokenTypes: [currType]
        };
    });
    return errors;
}
exports.findStartOfInputAnchor = findStartOfInputAnchor;
function findUnsupportedFlags(tokenTypes) {
    var invalidFlags = utils_1.filter(tokenTypes, function (currType) {
        var pattern = currType[PATTERN];
        return pattern instanceof RegExp && (pattern.multiline || pattern.global);
    });
    var errors = utils_1.map(invalidFlags, function (currType) {
        return {
            message: "Token Type: ->" +
                currType.name +
                "<- static 'PATTERN' may NOT contain global('g') or multiline('m')",
            type: lexer_public_1.LexerDefinitionErrorType.UNSUPPORTED_FLAGS_FOUND,
            tokenTypes: [currType]
        };
    });
    return errors;
}
exports.findUnsupportedFlags = findUnsupportedFlags;
// This can only test for identical duplicate RegExps, not semantically equivalent ones.
function findDuplicatePatterns(tokenTypes) {
    var found = [];
    var identicalPatterns = utils_1.map(tokenTypes, function (outerType) {
        return utils_1.reduce(tokenTypes, function (result, innerType) {
            if (outerType.PATTERN.source === innerType.PATTERN.source &&
                !utils_1.contains(found, innerType) &&
                innerType.PATTERN !== lexer_public_1.Lexer.NA) {
                // this avoids duplicates in the result, each Token Type may only appear in one "set"
                // in essence we are creating Equivalence classes on equality relation.
                found.push(innerType);
                result.push(innerType);
                return result;
            }
            return result;
        }, []);
    });
    identicalPatterns = utils_1.compact(identicalPatterns);
    var duplicatePatterns = utils_1.filter(identicalPatterns, function (currIdenticalSet) {
        return currIdenticalSet.length > 1;
    });
    var errors = utils_1.map(duplicatePatterns, function (setOfIdentical) {
        var tokenTypeNames = utils_1.map(setOfIdentical, function (currType) {
            return currType.name;
        });
        var dupPatternSrc = utils_1.first(setOfIdentical).PATTERN;
        return {
            message: "The same RegExp pattern ->" + dupPatternSrc + "<-" +
                ("has been used in all of the following Token Types: " + tokenTypeNames.join(", ") + " <-"),
            type: lexer_public_1.LexerDefinitionErrorType.DUPLICATE_PATTERNS_FOUND,
            tokenTypes: setOfIdentical
        };
    });
    return errors;
}
exports.findDuplicatePatterns = findDuplicatePatterns;
function findInvalidGroupType(tokenTypes) {
    var invalidTypes = utils_1.filter(tokenTypes, function (clazz) {
        if (!utils_1.has(clazz, "GROUP")) {
            return false;
        }
        var group = clazz.GROUP;
        return group !== lexer_public_1.Lexer.SKIPPED && group !== lexer_public_1.Lexer.NA && !utils_1.isString(group);
    });
    var errors = utils_1.map(invalidTypes, function (currType) {
        return {
            message: "Token Type: ->" +
                currType.name +
                "<- static 'GROUP' can only be Lexer.SKIPPED/Lexer.NA/A String",
            type: lexer_public_1.LexerDefinitionErrorType.INVALID_GROUP_TYPE_FOUND,
            tokenTypes: [currType]
        };
    });
    return errors;
}
exports.findInvalidGroupType = findInvalidGroupType;
function findModesThatDoNotExist(tokenTypes, validModes) {
    var invalidModes = utils_1.filter(tokenTypes, function (clazz) {
        return (clazz.PUSH_MODE !== undefined && !utils_1.contains(validModes, clazz.PUSH_MODE));
    });
    var errors = utils_1.map(invalidModes, function (tokType) {
        var msg = "Token Type: ->" + tokType.name + "<- static 'PUSH_MODE' value cannot refer to a Lexer Mode ->" + tokType.PUSH_MODE + "<-" +
            "which does not exist";
        return {
            message: msg,
            type: lexer_public_1.LexerDefinitionErrorType.PUSH_MODE_DOES_NOT_EXIST,
            tokenTypes: [tokType]
        };
    });
    return errors;
}
exports.findModesThatDoNotExist = findModesThatDoNotExist;
function findUnreachablePatterns(tokenTypes) {
    var errors = [];
    var canBeTested = utils_1.reduce(tokenTypes, function (result, tokType, idx) {
        var pattern = tokType.PATTERN;
        if (pattern === lexer_public_1.Lexer.NA) {
            return result;
        }
        // a more comprehensive validation for all forms of regExps would require
        // deeper regExp analysis capabilities
        if (utils_1.isString(pattern)) {
            result.push({ str: pattern, idx: idx, tokenType: tokType });
        }
        else if (utils_1.isRegExp(pattern) && noMetaChar(pattern)) {
            result.push({ str: pattern.source, idx: idx, tokenType: tokType });
        }
        return result;
    }, []);
    utils_1.forEach(tokenTypes, function (tokType, testIdx) {
        utils_1.forEach(canBeTested, function (_a) {
            var str = _a.str, idx = _a.idx, tokenType = _a.tokenType;
            if (testIdx < idx && testTokenType(str, tokType.PATTERN)) {
                var msg = "Token: ->" + tokenType.name + "<- can never be matched.\n" +
                    ("Because it appears AFTER the Token Type ->" + tokType.name + "<-") +
                    "in the lexer's definition.\n" +
                    "See https://sap.github.io/chevrotain/docs/guide/resolving_lexer_errors.html#UNREACHABLE";
                errors.push({
                    message: msg,
                    type: lexer_public_1.LexerDefinitionErrorType.UNREACHABLE_PATTERN,
                    tokenTypes: [tokType, tokenType]
                });
            }
        });
    });
    return errors;
}
exports.findUnreachablePatterns = findUnreachablePatterns;
function testTokenType(str, pattern) {
    /* istanbul ignore else */
    if (utils_1.isRegExp(pattern)) {
        var regExpArray = pattern.exec(str);
        return regExpArray !== null && regExpArray.index === 0;
    }
    else if (utils_1.isFunction(pattern)) {
        // maintain the API of custom patterns
        return pattern(str, 0, [], {});
    }
    else if (utils_1.has(pattern, "exec")) {
        // maintain the API of custom patterns
        return pattern.exec(str, 0, [], {});
    }
    else if (typeof pattern === "string") {
        return pattern === str;
    }
    else {
        throw Error("non exhaustive match");
    }
}
function noMetaChar(regExp) {
    //https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp
    var metaChars = [
        ".",
        "\\",
        "[",
        "]",
        "|",
        "^",
        "$",
        "(",
        ")",
        "?",
        "*",
        "+",
        "{"
    ];
    return (utils_1.find(metaChars, function (char) { return regExp.source.indexOf(char) !== -1; }) === undefined);
}
function addStartOfInput(pattern) {
    var flags = pattern.ignoreCase ? "i" : "";
    // always wrapping in a none capturing group preceded by '^' to make sure matching can only work on start of input.
    // duplicate/redundant start of input markers have no meaning (/^^^^A/ === /^A/)
    return new RegExp("^(?:" + pattern.source + ")", flags);
}
exports.addStartOfInput = addStartOfInput;
function addStickyFlag(pattern) {
    var flags = pattern.ignoreCase ? "iy" : "y";
    // always wrapping in a none capturing group preceded by '^' to make sure matching can only work on start of input.
    // duplicate/redundant start of input markers have no meaning (/^^^^A/ === /^A/)
    return new RegExp("" + pattern.source, flags);
}
exports.addStickyFlag = addStickyFlag;
function performRuntimeChecks(lexerDefinition, trackLines, lineTerminatorCharacters) {
    var errors = [];
    // some run time checks to help the end users.
    if (!utils_1.has(lexerDefinition, exports.DEFAULT_MODE)) {
        errors.push({
            message: "A MultiMode Lexer cannot be initialized without a <" +
                exports.DEFAULT_MODE +
                "> property in its definition\n",
            type: lexer_public_1.LexerDefinitionErrorType.MULTI_MODE_LEXER_WITHOUT_DEFAULT_MODE
        });
    }
    if (!utils_1.has(lexerDefinition, exports.MODES)) {
        errors.push({
            message: "A MultiMode Lexer cannot be initialized without a <" +
                exports.MODES +
                "> property in its definition\n",
            type: lexer_public_1.LexerDefinitionErrorType.MULTI_MODE_LEXER_WITHOUT_MODES_PROPERTY
        });
    }
    if (utils_1.has(lexerDefinition, exports.MODES) &&
        utils_1.has(lexerDefinition, exports.DEFAULT_MODE) &&
        !utils_1.has(lexerDefinition.modes, lexerDefinition.defaultMode)) {
        errors.push({
            message: "A MultiMode Lexer cannot be initialized with a " + exports.DEFAULT_MODE + ": <" + lexerDefinition.defaultMode + ">" +
                "which does not exist\n",
            type: lexer_public_1.LexerDefinitionErrorType.MULTI_MODE_LEXER_DEFAULT_MODE_VALUE_DOES_NOT_EXIST
        });
    }
    if (utils_1.has(lexerDefinition, exports.MODES)) {
        utils_1.forEach(lexerDefinition.modes, function (currModeValue, currModeName) {
            utils_1.forEach(currModeValue, function (currTokType, currIdx) {
                if (utils_1.isUndefined(currTokType)) {
                    errors.push({
                        message: "A Lexer cannot be initialized using an undefined Token Type. Mode:" +
                            ("<" + currModeName + "> at index: <" + currIdx + ">\n"),
                        type: lexer_public_1.LexerDefinitionErrorType.LEXER_DEFINITION_CANNOT_CONTAIN_UNDEFINED
                    });
                }
            });
        });
    }
    return errors;
}
exports.performRuntimeChecks = performRuntimeChecks;
function performWarningRuntimeChecks(lexerDefinition, trackLines, lineTerminatorCharacters) {
    var warnings = [];
    var hasAnyLineBreak = false;
    var allTokenTypes = utils_1.compact(utils_1.flatten(utils_1.mapValues(lexerDefinition.modes, function (tokTypes) { return tokTypes; })));
    var concreteTokenTypes = utils_1.reject(allTokenTypes, function (currType) { return currType[PATTERN] === lexer_public_1.Lexer.NA; });
    var terminatorCharCodes = getCharCodes(lineTerminatorCharacters);
    if (trackLines) {
        utils_1.forEach(concreteTokenTypes, function (tokType) {
            var currIssue = checkLineBreaksIssues(tokType, terminatorCharCodes);
            if (currIssue !== false) {
                var message = buildLineBreakIssueMessage(tokType, currIssue);
                var warningDescriptor = {
                    message: message,
                    type: currIssue.issue,
                    tokenType: tokType
                };
                warnings.push(warningDescriptor);
            }
            else {
                // we don't want to attempt to scan if the user explicitly specified the line_breaks option.
                if (utils_1.has(tokType, "LINE_BREAKS")) {
                    if (tokType.LINE_BREAKS === true) {
                        hasAnyLineBreak = true;
                    }
                }
                else {
                    if (reg_exp_1.canMatchCharCode(terminatorCharCodes, tokType.PATTERN)) {
                        hasAnyLineBreak = true;
                    }
                }
            }
        });
    }
    if (trackLines && !hasAnyLineBreak) {
        warnings.push({
            message: "Warning: No LINE_BREAKS Found.\n" +
                "\tThis Lexer has been defined to track line and column information,\n" +
                "\tBut none of the Token Types can be identified as matching a line terminator.\n" +
                "\tSee https://sap.github.io/chevrotain/docs/guide/resolving_lexer_errors.html#LINE_BREAKS \n" +
                "\tfor details.",
            type: lexer_public_1.LexerDefinitionErrorType.NO_LINE_BREAKS_FLAGS
        });
    }
    return warnings;
}
exports.performWarningRuntimeChecks = performWarningRuntimeChecks;
function cloneEmptyGroups(emptyGroups) {
    var clonedResult = {};
    var groupKeys = utils_1.keys(emptyGroups);
    utils_1.forEach(groupKeys, function (currKey) {
        var currGroupValue = emptyGroups[currKey];
        /* istanbul ignore else */
        if (utils_1.isArray(currGroupValue)) {
            clonedResult[currKey] = [];
        }
        else {
            throw Error("non exhaustive match");
        }
    });
    return clonedResult;
}
exports.cloneEmptyGroups = cloneEmptyGroups;
// TODO: refactor to avoid duplication
function isCustomPattern(tokenType) {
    var pattern = tokenType.PATTERN;
    /* istanbul ignore else */
    if (utils_1.isRegExp(pattern)) {
        return false;
    }
    else if (utils_1.isFunction(pattern)) {
        // CustomPatternMatcherFunc - custom patterns do not require any transformations, only wrapping in a RegExp Like object
        return true;
    }
    else if (utils_1.has(pattern, "exec")) {
        // ICustomPattern
        return true;
    }
    else if (utils_1.isString(pattern)) {
        return false;
    }
    else {
        throw Error("non exhaustive match");
    }
}
exports.isCustomPattern = isCustomPattern;
function isShortPattern(pattern) {
    if (utils_1.isString(pattern) && pattern.length === 1) {
        return pattern.charCodeAt(0);
    }
    else {
        return false;
    }
}
exports.isShortPattern = isShortPattern;
/**
 * Faster than using a RegExp for default newline detection during lexing.
 */
exports.LineTerminatorOptimizedTester = {
    // implements /\n|\r\n?/g.test
    test: function (text) {
        var len = text.length;
        for (var i = this.lastIndex; i < len; i++) {
            var c = text.charCodeAt(i);
            if (c === 10) {
                this.lastIndex = i + 1;
                return true;
            }
            else if (c === 13) {
                if (text.charCodeAt(i + 1) === 10) {
                    this.lastIndex = i + 2;
                }
                else {
                    this.lastIndex = i + 1;
                }
                return true;
            }
        }
        return false;
    },
    lastIndex: 0
};
function checkLineBreaksIssues(tokType, lineTerminatorCharCodes) {
    if (utils_1.has(tokType, "LINE_BREAKS")) {
        // if the user explicitly declared the line_breaks option we will respect their choice
        // and assume it is correct.
        return false;
    }
    else {
        /* istanbul ignore else */
        if (utils_1.isRegExp(tokType.PATTERN)) {
            try {
                reg_exp_1.canMatchCharCode(lineTerminatorCharCodes, tokType.PATTERN);
            }
            catch (e) {
                /* istanbul ignore next - to test this we would have to mock <canMatchCharCode> to throw an error */
                return {
                    issue: lexer_public_1.LexerDefinitionErrorType.IDENTIFY_TERMINATOR,
                    errMsg: e.message
                };
            }
            return false;
        }
        else if (utils_1.isString(tokType.PATTERN)) {
            // string literal patterns can always be analyzed to detect line terminator usage
            return false;
        }
        else if (isCustomPattern(tokType)) {
            // custom token types
            return { issue: lexer_public_1.LexerDefinitionErrorType.CUSTOM_LINE_BREAK };
        }
        else {
            throw Error("non exhaustive match");
        }
    }
}
function buildLineBreakIssueMessage(tokType, details) {
    /* istanbul ignore else */
    if (details.issue === lexer_public_1.LexerDefinitionErrorType.IDENTIFY_TERMINATOR) {
        return ("Warning: unable to identify line terminator usage in pattern.\n" +
            ("\tThe problem is in the <" + tokType.name + "> Token Type\n") +
            ("\t Root cause: " + details.errMsg + ".\n") +
            "\tFor details See: https://sap.github.io/chevrotain/docs/guide/resolving_lexer_errors.html#IDENTIFY_TERMINATOR");
    }
    else if (details.issue === lexer_public_1.LexerDefinitionErrorType.CUSTOM_LINE_BREAK) {
        return ("Warning: A Custom Token Pattern should specify the <line_breaks> option.\n" +
            ("\tThe problem is in the <" + tokType.name + "> Token Type\n") +
            "\tFor details See: https://sap.github.io/chevrotain/docs/guide/resolving_lexer_errors.html#CUSTOM_LINE_BREAK");
    }
    else {
        throw Error("non exhaustive match");
    }
}
exports.buildLineBreakIssueMessage = buildLineBreakIssueMessage;
function getCharCodes(charsOrCodes) {
    var charCodes = utils_1.map(charsOrCodes, function (numOrString) {
        if (utils_1.isString(numOrString) && numOrString.length > 0) {
            return numOrString.charCodeAt(0);
        }
        else {
            return numOrString;
        }
    });
    return charCodes;
}
function addToMapOfArrays(map, key, value) {
    if (map[key] === undefined) {
        map[key] = [value];
    }
    else {
        map[key].push(value);
    }
}
exports.minOptimizationVal = 256;
/**
 * We ae mapping charCode above ASCI (256) into buckets each in the size of 256.
 * This is because ASCI are the most common start chars so each one of those will get its own
 * possible token configs vector.
 *
 * Tokens starting with charCodes "above" ASCI are uncommon, so we can "afford"
 * to place these into buckets of possible token configs, What we gain from
 * this is avoiding the case of creating an optimization 'charCodeToPatternIdxToConfig'
 * which would contain 10,000+ arrays of small size (e.g unicode Identifiers scenario).
 * Our 'charCodeToPatternIdxToConfig' max size will now be:
 * 256 + (2^16 / 2^8) - 1 === 511
 *
 * note the hack for fast division integer part extraction
 * See: https://stackoverflow.com/a/4228528
 */
function charCodeToOptimizedIndex(charCode) {
    return charCode < exports.minOptimizationVal
        ? charCode
        : charCodeToOptimizedIdxMap[charCode];
}
exports.charCodeToOptimizedIndex = charCodeToOptimizedIndex;
/**
 * This is a compromise between cold start / hot running performance
 * Creating this array takes ~3ms on a modern machine,
 * But if we perform the computation at runtime as needed the CSS Lexer benchmark
 * performance degrades by ~10%
 *
 * TODO: Perhaps it should be lazy initialized only if a charCode > 255 is used.
 */
var charCodeToOptimizedIdxMap = [];
function initCharCodeToOptimizedIndexMap() {
    if (utils_1.isEmpty(charCodeToOptimizedIdxMap)) {
        charCodeToOptimizedIdxMap = new Array(65536);
        for (var i = 0; i < 65536; i++) {
            /* tslint:disable */
            charCodeToOptimizedIdxMap[i] = i > 255 ? 255 + ~~(i / 255) : i;
            /* tslint:enable */
        }
    }
}
//# sourceMappingURL=lexer.js.map

/***/ }),

/***/ 1940:
/***/ ((__unused_webpack_module, exports) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.defaultLexerErrorProvider = void 0;
exports.defaultLexerErrorProvider = {
    buildUnableToPopLexerModeMessage: function (token) {
        return "Unable to pop Lexer Mode after encountering Token ->" + token.image + "<- The Mode Stack is empty";
    },
    buildUnexpectedCharactersMessage: function (fullText, startOffset, length, line, column) {
        return ("unexpected character: ->" + fullText.charAt(startOffset) + "<- at offset: " + startOffset + "," + (" skipped " + length + " characters."));
    }
};
//# sourceMappingURL=lexer_errors_public.js.map

/***/ }),

/***/ 2595:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.Lexer = exports.LexerDefinitionErrorType = void 0;
var lexer_1 = __webpack_require__(4697);
var utils_1 = __webpack_require__(3739);
var tokens_1 = __webpack_require__(4141);
var lexer_errors_public_1 = __webpack_require__(1940);
var reg_exp_parser_1 = __webpack_require__(3144);
var LexerDefinitionErrorType;
(function (LexerDefinitionErrorType) {
    LexerDefinitionErrorType[LexerDefinitionErrorType["MISSING_PATTERN"] = 0] = "MISSING_PATTERN";
    LexerDefinitionErrorType[LexerDefinitionErrorType["INVALID_PATTERN"] = 1] = "INVALID_PATTERN";
    LexerDefinitionErrorType[LexerDefinitionErrorType["EOI_ANCHOR_FOUND"] = 2] = "EOI_ANCHOR_FOUND";
    LexerDefinitionErrorType[LexerDefinitionErrorType["UNSUPPORTED_FLAGS_FOUND"] = 3] = "UNSUPPORTED_FLAGS_FOUND";
    LexerDefinitionErrorType[LexerDefinitionErrorType["DUPLICATE_PATTERNS_FOUND"] = 4] = "DUPLICATE_PATTERNS_FOUND";
    LexerDefinitionErrorType[LexerDefinitionErrorType["INVALID_GROUP_TYPE_FOUND"] = 5] = "INVALID_GROUP_TYPE_FOUND";
    LexerDefinitionErrorType[LexerDefinitionErrorType["PUSH_MODE_DOES_NOT_EXIST"] = 6] = "PUSH_MODE_DOES_NOT_EXIST";
    LexerDefinitionErrorType[LexerDefinitionErrorType["MULTI_MODE_LEXER_WITHOUT_DEFAULT_MODE"] = 7] = "MULTI_MODE_LEXER_WITHOUT_DEFAULT_MODE";
    LexerDefinitionErrorType[LexerDefinitionErrorType["MULTI_MODE_LEXER_WITHOUT_MODES_PROPERTY"] = 8] = "MULTI_MODE_LEXER_WITHOUT_MODES_PROPERTY";
    LexerDefinitionErrorType[LexerDefinitionErrorType["MULTI_MODE_LEXER_DEFAULT_MODE_VALUE_DOES_NOT_EXIST"] = 9] = "MULTI_MODE_LEXER_DEFAULT_MODE_VALUE_DOES_NOT_EXIST";
    LexerDefinitionErrorType[LexerDefinitionErrorType["LEXER_DEFINITION_CANNOT_CONTAIN_UNDEFINED"] = 10] = "LEXER_DEFINITION_CANNOT_CONTAIN_UNDEFINED";
    LexerDefinitionErrorType[LexerDefinitionErrorType["SOI_ANCHOR_FOUND"] = 11] = "SOI_ANCHOR_FOUND";
    LexerDefinitionErrorType[LexerDefinitionErrorType["EMPTY_MATCH_PATTERN"] = 12] = "EMPTY_MATCH_PATTERN";
    LexerDefinitionErrorType[LexerDefinitionErrorType["NO_LINE_BREAKS_FLAGS"] = 13] = "NO_LINE_BREAKS_FLAGS";
    LexerDefinitionErrorType[LexerDefinitionErrorType["UNREACHABLE_PATTERN"] = 14] = "UNREACHABLE_PATTERN";
    LexerDefinitionErrorType[LexerDefinitionErrorType["IDENTIFY_TERMINATOR"] = 15] = "IDENTIFY_TERMINATOR";
    LexerDefinitionErrorType[LexerDefinitionErrorType["CUSTOM_LINE_BREAK"] = 16] = "CUSTOM_LINE_BREAK";
})(LexerDefinitionErrorType = exports.LexerDefinitionErrorType || (exports.LexerDefinitionErrorType = {}));
var DEFAULT_LEXER_CONFIG = {
    deferDefinitionErrorsHandling: false,
    positionTracking: "full",
    lineTerminatorsPattern: /\n|\r\n?/g,
    lineTerminatorCharacters: ["\n", "\r"],
    ensureOptimizations: false,
    safeMode: false,
    errorMessageProvider: lexer_errors_public_1.defaultLexerErrorProvider,
    traceInitPerf: false,
    skipValidations: false
};
Object.freeze(DEFAULT_LEXER_CONFIG);
var Lexer = /** @class */ (function () {
    function Lexer(lexerDefinition, config) {
        var _this = this;
        if (config === void 0) { config = DEFAULT_LEXER_CONFIG; }
        this.lexerDefinition = lexerDefinition;
        this.lexerDefinitionErrors = [];
        this.lexerDefinitionWarning = [];
        this.patternIdxToConfig = {};
        this.charCodeToPatternIdxToConfig = {};
        this.modes = [];
        this.emptyGroups = {};
        this.config = undefined;
        this.trackStartLines = true;
        this.trackEndLines = true;
        this.hasCustom = false;
        this.canModeBeOptimized = {};
        if (typeof config === "boolean") {
            throw Error("The second argument to the Lexer constructor is now an ILexerConfig Object.\n" +
                "a boolean 2nd argument is no longer supported");
        }
        // todo: defaults func?
        this.config = utils_1.merge(DEFAULT_LEXER_CONFIG, config);
        var traceInitVal = this.config.traceInitPerf;
        if (traceInitVal === true) {
            this.traceInitMaxIdent = Infinity;
            this.traceInitPerf = true;
        }
        else if (typeof traceInitVal === "number") {
            this.traceInitMaxIdent = traceInitVal;
            this.traceInitPerf = true;
        }
        this.traceInitIndent = -1;
        this.TRACE_INIT("Lexer Constructor", function () {
            var actualDefinition;
            var hasOnlySingleMode = true;
            _this.TRACE_INIT("Lexer Config handling", function () {
                if (_this.config.lineTerminatorsPattern ===
                    DEFAULT_LEXER_CONFIG.lineTerminatorsPattern) {
                    // optimized built-in implementation for the defaults definition of lineTerminators
                    _this.config.lineTerminatorsPattern = lexer_1.LineTerminatorOptimizedTester;
                }
                else {
                    if (_this.config.lineTerminatorCharacters ===
                        DEFAULT_LEXER_CONFIG.lineTerminatorCharacters) {
                        throw Error("Error: Missing <lineTerminatorCharacters> property on the Lexer config.\n" +
                            "\tFor details See: https://sap.github.io/chevrotain/docs/guide/resolving_lexer_errors.html#MISSING_LINE_TERM_CHARS");
                    }
                }
                if (config.safeMode && config.ensureOptimizations) {
                    throw Error('"safeMode" and "ensureOptimizations" flags are mutually exclusive.');
                }
                _this.trackStartLines = /full|onlyStart/i.test(_this.config.positionTracking);
                _this.trackEndLines = /full/i.test(_this.config.positionTracking);
                // Convert SingleModeLexerDefinition into a IMultiModeLexerDefinition.
                if (utils_1.isArray(lexerDefinition)) {
                    actualDefinition = { modes: {} };
                    actualDefinition.modes[lexer_1.DEFAULT_MODE] = utils_1.cloneArr(lexerDefinition);
                    actualDefinition[lexer_1.DEFAULT_MODE] = lexer_1.DEFAULT_MODE;
                }
                else {
                    // no conversion needed, input should already be a IMultiModeLexerDefinition
                    hasOnlySingleMode = false;
                    actualDefinition = utils_1.cloneObj(lexerDefinition);
                }
            });
            if (_this.config.skipValidations === false) {
                _this.TRACE_INIT("performRuntimeChecks", function () {
                    _this.lexerDefinitionErrors = _this.lexerDefinitionErrors.concat(lexer_1.performRuntimeChecks(actualDefinition, _this.trackStartLines, _this.config.lineTerminatorCharacters));
                });
                _this.TRACE_INIT("performWarningRuntimeChecks", function () {
                    _this.lexerDefinitionWarning = _this.lexerDefinitionWarning.concat(lexer_1.performWarningRuntimeChecks(actualDefinition, _this.trackStartLines, _this.config.lineTerminatorCharacters));
                });
            }
            // for extra robustness to avoid throwing an none informative error message
            actualDefinition.modes = actualDefinition.modes
                ? actualDefinition.modes
                : {};
            // an error of undefined TokenTypes will be detected in "performRuntimeChecks" above.
            // this transformation is to increase robustness in the case of partially invalid lexer definition.
            utils_1.forEach(actualDefinition.modes, function (currModeValue, currModeName) {
                actualDefinition.modes[currModeName] = utils_1.reject(currModeValue, function (currTokType) { return utils_1.isUndefined(currTokType); });
            });
            var allModeNames = utils_1.keys(actualDefinition.modes);
            utils_1.forEach(actualDefinition.modes, function (currModDef, currModName) {
                _this.TRACE_INIT("Mode: <" + currModName + "> processing", function () {
                    _this.modes.push(currModName);
                    if (_this.config.skipValidations === false) {
                        _this.TRACE_INIT("validatePatterns", function () {
                            _this.lexerDefinitionErrors = _this.lexerDefinitionErrors.concat(lexer_1.validatePatterns(currModDef, allModeNames));
                        });
                    }
                    // If definition errors were encountered, the analysis phase may fail unexpectedly/
                    // Considering a lexer with definition errors may never be used, there is no point
                    // to performing the analysis anyhow...
                    if (utils_1.isEmpty(_this.lexerDefinitionErrors)) {
                        tokens_1.augmentTokenTypes(currModDef);
                        var currAnalyzeResult_1;
                        _this.TRACE_INIT("analyzeTokenTypes", function () {
                            currAnalyzeResult_1 = lexer_1.analyzeTokenTypes(currModDef, {
                                lineTerminatorCharacters: _this.config
                                    .lineTerminatorCharacters,
                                positionTracking: config.positionTracking,
                                ensureOptimizations: config.ensureOptimizations,
                                safeMode: config.safeMode,
                                tracer: _this.TRACE_INIT.bind(_this)
                            });
                        });
                        _this.patternIdxToConfig[currModName] =
                            currAnalyzeResult_1.patternIdxToConfig;
                        _this.charCodeToPatternIdxToConfig[currModName] =
                            currAnalyzeResult_1.charCodeToPatternIdxToConfig;
                        _this.emptyGroups = utils_1.merge(_this.emptyGroups, currAnalyzeResult_1.emptyGroups);
                        _this.hasCustom = currAnalyzeResult_1.hasCustom || _this.hasCustom;
                        _this.canModeBeOptimized[currModName] =
                            currAnalyzeResult_1.canBeOptimized;
                    }
                });
            });
            _this.defaultMode = actualDefinition.defaultMode;
            if (!utils_1.isEmpty(_this.lexerDefinitionErrors) &&
                !_this.config.deferDefinitionErrorsHandling) {
                var allErrMessages = utils_1.map(_this.lexerDefinitionErrors, function (error) {
                    return error.message;
                });
                var allErrMessagesString = allErrMessages.join("-----------------------\n");
                throw new Error("Errors detected in definition of Lexer:\n" + allErrMessagesString);
            }
            // Only print warning if there are no errors, This will avoid pl
            utils_1.forEach(_this.lexerDefinitionWarning, function (warningDescriptor) {
                utils_1.PRINT_WARNING(warningDescriptor.message);
            });
            _this.TRACE_INIT("Choosing sub-methods implementations", function () {
                // Choose the relevant internal implementations for this specific parser.
                // These implementations should be in-lined by the JavaScript engine
                // to provide optimal performance in each scenario.
                if (lexer_1.SUPPORT_STICKY) {
                    _this.chopInput = utils_1.IDENTITY;
                    _this.match = _this.matchWithTest;
                }
                else {
                    _this.updateLastIndex = utils_1.NOOP;
                    _this.match = _this.matchWithExec;
                }
                if (hasOnlySingleMode) {
                    _this.handleModes = utils_1.NOOP;
                }
                if (_this.trackStartLines === false) {
                    _this.computeNewColumn = utils_1.IDENTITY;
                }
                if (_this.trackEndLines === false) {
                    _this.updateTokenEndLineColumnLocation = utils_1.NOOP;
                }
                if (/full/i.test(_this.config.positionTracking)) {
                    _this.createTokenInstance = _this.createFullToken;
                }
                else if (/onlyStart/i.test(_this.config.positionTracking)) {
                    _this.createTokenInstance = _this.createStartOnlyToken;
                }
                else if (/onlyOffset/i.test(_this.config.positionTracking)) {
                    _this.createTokenInstance = _this.createOffsetOnlyToken;
                }
                else {
                    throw Error("Invalid <positionTracking> config option: \"" + _this.config.positionTracking + "\"");
                }
                if (_this.hasCustom) {
                    _this.addToken = _this.addTokenUsingPush;
                    _this.handlePayload = _this.handlePayloadWithCustom;
                }
                else {
                    _this.addToken = _this.addTokenUsingMemberAccess;
                    _this.handlePayload = _this.handlePayloadNoCustom;
                }
            });
            _this.TRACE_INIT("Failed Optimization Warnings", function () {
                var unOptimizedModes = utils_1.reduce(_this.canModeBeOptimized, function (cannotBeOptimized, canBeOptimized, modeName) {
                    if (canBeOptimized === false) {
                        cannotBeOptimized.push(modeName);
                    }
                    return cannotBeOptimized;
                }, []);
                if (config.ensureOptimizations && !utils_1.isEmpty(unOptimizedModes)) {
                    throw Error("Lexer Modes: < " + unOptimizedModes.join(", ") + " > cannot be optimized.\n" +
                        '\t Disable the "ensureOptimizations" lexer config flag to silently ignore this and run the lexer in an un-optimized mode.\n' +
                        "\t Or inspect the console log for details on how to resolve these issues.");
                }
            });
            _this.TRACE_INIT("clearRegExpParserCache", function () {
                reg_exp_parser_1.clearRegExpParserCache();
            });
            _this.TRACE_INIT("toFastProperties", function () {
                utils_1.toFastProperties(_this);
            });
        });
    }
    Lexer.prototype.tokenize = function (text, initialMode) {
        if (initialMode === void 0) { initialMode = this.defaultMode; }
        if (!utils_1.isEmpty(this.lexerDefinitionErrors)) {
            var allErrMessages = utils_1.map(this.lexerDefinitionErrors, function (error) {
                return error.message;
            });
            var allErrMessagesString = allErrMessages.join("-----------------------\n");
            throw new Error("Unable to Tokenize because Errors detected in definition of Lexer:\n" +
                allErrMessagesString);
        }
        var lexResult = this.tokenizeInternal(text, initialMode);
        return lexResult;
    };
    // There is quite a bit of duplication between this and "tokenizeInternalLazy"
    // This is intentional due to performance considerations.
    Lexer.prototype.tokenizeInternal = function (text, initialMode) {
        var _this = this;
        var i, j, matchAltImage, longerAltIdx, matchedImage, payload, altPayload, imageLength, group, tokType, newToken, errLength, droppedChar, msg, match;
        var orgText = text;
        var orgLength = orgText.length;
        var offset = 0;
        var matchedTokensIndex = 0;
        // initializing the tokensArray to the "guessed" size.
        // guessing too little will still reduce the number of array re-sizes on pushes.
        // guessing too large (Tested by guessing x4 too large) may cost a bit more of memory
        // but would still have a faster runtime by avoiding (All but one) array resizing.
        var guessedNumberOfTokens = this.hasCustom
            ? 0 // will break custom token pattern APIs the matchedTokens array will contain undefined elements.
            : Math.floor(text.length / 10);
        var matchedTokens = new Array(guessedNumberOfTokens);
        var errors = [];
        var line = this.trackStartLines ? 1 : undefined;
        var column = this.trackStartLines ? 1 : undefined;
        var groups = lexer_1.cloneEmptyGroups(this.emptyGroups);
        var trackLines = this.trackStartLines;
        var lineTerminatorPattern = this.config.lineTerminatorsPattern;
        var currModePatternsLength = 0;
        var patternIdxToConfig = [];
        var currCharCodeToPatternIdxToConfig = [];
        var modeStack = [];
        var emptyArray = [];
        Object.freeze(emptyArray);
        var getPossiblePatterns = undefined;
        function getPossiblePatternsSlow() {
            return patternIdxToConfig;
        }
        function getPossiblePatternsOptimized(charCode) {
            var optimizedCharIdx = lexer_1.charCodeToOptimizedIndex(charCode);
            var possiblePatterns = currCharCodeToPatternIdxToConfig[optimizedCharIdx];
            if (possiblePatterns === undefined) {
                return emptyArray;
            }
            else {
                return possiblePatterns;
            }
        }
        var pop_mode = function (popToken) {
            // TODO: perhaps avoid this error in the edge case there is no more input?
            if (modeStack.length === 1 &&
                // if we have both a POP_MODE and a PUSH_MODE this is in-fact a "transition"
                // So no error should occur.
                popToken.tokenType.PUSH_MODE === undefined) {
                // if we try to pop the last mode there lexer will no longer have ANY mode.
                // thus the pop is ignored, an error will be created and the lexer will continue parsing in the previous mode.
                var msg_1 = _this.config.errorMessageProvider.buildUnableToPopLexerModeMessage(popToken);
                errors.push({
                    offset: popToken.startOffset,
                    line: popToken.startLine !== undefined ? popToken.startLine : undefined,
                    column: popToken.startColumn !== undefined
                        ? popToken.startColumn
                        : undefined,
                    length: popToken.image.length,
                    message: msg_1
                });
            }
            else {
                modeStack.pop();
                var newMode = utils_1.last(modeStack);
                patternIdxToConfig = _this.patternIdxToConfig[newMode];
                currCharCodeToPatternIdxToConfig = _this.charCodeToPatternIdxToConfig[newMode];
                currModePatternsLength = patternIdxToConfig.length;
                var modeCanBeOptimized = _this.canModeBeOptimized[newMode] && _this.config.safeMode === false;
                if (currCharCodeToPatternIdxToConfig && modeCanBeOptimized) {
                    getPossiblePatterns = getPossiblePatternsOptimized;
                }
                else {
                    getPossiblePatterns = getPossiblePatternsSlow;
                }
            }
        };
        function push_mode(newMode) {
            modeStack.push(newMode);
            currCharCodeToPatternIdxToConfig = this.charCodeToPatternIdxToConfig[newMode];
            patternIdxToConfig = this.patternIdxToConfig[newMode];
            currModePatternsLength = patternIdxToConfig.length;
            currModePatternsLength = patternIdxToConfig.length;
            var modeCanBeOptimized = this.canModeBeOptimized[newMode] && this.config.safeMode === false;
            if (currCharCodeToPatternIdxToConfig && modeCanBeOptimized) {
                getPossiblePatterns = getPossiblePatternsOptimized;
            }
            else {
                getPossiblePatterns = getPossiblePatternsSlow;
            }
        }
        // this pattern seems to avoid a V8 de-optimization, although that de-optimization does not
        // seem to matter performance wise.
        push_mode.call(this, initialMode);
        var currConfig;
        while (offset < orgLength) {
            matchedImage = null;
            var nextCharCode = orgText.charCodeAt(offset);
            var chosenPatternIdxToConfig = getPossiblePatterns(nextCharCode);
            var chosenPatternsLength = chosenPatternIdxToConfig.length;
            for (i = 0; i < chosenPatternsLength; i++) {
                currConfig = chosenPatternIdxToConfig[i];
                var currPattern = currConfig.pattern;
                payload = null;
                // manually in-lined because > 600 chars won't be in-lined in V8
                var singleCharCode = currConfig.short;
                if (singleCharCode !== false) {
                    if (nextCharCode === singleCharCode) {
                        // single character string
                        matchedImage = currPattern;
                    }
                }
                else if (currConfig.isCustom === true) {
                    match = currPattern.exec(orgText, offset, matchedTokens, groups);
                    if (match !== null) {
                        matchedImage = match[0];
                        if (match.payload !== undefined) {
                            payload = match.payload;
                        }
                    }
                    else {
                        matchedImage = null;
                    }
                }
                else {
                    this.updateLastIndex(currPattern, offset);
                    matchedImage = this.match(currPattern, text, offset);
                }
                if (matchedImage !== null) {
                    // even though this pattern matched we must try a another longer alternative.
                    // this can be used to prioritize keywords over identifiers
                    longerAltIdx = currConfig.longerAlt;
                    if (longerAltIdx !== undefined) {
                        // TODO: micro optimize, avoid extra prop access
                        // by saving/linking longerAlt on the original config?
                        var longerAltConfig = patternIdxToConfig[longerAltIdx];
                        var longerAltPattern = longerAltConfig.pattern;
                        altPayload = null;
                        // single Char can never be a longer alt so no need to test it.
                        // manually in-lined because > 600 chars won't be in-lined in V8
                        if (longerAltConfig.isCustom === true) {
                            match = longerAltPattern.exec(orgText, offset, matchedTokens, groups);
                            if (match !== null) {
                                matchAltImage = match[0];
                                if (match.payload !== undefined) {
                                    altPayload = match.payload;
                                }
                            }
                            else {
                                matchAltImage = null;
                            }
                        }
                        else {
                            this.updateLastIndex(longerAltPattern, offset);
                            matchAltImage = this.match(longerAltPattern, text, offset);
                        }
                        if (matchAltImage && matchAltImage.length > matchedImage.length) {
                            matchedImage = matchAltImage;
                            payload = altPayload;
                            currConfig = longerAltConfig;
                        }
                    }
                    break;
                }
            }
            // successful match
            if (matchedImage !== null) {
                imageLength = matchedImage.length;
                group = currConfig.group;
                if (group !== undefined) {
                    tokType = currConfig.tokenTypeIdx;
                    // TODO: "offset + imageLength" and the new column may be computed twice in case of "full" location information inside
                    // createFullToken method
                    newToken = this.createTokenInstance(matchedImage, offset, tokType, currConfig.tokenType, line, column, imageLength);
                    this.handlePayload(newToken, payload);
                    // TODO: optimize NOOP in case there are no special groups?
                    if (group === false) {
                        matchedTokensIndex = this.addToken(matchedTokens, matchedTokensIndex, newToken);
                    }
                    else {
                        groups[group].push(newToken);
                    }
                }
                text = this.chopInput(text, imageLength);
                offset = offset + imageLength;
                // TODO: with newlines the column may be assigned twice
                column = this.computeNewColumn(column, imageLength);
                if (trackLines === true && currConfig.canLineTerminator === true) {
                    var numOfLTsInMatch = 0;
                    var foundTerminator = void 0;
                    var lastLTEndOffset = void 0;
                    lineTerminatorPattern.lastIndex = 0;
                    do {
                        foundTerminator = lineTerminatorPattern.test(matchedImage);
                        if (foundTerminator === true) {
                            lastLTEndOffset = lineTerminatorPattern.lastIndex - 1;
                            numOfLTsInMatch++;
                        }
                    } while (foundTerminator === true);
                    if (numOfLTsInMatch !== 0) {
                        line = line + numOfLTsInMatch;
                        column = imageLength - lastLTEndOffset;
                        this.updateTokenEndLineColumnLocation(newToken, group, lastLTEndOffset, numOfLTsInMatch, line, column, imageLength);
                    }
                }
                // will be NOOP if no modes present
                this.handleModes(currConfig, pop_mode, push_mode, newToken);
            }
            else {
                // error recovery, drop characters until we identify a valid token's start point
                var errorStartOffset = offset;
                var errorLine = line;
                var errorColumn = column;
                var foundResyncPoint = false;
                while (!foundResyncPoint && offset < orgLength) {
                    // drop chars until we succeed in matching something
                    droppedChar = orgText.charCodeAt(offset);
                    // Identity Func (when sticky flag is enabled)
                    text = this.chopInput(text, 1);
                    offset++;
                    for (j = 0; j < currModePatternsLength; j++) {
                        var currConfig_1 = patternIdxToConfig[j];
                        var currPattern = currConfig_1.pattern;
                        // manually in-lined because > 600 chars won't be in-lined in V8
                        var singleCharCode = currConfig_1.short;
                        if (singleCharCode !== false) {
                            if (orgText.charCodeAt(offset) === singleCharCode) {
                                // single character string
                                foundResyncPoint = true;
                            }
                        }
                        else if (currConfig_1.isCustom === true) {
                            foundResyncPoint =
                                currPattern.exec(orgText, offset, matchedTokens, groups) !==
                                    null;
                        }
                        else {
                            this.updateLastIndex(currPattern, offset);
                            foundResyncPoint = currPattern.exec(text) !== null;
                        }
                        if (foundResyncPoint === true) {
                            break;
                        }
                    }
                }
                errLength = offset - errorStartOffset;
                // at this point we either re-synced or reached the end of the input text
                msg = this.config.errorMessageProvider.buildUnexpectedCharactersMessage(orgText, errorStartOffset, errLength, errorLine, errorColumn);
                errors.push({
                    offset: errorStartOffset,
                    line: errorLine,
                    column: errorColumn,
                    length: errLength,
                    message: msg
                });
            }
        }
        // if we do have custom patterns which push directly into the
        // TODO: custom tokens should not push directly??
        if (!this.hasCustom) {
            // if we guessed a too large size for the tokens array this will shrink it to the right size.
            matchedTokens.length = matchedTokensIndex;
        }
        return {
            tokens: matchedTokens,
            groups: groups,
            errors: errors
        };
    };
    Lexer.prototype.handleModes = function (config, pop_mode, push_mode, newToken) {
        if (config.pop === true) {
            // need to save the PUSH_MODE property as if the mode is popped
            // patternIdxToPopMode is updated to reflect the new mode after popping the stack
            var pushMode = config.push;
            pop_mode(newToken);
            if (pushMode !== undefined) {
                push_mode.call(this, pushMode);
            }
        }
        else if (config.push !== undefined) {
            push_mode.call(this, config.push);
        }
    };
    Lexer.prototype.chopInput = function (text, length) {
        return text.substring(length);
    };
    Lexer.prototype.updateLastIndex = function (regExp, newLastIndex) {
        regExp.lastIndex = newLastIndex;
    };
    // TODO: decrease this under 600 characters? inspect stripping comments option in TSC compiler
    Lexer.prototype.updateTokenEndLineColumnLocation = function (newToken, group, lastLTIdx, numOfLTsInMatch, line, column, imageLength) {
        var lastCharIsLT, fixForEndingInLT;
        if (group !== undefined) {
            // a none skipped multi line Token, need to update endLine/endColumn
            lastCharIsLT = lastLTIdx === imageLength - 1;
            fixForEndingInLT = lastCharIsLT ? -1 : 0;
            if (!(numOfLTsInMatch === 1 && lastCharIsLT === true)) {
                // if a token ends in a LT that last LT only affects the line numbering of following Tokens
                newToken.endLine = line + fixForEndingInLT;
                // the last LT in a token does not affect the endColumn either as the [columnStart ... columnEnd)
                // inclusive to exclusive range.
                newToken.endColumn = column - 1 + -fixForEndingInLT;
            }
            // else single LT in the last character of a token, no need to modify the endLine/EndColumn
        }
    };
    Lexer.prototype.computeNewColumn = function (oldColumn, imageLength) {
        return oldColumn + imageLength;
    };
    // Place holder, will be replaced by the correct variant according to the locationTracking option at runtime.
    /* istanbul ignore next - place holder */
    Lexer.prototype.createTokenInstance = function () {
        var args = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            args[_i] = arguments[_i];
        }
        return null;
    };
    Lexer.prototype.createOffsetOnlyToken = function (image, startOffset, tokenTypeIdx, tokenType) {
        return {
            image: image,
            startOffset: startOffset,
            tokenTypeIdx: tokenTypeIdx,
            tokenType: tokenType
        };
    };
    Lexer.prototype.createStartOnlyToken = function (image, startOffset, tokenTypeIdx, tokenType, startLine, startColumn) {
        return {
            image: image,
            startOffset: startOffset,
            startLine: startLine,
            startColumn: startColumn,
            tokenTypeIdx: tokenTypeIdx,
            tokenType: tokenType
        };
    };
    Lexer.prototype.createFullToken = function (image, startOffset, tokenTypeIdx, tokenType, startLine, startColumn, imageLength) {
        return {
            image: image,
            startOffset: startOffset,
            endOffset: startOffset + imageLength - 1,
            startLine: startLine,
            endLine: startLine,
            startColumn: startColumn,
            endColumn: startColumn + imageLength - 1,
            tokenTypeIdx: tokenTypeIdx,
            tokenType: tokenType
        };
    };
    // Place holder, will be replaced by the correct variant according to the locationTracking option at runtime.
    /* istanbul ignore next - place holder */
    Lexer.prototype.addToken = function (tokenVector, index, tokenToAdd) {
        return 666;
    };
    Lexer.prototype.addTokenUsingPush = function (tokenVector, index, tokenToAdd) {
        tokenVector.push(tokenToAdd);
        return index;
    };
    Lexer.prototype.addTokenUsingMemberAccess = function (tokenVector, index, tokenToAdd) {
        tokenVector[index] = tokenToAdd;
        index++;
        return index;
    };
    // Place holder, will be replaced by the correct variant according to the hasCustom flag option at runtime.
    /* istanbul ignore next - place holder */
    Lexer.prototype.handlePayload = function (token, payload) { };
    Lexer.prototype.handlePayloadNoCustom = function (token, payload) { };
    Lexer.prototype.handlePayloadWithCustom = function (token, payload) {
        if (payload !== null) {
            token.payload = payload;
        }
    };
    /* istanbul ignore next - place holder to be replaced with chosen alternative at runtime */
    Lexer.prototype.match = function (pattern, text, offset) {
        return null;
    };
    Lexer.prototype.matchWithTest = function (pattern, text, offset) {
        var found = pattern.test(text);
        if (found === true) {
            return text.substring(offset, pattern.lastIndex);
        }
        return null;
    };
    Lexer.prototype.matchWithExec = function (pattern, text) {
        var regExpArray = pattern.exec(text);
        return regExpArray !== null ? regExpArray[0] : regExpArray;
    };
    // Duplicated from the parser's perf trace trait to allow future extraction
    // of the lexer to a separate package.
    Lexer.prototype.TRACE_INIT = function (phaseDesc, phaseImpl) {
        // No need to optimize this using NOOP pattern because
        // It is not called in a hot spot...
        if (this.traceInitPerf === true) {
            this.traceInitIndent++;
            var indent = new Array(this.traceInitIndent + 1).join("\t");
            if (this.traceInitIndent < this.traceInitMaxIdent) {
                console.log(indent + "--> <" + phaseDesc + ">");
            }
            var _a = utils_1.timer(phaseImpl), time = _a.time, value = _a.value;
            /* istanbul ignore next - Difficult to reproduce specific performance behavior (>10ms) in tests */
            var traceMethod = time > 10 ? console.warn : console.log;
            if (this.traceInitIndent < this.traceInitMaxIdent) {
                traceMethod(indent + "<-- <" + phaseDesc + "> time: " + time + "ms");
            }
            this.traceInitIndent--;
            return value;
        }
        else {
            return phaseImpl();
        }
    };
    Lexer.SKIPPED = "This marks a skipped Token pattern, this means each token identified by it will" +
        "be consumed and then thrown into oblivion, this can be used to for example to completely ignore whitespace.";
    Lexer.NA = /NOT_APPLICABLE/;
    return Lexer;
}());
exports.Lexer = Lexer;
//# sourceMappingURL=lexer_public.js.map

/***/ }),

/***/ 344:
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.canMatchCharCode = exports.firstCharOptimizedIndices = exports.getOptimizedStartCodesIndices = exports.failedOptimizationPrefixMsg = void 0;
var regexp_to_ast_1 = __webpack_require__(4303);
var utils_1 = __webpack_require__(3739);
var reg_exp_parser_1 = __webpack_require__(3144);
var lexer_1 = __webpack_require__(4697);
var complementErrorMessage = "Complement Sets are not supported for first char optimization";
exports.failedOptimizationPrefixMsg = 'Unable to use "first char" lexer optimizations:\n';
function getOptimizedStartCodesIndices(regExp, ensureOptimizations) {
    if (ensureOptimizations === void 0) { ensureOptimizations = false; }
    try {
        var ast = reg_exp_parser_1.getRegExpAst(regExp);
        var firstChars = firstCharOptimizedIndices(ast.value, {}, ast.flags.ignoreCase);
        return firstChars;
    }
    catch (e) {
        /* istanbul ignore next */
        // Testing this relies on the regexp-to-ast library having a bug... */
        // TODO: only the else branch needs to be ignored, try to fix with newer prettier / tsc
        if (e.message === complementErrorMessage) {
            if (ensureOptimizations) {
                utils_1.PRINT_WARNING("" + exports.failedOptimizationPrefixMsg +
                    ("\tUnable to optimize: < " + regExp.toString() + " >\n") +
                    "\tComplement Sets cannot be automatically optimized.\n" +
                    "\tThis will disable the lexer's first char optimizations.\n" +
                    "\tSee: https://sap.github.io/chevrotain/docs/guide/resolving_lexer_errors.html#COMPLEMENT for details.");
            }
        }
        else {
            var msgSuffix = "";
            if (ensureOptimizations) {
                msgSuffix =
                    "\n\tThis will disable the lexer's first char optimizations.\n" +
                        "\tSee: https://sap.github.io/chevrotain/docs/guide/resolving_lexer_errors.html#REGEXP_PARSING for details.";
            }
            utils_1.PRINT_ERROR(exports.failedOptimizationPrefixMsg + "\n" +
                ("\tFailed parsing: < " + regExp.toString() + " >\n") +
                ("\tUsing the regexp-to-ast library version: " + regexp_to_ast_1.VERSION + "\n") +
                "\tPlease open an issue at: https://github.com/bd82/regexp-to-ast/issues" +
                msgSuffix);
        }
    }
    return [];
}
exports.getOptimizedStartCodesIndices = getOptimizedStartCodesIndices;
function firstCharOptimizedIndices(ast, result, ignoreCase) {
    switch (ast.type) {
        case "Disjunction":
            for (var i = 0; i < ast.value.length; i++) {
                firstCharOptimizedIndices(ast.value[i], result, ignoreCase);
            }
            break;
        case "Alternative":
            var terms = ast.value;
            for (var i = 0; i < terms.length; i++) {
                var term = terms[i];
                // skip terms that cannot effect the first char results
                switch (term.type) {
                    case "EndAnchor":
                    // A group back reference cannot affect potential starting char.
                    // because if a back reference is the first production than automatically
                    // the group being referenced has had to come BEFORE so its codes have already been added
                    case "GroupBackReference":
                    // assertions do not affect potential starting codes
                    case "Lookahead":
                    case "NegativeLookahead":
                    case "StartAnchor":
                    case "WordBoundary":
                    case "NonWordBoundary":
                        continue;
                }
                var atom = term;
                switch (atom.type) {
                    case "Character":
                        addOptimizedIdxToResult(atom.value, result, ignoreCase);
                        break;
                    case "Set":
                        if (atom.complement === true) {
                            throw Error(complementErrorMessage);
                        }
                        utils_1.forEach(atom.value, function (code) {
                            if (typeof code === "number") {
                                addOptimizedIdxToResult(code, result, ignoreCase);
                            }
                            else {
                                // range
                                var range = code;
                                // cannot optimize when ignoreCase is
                                if (ignoreCase === true) {
                                    for (var rangeCode = range.from; rangeCode <= range.to; rangeCode++) {
                                        addOptimizedIdxToResult(rangeCode, result, ignoreCase);
                                    }
                                }
                                // Optimization (2 orders of magnitude less work for very large ranges)
                                else {
                                    // handle unoptimized values
                                    for (var rangeCode = range.from; rangeCode <= range.to && rangeCode < lexer_1.minOptimizationVal; rangeCode++) {
                                        addOptimizedIdxToResult(rangeCode, result, ignoreCase);
                                    }
                                    // Less common charCode where we optimize for faster init time, by using larger "buckets"
                                    if (range.to >= lexer_1.minOptimizationVal) {
                                        var minUnOptVal = range.from >= lexer_1.minOptimizationVal
                                            ? range.from
                                            : lexer_1.minOptimizationVal;
                                        var maxUnOptVal = range.to;
                                        var minOptIdx = lexer_1.charCodeToOptimizedIndex(minUnOptVal);
                                        var maxOptIdx = lexer_1.charCodeToOptimizedIndex(maxUnOptVal);
                                        for (var currOptIdx = minOptIdx; currOptIdx <= maxOptIdx; currOptIdx++) {
                                            result[currOptIdx] = currOptIdx;
                                        }
                                    }
                                }
                            }
                        });
                        break;
                    case "Group":
                        firstCharOptimizedIndices(atom.value, result, ignoreCase);
                        break;
                    /* istanbul ignore next */
                    default:
                        throw Error("Non Exhaustive Match");
                }
                // reached a mandatory production, no more **start** codes can be found on this alternative
                var isOptionalQuantifier = atom.quantifier !== undefined && atom.quantifier.atLeast === 0;
                if (
                // A group may be optional due to empty contents /(?:)/
                // or if everything inside it is optional /((a)?)/
                (atom.type === "Group" && isWholeOptional(atom) === false) ||
                    // If this term is not a group it may only be optional if it has an optional quantifier
                    (atom.type !== "Group" && isOptionalQuantifier === false)) {
                    break;
                }
            }
            break;
        /* istanbul ignore next */
        default:
            throw Error("non exhaustive match!");
    }
    // console.log(Object.keys(result).length)
    return utils_1.values(result);
}
exports.firstCharOptimizedIndices = firstCharOptimizedIndices;
function addOptimizedIdxToResult(code, result, ignoreCase) {
    var optimizedCharIdx = lexer_1.charCodeToOptimizedIndex(code);
    result[optimizedCharIdx] = optimizedCharIdx;
    if (ignoreCase === true) {
        handleIgnoreCase(code, result);
    }
}
function handleIgnoreCase(code, result) {
    var char = String.fromCharCode(code);
    var upperChar = char.toUpperCase();
    /* istanbul ignore else */
    if (upperChar !== char) {
        var optimizedCharIdx = lexer_1.charCodeToOptimizedIndex(upperChar.charCodeAt(0));
        result[optimizedCharIdx] = optimizedCharIdx;
    }
    else {
        var lowerChar = char.toLowerCase();
        if (lowerChar !== char) {
            var optimizedCharIdx = lexer_1.charCodeToOptimizedIndex(lowerChar.charCodeAt(0));
            result[optimizedCharIdx] = optimizedCharIdx;
        }
    }
}
function findCode(setNode, targetCharCodes) {
    return utils_1.find(setNode.value, function (codeOrRange) {
        if (typeof codeOrRange === "number") {
            return utils_1.contains(targetCharCodes, codeOrRange);
        }
        else {
            // range
            var range_1 = codeOrRange;
            return (utils_1.find(targetCharCodes, function (targetCode) { return range_1.from <= targetCode && targetCode <= range_1.to; }) !== undefined);
        }
    });
}
function isWholeOptional(ast) {
    if (ast.quantifier && ast.quantifier.atLeast === 0) {
        return true;
    }
    if (!ast.value) {
        return false;
    }
    return utils_1.isArray(ast.value)
        ? utils_1.every(ast.value, isWholeOptional)
        : isWholeOptional(ast.value);
}
var CharCodeFinder = /** @class */ (function (_super) {
    __extends(CharCodeFinder, _super);
    function CharCodeFinder(targetCharCodes) {
        var _this = _super.call(this) || this;
        _this.targetCharCodes = targetCharCodes;
        _this.found = false;
        return _this;
    }
    CharCodeFinder.prototype.visitChildren = function (node) {
        // No need to keep looking...
        if (this.found === true) {
            return;
        }
        // switch lookaheads as they do not actually consume any characters thus
        // finding a charCode at lookahead context does not mean that regexp can actually contain it in a match.
        switch (node.type) {
            case "Lookahead":
                this.visitLookahead(node);
                return;
            case "NegativeLookahead":
                this.visitNegativeLookahead(node);
                return;
        }
        _super.prototype.visitChildren.call(this, node);
    };
    CharCodeFinder.prototype.visitCharacter = function (node) {
        if (utils_1.contains(this.targetCharCodes, node.value)) {
            this.found = true;
        }
    };
    CharCodeFinder.prototype.visitSet = function (node) {
        if (node.complement) {
            if (findCode(node, this.targetCharCodes) === undefined) {
                this.found = true;
            }
        }
        else {
            if (findCode(node, this.targetCharCodes) !== undefined) {
                this.found = true;
            }
        }
    };
    return CharCodeFinder;
}(regexp_to_ast_1.BaseRegExpVisitor));
function canMatchCharCode(charCodes, pattern) {
    if (pattern instanceof RegExp) {
        var ast = reg_exp_parser_1.getRegExpAst(pattern);
        var charCodeFinder = new CharCodeFinder(charCodes);
        charCodeFinder.visit(ast);
        return charCodeFinder.found;
    }
    else {
        return (utils_1.find(pattern, function (char) {
            return utils_1.contains(charCodes, char.charCodeAt(0));
        }) !== undefined);
    }
}
exports.canMatchCharCode = canMatchCharCode;
//# sourceMappingURL=reg_exp.js.map

/***/ }),

/***/ 3144:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.clearRegExpParserCache = exports.getRegExpAst = void 0;
var regexp_to_ast_1 = __webpack_require__(4303);
var regExpAstCache = {};
var regExpParser = new regexp_to_ast_1.RegExpParser();
function getRegExpAst(regExp) {
    var regExpStr = regExp.toString();
    if (regExpAstCache.hasOwnProperty(regExpStr)) {
        return regExpAstCache[regExpStr];
    }
    else {
        var regExpAst = regExpParser.pattern(regExpStr);
        regExpAstCache[regExpStr] = regExpAst;
        return regExpAst;
    }
}
exports.getRegExpAst = getRegExpAst;
function clearRegExpParserCache() {
    regExpAstCache = {};
}
exports.clearRegExpParserCache = clearRegExpParserCache;
//# sourceMappingURL=reg_exp_parser.js.map

/***/ }),

/***/ 4141:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.isTokenType = exports.hasExtendingTokensTypesMapProperty = exports.hasExtendingTokensTypesProperty = exports.hasCategoriesProperty = exports.hasShortKeyProperty = exports.singleAssignCategoriesToksMap = exports.assignCategoriesMapProp = exports.assignCategoriesTokensProp = exports.assignTokenDefaultProps = exports.expandCategories = exports.augmentTokenTypes = exports.tokenIdxToClass = exports.tokenShortNameIdx = exports.tokenStructuredMatcherNoCategories = exports.tokenStructuredMatcher = void 0;
var utils_1 = __webpack_require__(3739);
function tokenStructuredMatcher(tokInstance, tokConstructor) {
    var instanceType = tokInstance.tokenTypeIdx;
    if (instanceType === tokConstructor.tokenTypeIdx) {
        return true;
    }
    else {
        return (tokConstructor.isParent === true &&
            tokConstructor.categoryMatchesMap[instanceType] === true);
    }
}
exports.tokenStructuredMatcher = tokenStructuredMatcher;
// Optimized tokenMatcher in case our grammar does not use token categories
// Being so tiny it is much more likely to be in-lined and this avoid the function call overhead
function tokenStructuredMatcherNoCategories(token, tokType) {
    return token.tokenTypeIdx === tokType.tokenTypeIdx;
}
exports.tokenStructuredMatcherNoCategories = tokenStructuredMatcherNoCategories;
exports.tokenShortNameIdx = 1;
exports.tokenIdxToClass = {};
function augmentTokenTypes(tokenTypes) {
    // collect the parent Token Types as well.
    var tokenTypesAndParents = expandCategories(tokenTypes);
    // add required tokenType and categoryMatches properties
    assignTokenDefaultProps(tokenTypesAndParents);
    // fill up the categoryMatches
    assignCategoriesMapProp(tokenTypesAndParents);
    assignCategoriesTokensProp(tokenTypesAndParents);
    utils_1.forEach(tokenTypesAndParents, function (tokType) {
        tokType.isParent = tokType.categoryMatches.length > 0;
    });
}
exports.augmentTokenTypes = augmentTokenTypes;
function expandCategories(tokenTypes) {
    var result = utils_1.cloneArr(tokenTypes);
    var categories = tokenTypes;
    var searching = true;
    while (searching) {
        categories = utils_1.compact(utils_1.flatten(utils_1.map(categories, function (currTokType) { return currTokType.CATEGORIES; })));
        var newCategories = utils_1.difference(categories, result);
        result = result.concat(newCategories);
        if (utils_1.isEmpty(newCategories)) {
            searching = false;
        }
        else {
            categories = newCategories;
        }
    }
    return result;
}
exports.expandCategories = expandCategories;
function assignTokenDefaultProps(tokenTypes) {
    utils_1.forEach(tokenTypes, function (currTokType) {
        if (!hasShortKeyProperty(currTokType)) {
            exports.tokenIdxToClass[exports.tokenShortNameIdx] = currTokType;
            currTokType.tokenTypeIdx = exports.tokenShortNameIdx++;
        }
        // CATEGORIES? : TokenType | TokenType[]
        if (hasCategoriesProperty(currTokType) &&
            !utils_1.isArray(currTokType.CATEGORIES)
        // &&
        // !isUndefined(currTokType.CATEGORIES.PATTERN)
        ) {
            currTokType.CATEGORIES = [currTokType.CATEGORIES];
        }
        if (!hasCategoriesProperty(currTokType)) {
            currTokType.CATEGORIES = [];
        }
        if (!hasExtendingTokensTypesProperty(currTokType)) {
            currTokType.categoryMatches = [];
        }
        if (!hasExtendingTokensTypesMapProperty(currTokType)) {
            currTokType.categoryMatchesMap = {};
        }
    });
}
exports.assignTokenDefaultProps = assignTokenDefaultProps;
function assignCategoriesTokensProp(tokenTypes) {
    utils_1.forEach(tokenTypes, function (currTokType) {
        // avoid duplications
        currTokType.categoryMatches = [];
        utils_1.forEach(currTokType.categoryMatchesMap, function (val, key) {
            currTokType.categoryMatches.push(exports.tokenIdxToClass[key].tokenTypeIdx);
        });
    });
}
exports.assignCategoriesTokensProp = assignCategoriesTokensProp;
function assignCategoriesMapProp(tokenTypes) {
    utils_1.forEach(tokenTypes, function (currTokType) {
        singleAssignCategoriesToksMap([], currTokType);
    });
}
exports.assignCategoriesMapProp = assignCategoriesMapProp;
function singleAssignCategoriesToksMap(path, nextNode) {
    utils_1.forEach(path, function (pathNode) {
        nextNode.categoryMatchesMap[pathNode.tokenTypeIdx] = true;
    });
    utils_1.forEach(nextNode.CATEGORIES, function (nextCategory) {
        var newPath = path.concat(nextNode);
        // avoids infinite loops due to cyclic categories.
        if (!utils_1.contains(newPath, nextCategory)) {
            singleAssignCategoriesToksMap(newPath, nextCategory);
        }
    });
}
exports.singleAssignCategoriesToksMap = singleAssignCategoriesToksMap;
function hasShortKeyProperty(tokType) {
    return utils_1.has(tokType, "tokenTypeIdx");
}
exports.hasShortKeyProperty = hasShortKeyProperty;
function hasCategoriesProperty(tokType) {
    return utils_1.has(tokType, "CATEGORIES");
}
exports.hasCategoriesProperty = hasCategoriesProperty;
function hasExtendingTokensTypesProperty(tokType) {
    return utils_1.has(tokType, "categoryMatches");
}
exports.hasExtendingTokensTypesProperty = hasExtendingTokensTypesProperty;
function hasExtendingTokensTypesMapProperty(tokType) {
    return utils_1.has(tokType, "categoryMatchesMap");
}
exports.hasExtendingTokensTypesMapProperty = hasExtendingTokensTypesMapProperty;
function isTokenType(tokType) {
    return utils_1.has(tokType, "tokenTypeIdx");
}
exports.isTokenType = isTokenType;
//# sourceMappingURL=tokens.js.map

/***/ }),

/***/ 8497:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.tokenMatcher = exports.createTokenInstance = exports.EOF = exports.createToken = exports.hasTokenLabel = exports.tokenName = exports.tokenLabel = void 0;
var utils_1 = __webpack_require__(3739);
var lexer_public_1 = __webpack_require__(2595);
var tokens_1 = __webpack_require__(4141);
function tokenLabel(tokType) {
    if (hasTokenLabel(tokType)) {
        return tokType.LABEL;
    }
    else {
        return tokType.name;
    }
}
exports.tokenLabel = tokenLabel;
function tokenName(tokType) {
    return tokType.name;
}
exports.tokenName = tokenName;
function hasTokenLabel(obj) {
    return utils_1.isString(obj.LABEL) && obj.LABEL !== "";
}
exports.hasTokenLabel = hasTokenLabel;
var PARENT = "parent";
var CATEGORIES = "categories";
var LABEL = "label";
var GROUP = "group";
var PUSH_MODE = "push_mode";
var POP_MODE = "pop_mode";
var LONGER_ALT = "longer_alt";
var LINE_BREAKS = "line_breaks";
var START_CHARS_HINT = "start_chars_hint";
function createToken(config) {
    return createTokenInternal(config);
}
exports.createToken = createToken;
function createTokenInternal(config) {
    var pattern = config.pattern;
    var tokenType = {};
    tokenType.name = config.name;
    if (!utils_1.isUndefined(pattern)) {
        tokenType.PATTERN = pattern;
    }
    if (utils_1.has(config, PARENT)) {
        throw ("The parent property is no longer supported.\n" +
            "See: https://github.com/SAP/chevrotain/issues/564#issuecomment-349062346 for details.");
    }
    if (utils_1.has(config, CATEGORIES)) {
        // casting to ANY as this will be fixed inside `augmentTokenTypes``
        tokenType.CATEGORIES = config[CATEGORIES];
    }
    tokens_1.augmentTokenTypes([tokenType]);
    if (utils_1.has(config, LABEL)) {
        tokenType.LABEL = config[LABEL];
    }
    if (utils_1.has(config, GROUP)) {
        tokenType.GROUP = config[GROUP];
    }
    if (utils_1.has(config, POP_MODE)) {
        tokenType.POP_MODE = config[POP_MODE];
    }
    if (utils_1.has(config, PUSH_MODE)) {
        tokenType.PUSH_MODE = config[PUSH_MODE];
    }
    if (utils_1.has(config, LONGER_ALT)) {
        tokenType.LONGER_ALT = config[LONGER_ALT];
    }
    if (utils_1.has(config, LINE_BREAKS)) {
        tokenType.LINE_BREAKS = config[LINE_BREAKS];
    }
    if (utils_1.has(config, START_CHARS_HINT)) {
        tokenType.START_CHARS_HINT = config[START_CHARS_HINT];
    }
    return tokenType;
}
exports.EOF = createToken({ name: "EOF", pattern: lexer_public_1.Lexer.NA });
tokens_1.augmentTokenTypes([exports.EOF]);
function createTokenInstance(tokType, image, startOffset, endOffset, startLine, endLine, startColumn, endColumn) {
    return {
        image: image,
        startOffset: startOffset,
        endOffset: endOffset,
        startLine: startLine,
        endLine: endLine,
        startColumn: startColumn,
        endColumn: endColumn,
        tokenTypeIdx: tokType.tokenTypeIdx,
        tokenType: tokType
    };
}
exports.createTokenInstance = createTokenInstance;
function tokenMatcher(token, tokType) {
    return tokens_1.tokenStructuredMatcher(token, tokType);
}
exports.tokenMatcher = tokenMatcher;
//# sourceMappingURL=tokens_public.js.map

/***/ }),

/***/ 3739:
/***/ ((__unused_webpack_module, exports) => {

"use strict";

/*
 Utils using lodash style API. (not necessarily 100% compliant) for functional and other utils.
 These utils should replace usage of lodash in the production code base. not because they are any better...
 but for the purpose of being a dependency free library.

 The hotspots in the code are already written in imperative style for performance reasons.
 so writing several dozen utils which may be slower than the original lodash, does not matter as much
 considering they will not be invoked in hotspots...
 */
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.timer = exports.peek = exports.toFastProperties = exports.applyMixins = exports.isES2015MapSupported = exports.PRINT_WARNING = exports.PRINT_ERROR = exports.packArray = exports.IDENTITY = exports.NOOP = exports.merge = exports.groupBy = exports.defaults = exports.assignNoOverwrite = exports.assign = exports.zipObject = exports.sortBy = exports.indexOf = exports.some = exports.difference = exports.every = exports.isObject = exports.isRegExp = exports.isArray = exports.partial = exports.uniq = exports.compact = exports.reduce = exports.findAll = exports.find = exports.cloneObj = exports.cloneArr = exports.contains = exports.has = exports.pick = exports.reject = exports.filter = exports.dropRight = exports.drop = exports.isFunction = exports.isUndefined = exports.isString = exports.forEach = exports.last = exports.first = exports.flatten = exports.map = exports.mapValues = exports.values = exports.keys = exports.isEmpty = void 0;
function isEmpty(arr) {
    return arr && arr.length === 0;
}
exports.isEmpty = isEmpty;
function keys(obj) {
    if (obj === undefined || obj === null) {
        return [];
    }
    return Object.keys(obj);
}
exports.keys = keys;
function values(obj) {
    var vals = [];
    var keys = Object.keys(obj);
    for (var i = 0; i < keys.length; i++) {
        vals.push(obj[keys[i]]);
    }
    return vals;
}
exports.values = values;
function mapValues(obj, callback) {
    var result = [];
    var objKeys = keys(obj);
    for (var idx = 0; idx < objKeys.length; idx++) {
        var currKey = objKeys[idx];
        result.push(callback.call(null, obj[currKey], currKey));
    }
    return result;
}
exports.mapValues = mapValues;
function map(arr, callback) {
    var result = [];
    for (var idx = 0; idx < arr.length; idx++) {
        result.push(callback.call(null, arr[idx], idx));
    }
    return result;
}
exports.map = map;
function flatten(arr) {
    var result = [];
    for (var idx = 0; idx < arr.length; idx++) {
        var currItem = arr[idx];
        if (Array.isArray(currItem)) {
            result = result.concat(flatten(currItem));
        }
        else {
            result.push(currItem);
        }
    }
    return result;
}
exports.flatten = flatten;
function first(arr) {
    return isEmpty(arr) ? undefined : arr[0];
}
exports.first = first;
function last(arr) {
    var len = arr && arr.length;
    return len ? arr[len - 1] : undefined;
}
exports.last = last;
function forEach(collection, iteratorCallback) {
    /* istanbul ignore else */
    if (Array.isArray(collection)) {
        for (var i = 0; i < collection.length; i++) {
            iteratorCallback.call(null, collection[i], i);
        }
    }
    else if (isObject(collection)) {
        var colKeys = keys(collection);
        for (var i = 0; i < colKeys.length; i++) {
            var key = colKeys[i];
            var value = collection[key];
            iteratorCallback.call(null, value, key);
        }
    }
    else {
        throw Error("non exhaustive match");
    }
}
exports.forEach = forEach;
function isString(item) {
    return typeof item === "string";
}
exports.isString = isString;
function isUndefined(item) {
    return item === undefined;
}
exports.isUndefined = isUndefined;
function isFunction(item) {
    return item instanceof Function;
}
exports.isFunction = isFunction;
function drop(arr, howMuch) {
    if (howMuch === void 0) { howMuch = 1; }
    return arr.slice(howMuch, arr.length);
}
exports.drop = drop;
function dropRight(arr, howMuch) {
    if (howMuch === void 0) { howMuch = 1; }
    return arr.slice(0, arr.length - howMuch);
}
exports.dropRight = dropRight;
function filter(arr, predicate) {
    var result = [];
    if (Array.isArray(arr)) {
        for (var i = 0; i < arr.length; i++) {
            var item = arr[i];
            if (predicate.call(null, item)) {
                result.push(item);
            }
        }
    }
    return result;
}
exports.filter = filter;
function reject(arr, predicate) {
    return filter(arr, function (item) { return !predicate(item); });
}
exports.reject = reject;
function pick(obj, predicate) {
    var keys = Object.keys(obj);
    var result = {};
    for (var i = 0; i < keys.length; i++) {
        var currKey = keys[i];
        var currItem = obj[currKey];
        if (predicate(currItem)) {
            result[currKey] = currItem;
        }
    }
    return result;
}
exports.pick = pick;
function has(obj, prop) {
    if (isObject(obj)) {
        return obj.hasOwnProperty(prop);
    }
    return false;
}
exports.has = has;
function contains(arr, item) {
    return find(arr, function (currItem) { return currItem === item; }) !== undefined ? true : false;
}
exports.contains = contains;
/**
 * shallow clone
 */
function cloneArr(arr) {
    var newArr = [];
    for (var i = 0; i < arr.length; i++) {
        newArr.push(arr[i]);
    }
    return newArr;
}
exports.cloneArr = cloneArr;
/**
 * shallow clone
 */
function cloneObj(obj) {
    var clonedObj = {};
    for (var key in obj) {
        /* istanbul ignore else */
        if (Object.prototype.hasOwnProperty.call(obj, key)) {
            clonedObj[key] = obj[key];
        }
    }
    return clonedObj;
}
exports.cloneObj = cloneObj;
function find(arr, predicate) {
    for (var i = 0; i < arr.length; i++) {
        var item = arr[i];
        if (predicate.call(null, item)) {
            return item;
        }
    }
    return undefined;
}
exports.find = find;
function findAll(arr, predicate) {
    var found = [];
    for (var i = 0; i < arr.length; i++) {
        var item = arr[i];
        if (predicate.call(null, item)) {
            found.push(item);
        }
    }
    return found;
}
exports.findAll = findAll;
function reduce(arrOrObj, iterator, initial) {
    var isArr = Array.isArray(arrOrObj);
    var vals = isArr ? arrOrObj : values(arrOrObj);
    var objKeys = isArr ? [] : keys(arrOrObj);
    var accumulator = initial;
    for (var i = 0; i < vals.length; i++) {
        accumulator = iterator.call(null, accumulator, vals[i], isArr ? i : objKeys[i]);
    }
    return accumulator;
}
exports.reduce = reduce;
function compact(arr) {
    return reject(arr, function (item) { return item === null || item === undefined; });
}
exports.compact = compact;
function uniq(arr, identity) {
    if (identity === void 0) { identity = function (item) { return item; }; }
    var identities = [];
    return reduce(arr, function (result, currItem) {
        var currIdentity = identity(currItem);
        if (contains(identities, currIdentity)) {
            return result;
        }
        else {
            identities.push(currIdentity);
            return result.concat(currItem);
        }
    }, []);
}
exports.uniq = uniq;
function partial(func) {
    var restArgs = [];
    for (var _i = 1; _i < arguments.length; _i++) {
        restArgs[_i - 1] = arguments[_i];
    }
    var firstArg = [null];
    var allArgs = firstArg.concat(restArgs);
    return Function.bind.apply(func, allArgs);
}
exports.partial = partial;
function isArray(obj) {
    return Array.isArray(obj);
}
exports.isArray = isArray;
function isRegExp(obj) {
    return obj instanceof RegExp;
}
exports.isRegExp = isRegExp;
function isObject(obj) {
    return obj instanceof Object;
}
exports.isObject = isObject;
function every(arr, predicate) {
    for (var i = 0; i < arr.length; i++) {
        if (!predicate(arr[i], i)) {
            return false;
        }
    }
    return true;
}
exports.every = every;
function difference(arr, values) {
    return reject(arr, function (item) { return contains(values, item); });
}
exports.difference = difference;
function some(arr, predicate) {
    for (var i = 0; i < arr.length; i++) {
        if (predicate(arr[i])) {
            return true;
        }
    }
    return false;
}
exports.some = some;
function indexOf(arr, value) {
    for (var i = 0; i < arr.length; i++) {
        if (arr[i] === value) {
            return i;
        }
    }
    return -1;
}
exports.indexOf = indexOf;
function sortBy(arr, orderFunc) {
    var result = cloneArr(arr);
    result.sort(function (a, b) { return orderFunc(a) - orderFunc(b); });
    return result;
}
exports.sortBy = sortBy;
function zipObject(keys, values) {
    if (keys.length !== values.length) {
        throw Error("can't zipObject with different number of keys and values!");
    }
    var result = {};
    for (var i = 0; i < keys.length; i++) {
        result[keys[i]] = values[i];
    }
    return result;
}
exports.zipObject = zipObject;
/**
 * mutates! (and returns) target
 */
function assign(target) {
    var sources = [];
    for (var _i = 1; _i < arguments.length; _i++) {
        sources[_i - 1] = arguments[_i];
    }
    for (var i = 0; i < sources.length; i++) {
        var curSource = sources[i];
        var currSourceKeys = keys(curSource);
        for (var j = 0; j < currSourceKeys.length; j++) {
            var currKey = currSourceKeys[j];
            target[currKey] = curSource[currKey];
        }
    }
    return target;
}
exports.assign = assign;
/**
 * mutates! (and returns) target
 */
function assignNoOverwrite(target) {
    var sources = [];
    for (var _i = 1; _i < arguments.length; _i++) {
        sources[_i - 1] = arguments[_i];
    }
    for (var i = 0; i < sources.length; i++) {
        var curSource = sources[i];
        var currSourceKeys = keys(curSource);
        for (var j = 0; j < currSourceKeys.length; j++) {
            var currKey = currSourceKeys[j];
            if (!has(target, currKey)) {
                target[currKey] = curSource[currKey];
            }
        }
    }
    return target;
}
exports.assignNoOverwrite = assignNoOverwrite;
function defaults() {
    var sources = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        sources[_i] = arguments[_i];
    }
    return assignNoOverwrite.apply(null, [{}].concat(sources));
}
exports.defaults = defaults;
function groupBy(arr, groupKeyFunc) {
    var result = {};
    forEach(arr, function (item) {
        var currGroupKey = groupKeyFunc(item);
        var currGroupArr = result[currGroupKey];
        if (currGroupArr) {
            currGroupArr.push(item);
        }
        else {
            result[currGroupKey] = [item];
        }
    });
    return result;
}
exports.groupBy = groupBy;
/**
 * Merge obj2 into obj1.
 * Will overwrite existing properties with the same name
 */
function merge(obj1, obj2) {
    var result = cloneObj(obj1);
    var keys2 = keys(obj2);
    for (var i = 0; i < keys2.length; i++) {
        var key = keys2[i];
        var value = obj2[key];
        result[key] = value;
    }
    return result;
}
exports.merge = merge;
function NOOP() { }
exports.NOOP = NOOP;
function IDENTITY(item) {
    return item;
}
exports.IDENTITY = IDENTITY;
/**
 * Will return a new packed array with same values.
 */
function packArray(holeyArr) {
    var result = [];
    for (var i = 0; i < holeyArr.length; i++) {
        var orgValue = holeyArr[i];
        result.push(orgValue !== undefined ? orgValue : undefined);
    }
    return result;
}
exports.packArray = packArray;
function PRINT_ERROR(msg) {
    /* istanbul ignore else - can't override global.console in node.js */
    if (console && console.error) {
        console.error("Error: " + msg);
    }
}
exports.PRINT_ERROR = PRINT_ERROR;
function PRINT_WARNING(msg) {
    /* istanbul ignore else - can't override global.console in node.js*/
    if (console && console.warn) {
        // TODO: modify docs accordingly
        console.warn("Warning: " + msg);
    }
}
exports.PRINT_WARNING = PRINT_WARNING;
function isES2015MapSupported() {
    return typeof Map === "function";
}
exports.isES2015MapSupported = isES2015MapSupported;
function applyMixins(derivedCtor, baseCtors) {
    baseCtors.forEach(function (baseCtor) {
        var baseProto = baseCtor.prototype;
        Object.getOwnPropertyNames(baseProto).forEach(function (propName) {
            if (propName === "constructor") {
                return;
            }
            var basePropDescriptor = Object.getOwnPropertyDescriptor(baseProto, propName);
            // Handle Accessors
            if (basePropDescriptor &&
                (basePropDescriptor.get || basePropDescriptor.set)) {
                Object.defineProperty(derivedCtor.prototype, propName, basePropDescriptor);
            }
            else {
                derivedCtor.prototype[propName] = baseCtor.prototype[propName];
            }
        });
    });
}
exports.applyMixins = applyMixins;
// base on: https://github.com/petkaantonov/bluebird/blob/b97c0d2d487e8c5076e8bd897e0dcd4622d31846/src/util.js#L201-L216
function toFastProperties(toBecomeFast) {
    function FakeConstructor() { }
    // If our object is used as a constructor it would receive
    FakeConstructor.prototype = toBecomeFast;
    var fakeInstance = new FakeConstructor();
    function fakeAccess() {
        return typeof fakeInstance.bar;
    }
    // help V8 understand this is a "real" prototype by actually using
    // the fake instance.
    fakeAccess();
    fakeAccess();
    return toBecomeFast;
    // Eval prevents optimization of this method (even though this is dead code)
    /* istanbul ignore next */
    // tslint:disable-next-line
    eval(toBecomeFast);
}
exports.toFastProperties = toFastProperties;
function peek(arr) {
    return arr[arr.length - 1];
}
exports.peek = peek;
/* istanbul ignore next - for performance tracing*/
function timer(func) {
    var start = new Date().getTime();
    var val = func();
    var end = new Date().getTime();
    var total = end - start;
    return { time: total, value: val };
}
exports.timer = timer;
//# sourceMappingURL=utils.js.map

/***/ }),

/***/ 2376:
/***/ ((__unused_webpack_module, exports) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.VERSION = void 0;
// needs a separate module as this is required inside chevrotain productive code
// and also in the entry point for webpack(api.ts).
// A separate file avoids cyclic dependencies and webpack errors.
exports.VERSION = "7.0.3";
//# sourceMappingURL=version.js.map

/***/ }),

/***/ 6891:
/***/ ((module) => {

module.exports = function (xs, fn) {
    var res = [];
    for (var i = 0; i < xs.length; i++) {
        var x = fn(xs[i], i);
        if (isArray(x)) res.push.apply(res, x);
        else res.push(x);
    }
    return res;
};

var isArray = Array.isArray || function (xs) {
    return Object.prototype.toString.call(xs) === '[object Array]';
};


/***/ }),

/***/ 8932:
/***/ ((__unused_webpack_module, exports) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({ value: true }));

class Deprecation extends Error {
  constructor(message) {
    super(message); // Maintains proper stack trace (only available on V8)

    /* istanbul ignore next */

    if (Error.captureStackTrace) {
      Error.captureStackTrace(this, this.constructor);
    }

    this.name = 'Deprecation';
  }

}

exports.Deprecation = Deprecation;


/***/ }),

/***/ 89:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

var t=__webpack_require__(8307),o=__webpack_require__(1917),e=__webpack_require__(8342);const r=/\$\{\{(.*?)\}\}/gm;function s(t){return(null==t?void 0:t.match)&&null!==t.match(r)}function i(t,o){for(const e of Array.from(t.matchAll(r)))o(e[0],e.index,e.length)}function l(t,o,e){for(const r of t)if("$"!=r){if(!o)break;e&&e(o),o="string"==typeof r?o[r]:o[r[0]][r[1]]}return o}const a={toJson:"Returns a pretty-print JSON representation of `value`. You can use this function to debug the information provided in contexts."},u=t.createToken({name:"True",pattern:/true/}),c=t.createToken({name:"False",pattern:/false/}),p=t.createToken({name:"Null",pattern:/null/}),h=t.createToken({name:"LParens",pattern:/\(/}),d=t.createToken({name:"RParens",pattern:/\)/}),n=t.createToken({name:"LSquare",pattern:/\[/}),m=t.createToken({name:"RSquare",pattern:/]/}),g=t.createToken({name:"Comma",pattern:/,/}),_=t.createToken({name:"Context",pattern:t.Lexer.NA}),b=["github","env","job","steps","runner","secrets","strategy","matrix","needs"].map(o=>t.createToken({name:"Context"+o,pattern:new RegExp(""+o),categories:_})),C=t.createToken({name:"Dot",pattern:/\./}),v=t.createToken({name:"ContextMember",pattern:/[a-zA-Z_][a-zA-Z0-9-_]*/}),f=t.createToken({name:"Operator",pattern:t.Lexer.NA}),W=t.createToken({name:"And",pattern:/&&/,categories:f}),H=t.createToken({name:"Or",pattern:/\|\|/,categories:f}),w=t.createToken({name:"Eq",pattern:/==/,categories:f}),y=t.createToken({name:"NotEq",pattern:/!=/,categories:f}),k=t.createToken({name:"LT",pattern:/</,categories:f}),M=t.createToken({name:"LTE",pattern:/<=/,categories:f}),D=t.createToken({name:"GT",pattern:/>/,categories:f}),O=t.createToken({name:"GTE",pattern:/>=/,categories:f}),z=t.createToken({name:"Not",pattern:/!/,categories:f}),x=t.createToken({name:"Function",pattern:t.Lexer.NA}),T=t.createToken({name:"contains",pattern:/contains/,categories:x}),j=t.createToken({name:"startsWith",pattern:/startsWith/,categories:x}),N=t.createToken({name:"endsWith",pattern:/endsWith/,categories:x}),E=t.createToken({name:"join",pattern:/join/,categories:x}),Z=t.createToken({name:"toJson",pattern:/toJson/,categories:x}),U=t.createToken({name:"fromJson",pattern:/fromJson/,categories:x}),I=t.createToken({name:"hashFiles",pattern:/hashFiles/,categories:x}),R=t.createToken({name:"success",pattern:/success/,categories:x}),A=t.createToken({name:"always",pattern:/always/,categories:x}),X=t.createToken({name:"failure",pattern:/failure/,categories:x}),P=t.createToken({name:"format",pattern:/format/,categories:x}),Y=t.createToken({name:"cancelled",pattern:/cancelled/,categories:x}),V=[T,j,N,E,Z,U,I,R,A,X,P,Y],Q=t.createToken({name:"StringLiteral",pattern:/'((?:''|[^'])*)'/}),S=t.createToken({name:"NumberLiteral",pattern:/-?(0|[1-9]\d*)(\.\d+)?([eE][+-]?\d+)?/}),G=[t.createToken({name:"WhiteSpace",pattern:/[ \t\n\r]+/,group:t.Lexer.SKIPPED}),S,x,T,j,P,N,E,Z,U,I,R,A,Y,X,Q,h,d,n,m,g,f,W,H,w,y,M,k,O,D,z,u,c,p,_,...b,C,v],q=new t.Lexer(G);class F extends t.CstParser{constructor(){super(G),this.expression=this.RULE("expression",()=>{this.OPTION(()=>{this.SUBRULE(this.subExpression,{LABEL:"lhs"}),this.MANY(()=>{this.CONSUME(f),this.SUBRULE2(this.subExpression,{LABEL:"rhs"})})})}),this.subExpression=this.RULE("subExpression",()=>{this.OR([{ALT:()=>this.SUBRULE(this.logicalGrouping)},{ALT:()=>this.SUBRULE(this.functionCall)},{ALT:()=>this.SUBRULE(this.contextAccess)},{ALT:()=>this.SUBRULE(this.value)},{ALT:()=>this.SUBRULE(this.array)}])}),this.contextAccess=this.RULE("contextAccess",()=>{this.OR(b.map(t=>({ALT:()=>this.CONSUME(t)}))),this.MANY(()=>{this.SUBRULE(this.contextMember)})}),this.contextMember=this.RULE("contextMember",()=>{this.OR([{ALT:()=>this.SUBRULE(this.contextDotMember)},{ALT:()=>this.SUBRULE(this.contextBoxMember)}])}),this.contextDotMember=this.RULE("contextDotMember",()=>{this.CONSUME(C),this.CONSUME(v)}),this.contextBoxMember=this.RULE("contextBoxMember",()=>{this.CONSUME(n),this.SUBRULE(this.subExpression),this.CONSUME(m)}),this.array=this.RULE("array",()=>{this.CONSUME(n),this.MANY_SEP({SEP:g,DEF:()=>{this.SUBRULE(this.subExpression)}}),this.CONSUME(m)}),this.logicalGrouping=this.RULE("logicalGrouping",()=>{this.CONSUME(h),this.SUBRULE(this.expression),this.CONSUME(d)}),this.functionCall=this.RULE("functionCall",()=>{this.OR(V.map(t=>({ALT:()=>this.CONSUME(t)}))),this.CONSUME(h),this.MANY_SEP({SEP:g,DEF:()=>{this.SUBRULE(this.expression)}}),this.CONSUME(d)}),this.value=this.RULE("value",()=>{this.OR([{ALT:()=>this.CONSUME(Q)},{ALT:()=>this.CONSUME(S)},{ALT:()=>this.SUBRULE(this.booleanValue)},{ALT:()=>this.CONSUME(p)}])}),this.booleanValue=this.RULE("booleanValue",()=>{this.OPTION(()=>this.CONSUME(z)),this.OR([{ALT:()=>this.CONSUME(u)},{ALT:()=>this.CONSUME(c)}])}),this.performSelfAnalysis()}}const L=new F,J=L.getBaseCstVisitorConstructor();class B extends J{expression(o,e){let r=this.visit(o.lhs,e);return o.rhs&&o.rhs.forEach((s,i)=>{let l=this.visit(s,e);const a=o.Operator[i];switch(typeof r!=typeof l&&(r=this._coerceValue(r),l=this._coerceValue(l)),!0){case t.tokenMatcher(a,w):r=r==l;break;case t.tokenMatcher(a,y):r=r!=l;break;case t.tokenMatcher(a,W):r=r&&l;break;case t.tokenMatcher(a,H):r=r||l;break;case t.tokenMatcher(a,k):r=r<l;break;case t.tokenMatcher(a,M):r=r<=l;break;case t.tokenMatcher(a,D):r=r>l;break;case t.tokenMatcher(a,O):r=r>=l}}),r}subExpression(t,o){switch(!0){case!!t.value:return this.visit(t.value,o);case!!t.logicalGrouping:return this.visit(t.logicalGrouping,o);case!!t.array:return this.visit(t.array,o);case!!t.functionCall:return this.visit(t.functionCall,o);case!!t.contextAccess:return this.visit(t.contextAccess,o)}}contextAccess(t,o){const e=b.map(t=>t.PATTERN.source).find(o=>!!t["Context"+o]);if(!e)throw new Error("Unknown context: "+e);const r=[];if(t.contextMember)for(const e of t.contextMember)this.visit(e,{path:r,context:o});return this.getContextValue(e,r,o)}getContextValue(t,o,e){return l(o,e.contextProvider.get(t))||""}contextMember(t,{path:o,context:e}){switch(!0){case!!t.contextDotMember:return this.visit(t.contextDotMember,o);case!!t.contextBoxMember:return this.visit(t.contextBoxMember,{path:o,context:e})}}contextDotMember(t,o){o.push(t.ContextMember[0].image)}contextBoxMember(t,{path:o,context:e}){const r=this.visit(t.subExpression,e);o.push(r)}logicalGrouping(t){return this.visit(t.expression)}array(t){const o=[];return t.subExpression&&o.push(...t.subExpression.map(t=>this.visit(t))),o}functionCall(t,o){const e=t.expression.map(t=>this.visit(t,o));switch(!0){case!!t.contains:return r=e[0],s=e[1],Array.isArray(r)?-1!==r.indexOf(s):"string"==typeof r?-1!==(""+r).toLocaleLowerCase().indexOf(s.toLocaleLowerCase()):void 0;case!!t.startsWith:return function(t,o){return t.startsWith(o)}(e[0],e[1]);case!!t.endsWith:return function(t,o){return t.endsWith(o)}(e[0],e[1]);case!!t.join:return e[0].join(e[1]);case!!t.toJson:return JSON.stringify(e[0]);case!!t.fromJson:return function(t){return JSON.parse(t)}(e[0]);case!!t.hashFiles:return"sha-256-hash-for-"+e.join();case!!t.format:return function(t){let o=0;return(t=t.replace(/(\{\d+\})/gm,()=>[].slice.call(arguments,1)[o++])).replace("{{","{").replace("}}","}")}(e[0],...e.slice(1))}var r,s}value(t){switch(!0){case!!t.NumberLiteral:return parseFloat(t.NumberLiteral[0].image);case!!t.booleanValue:return this.visit(t.booleanValue);case!!t.Null:return null;case!!t.StringLiteral:return this._removeQuotes(t.StringLiteral[0].image)}}booleanValue(t){let o;switch(!0){case!!t.True:o=!0;break;case!!t.False:o=!1}return t.Not&&(o=!o),o}_coerceValue(t){return"number"==typeof t?t:"string"==typeof t?""===t?0:+t:null===t?0:!0===t?1:!1===t?0:NaN}_removeQuotes(t){return""+t.substring(1,t.length-1).replace(/''/g,"'")}}const K=new B;class $ extends Error{constructor(t,o){super(`${t.map(t=>t.message).join()} ${o.map(t=>t.message).join()}`),this.lexErrors=t,this.parseErrors=o}}function tt(t,o){t=t.replace(r,(t,o)=>o);const e=q.tokenize(t);L.input=e.tokens;const s=L.expression(),i=K.visit(s,{contextProvider:o});if(e.errors.length>0||L.errors.length>0)throw new $(e.errors,L.errors);return i}function ot(t,o){return t.replace(r,(t,e)=>tt(e,o))}var et,rt,st;function it(t,o){return t[0]<=o&&o<=t[1]}function lt(t,o){if(!it([t.startPosition,t.endPosition],o))return null;const e=t;switch(e.kind){case et.MAP:for(const t of e.mappings)if(it([t.startPosition,t.endPosition],o))return lt(t,o);break;case et.MAPPING:{const r=t.value&&lt(e.value,o);if(r)return r;if(t.key&&(it([e.key.startPosition,e.key.endPosition],o)||"dummy"===t.key.value))return t.parent;break}case et.SEQ:for(const t of e.items){if("object"!=typeof t)return e;if(null===t)return e;if(it([t.startPosition,t.endPosition],o))return lt(t,o)}break;case et.SCALAR:return e.value&&"dummy"===e.value?e.parent:e;default:throw new Error("unknown")}return t}function at(t){const o=[];let e=t;for(;e;)o.unshift(e),e=e.parent;const r=["$"];for(;o.length;){const t=o.shift();switch(t.kind){case et.MAPPING:t.key&&r.push(t.key.value),t.value&&o.unshift(t.value);break;case et.SEQ:if(o.length&&t.items){const e=t.items.indexOf(o[0]);-1!==e&&(r[r.length-1]=[r[r.length-1],e])}}}return r}function ut(t){if(-1!==t.indexOf("@")){const[o,e]=t.split("@"),[r,s,i,l]=o.match(/([^\/]*)\/([^\/]*)\/?(.*)?/);return{type:"remote",ref:e,owner:s,repository:i,subdirectory:l}}return-1!==t.indexOf("docker://")?{type:"docker"}:{type:"local"}}function ct(t){Array.isArray(t.steps)||(t.steps=[]),t.steps=t.steps.filter(t=>"object"==typeof t);for(const o of t.steps)o&&"uses"in o&&"string"==typeof o.uses&&(o.uses=ut(o.uses));var o;t.needs=t.needs&&(o=t.needs,Array.isArray(o)?o:[o]),t["timeout-minutes"]=t["timeout-minutes"]||360}!function(t){t[t.SCALAR=0]="SCALAR",t[t.MAPPING=1]="MAPPING",t[t.MAP=2]="MAP",t[t.SEQ=3]="SEQ",t[t.ANCHOR_REF=4]="ANCHOR_REF",t[t.INCLUDE_REF=5]="INCLUDE_REF"}(et||(et={})),function(t){t[t.Error=0]="Error",t[t.Warning=1]="Warning"}(rt||(rt={}));class pt extends B{constructor(t,o,e){super(),this.contextProvider=t,this.errors=o,this.pos=e}getContextValue(t,o){const e=this.contextProvider.get(t),r=e&&l(o,e);return e&&void 0!==r||this.errors.push({message:`Unknown context access: '${t}.${o.join(".")}'`,pos:this.pos}),r}}function ht(t,o){try{var e=t()}catch(t){return o(t)}return e&&e.then?e.then(void 0,o):e}!function(t){t[t.None=0]="None",t[t.Required=1]="Required"}(st||(st={}));const dt="undefined"!=typeof Symbol?Symbol.iterator||(Symbol.iterator=Symbol("Symbol.iterator")):"@@iterator";function nt(t,o,e){if(!t.s){if(e instanceof mt){if(!e.s)return void(e.o=nt.bind(null,t,o));1&o&&(o=e.s),e=e.v}if(e&&e.then)return void e.then(nt.bind(null,t,o),nt.bind(null,t,2));t.s=o,t.v=e;const r=t.o;r&&r(t)}}const mt=function(){function t(){}return t.prototype.then=function(o,e){const r=new t,s=this.s;if(s){const t=1&s?o:e;if(t){try{nt(r,1,t(this.v))}catch(t){nt(r,2,t)}return r}return this}return this.o=function(t){try{const s=t.v;1&t.s?nt(r,1,o?o(s):s):e?nt(r,1,e(s)):nt(r,2,s)}catch(t){nt(r,2,t)}},r},t}();function gt(t){return t instanceof mt&&1&t.s}function _t(t,o,e){if("function"==typeof t[dt]){var r,s,i,l=t[dt]();if(function t(a){try{for(;!((r=l.next()).done||e&&e());)if((a=o(r.value))&&a.then){if(!gt(a))return void a.then(t,i||(i=nt.bind(null,s=new mt,2)));a=a.v}s?nt(s,1,a):s=a}catch(t){nt(s||(s=new mt),2,t)}}(),l.return){var a=function(t){try{r.done||l.return()}catch(t){}return t};if(s&&s.then)return s.then(a,function(t){throw a(t)});a()}return s}if(!("length"in t))throw new TypeError("Object is not iterable");for(var u=[],c=0;c<t.length;c++)u.push(t[c]);return function(t,o,e){var r,s,i=-1;return function l(a){try{for(;++i<t.length&&(!e||!e());)if((a=o(i))&&a.then){if(!gt(a))return void a.then(l,s||(s=nt.bind(null,r=new mt,2)));a=a.v}r?nt(r,1,a):r=a}catch(t){nt(r||(r=new mt),2,t)}}(),r}(u,function(t){return o(u[t])},e)}function bt(t,o){var e,r=-1;t:{for(var s=0;s<o.length;s++){var i=o[s][0];if(i){var l=i();if(l&&l.then)break t;if(l===t){r=s;break}}else r=s}if(-1!==r){do{for(var a=o[r][1];!a;)r++,a=o[r][1];var u=a();if(u&&u.then){e=!0;break t}var c=o[r][2];r++}while(c&&!c());return u}}const p=new mt,h=nt.bind(null,p,2);return(e?u.then(d):l.then(function e(l){for(;;){if(l===t){r=s;break}if(++s===o.length){if(-1!==r)break;return void nt(p,1,u)}if(i=o[s][0]){if((l=i())&&l.then)return void l.then(e).then(void 0,h)}else r=s}do{for(var a=o[r][1];!a;)r++,a=o[r][1];var u=a();if(u&&u.then)return void u.then(d).then(void 0,h);var c=o[r][2];r++}while(c&&!c());nt(p,1,u)})).then(void 0,h),p;function d(t){for(;;){var e=o[r][2];if(!e||e())break;r++;for(var s=o[r][1];!s;)r++,s=o[r][1];if((t=s())&&t.then)return void t.then(d).then(void 0,h)}nt(p,1,t)}}function Ct(t){switch(t){case e.Kind.SCALAR:return"value";case e.Kind.MAPPING:return"mapping";case e.Kind.MAP:return"map";case e.Kind.SEQ:return"sequence"}}const vt=function(t,o,l,a,u,c){try{let h,d;function p(){d=1}if(!t)return Promise.resolve(!0);const n=t,m=(t,o)=>{c.push({pos:[n.startPosition,n.endPosition],message:`Expected ${t}, found ${Ct(o)}`})},g=bt(o.type,[[function(){return"value"},function(){{function p(){function t(){d=1}const e=h.value,l=function(){if(o.isExpression||s(e)){const t=at(n),o=n.startPosition,e=h.rawValue;return Promise.resolve(u.get(a,t)).then(function(t){!function(t,o,e,s){i(t,(t,i)=>{!function(t,o,e,s){const i=[o,o+t.length];t=function(t){return t.replace(r,(t,o)=>o)}(t);const l=q.tokenize(t);if(L.input=l.tokens,l.errors.length>0||L.errors.length>0)return void e.push({message:"Invalid expression",pos:i});const a=L.expression();try{void 0===new pt(s,e,i).visit(a,{})&&e.push({message:"Invalid expression",pos:i})}catch{e.push({message:"Error evaluating expression",pos:i})}}(t,o+i,e,s)})}(e,o,c,t)})}}();return l&&l.then?l.then(t):t()}n.kind!==e.Kind.SCALAR&&m("value",n.kind);const h=t;l.set(h,o);const g=function(){if(o.allowedValues&&!o.allowedValues.find(t=>t.value===h.value))c.push({pos:[h.startPosition,h.endPosition],message:`'${t.value}' is not in the list of allowed values`});else{const e=function(){if(o.customValueProvider){function e(){var o;(null===(o=r)||void 0===o?void 0:o.find(t=>t.value===h.value))||c.push({pos:[h.startPosition,h.endPosition],message:`'${t.value}' is not in the list of allowed values`})}let r;const s=ht(function(){return Promise.resolve(o.customValueProvider(o,a,at(n))).then(function(t){r=t})},function(t){c.push({kind:rt.Warning,pos:[h.startPosition,h.endPosition],message:"Could not retrieve values: "+(null==t?void 0:t.message)})});return s&&s.then?s.then(e):e()}}();if(e&&e.then)return e.then(function(){})}}();return g&&g.then?g.then(p):p()}}],[function(){return"map"},function(){{function r(){function e(){if(o.required||i){const t=[...o.required||[],...(i||[]).filter(t=>t.validation===st.Required).map(t=>t.value)];for(const o of t.filter(t=>!r.has(t))){let t=[s.startPosition,s.endPosition];s.parent&&s.parent.key&&(t=[s.parent.key.startPosition,s.parent.key.endPosition]),c.push({pos:t,message:`Missing required key '${o}'`})}}if(o.keys||i){const e=new Set([...o.keys&&Object.keys(o.keys)||[],...(i||[]).map(t=>t.value)]);for(const o of Array.from(r.keys()).filter(t=>!e.has(t)))c.push({pos:[t.startPosition,t.endPosition],message:`Key '${o}' is not allowed`})}d=1}const r=new Map,p=_t(s.mappings,function(t){const e=t.key.value;r.set(e,t);const s=o.keys&&o.keys[e],i=function(){if(s)return l.set(t,s),Promise.resolve(vt(t.value,s,l,a,u,c)).then(function(){});{const e=function(){if(o.itemDesc)return Promise.resolve(vt(t.value,o.itemDesc,l,a,u,c)).then(function(){})}();if(e&&e.then)return e.then(function(){})}}();if(i&&i.then)return i.then(function(){})});return p&&p.then?p.then(e):e()}if(n.kind!==e.Kind.MAP){if(n.kind===e.Kind.SCALAR)return c.push({pos:[n.startPosition,n.endPosition],message:`Unknown key '${n.value}'`}),h=1,!1;m("map",n.kind)}const s=t;let i;l.set(t,o);const p=function(){if(o.customValueProvider){const t=ht(function(){return Promise.resolve(o.customValueProvider(o,a,at(n))).then(function(t){i=t})},function(t){c.push({kind:rt.Warning,pos:[s.startPosition,s.endPosition],message:"Could not retrieve values: "+(null==t?void 0:t.message)})});if(t&&t.then)return t.then(function(){})}}();return p&&p.then?p.then(r):r()}}],[function(){return"sequence"},function(){{function r(){d=1}const s=function(){if(n.kind!==e.Kind.SEQ)m("sequence",n.kind);else{l.set(t,o);const e=function(){if(o.itemDesc){const t=_t(n.items,function(t){return l.set(t,o.itemDesc),Promise.resolve(vt(t,o.itemDesc,l,a,u,c)).then(function(){})});if(t&&t.then)return t.then(function(){})}}();if(e&&e.then)return e.then(function(){})}}();return s&&s.then?s.then(r):r()}}],[function(){return"oneOf"},function(){{function r(){s||c.push({pos:[t.startPosition,t.endPosition],message:`Did not expect '${Ct(n.kind)}'`})}let s=!1;const i=_t(o.oneOf,function(o){const r=bt(o.type,[[function(){return"value"},function(){const r=function(){if(t.kind===e.Kind.SCALAR)return Promise.resolve(vt(t,o,l,a,u,c)).then(function(){s=!0})}();return r&&r.then?r.then(p):p()}],[function(){return"map"},function(){function r(){d=1}const i=function(){if(t.kind===e.Kind.MAP)return Promise.resolve(vt(t,o,l,a,u,c)).then(function(){s=!0})}();return i&&i.then?i.then(r):r()}],[function(){return"sequence"},function(){function r(){d=1}const i=function(){if(t.kind===e.Kind.SEQ)return Promise.resolve(vt(t,o,l,a,u,c)).then(function(){s=!0})}();return i&&i.then?i.then(r):r()}]]);if(r&&r.then)return r.then(function(){})});return i&&i.then?i.then(r):r()}},function(){return d||d}]]);return Promise.resolve(g&&g.then?g.then(function(t){return!h||t}):!h||g)}catch(t){return Promise.reject(t)}},ft=function(t,r,s,i){try{const l=[];let a;try{a=o.safeLoad(r)}catch{}"object"==typeof a?function(t,o){o.name=o.name||t,"string"==typeof o.on?o.on={[o.on]:{}}:Array.isArray(o.on)&&(o.on=o.on.reduce((t,o)=>(t[o]={},t),{})),o.jobs||(o.jobs={});for(const t of Object.keys(o.jobs).filter(t=>"dummy"!==t))ct(o.jobs[t])}(t,a):a=void 0;const u=e.safeLoad(r);return u?u.errors.length>0&&l.push(...u.errors.map(t=>({kind:t.isWarning?rt.Warning:rt.Error,message:t.reason,pos:[t.mark.position,t.mark.position+1]}))):l.push({message:"Could not parse input",pos:[0,(null==r?void 0:r.length)||0],kind:rt.Error}),Promise.resolve(function(t,o,e,r){try{const s=[],i=new Map;return i.set(null,o),Promise.resolve(vt(t,o,i,e,r,s)).then(function(){return{errors:s.map(t=>({...t,kind:t.kind||rt.Error})),nodeToDesc:i}})}catch(t){return Promise.reject(t)}}(u,s,a,i)).then(function(t){return l.push(...t.errors),{workflow:a,workflowST:u,nodeToDesc:t.nodeToDesc,diagnostics:l}})}catch(t){return Promise.reject(t)}};function Wt(t,o){try{var e=t()}catch(t){return o(t)}return e&&e.then?e.then(void 0,o):e}const Ht="undefined"!=typeof Symbol?Symbol.iterator||(Symbol.iterator=Symbol("Symbol.iterator")):"@@iterator";function wt(t,o,e){if(!t.s){if(e instanceof yt){if(!e.s)return void(e.o=wt.bind(null,t,o));1&o&&(o=e.s),e=e.v}if(e&&e.then)return void e.then(wt.bind(null,t,o),wt.bind(null,t,2));t.s=o,t.v=e;const r=t.o;r&&r(t)}}const yt=function(){function t(){}return t.prototype.then=function(o,e){const r=new t,s=this.s;if(s){const t=1&s?o:e;if(t){try{wt(r,1,t(this.v))}catch(t){wt(r,2,t)}return r}return this}return this.o=function(t){try{const s=t.v;1&t.s?wt(r,1,o?o(s):s):e?wt(r,1,e(s)):wt(r,2,s)}catch(t){wt(r,2,t)}},r},t}();function kt(t){return t instanceof yt&&1&t.s}function Mt(t,o,e){return(o=o.filter(t=>!e||!e.has(t.value)).filter(o=>!t||o.value.startsWith(t))).sort((t,o)=>t.value.localeCompare(o.value)),o}const Dt=function(o,e,s,u,c,p=!1){try{const h=""+o.value,d=e-o.startPosition;let n=h,m=d;if(!p){let t=!1;if(i(h,(o,e,r)=>{e<=d&&d<=e+r&&(t=!0,n=o,m=d-e)}),!t){const t=h.indexOf("${{");if(-1===t)return Promise.resolve([]);n=h.substr(t+3),m=d-t-3}}return n=n.replace(r,"$1"),Promise.resolve(c.get(u,s)).then(function(o){return function(o,e,r){try{o=o.substring(0,e+1);const s=q.tokenize(o);if(s.errors.length>0)throw new Error("sad sad panda, lexing errors detected");let i=s.tokens;if(!i||0===i.length)return Promise.resolve([]);const u=i[i.length-1];if(t.tokenMatcher(u,v)||t.tokenMatcher(u,C)&&(t.tokenMatcher(i[i.length-2],_)||t.tokenMatcher(i[i.length-2],v))){const o=t.tokenMatcher(u,C)?"":u.image;let e,s=[];for(let o=i.length-1;o>=0;--o)if(t.tokenMatcher(i[o],C));else if(t.tokenMatcher(i[o],v))s.push(i[o].image);else{if(!t.tokenMatcher(i[o],_))break;e=i[o].image}if(s=s.reverse(),e){const t=r.get(e),i=l(s[s.length-1]===o?s.slice(0,s.length-1):s,t),a=Object.keys(i).map(t=>({value:t}));return a.sort((t,o)=>t.value.localeCompare(o.value)),Promise.resolve(a.filter(t=>!o||t.value.startsWith(o)&&t.value!==o))}}if(void 0!==u){i=i.slice(0,-1);const t=L.computeContentAssist("expression",i),o=u.image;return Promise.resolve(t.filter(t=>x.categoryMatchesMap[t.nextTokenType.tokenTypeIdx]||_.categoryMatchesMap[t.nextTokenType.tokenTypeIdx]).map(t=>t.nextTokenType.PATTERN.source).filter(t=>!o||t.startsWith(o)).map(t=>{return{value:t,description:(o=t,a[o])};var o}))}return Promise.resolve([])}catch(t){return Promise.reject(t)}}(n,m,o)})}catch(t){return Promise.reject(t)}},Ot=function(t,o,e,r,s,i,l){try{let u,c;function a(t){if(u)return t;throw new Error("Unknown node desc "+o.type)}if(!t)throw console.error(o),new Error("no node");const p=function(t,o){var e,r=-1;t:{for(var s=0;s<o.length;s++){var i=o[s][0];if(i){var l=i();if(l&&l.then)break t;if(l===t){r=s;break}}else r=s}if(-1!==r){do{for(var a=o[r][1];!a;)r++,a=o[r][1];var u=a();if(u&&u.then){e=!0;break t}var c=o[r][2];r++}while(c&&!c());return u}}const p=new yt,h=wt.bind(null,p,2);return(e?u.then(d):l.then(function e(l){for(;;){if(l===t){r=s;break}if(++s===o.length){if(-1!==r)break;return void wt(p,1,u)}if(i=o[s][0]){if((l=i())&&l.then)return void l.then(e).then(void 0,h)}else r=s}do{for(var a=o[r][1];!a;)r++,a=o[r][1];var u=a();if(u&&u.then)return void u.then(d).then(void 0,h);var c=o[r][2];r++}while(c&&!c());wt(p,1,u)})).then(void 0,h),p;function d(t){for(;;){var e=o[r][2];if(!e||e())break;r++;for(var s=o[r][1];!s;)r++,s=o[r][1];if((t=s())&&t.then)return void t.then(d).then(void 0,h)}wt(p,1,t)}}(o.type,[[function(){return"value"},function(){{function e(t){if(u)return t;c=1}let r=t.value||"";r="dummy"!==r?r:"";const a=t.parent;let p=[];a.kind===et.SEQ?p=a.items:t.kind===et.SEQ&&(p=t.items);const h=new Set(p.filter(t=>!!t&&t.kind===et.SCALAR).map(t=>t.value)),d=function(){if(o.customValueProvider){function e(){return u=1,Mt(r,s,new Set(h))}let s=[];const l=Wt(function(){return Promise.resolve(o.customValueProvider(o,i.workflow,at(t))).then(function(t){s=t})},function(t){console.error(t)});return l&&l.then?l.then(e):e()}return o.allowedValues?(u=1,Mt(r,o.allowedValues,h)):o.isExpression||function(t,o){return-1!==t.substring(0,o).indexOf("${{")}(t.value,s-t.startPosition)?(u=1,Dt(t,s,at(t),i.workflow,l,o.isExpression)):void 0}();return d&&d.then?d.then(e):e(d)}}],[function(){return"sequence"},function(){return o.itemDesc?(u=1,Ot(t,o.itemDesc,e,r,s,i,l)):void(c=1)}],[function(){return"map"},function(){if(t.kind===et.MAP){const t=lt(i.workflowST,s);if(t.kind===et.MAPPING){const o=i.nodeToDesc.get(t.parent);if("map"!==o.type)throw new Error("Could not find map node");return u=1,Ot(t,o.keys[t.key.value],e,r,s,i,l)}}return u=1,zt(i,t,o,e,r)}],[function(){return"oneOf"},function(){{function a(){return u=1,p}const c=function(t,o,e){const r=new Set;switch(t.kind){case et.SCALAR:r.add("value");break;case et.MAPPING:{const[t]=function(t,o,e=!0){let r=t;for(;r>0&&"\n"!==o[r];)if(--r,"\n"===o[r]){++r;break}const s=o.substring(r,t+1);return[e?s.trim():s,t-r]}(o,e);t.indexOf(":")>=0&&r.add("value");break}case et.SEQ:r.add("sequence")}return r}(t,s,e),p=[],h=function(t,o,e){if("function"==typeof t[Ht]){var r,s,i,l=t[Ht]();if(function t(e){try{for(;!(r=l.next()).done;)if((e=o(r.value))&&e.then){if(!kt(e))return void e.then(t,i||(i=wt.bind(null,s=new yt,2)));e=e.v}s?wt(s,1,e):s=e}catch(t){wt(s||(s=new yt),2,t)}}(),l.return){var a=function(t){try{r.done||l.return()}catch(t){}return t};if(s&&s.then)return s.then(a,function(t){throw a(t)});a()}return s}if(!("length"in t))throw new TypeError("Object is not iterable");for(var u=[],c=0;c<t.length;c++)u.push(t[c]);return function(t,o,e){var r,s,i=-1;return function e(l){try{for(;++i<t.length;)if((l=o(i))&&l.then){if(!kt(l))return void l.then(e,s||(s=wt.bind(null,r=new yt,2)));l=l.v}r?wt(r,1,l):r=l}catch(t){wt(r||(r=new yt),2,t)}}(),r}(u,function(t){return o(u[t])})}(o.oneOf.filter(t=>c.has(t.type)),function(o){return Promise.resolve(Ot(t,o,e,r,s,i,l)).then(function(t){p.push(...t)})});return h&&h.then?h.then(a):a()}}]]);return Promise.resolve(p&&p.then?p.then(a):a(p))}catch(t){return Promise.reject(t)}},zt=function(t,o,e,r,s){try{var i;function l(){return e.keys&&a.push(...Object.keys(e.keys).map(t=>({value:t,description:e.keys[t].description}))),Mt(s,a,r)}const r=new Set((null==o||null===(i=o.mappings)||void 0===i?void 0:i.filter(t=>!!t.key).map(t=>t.key.value))||[]);let a=[];const u=function(){if(e.customValueProvider){const r=Wt(function(){return Promise.resolve(e.customValueProvider(e,t.workflow,at(o))).then(function(t){a.push(...t)})},function(t){console.error(t)});if(r&&r.then)return r.then(function(){})}}();return Promise.resolve(u&&u.then?u.then(l):l())}catch(t){return Promise.reject(t)}},xt=function(t,o,e,r,i){try{let a,u;function l(t){return a?t:o.description?{description:o.description}:void 0}const c=function(t,o){var e,r=-1;t:{for(var s=0;s<o.length;s++){var i=o[s][0];if(i){var l=i();if(l&&l.then)break t;if(l===t){r=s;break}}else r=s}if(-1!==r){do{for(var a=o[r][1];!a;)r++,a=o[r][1];var u=a();if(u&&u.then){e=!0;break t}var c=o[r][2];r++}while(c&&!c());return u}}const p=new jt,h=Tt.bind(null,p,2);return(e?u.then(d):l.then(function e(l){for(;;){if(l===t){r=s;break}if(++s===o.length){if(-1!==r)break;return void Tt(p,1,u)}if(i=o[s][0]){if((l=i())&&l.then)return void l.then(e).then(void 0,h)}else r=s}do{for(var a=o[r][1];!a;)r++,a=o[r][1];var u=a();if(u&&u.then)return void u.then(d).then(void 0,h);var c=o[r][2];r++}while(c&&!c());Tt(p,1,u)})).then(void 0,h),p;function d(t){for(;;){var e=o[r][2];if(!e||e())break;r++;for(var s=o[r][1];!s;)r++,s=o[r][1];if((t=s())&&t.then)return void t.then(d).then(void 0,h)}Tt(p,1,t)}}(o.type,[[function(){return"value"},function(){{function e(e){if(a)return e;if(o.allowedValues){const e=o.allowedValues.find(o=>t.value);if(e&&e.description)return a=1,{description:e.description}}u=1}const l=function(){if(t.kind===et.SCALAR&&s(t.value)){const o=t.value;return Promise.resolve(i.get(r,at(t))).then(function(t){const e=ot(o,t);if(void 0!==e)return a=1,{description:`Evaluates to: \`${e}\``}})}}();return l&&l.then?l.then(e):e(l)}}],[function(){return"sequence"},function(){return t.kind!==et.SEQ&&o.itemDesc?(a=1,xt(t,o.itemDesc,e,r,i)):void(u=1)}],[function(){return"map"},function(){{function s(t){if(a)return t;u=1}const i=function(){if(t.kind===et.MAP){var s;const i=null===(s=t.mappings)||void 0===s?void 0:s.find(t=>it([t.startPosition,t.endPosition],e));return function(){if(i){var e;const s=null===(e=i.key)||void 0===e?void 0:e.value;return function(){var e,i;if(s)return(null===(e=o.keys)||void 0===e||null===(i=e[s])||void 0===i?void 0:i.description)?(a=1,{description:o.keys[s].description}):function(){if(o.customValueProvider)return function(e,i){try{var l=Promise.resolve(o.customValueProvider(o,r,at(t))).then(function(t){const o=null==t?void 0:t.find(t=>t.value===s);if(null==o?void 0:o.description)return a=1,{description:o.description}})}catch(t){return i(t)}return l&&l.then?l.then(void 0,i):l}(0,function(t){console.error(t)})}()}()}}()}}();return i&&i.then?i.then(s):s(i)}}]]);return Promise.resolve(c&&c.then?c.then(l):l(c))}catch(t){return Promise.reject(t)}};function Tt(t,o,e){if(!t.s){if(e instanceof jt){if(!e.s)return void(e.o=Tt.bind(null,t,o));1&o&&(o=e.s),e=e.v}if(e&&e.then)return void e.then(Tt.bind(null,t,o),Tt.bind(null,t,2));t.s=o,t.v=e;const r=t.o;r&&r(t)}}const jt=function(){function t(){}return t.prototype.then=function(o,e){const r=new t,s=this.s;if(s){const t=1&s?o:e;if(t){try{Tt(r,1,t(this.v))}catch(t){Tt(r,2,t)}return r}return this}return this.o=function(t){try{const s=t.v;1&t.s?Tt(r,1,o?o(s):s):e?Tt(r,1,e(s)):Tt(r,2,s)}catch(t){Tt(r,2,t)}},r},t}();function Nt(t){return t&&"object"==typeof t&&!Array.isArray(t)}function Et(t){var o=[].slice.call(arguments,1);if(!o.length)return t;const e=o.shift();if(Nt(t)&&Nt(e))for(const o in e)Nt(e[o])?(t[o]||Object.assign(t,{[o]:{}}),Et(t[o],e[o])):Object.assign(t,{[o]:e[o]});return Et(t,...o)}const Zt={check_run:{action:"created",check_run:{id:128620228,node_id:"MDg6Q2hlY2tSdW4xMjg2MjAyMjg=",head_sha:"ec26c3e57ca3a959ca5aad62de7213c562f8c821",external_id:"",url:"https://api.github.com/repos/Codertocat/Hello-World/check-runs/128620228",html_url:"https://github.com/Codertocat/Hello-World/runs/128620228",details_url:"https://octocoders.io",status:"queued",conclusion:null,started_at:"2019-05-15T15:21:12Z",completed_at:null,output:{title:null,summary:null,text:null,annotations_count:0,annotations_url:"https://api.github.com/repos/Codertocat/Hello-World/check-runs/128620228/annotations"},name:"Octocoders-linter",check_suite:{id:118578147,node_id:"MDEwOkNoZWNrU3VpdGUxMTg1NzgxNDc=",head_branch:"changes",head_sha:"ec26c3e57ca3a959ca5aad62de7213c562f8c821",status:"queued",conclusion:null,url:"https://api.github.com/repos/Codertocat/Hello-World/check-suites/118578147",before:"6113728f27ae82c7b1a177c8d03f9e96e0adf246",after:"ec26c3e57ca3a959ca5aad62de7213c562f8c821",pull_requests:[{url:"https://api.github.com/repos/Codertocat/Hello-World/pulls/2",id:279147437,number:2,head:{ref:"changes",sha:"ec26c3e57ca3a959ca5aad62de7213c562f8c821",repo:{id:186853002,url:"https://api.github.com/repos/Codertocat/Hello-World",name:"Hello-World"}},base:{ref:"master",sha:"f95f852bd8fca8fcc58a9a2d6c842781e32a215e",repo:{id:186853002,url:"https://api.github.com/repos/Codertocat/Hello-World",name:"Hello-World"}}}],app:{id:29310,node_id:"MDM6QXBwMjkzMTA=",owner:{login:"Octocoders",id:38302899,node_id:"MDEyOk9yZ2FuaXphdGlvbjM4MzAyODk5",avatar_url:"https://avatars1.githubusercontent.com/u/38302899?v=4",gravatar_id:"",url:"https://api.github.com/users/Octocoders",html_url:"https://github.com/Octocoders",followers_url:"https://api.github.com/users/Octocoders/followers",following_url:"https://api.github.com/users/Octocoders/following{/other_user}",gists_url:"https://api.github.com/users/Octocoders/gists{/gist_id}",starred_url:"https://api.github.com/users/Octocoders/starred{/owner}{/repo}",subscriptions_url:"https://api.github.com/users/Octocoders/subscriptions",organizations_url:"https://api.github.com/users/Octocoders/orgs",repos_url:"https://api.github.com/users/Octocoders/repos",events_url:"https://api.github.com/users/Octocoders/events{/privacy}",received_events_url:"https://api.github.com/users/Octocoders/received_events",type:"Organization",site_admin:!1},name:"octocoders-linter",description:"",external_url:"https://octocoders.io",html_url:"https://github.com/apps/octocoders-linter",created_at:"2019-04-19T19:36:24Z",updated_at:"2019-04-19T19:36:56Z",permissions:{administration:"write",checks:"write",contents:"write",deployments:"write",issues:"write",members:"write",metadata:"read",organization_administration:"write",organization_hooks:"write",organization_plan:"read",organization_projects:"write",organization_user_blocking:"write",pages:"write",pull_requests:"write",repository_hooks:"write",repository_projects:"write",statuses:"write",team_discussions:"write",vulnerability_alerts:"read"},events:[]},created_at:"2019-05-15T15:20:31Z",updated_at:"2019-05-15T15:20:31Z"},app:{id:29310,node_id:"MDM6QXBwMjkzMTA=",owner:{login:"Octocoders",id:38302899,node_id:"MDEyOk9yZ2FuaXphdGlvbjM4MzAyODk5",avatar_url:"https://avatars1.githubusercontent.com/u/38302899?v=4",gravatar_id:"",url:"https://api.github.com/users/Octocoders",html_url:"https://github.com/Octocoders",followers_url:"https://api.github.com/users/Octocoders/followers",following_url:"https://api.github.com/users/Octocoders/following{/other_user}",gists_url:"https://api.github.com/users/Octocoders/gists{/gist_id}",starred_url:"https://api.github.com/users/Octocoders/starred{/owner}{/repo}",subscriptions_url:"https://api.github.com/users/Octocoders/subscriptions",organizations_url:"https://api.github.com/users/Octocoders/orgs",repos_url:"https://api.github.com/users/Octocoders/repos",events_url:"https://api.github.com/users/Octocoders/events{/privacy}",received_events_url:"https://api.github.com/users/Octocoders/received_events",type:"Organization",site_admin:!1},name:"octocoders-linter",description:"",external_url:"https://octocoders.io",html_url:"https://github.com/apps/octocoders-linter",created_at:"2019-04-19T19:36:24Z",updated_at:"2019-04-19T19:36:56Z",permissions:{administration:"write",checks:"write",contents:"write",deployments:"write",issues:"write",members:"write",metadata:"read",organization_administration:"write",organization_hooks:"write",organization_plan:"read",organization_projects:"write",organization_user_blocking:"write",pages:"write",pull_requests:"write",repository_hooks:"write",repository_projects:"write",statuses:"write",team_discussions:"write",vulnerability_alerts:"read"},events:[]},pull_requests:[{url:"https://api.github.com/repos/Codertocat/Hello-World/pulls/2",id:279147437,number:2,head:{ref:"changes",sha:"ec26c3e57ca3a959ca5aad62de7213c562f8c821",repo:{id:186853002,url:"https://api.github.com/repos/Codertocat/Hello-World",name:"Hello-World"}},base:{ref:"master",sha:"f95f852bd8fca8fcc58a9a2d6c842781e32a215e",repo:{id:186853002,url:"https://api.github.com/repos/Codertocat/Hello-World",name:"Hello-World"}}}]},repository:{id:186853002,node_id:"MDEwOlJlcG9zaXRvcnkxODY4NTMwMDI=",name:"Hello-World",full_name:"Codertocat/Hello-World",private:!1,owner:{login:"Codertocat",id:21031067,node_id:"MDQ6VXNlcjIxMDMxMDY3",avatar_url:"https://avatars1.githubusercontent.com/u/21031067?v=4",gravatar_id:"",url:"https://api.github.com/users/Codertocat",html_url:"https://github.com/Codertocat",followers_url:"https://api.github.com/users/Codertocat/followers",following_url:"https://api.github.com/users/Codertocat/following{/other_user}",gists_url:"https://api.github.com/users/Codertocat/gists{/gist_id}",starred_url:"https://api.github.com/users/Codertocat/starred{/owner}{/repo}",subscriptions_url:"https://api.github.com/users/Codertocat/subscriptions",organizations_url:"https://api.github.com/users/Codertocat/orgs",repos_url:"https://api.github.com/users/Codertocat/repos",events_url:"https://api.github.com/users/Codertocat/events{/privacy}",received_events_url:"https://api.github.com/users/Codertocat/received_events",type:"User",site_admin:!1},html_url:"https://github.com/Codertocat/Hello-World",description:null,fork:!1,url:"https://api.github.com/repos/Codertocat/Hello-World",forks_url:"https://api.github.com/repos/Codertocat/Hello-World/forks",keys_url:"https://api.github.com/repos/Codertocat/Hello-World/keys{/key_id}",collaborators_url:"https://api.github.com/repos/Codertocat/Hello-World/collaborators{/collaborator}",teams_url:"https://api.github.com/repos/Codertocat/Hello-World/teams",hooks_url:"https://api.github.com/repos/Codertocat/Hello-World/hooks",issue_events_url:"https://api.github.com/repos/Codertocat/Hello-World/issues/events{/number}",events_url:"https://api.github.com/repos/Codertocat/Hello-World/events",assignees_url:"https://api.github.com/repos/Codertocat/Hello-World/assignees{/user}",branches_url:"https://api.github.com/repos/Codertocat/Hello-World/branches{/branch}",tags_url:"https://api.github.com/repos/Codertocat/Hello-World/tags",blobs_url:"https://api.github.com/repos/Codertocat/Hello-World/git/blobs{/sha}",git_tags_url:"https://api.github.com/repos/Codertocat/Hello-World/git/tags{/sha}",git_refs_url:"https://api.github.com/repos/Codertocat/Hello-World/git/refs{/sha}",trees_url:"https://api.github.com/repos/Codertocat/Hello-World/git/trees{/sha}",statuses_url:"https://api.github.com/repos/Codertocat/Hello-World/statuses/{sha}",languages_url:"https://api.github.com/repos/Codertocat/Hello-World/languages",stargazers_url:"https://api.github.com/repos/Codertocat/Hello-World/stargazers",contributors_url:"https://api.github.com/repos/Codertocat/Hello-World/contributors",subscribers_url:"https://api.github.com/repos/Codertocat/Hello-World/subscribers",subscription_url:"https://api.github.com/repos/Codertocat/Hello-World/subscription",commits_url:"https://api.github.com/repos/Codertocat/Hello-World/commits{/sha}",git_commits_url:"https://api.github.com/repos/Codertocat/Hello-World/git/commits{/sha}",comments_url:"https://api.github.com/repos/Codertocat/Hello-World/comments{/number}",issue_comment_url:"https://api.github.com/repos/Codertocat/Hello-World/issues/comments{/number}",contents_url:"https://api.github.com/repos/Codertocat/Hello-World/contents/{+path}",compare_url:"https://api.github.com/repos/Codertocat/Hello-World/compare/{base}...{head}",merges_url:"https://api.github.com/repos/Codertocat/Hello-World/merges",archive_url:"https://api.github.com/repos/Codertocat/Hello-World/{archive_format}{/ref}",downloads_url:"https://api.github.com/repos/Codertocat/Hello-World/downloads",issues_url:"https://api.github.com/repos/Codertocat/Hello-World/issues{/number}",pulls_url:"https://api.github.com/repos/Codertocat/Hello-World/pulls{/number}",milestones_url:"https://api.github.com/repos/Codertocat/Hello-World/milestones{/number}",notifications_url:"https://api.github.com/repos/Codertocat/Hello-World/notifications{?since,all,participating}",labels_url:"https://api.github.com/repos/Codertocat/Hello-World/labels{/name}",releases_url:"https://api.github.com/repos/Codertocat/Hello-World/releases{/id}",deployments_url:"https://api.github.com/repos/Codertocat/Hello-World/deployments",created_at:"2019-05-15T15:19:25Z",updated_at:"2019-05-15T15:21:03Z",pushed_at:"2019-05-15T15:20:57Z",git_url:"git://github.com/Codertocat/Hello-World.git",ssh_url:"git@github.com:Codertocat/Hello-World.git",clone_url:"https://github.com/Codertocat/Hello-World.git",svn_url:"https://github.com/Codertocat/Hello-World",homepage:null,size:0,stargazers_count:0,watchers_count:0,language:"Ruby",has_issues:!0,has_projects:!0,has_downloads:!0,has_wiki:!0,has_pages:!0,forks_count:1,mirror_url:null,archived:!1,disabled:!1,open_issues_count:2,license:null,forks:1,open_issues:2,watchers:0,default_branch:"master"},sender:{login:"Codertocat",id:21031067,node_id:"MDQ6VXNlcjIxMDMxMDY3",avatar_url:"https://avatars1.githubusercontent.com/u/21031067?v=4",gravatar_id:"",url:"https://api.github.com/users/Codertocat",html_url:"https://github.com/Codertocat",followers_url:"https://api.github.com/users/Codertocat/followers",following_url:"https://api.github.com/users/Codertocat/following{/other_user}",gists_url:"https://api.github.com/users/Codertocat/gists{/gist_id}",starred_url:"https://api.github.com/users/Codertocat/starred{/owner}{/repo}",subscriptions_url:"https://api.github.com/users/Codertocat/subscriptions",organizations_url:"https://api.github.com/users/Codertocat/orgs",repos_url:"https://api.github.com/users/Codertocat/repos",events_url:"https://api.github.com/users/Codertocat/events{/privacy}",received_events_url:"https://api.github.com/users/Codertocat/received_events",type:"User",site_admin:!1}},check_suite:{action:"completed",check_suite:{id:118578147,node_id:"MDEwOkNoZWNrU3VpdGUxMTg1NzgxNDc=",head_branch:"changes",head_sha:"ec26c3e57ca3a959ca5aad62de7213c562f8c821",status:"completed",conclusion:"success",url:"https://api.github.com/repos/Codertocat/Hello-World/check-suites/118578147",before:"6113728f27ae82c7b1a177c8d03f9e96e0adf246",after:"ec26c3e57ca3a959ca5aad62de7213c562f8c821",pull_requests:[{url:"https://api.github.com/repos/Codertocat/Hello-World/pulls/2",id:279147437,number:2,head:{ref:"changes",sha:"ec26c3e57ca3a959ca5aad62de7213c562f8c821",repo:{id:186853002,url:"https://api.github.com/repos/Codertocat/Hello-World",name:"Hello-World"}},base:{ref:"master",sha:"f95f852bd8fca8fcc58a9a2d6c842781e32a215e",repo:{id:186853002,url:"https://api.github.com/repos/Codertocat/Hello-World",name:"Hello-World"}}}],app:{id:29310,node_id:"MDM6QXBwMjkzMTA=",owner:{login:"Octocoders",id:38302899,node_id:"MDEyOk9yZ2FuaXphdGlvbjM4MzAyODk5",avatar_url:"https://avatars1.githubusercontent.com/u/38302899?v=4",gravatar_id:"",url:"https://api.github.com/users/Octocoders",html_url:"https://github.com/Octocoders",followers_url:"https://api.github.com/users/Octocoders/followers",following_url:"https://api.github.com/users/Octocoders/following{/other_user}",gists_url:"https://api.github.com/users/Octocoders/gists{/gist_id}",starred_url:"https://api.github.com/users/Octocoders/starred{/owner}{/repo}",subscriptions_url:"https://api.github.com/users/Octocoders/subscriptions",organizations_url:"https://api.github.com/users/Octocoders/orgs",repos_url:"https://api.github.com/users/Octocoders/repos",events_url:"https://api.github.com/users/Octocoders/events{/privacy}",received_events_url:"https://api.github.com/users/Octocoders/received_events",type:"Organization",site_admin:!1},name:"octocoders-linter",description:"",external_url:"https://octocoders.io",html_url:"https://github.com/apps/octocoders-linter",created_at:"2019-04-19T19:36:24Z",updated_at:"2019-04-19T19:36:56Z",permissions:{administration:"write",checks:"write",contents:"write",deployments:"write",issues:"write",members:"write",metadata:"read",organization_administration:"write",organization_hooks:"write",organization_plan:"read",organization_projects:"write",organization_user_blocking:"write",pages:"write",pull_requests:"write",repository_hooks:"write",repository_projects:"write",statuses:"write",team_discussions:"write",vulnerability_alerts:"read"},events:[]},created_at:"2019-05-15T15:20:31Z",updated_at:"2019-05-15T15:21:14Z",latest_check_runs_count:1,check_runs_url:"https://api.github.com/repos/Codertocat/Hello-World/check-suites/118578147/check-runs",head_commit:{id:"ec26c3e57ca3a959ca5aad62de7213c562f8c821",tree_id:"31b122c26a97cf9af023e9ddab94a82c6e77b0ea",message:"Update README.md",timestamp:"2019-05-15T15:20:30Z",author:{name:"Codertocat",email:"21031067+Codertocat@users.noreply.github.com"},committer:{name:"Codertocat",email:"21031067+Codertocat@users.noreply.github.com"}}},repository:{id:186853002,node_id:"MDEwOlJlcG9zaXRvcnkxODY4NTMwMDI=",name:"Hello-World",full_name:"Codertocat/Hello-World",private:!1,owner:{login:"Codertocat",id:21031067,node_id:"MDQ6VXNlcjIxMDMxMDY3",avatar_url:"https://avatars1.githubusercontent.com/u/21031067?v=4",gravatar_id:"",url:"https://api.github.com/users/Codertocat",html_url:"https://github.com/Codertocat",followers_url:"https://api.github.com/users/Codertocat/followers",following_url:"https://api.github.com/users/Codertocat/following{/other_user}",gists_url:"https://api.github.com/users/Codertocat/gists{/gist_id}",starred_url:"https://api.github.com/users/Codertocat/starred{/owner}{/repo}",subscriptions_url:"https://api.github.com/users/Codertocat/subscriptions",organizations_url:"https://api.github.com/users/Codertocat/orgs",repos_url:"https://api.github.com/users/Codertocat/repos",events_url:"https://api.github.com/users/Codertocat/events{/privacy}",received_events_url:"https://api.github.com/users/Codertocat/received_events",type:"User",site_admin:!1},html_url:"https://github.com/Codertocat/Hello-World",description:null,fork:!1,url:"https://api.github.com/repos/Codertocat/Hello-World",forks_url:"https://api.github.com/repos/Codertocat/Hello-World/forks",keys_url:"https://api.github.com/repos/Codertocat/Hello-World/keys{/key_id}",collaborators_url:"https://api.github.com/repos/Codertocat/Hello-World/collaborators{/collaborator}",teams_url:"https://api.github.com/repos/Codertocat/Hello-World/teams",hooks_url:"https://api.github.com/repos/Codertocat/Hello-World/hooks",issue_events_url:"https://api.github.com/repos/Codertocat/Hello-World/issues/events{/number}",events_url:"https://api.github.com/repos/Codertocat/Hello-World/events",assignees_url:"https://api.github.com/repos/Codertocat/Hello-World/assignees{/user}",branches_url:"https://api.github.com/repos/Codertocat/Hello-World/branches{/branch}",tags_url:"https://api.github.com/repos/Codertocat/Hello-World/tags",blobs_url:"https://api.github.com/repos/Codertocat/Hello-World/git/blobs{/sha}",git_tags_url:"https://api.github.com/repos/Codertocat/Hello-World/git/tags{/sha}",git_refs_url:"https://api.github.com/repos/Codertocat/Hello-World/git/refs{/sha}",trees_url:"https://api.github.com/repos/Codertocat/Hello-World/git/trees{/sha}",statuses_url:"https://api.github.com/repos/Codertocat/Hello-World/statuses/{sha}",languages_url:"https://api.github.com/repos/Codertocat/Hello-World/languages",stargazers_url:"https://api.github.com/repos/Codertocat/Hello-World/stargazers",contributors_url:"https://api.github.com/repos/Codertocat/Hello-World/contributors",subscribers_url:"https://api.github.com/repos/Codertocat/Hello-World/subscribers",subscription_url:"https://api.github.com/repos/Codertocat/Hello-World/subscription",commits_url:"https://api.github.com/repos/Codertocat/Hello-World/commits{/sha}",git_commits_url:"https://api.github.com/repos/Codertocat/Hello-World/git/commits{/sha}",comments_url:"https://api.github.com/repos/Codertocat/Hello-World/comments{/number}",issue_comment_url:"https://api.github.com/repos/Codertocat/Hello-World/issues/comments{/number}",contents_url:"https://api.github.com/repos/Codertocat/Hello-World/contents/{+path}",compare_url:"https://api.github.com/repos/Codertocat/Hello-World/compare/{base}...{head}",merges_url:"https://api.github.com/repos/Codertocat/Hello-World/merges",archive_url:"https://api.github.com/repos/Codertocat/Hello-World/{archive_format}{/ref}",downloads_url:"https://api.github.com/repos/Codertocat/Hello-World/downloads",issues_url:"https://api.github.com/repos/Codertocat/Hello-World/issues{/number}",pulls_url:"https://api.github.com/repos/Codertocat/Hello-World/pulls{/number}",milestones_url:"https://api.github.com/repos/Codertocat/Hello-World/milestones{/number}",notifications_url:"https://api.github.com/repos/Codertocat/Hello-World/notifications{?since,all,participating}",labels_url:"https://api.github.com/repos/Codertocat/Hello-World/labels{/name}",releases_url:"https://api.github.com/repos/Codertocat/Hello-World/releases{/id}",deployments_url:"https://api.github.com/repos/Codertocat/Hello-World/deployments",created_at:"2019-05-15T15:19:25Z",updated_at:"2019-05-15T15:21:14Z",pushed_at:"2019-05-15T15:20:57Z",git_url:"git://github.com/Codertocat/Hello-World.git",ssh_url:"git@github.com:Codertocat/Hello-World.git",clone_url:"https://github.com/Codertocat/Hello-World.git",svn_url:"https://github.com/Codertocat/Hello-World",homepage:null,size:0,stargazers_count:0,watchers_count:0,language:"Ruby",has_issues:!0,has_projects:!0,has_downloads:!0,has_wiki:!0,has_pages:!0,forks_count:0,mirror_url:null,archived:!1,disabled:!1,open_issues_count:2,license:null,forks:0,open_issues:2,watchers:0,default_branch:"master"},sender:{login:"Codertocat",id:21031067,node_id:"MDQ6VXNlcjIxMDMxMDY3",avatar_url:"https://avatars1.githubusercontent.com/u/21031067?v=4",gravatar_id:"",url:"https://api.github.com/users/Codertocat",html_url:"https://github.com/Codertocat",followers_url:"https://api.github.com/users/Codertocat/followers",following_url:"https://api.github.com/users/Codertocat/following{/other_user}",gists_url:"https://api.github.com/users/Codertocat/gists{/gist_id}",starred_url:"https://api.github.com/users/Codertocat/starred{/owner}{/repo}",subscriptions_url:"https://api.github.com/users/Codertocat/subscriptions",organizations_url:"https://api.github.com/users/Codertocat/orgs",repos_url:"https://api.github.com/users/Codertocat/repos",events_url:"https://api.github.com/users/Codertocat/events{/privacy}",received_events_url:"https://api.github.com/users/Codertocat/received_events",type:"User",site_admin:!1}},commit_comment:{action:"created",comment:{url:"https://api.github.com/repos/Codertocat/Hello-World/comments/33548674",html_url:"https://github.com/Codertocat/Hello-World/commit/6113728f27ae82c7b1a177c8d03f9e96e0adf246#commitcomment-33548674",id:33548674,node_id:"MDEzOkNvbW1pdENvbW1lbnQzMzU0ODY3NA==",user:{login:"Codertocat",id:21031067,node_id:"MDQ6VXNlcjIxMDMxMDY3",avatar_url:"https://avatars1.githubusercontent.com/u/21031067?v=4",gravatar_id:"",url:"https://api.github.com/users/Codertocat",html_url:"https://github.com/Codertocat",followers_url:"https://api.github.com/users/Codertocat/followers",following_url:"https://api.github.com/users/Codertocat/following{/other_user}",gists_url:"https://api.github.com/users/Codertocat/gists{/gist_id}",starred_url:"https://api.github.com/users/Codertocat/starred{/owner}{/repo}",subscriptions_url:"https://api.github.com/users/Codertocat/subscriptions",organizations_url:"https://api.github.com/users/Codertocat/orgs",repos_url:"https://api.github.com/users/Codertocat/repos",events_url:"https://api.github.com/users/Codertocat/events{/privacy}",received_events_url:"https://api.github.com/users/Codertocat/received_events",type:"User",site_admin:!1},position:null,line:null,path:null,commit_id:"6113728f27ae82c7b1a177c8d03f9e96e0adf246",created_at:"2019-05-15T15:20:39Z",updated_at:"2019-05-15T15:20:39Z",author_association:"OWNER",body:"This is a really good change! :+1:"},repository:{id:186853002,node_id:"MDEwOlJlcG9zaXRvcnkxODY4NTMwMDI=",name:"Hello-World",full_name:"Codertocat/Hello-World",private:!1,owner:{login:"Codertocat",id:21031067,node_id:"MDQ6VXNlcjIxMDMxMDY3",avatar_url:"https://avatars1.githubusercontent.com/u/21031067?v=4",gravatar_id:"",url:"https://api.github.com/users/Codertocat",html_url:"https://github.com/Codertocat",followers_url:"https://api.github.com/users/Codertocat/followers",following_url:"https://api.github.com/users/Codertocat/following{/other_user}",gists_url:"https://api.github.com/users/Codertocat/gists{/gist_id}",starred_url:"https://api.github.com/users/Codertocat/starred{/owner}{/repo}",subscriptions_url:"https://api.github.com/users/Codertocat/subscriptions",organizations_url:"https://api.github.com/users/Codertocat/orgs",repos_url:"https://api.github.com/users/Codertocat/repos",events_url:"https://api.github.com/users/Codertocat/events{/privacy}",received_events_url:"https://api.github.com/users/Codertocat/received_events",type:"User",site_admin:!1},html_url:"https://github.com/Codertocat/Hello-World",description:null,fork:!1,url:"https://api.github.com/repos/Codertocat/Hello-World",forks_url:"https://api.github.com/repos/Codertocat/Hello-World/forks",keys_url:"https://api.github.com/repos/Codertocat/Hello-World/keys{/key_id}",collaborators_url:"https://api.github.com/repos/Codertocat/Hello-World/collaborators{/collaborator}",teams_url:"https://api.github.com/repos/Codertocat/Hello-World/teams",hooks_url:"https://api.github.com/repos/Codertocat/Hello-World/hooks",issue_events_url:"https://api.github.com/repos/Codertocat/Hello-World/issues/events{/number}",events_url:"https://api.github.com/repos/Codertocat/Hello-World/events",assignees_url:"https://api.github.com/repos/Codertocat/Hello-World/assignees{/user}",branches_url:"https://api.github.com/repos/Codertocat/Hello-World/branches{/branch}",tags_url:"https://api.github.com/repos/Codertocat/Hello-World/tags",blobs_url:"https://api.github.com/repos/Codertocat/Hello-World/git/blobs{/sha}",git_tags_url:"https://api.github.com/repos/Codertocat/Hello-World/git/tags{/sha}",git_refs_url:"https://api.github.com/repos/Codertocat/Hello-World/git/refs{/sha}",trees_url:"https://api.github.com/repos/Codertocat/Hello-World/git/trees{/sha}",statuses_url:"https://api.github.com/repos/Codertocat/Hello-World/statuses/{sha}",languages_url:"https://api.github.com/repos/Codertocat/Hello-World/languages",stargazers_url:"https://api.github.com/repos/Codertocat/Hello-World/stargazers",contributors_url:"https://api.github.com/repos/Codertocat/Hello-World/contributors",subscribers_url:"https://api.github.com/repos/Codertocat/Hello-World/subscribers",subscription_url:"https://api.github.com/repos/Codertocat/Hello-World/subscription",commits_url:"https://api.github.com/repos/Codertocat/Hello-World/commits{/sha}",git_commits_url:"https://api.github.com/repos/Codertocat/Hello-World/git/commits{/sha}",comments_url:"https://api.github.com/repos/Codertocat/Hello-World/comments{/number}",issue_comment_url:"https://api.github.com/repos/Codertocat/Hello-World/issues/comments{/number}",contents_url:"https://api.github.com/repos/Codertocat/Hello-World/contents/{+path}",compare_url:"https://api.github.com/repos/Codertocat/Hello-World/compare/{base}...{head}",merges_url:"https://api.github.com/repos/Codertocat/Hello-World/merges",archive_url:"https://api.github.com/repos/Codertocat/Hello-World/{archive_format}{/ref}",downloads_url:"https://api.github.com/repos/Codertocat/Hello-World/downloads",issues_url:"https://api.github.com/repos/Codertocat/Hello-World/issues{/number}",pulls_url:"https://api.github.com/repos/Codertocat/Hello-World/pulls{/number}",milestones_url:"https://api.github.com/repos/Codertocat/Hello-World/milestones{/number}",notifications_url:"https://api.github.com/repos/Codertocat/Hello-World/notifications{?since,all,participating}",labels_url:"https://api.github.com/repos/Codertocat/Hello-World/labels{/name}",releases_url:"https://api.github.com/repos/Codertocat/Hello-World/releases{/id}",deployments_url:"https://api.github.com/repos/Codertocat/Hello-World/deployments",created_at:"2019-05-15T15:19:25Z",updated_at:"2019-05-15T15:20:34Z",pushed_at:"2019-05-15T15:20:33Z",git_url:"git://github.com/Codertocat/Hello-World.git",ssh_url:"git@github.com:Codertocat/Hello-World.git",clone_url:"https://github.com/Codertocat/Hello-World.git",svn_url:"https://github.com/Codertocat/Hello-World",homepage:null,size:0,stargazers_count:0,watchers_count:0,language:"Ruby",has_issues:!0,has_projects:!0,has_downloads:!0,has_wiki:!0,has_pages:!0,forks_count:0,mirror_url:null,archived:!1,disabled:!1,open_issues_count:2,license:null,forks:0,open_issues:2,watchers:0,default_branch:"master"},sender:{login:"Codertocat",id:21031067,node_id:"MDQ6VXNlcjIxMDMxMDY3",avatar_url:"https://avatars1.githubusercontent.com/u/21031067?v=4",gravatar_id:"",url:"https://api.github.com/users/Codertocat",html_url:"https://github.com/Codertocat",followers_url:"https://api.github.com/users/Codertocat/followers",following_url:"https://api.github.com/users/Codertocat/following{/other_user}",gists_url:"https://api.github.com/users/Codertocat/gists{/gist_id}",starred_url:"https://api.github.com/users/Codertocat/starred{/owner}{/repo}",subscriptions_url:"https://api.github.com/users/Codertocat/subscriptions",organizations_url:"https://api.github.com/users/Codertocat/orgs",repos_url:"https://api.github.com/users/Codertocat/repos",events_url:"https://api.github.com/users/Codertocat/events{/privacy}",received_events_url:"https://api.github.com/users/Codertocat/received_events",type:"User",site_admin:!1}},content_reference:{action:"created",content_reference:{id:17,node_id:"MDE2OkNvbnRlbnRSZWZlcmVuY2UxNjA5",reference:"https://errors.ai/"},repository:{id:145551601,node_id:"MDEwOlJlcG9zaXRvcnkxNDU1NTE2MDE=",name:"hello-world",full_name:"octocoders/hello-world",private:!0,owner:{login:"Codertocat",id:7718702,node_id:"MDQ6VXNlcjc3MTg3MDI=",avatar_url:"https://avatars1.githubusercontent.com/u/7718702?v=4",gravatar_id:"",url:"https://api.github.com/users/Codertocat",html_url:"https://github.com/Codertocat",followers_url:"https://api.github.com/users/Codertocat/followers",following_url:"https://api.github.com/users/Codertocat/following{/other_user}",gists_url:"https://api.github.com/users/Codertocat/gists{/gist_id}",starred_url:"https://api.github.com/users/Codertocat/starred{/owner}{/repo}",subscriptions_url:"https://api.github.com/users/Codertocat/subscriptions",organizations_url:"https://api.github.com/users/Codertocat/orgs",repos_url:"https://api.github.com/users/Codertocat/repos",events_url:"https://api.github.com/users/Codertocat/events{/privacy}",received_events_url:"https://api.github.com/users/Codertocat/received_events",type:"User",site_admin:!0},html_url:"https://github.com/Codertocat/hello-world",description:null,fork:!1,url:"https://api.github.com/repos/Codertocat/hello-world",forks_url:"https://api.github.com/repos/Codertocat/hello-world/forks",keys_url:"https://api.github.com/repos/Codertocat/hello-world/keys{/key_id}",collaborators_url:"https://api.github.com/repos/Codertocat/hello-world/collaborators{/collaborator}",teams_url:"https://api.github.com/repos/Codertocat/hello-world/teams",hooks_url:"https://api.github.com/repos/Codertocat/hello-world/hooks",issue_events_url:"https://api.github.com/repos/Codertocat/hello-world/issues/events{/number}",events_url:"https://api.github.com/repos/Codertocat/hello-world/events",assignees_url:"https://api.github.com/repos/Codertocat/hello-world/assignees{/user}",branches_url:"https://api.github.com/repos/Codertocat/hello-world/branches{/branch}",tags_url:"https://api.github.com/repos/Codertocat/hello-world/tags",blobs_url:"https://api.github.com/repos/Codertocat/hello-world/git/blobs{/sha}",git_tags_url:"https://api.github.com/repos/Codertocat/hello-world/git/tags{/sha}",git_refs_url:"https://api.github.com/repos/Codertocat/hello-world/git/refs{/sha}",trees_url:"https://api.github.com/repos/Codertocat/hello-world/git/trees{/sha}",statuses_url:"https://api.github.com/repos/Codertocat/hello-world/statuses/{sha}",languages_url:"https://api.github.com/repos/Codertocat/hello-world/languages",stargazers_url:"https://api.github.com/repos/Codertocat/hello-world/stargazers",contributors_url:"https://api.github.com/repos/Codertocat/hello-world/contributors",subscribers_url:"https://api.github.com/repos/Codertocat/hello-world/subscribers",subscription_url:"https://api.github.com/repos/Codertocat/hello-world/subscription",commits_url:"https://api.github.com/repos/Codertocat/hello-world/commits{/sha}",git_commits_url:"https://api.github.com/repos/Codertocat/hello-world/git/commits{/sha}",comments_url:"https://api.github.com/repos/Codertocat/hello-world/comments{/number}",issue_comment_url:"https://api.github.com/repos/Codertocat/hello-world/issues/comments{/number}",contents_url:"https://api.github.com/repos/Codertocat/hello-world/contents/{+path}",compare_url:"https://api.github.com/repos/Codertocat/hello-world/compare/{base}...{head}",merges_url:"https://api.github.com/repos/Codertocat/hello-world/merges",archive_url:"https://api.github.com/repos/Codertocat/hello-world/{archive_format}{/ref}",downloads_url:"https://api.github.com/repos/Codertocat/hello-world/downloads",issues_url:"https://api.github.com/repos/Codertocat/hello-world/issues{/number}",pulls_url:"https://api.github.com/repos/Codertocat/hello-world/pulls{/number}",milestones_url:"https://api.github.com/repos/Codertocat/hello-world/milestones{/number}",notifications_url:"https://api.github.com/repos/Codertocat/hello-world/notifications{?since,all,participating}",labels_url:"https://api.github.com/repos/Codertocat/hello-world/labels{/name}",releases_url:"https://api.github.com/repos/Codertocat/hello-world/releases{/id}",deployments_url:"https://api.github.com/repos/Codertocat/hello-world/deployments",created_at:"2018-08-21T10:58:58Z",updated_at:"2018-08-21T10:59:01Z",pushed_at:"2018-08-21T10:59:00Z",git_url:"git://github.com/Codertocat/hello-world.git",ssh_url:"git@github.com:Codertocat/hello-world.git",clone_url:"https://github.com/Codertocat/hello-world.git",svn_url:"https://github.com/Codertocat/hello-world",homepage:null,size:0,stargazers_count:0,watchers_count:0,language:null,has_issues:!0,has_projects:!0,has_downloads:!0,has_wiki:!0,has_pages:!1,forks_count:0,mirror_url:null,archived:!1,open_issues_count:2,license:null,forks:0,open_issues:2,watchers:0,default_branch:"master"},sender:{login:"Codertocat",id:7718702,node_id:"MDQ6VXNlcjc3MTg3MDI=",avatar_url:"https://avatars1.githubusercontent.com/u/7718702?v=4",gravatar_id:"",url:"https://api.github.com/users/Codertocat",html_url:"https://github.com/Codertocat",followers_url:"https://api.github.com/users/Codertocat/followers",following_url:"https://api.github.com/users/Codertocat/following{/other_user}",gists_url:"https://api.github.com/users/Codertocat/gists{/gist_id}",starred_url:"https://api.github.com/users/Codertocat/starred{/owner}{/repo}",subscriptions_url:"https://api.github.com/users/Codertocat/subscriptions",organizations_url:"https://api.github.com/users/Codertocat/orgs",repos_url:"https://api.github.com/users/Codertocat/repos",events_url:"https://api.github.com/users/Codertocat/events{/privacy}",received_events_url:"https://api.github.com/users/Codertocat/received_events",type:"User",site_admin:!0},installation:{id:371641,node_id:"MDIzOkludGVncmF0aW9uSW5zdGFsbGF0aW9uMzcxNjQx"}},create:{ref:"simple-tag",ref_type:"tag",master_branch:"master",description:null,pusher_type:"user",repository:{id:186853002,node_id:"MDEwOlJlcG9zaXRvcnkxODY4NTMwMDI=",name:"Hello-World",full_name:"Codertocat/Hello-World",private:!1,owner:{login:"Codertocat",id:21031067,node_id:"MDQ6VXNlcjIxMDMxMDY3",avatar_url:"https://avatars1.githubusercontent.com/u/21031067?v=4",gravatar_id:"",url:"https://api.github.com/users/Codertocat",html_url:"https://github.com/Codertocat",followers_url:"https://api.github.com/users/Codertocat/followers",following_url:"https://api.github.com/users/Codertocat/following{/other_user}",gists_url:"https://api.github.com/users/Codertocat/gists{/gist_id}",starred_url:"https://api.github.com/users/Codertocat/starred{/owner}{/repo}",subscriptions_url:"https://api.github.com/users/Codertocat/subscriptions",organizations_url:"https://api.github.com/users/Codertocat/orgs",repos_url:"https://api.github.com/users/Codertocat/repos",events_url:"https://api.github.com/users/Codertocat/events{/privacy}",received_events_url:"https://api.github.com/users/Codertocat/received_events",type:"User",site_admin:!1},html_url:"https://github.com/Codertocat/Hello-World",description:null,fork:!1,url:"https://api.github.com/repos/Codertocat/Hello-World",forks_url:"https://api.github.com/repos/Codertocat/Hello-World/forks",keys_url:"https://api.github.com/repos/Codertocat/Hello-World/keys{/key_id}",collaborators_url:"https://api.github.com/repos/Codertocat/Hello-World/collaborators{/collaborator}",teams_url:"https://api.github.com/repos/Codertocat/Hello-World/teams",hooks_url:"https://api.github.com/repos/Codertocat/Hello-World/hooks",issue_events_url:"https://api.github.com/repos/Codertocat/Hello-World/issues/events{/number}",events_url:"https://api.github.com/repos/Codertocat/Hello-World/events",assignees_url:"https://api.github.com/repos/Codertocat/Hello-World/assignees{/user}",branches_url:"https://api.github.com/repos/Codertocat/Hello-World/branches{/branch}",tags_url:"https://api.github.com/repos/Codertocat/Hello-World/tags",blobs_url:"https://api.github.com/repos/Codertocat/Hello-World/git/blobs{/sha}",git_tags_url:"https://api.github.com/repos/Codertocat/Hello-World/git/tags{/sha}",git_refs_url:"https://api.github.com/repos/Codertocat/Hello-World/git/refs{/sha}",trees_url:"https://api.github.com/repos/Codertocat/Hello-World/git/trees{/sha}",statuses_url:"https://api.github.com/repos/Codertocat/Hello-World/statuses/{sha}",languages_url:"https://api.github.com/repos/Codertocat/Hello-World/languages",stargazers_url:"https://api.github.com/repos/Codertocat/Hello-World/stargazers",contributors_url:"https://api.github.com/repos/Codertocat/Hello-World/contributors",subscribers_url:"https://api.github.com/repos/Codertocat/Hello-World/subscribers",subscription_url:"https://api.github.com/repos/Codertocat/Hello-World/subscription",commits_url:"https://api.github.com/repos/Codertocat/Hello-World/commits{/sha}",git_commits_url:"https://api.github.com/repos/Codertocat/Hello-World/git/commits{/sha}",comments_url:"https://api.github.com/repos/Codertocat/Hello-World/comments{/number}",issue_comment_url:"https://api.github.com/repos/Codertocat/Hello-World/issues/comments{/number}",contents_url:"https://api.github.com/repos/Codertocat/Hello-World/contents/{+path}",compare_url:"https://api.github.com/repos/Codertocat/Hello-World/compare/{base}...{head}",merges_url:"https://api.github.com/repos/Codertocat/Hello-World/merges",archive_url:"https://api.github.com/repos/Codertocat/Hello-World/{archive_format}{/ref}",downloads_url:"https://api.github.com/repos/Codertocat/Hello-World/downloads",issues_url:"https://api.github.com/repos/Codertocat/Hello-World/issues{/number}",pulls_url:"https://api.github.com/repos/Codertocat/Hello-World/pulls{/number}",milestones_url:"https://api.github.com/repos/Codertocat/Hello-World/milestones{/number}",notifications_url:"https://api.github.com/repos/Codertocat/Hello-World/notifications{?since,all,participating}",labels_url:"https://api.github.com/repos/Codertocat/Hello-World/labels{/name}",releases_url:"https://api.github.com/repos/Codertocat/Hello-World/releases{/id}",deployments_url:"https://api.github.com/repos/Codertocat/Hello-World/deployments",created_at:"2019-05-15T15:19:25Z",updated_at:"2019-05-15T15:20:41Z",pushed_at:"2019-05-15T15:20:56Z",git_url:"git://github.com/Codertocat/Hello-World.git",ssh_url:"git@github.com:Codertocat/Hello-World.git",clone_url:"https://github.com/Codertocat/Hello-World.git",svn_url:"https://github.com/Codertocat/Hello-World",homepage:null,size:0,stargazers_count:0,watchers_count:0,language:"Ruby",has_issues:!0,has_projects:!0,has_downloads:!0,has_wiki:!0,has_pages:!0,forks_count:1,mirror_url:null,archived:!1,disabled:!1,open_issues_count:2,license:null,forks:1,open_issues:2,watchers:0,default_branch:"master"},sender:{login:"Codertocat",id:21031067,node_id:"MDQ6VXNlcjIxMDMxMDY3",avatar_url:"https://avatars1.githubusercontent.com/u/21031067?v=4",gravatar_id:"",url:"https://api.github.com/users/Codertocat",html_url:"https://github.com/Codertocat",followers_url:"https://api.github.com/users/Codertocat/followers",following_url:"https://api.github.com/users/Codertocat/following{/other_user}",gists_url:"https://api.github.com/users/Codertocat/gists{/gist_id}",starred_url:"https://api.github.com/users/Codertocat/starred{/owner}{/repo}",subscriptions_url:"https://api.github.com/users/Codertocat/subscriptions",organizations_url:"https://api.github.com/users/Codertocat/orgs",repos_url:"https://api.github.com/users/Codertocat/repos",events_url:"https://api.github.com/users/Codertocat/events{/privacy}",received_events_url:"https://api.github.com/users/Codertocat/received_events",type:"User",site_admin:!1}},delete:{ref:"simple-tag",ref_type:"tag",pusher_type:"user",repository:{id:186853002,node_id:"MDEwOlJlcG9zaXRvcnkxODY4NTMwMDI=",name:"Hello-World",full_name:"Codertocat/Hello-World",private:!1,owner:{login:"Codertocat",id:21031067,node_id:"MDQ6VXNlcjIxMDMxMDY3",avatar_url:"https://avatars1.githubusercontent.com/u/21031067?v=4",gravatar_id:"",url:"https://api.github.com/users/Codertocat",html_url:"https://github.com/Codertocat",followers_url:"https://api.github.com/users/Codertocat/followers",following_url:"https://api.github.com/users/Codertocat/following{/other_user}",gists_url:"https://api.github.com/users/Codertocat/gists{/gist_id}",starred_url:"https://api.github.com/users/Codertocat/starred{/owner}{/repo}",subscriptions_url:"https://api.github.com/users/Codertocat/subscriptions",organizations_url:"https://api.github.com/users/Codertocat/orgs",repos_url:"https://api.github.com/users/Codertocat/repos",events_url:"https://api.github.com/users/Codertocat/events{/privacy}",received_events_url:"https://api.github.com/users/Codertocat/received_events",type:"User",site_admin:!1},html_url:"https://github.com/Codertocat/Hello-World",description:null,fork:!1,url:"https://api.github.com/repos/Codertocat/Hello-World",forks_url:"https://api.github.com/repos/Codertocat/Hello-World/forks",keys_url:"https://api.github.com/repos/Codertocat/Hello-World/keys{/key_id}",collaborators_url:"https://api.github.com/repos/Codertocat/Hello-World/collaborators{/collaborator}",teams_url:"https://api.github.com/repos/Codertocat/Hello-World/teams",hooks_url:"https://api.github.com/repos/Codertocat/Hello-World/hooks",issue_events_url:"https://api.github.com/repos/Codertocat/Hello-World/issues/events{/number}",events_url:"https://api.github.com/repos/Codertocat/Hello-World/events",assignees_url:"https://api.github.com/repos/Codertocat/Hello-World/assignees{/user}",branches_url:"https://api.github.com/repos/Codertocat/Hello-World/branches{/branch}",tags_url:"https://api.github.com/repos/Codertocat/Hello-World/tags",blobs_url:"https://api.github.com/repos/Codertocat/Hello-World/git/blobs{/sha}",git_tags_url:"https://api.github.com/repos/Codertocat/Hello-World/git/tags{/sha}",git_refs_url:"https://api.github.com/repos/Codertocat/Hello-World/git/refs{/sha}",trees_url:"https://api.github.com/repos/Codertocat/Hello-World/git/trees{/sha}",statuses_url:"https://api.github.com/repos/Codertocat/Hello-World/statuses/{sha}",languages_url:"https://api.github.com/repos/Codertocat/Hello-World/languages",stargazers_url:"https://api.github.com/repos/Codertocat/Hello-World/stargazers",contributors_url:"https://api.github.com/repos/Codertocat/Hello-World/contributors",subscribers_url:"https://api.github.com/repos/Codertocat/Hello-World/subscribers",subscription_url:"https://api.github.com/repos/Codertocat/Hello-World/subscription",commits_url:"https://api.github.com/repos/Codertocat/Hello-World/commits{/sha}",git_commits_url:"https://api.github.com/repos/Codertocat/Hello-World/git/commits{/sha}",comments_url:"https://api.github.com/repos/Codertocat/Hello-World/comments{/number}",issue_comment_url:"https://api.github.com/repos/Codertocat/Hello-World/issues/comments{/number}",contents_url:"https://api.github.com/repos/Codertocat/Hello-World/contents/{+path}",compare_url:"https://api.github.com/repos/Codertocat/Hello-World/compare/{base}...{head}",merges_url:"https://api.github.com/repos/Codertocat/Hello-World/merges",archive_url:"https://api.github.com/repos/Codertocat/Hello-World/{archive_format}{/ref}",downloads_url:"https://api.github.com/repos/Codertocat/Hello-World/downloads",issues_url:"https://api.github.com/repos/Codertocat/Hello-World/issues{/number}",pulls_url:"https://api.github.com/repos/Codertocat/Hello-World/pulls{/number}",milestones_url:"https://api.github.com/repos/Codertocat/Hello-World/milestones{/number}",notifications_url:"https://api.github.com/repos/Codertocat/Hello-World/notifications{?since,all,participating}",labels_url:"https://api.github.com/repos/Codertocat/Hello-World/labels{/name}",releases_url:"https://api.github.com/repos/Codertocat/Hello-World/releases{/id}",deployments_url:"https://api.github.com/repos/Codertocat/Hello-World/deployments",created_at:"2019-05-15T15:19:25Z",updated_at:"2019-05-15T15:20:41Z",pushed_at:"2019-05-15T15:20:57Z",git_url:"git://github.com/Codertocat/Hello-World.git",ssh_url:"git@github.com:Codertocat/Hello-World.git",clone_url:"https://github.com/Codertocat/Hello-World.git",svn_url:"https://github.com/Codertocat/Hello-World",homepage:null,size:0,stargazers_count:0,watchers_count:0,language:"Ruby",has_issues:!0,has_projects:!0,has_downloads:!0,has_wiki:!0,has_pages:!0,forks_count:1,mirror_url:null,archived:!1,disabled:!1,open_issues_count:2,license:null,forks:1,open_issues:2,watchers:0,default_branch:"master"},sender:{login:"Codertocat",id:21031067,node_id:"MDQ6VXNlcjIxMDMxMDY3",avatar_url:"https://avatars1.githubusercontent.com/u/21031067?v=4",gravatar_id:"",url:"https://api.github.com/users/Codertocat",html_url:"https://github.com/Codertocat",followers_url:"https://api.github.com/users/Codertocat/followers",following_url:"https://api.github.com/users/Codertocat/following{/other_user}",gists_url:"https://api.github.com/users/Codertocat/gists{/gist_id}",starred_url:"https://api.github.com/users/Codertocat/starred{/owner}{/repo}",subscriptions_url:"https://api.github.com/users/Codertocat/subscriptions",organizations_url:"https://api.github.com/users/Codertocat/orgs",repos_url:"https://api.github.com/users/Codertocat/repos",events_url:"https://api.github.com/users/Codertocat/events{/privacy}",received_events_url:"https://api.github.com/users/Codertocat/received_events",type:"User",site_admin:!1}},deploy_key:{action:"created",key:{id:100,key:"ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQConScVc7ouWWgwcjneNnJ4PScDkkwEjuDL5leLIUU5aIg13dH55/f4aqKUSvfcLUOKJ0a8073tFqMbR9rfvLAhLGeStKxmYApJXpzVkphauu7kfNW8kQNi1fI4kmHyOpQ+dKtoonzjZAT4L9AV3FlVTOfRq3U8wJ2RPwU+4EtOpMKUF+wcoDJ5ONlKBOW6uAeBt/guBiu6r3awDClDGRo4Q2YCmMceiAyoiuXcr2mFNSyzTqU1f20fftFwucV/VqnxlJjZvZ/zhlfB+v+UgQN11pJJ5vChZ7bzyRtIRRsjxbTReyWxqVZ5hEle5sm1oAR97abW9zTWfwIABgClKo+z",url:"https://api.github.com/repos/Codertocat/Hello-World/keys/100",title:"hey-its-a-deploy-key",verified:!0,created_at:"2019-04-02T17:37:07Z",read_only:!0},repository:{id:135493233,node_id:"MDEwOlJlcG9zaXRvcnkxMzU0OTMyMzM=",name:"Hello-World",full_name:"Codertocat/Hello-World",owner:{login:"Codertocat",id:21031067,node_id:"MDQ6VXNlcjIxMDMxMDY3",avatar_url:"https://avatars1.githubusercontent.com/u/21031067?v=4",gravatar_id:"",url:"https://api.github.com/users/Codertocat",html_url:"https://github.com/Codertocat",followers_url:"https://api.github.com/users/Codertocat/followers",following_url:"https://api.github.com/users/Codertocat/following{/other_user}",gists_url:"https://api.github.com/users/Codertocat/gists{/gist_id}",starred_url:"https://api.github.com/users/Codertocat/starred{/owner}{/repo}",subscriptions_url:"https://api.github.com/users/Codertocat/subscriptions",organizations_url:"https://api.github.com/users/Codertocat/orgs",repos_url:"https://api.github.com/users/Codertocat/repos",events_url:"https://api.github.com/users/Codertocat/events{/privacy}",received_events_url:"https://api.github.com/users/Codertocat/received_events",type:"User",site_admin:!1},private:!1,html_url:"https://github.com/Codertocat/Hello-World",description:null,fork:!1,url:"https://api.github.com/repos/Codertocat/Hello-World",forks_url:"https://api.github.com/repos/Codertocat/Hello-World/forks",keys_url:"https://api.github.com/repos/Codertocat/Hello-World/keys{/key_id}",collaborators_url:"https://api.github.com/repos/Codertocat/Hello-World/collaborators{/collaborator}",teams_url:"https://api.github.com/repos/Codertocat/Hello-World/teams",hooks_url:"https://api.github.com/repos/Codertocat/Hello-World/hooks",issue_events_url:"https://api.github.com/repos/Codertocat/Hello-World/issues/events{/number}",events_url:"https://api.github.com/repos/Codertocat/Hello-World/events",assignees_url:"https://api.github.com/repos/Codertocat/Hello-World/assignees{/user}",branches_url:"https://api.github.com/repos/Codertocat/Hello-World/branches{/branch}",tags_url:"https://api.github.com/repos/Codertocat/Hello-World/tags",blobs_url:"https://api.github.com/repos/Codertocat/Hello-World/git/blobs{/sha}",git_tags_url:"https://api.github.com/repos/Codertocat/Hello-World/git/tags{/sha}",git_refs_url:"https://api.github.com/repos/Codertocat/Hello-World/git/refs{/sha}",trees_url:"https://api.github.com/repos/Codertocat/Hello-World/git/trees{/sha}",statuses_url:"https://api.github.com/repos/Codertocat/Hello-World/statuses/{sha}",languages_url:"https://api.github.com/repos/Codertocat/Hello-World/languages",stargazers_url:"https://api.github.com/repos/Codertocat/Hello-World/stargazers",contributors_url:"https://api.github.com/repos/Codertocat/Hello-World/contributors",subscribers_url:"https://api.github.com/repos/Codertocat/Hello-World/subscribers",subscription_url:"https://api.github.com/repos/Codertocat/Hello-World/subscription",commits_url:"https://api.github.com/repos/Codertocat/Hello-World/commits{/sha}",git_commits_url:"https://api.github.com/repos/Codertocat/Hello-World/git/commits{/sha}",comments_url:"https://api.github.com/repos/Codertocat/Hello-World/comments{/number}",issue_comment_url:"https://api.github.com/repos/Codertocat/Hello-World/issues/comments{/number}",contents_url:"https://api.github.com/repos/Codertocat/Hello-World/contents/{+path}",compare_url:"https://api.github.com/repos/Codertocat/Hello-World/compare/{base}...{head}",merges_url:"https://api.github.com/repos/Codertocat/Hello-World/merges",archive_url:"https://api.github.com/repos/Codertocat/Hello-World/{archive_format}{/ref}",downloads_url:"https://api.github.com/repos/Codertocat/Hello-World/downloads",issues_url:"https://api.github.com/repos/Codertocat/Hello-World/issues{/number}",pulls_url:"https://api.github.com/repos/Codertocat/Hello-World/pulls{/number}",milestones_url:"https://api.github.com/repos/Codertocat/Hello-World/milestones{/number}",notifications_url:"https://api.github.com/repos/Codertocat/Hello-World/notifications{?since,all,participating}",labels_url:"https://api.github.com/repos/Codertocat/Hello-World/labels{/name}",releases_url:"https://api.github.com/repos/Codertocat/Hello-World/releases{/id}",deployments_url:"https://api.github.com/repos/Codertocat/Hello-World/deployments",created_at:"2018-05-30T20:18:04Z",updated_at:"2018-05-30T20:18:50Z",pushed_at:"2018-05-30T20:18:48Z",git_url:"git://github.com/Codertocat/Hello-World.git",ssh_url:"git@github.com:Codertocat/Hello-World.git",clone_url:"https://github.com/Codertocat/Hello-World.git",svn_url:"https://github.com/Codertocat/Hello-World",homepage:null,size:0,stargazers_count:0,watchers_count:0,language:null,has_issues:!0,has_projects:!0,has_downloads:!0,has_wiki:!0,has_pages:!0,forks_count:0,mirror_url:null,archived:!1,open_issues_count:1,license:null,forks:0,open_issues:1,watchers:0,default_branch:"master"},sender:{login:"Codertocat",id:21031067,node_id:"MDQ6VXNlcjIxMDMxMDY3",avatar_url:"https://avatars1.githubusercontent.com/u/21031067?v=4",gravatar_id:"",url:"https://api.github.com/users/Codertocat",html_url:"https://github.com/Codertocat",followers_url:"https://api.github.com/users/Codertocat/followers",following_url:"https://api.github.com/users/Codertocat/following{/other_user}",gists_url:"https://api.github.com/users/Codertocat/gists{/gist_id}",starred_url:"https://api.github.com/users/Codertocat/starred{/owner}{/repo}",subscriptions_url:"https://api.github.com/users/Codertocat/subscriptions",organizations_url:"https://api.github.com/users/Codertocat/orgs",repos_url:"https://api.github.com/users/Codertocat/repos",events_url:"https://api.github.com/users/Codertocat/events{/privacy}",received_events_url:"https://api.github.com/users/Codertocat/received_events",type:"User",site_admin:!1}},deployment:{action:"created",deployment:{url:"https://api.github.com/repos/Codertocat/Hello-World/deployments/145988746",id:145988746,node_id:"MDEwOkRlcGxveW1lbnQxNDU5ODg3NDY=",sha:"f95f852bd8fca8fcc58a9a2d6c842781e32a215e",ref:"master",task:"deploy",payload:{},original_environment:"production",environment:"production",description:null,creator:{login:"Codertocat",id:21031067,node_id:"MDQ6VXNlcjIxMDMxMDY3",avatar_url:"https://avatars1.githubusercontent.com/u/21031067?v=4",gravatar_id:"",url:"https://api.github.com/users/Codertocat",html_url:"https://github.com/Codertocat",followers_url:"https://api.github.com/users/Codertocat/followers",following_url:"https://api.github.com/users/Codertocat/following{/other_user}",gists_url:"https://api.github.com/users/Codertocat/gists{/gist_id}",starred_url:"https://api.github.com/users/Codertocat/starred{/owner}{/repo}",subscriptions_url:"https://api.github.com/users/Codertocat/subscriptions",organizations_url:"https://api.github.com/users/Codertocat/orgs",repos_url:"https://api.github.com/users/Codertocat/repos",events_url:"https://api.github.com/users/Codertocat/events{/privacy}",received_events_url:"https://api.github.com/users/Codertocat/received_events",type:"User",site_admin:!1},created_at:"2019-05-15T15:20:53Z",updated_at:"2019-05-15T15:20:53Z",statuses_url:"https://api.github.com/repos/Codertocat/Hello-World/deployments/145988746/statuses",repository_url:"https://api.github.com/repos/Codertocat/Hello-World"},repository:{id:186853002,node_id:"MDEwOlJlcG9zaXRvcnkxODY4NTMwMDI=",name:"Hello-World",full_name:"Codertocat/Hello-World",private:!1,owner:{login:"Codertocat",id:21031067,node_id:"MDQ6VXNlcjIxMDMxMDY3",avatar_url:"https://avatars1.githubusercontent.com/u/21031067?v=4",gravatar_id:"",url:"https://api.github.com/users/Codertocat",html_url:"https://github.com/Codertocat",followers_url:"https://api.github.com/users/Codertocat/followers",following_url:"https://api.github.com/users/Codertocat/following{/other_user}",gists_url:"https://api.github.com/users/Codertocat/gists{/gist_id}",starred_url:"https://api.github.com/users/Codertocat/starred{/owner}{/repo}",subscriptions_url:"https://api.github.com/users/Codertocat/subscriptions",organizations_url:"https://api.github.com/users/Codertocat/orgs",repos_url:"https://api.github.com/users/Codertocat/repos",events_url:"https://api.github.com/users/Codertocat/events{/privacy}",received_events_url:"https://api.github.com/users/Codertocat/received_events",type:"User",site_admin:!1},html_url:"https://github.com/Codertocat/Hello-World",description:null,fork:!1,url:"https://api.github.com/repos/Codertocat/Hello-World",forks_url:"https://api.github.com/repos/Codertocat/Hello-World/forks",keys_url:"https://api.github.com/repos/Codertocat/Hello-World/keys{/key_id}",collaborators_url:"https://api.github.com/repos/Codertocat/Hello-World/collaborators{/collaborator}",teams_url:"https://api.github.com/repos/Codertocat/Hello-World/teams",hooks_url:"https://api.github.com/repos/Codertocat/Hello-World/hooks",issue_events_url:"https://api.github.com/repos/Codertocat/Hello-World/issues/events{/number}",events_url:"https://api.github.com/repos/Codertocat/Hello-World/events",assignees_url:"https://api.github.com/repos/Codertocat/Hello-World/assignees{/user}",branches_url:"https://api.github.com/repos/Codertocat/Hello-World/branches{/branch}",tags_url:"https://api.github.com/repos/Codertocat/Hello-World/tags",blobs_url:"https://api.github.com/repos/Codertocat/Hello-World/git/blobs{/sha}",git_tags_url:"https://api.github.com/repos/Codertocat/Hello-World/git/tags{/sha}",git_refs_url:"https://api.github.com/repos/Codertocat/Hello-World/git/refs{/sha}",trees_url:"https://api.github.com/repos/Codertocat/Hello-World/git/trees{/sha}",statuses_url:"https://api.github.com/repos/Codertocat/Hello-World/statuses/{sha}",languages_url:"https://api.github.com/repos/Codertocat/Hello-World/languages",stargazers_url:"https://api.github.com/repos/Codertocat/Hello-World/stargazers",contributors_url:"https://api.github.com/repos/Codertocat/Hello-World/contributors",subscribers_url:"https://api.github.com/repos/Codertocat/Hello-World/subscribers",subscription_url:"https://api.github.com/repos/Codertocat/Hello-World/subscription",commits_url:"https://api.github.com/repos/Codertocat/Hello-World/commits{/sha}",git_commits_url:"https://api.github.com/repos/Codertocat/Hello-World/git/commits{/sha}",comments_url:"https://api.github.com/repos/Codertocat/Hello-World/comments{/number}",issue_comment_url:"https://api.github.com/repos/Codertocat/Hello-World/issues/comments{/number}",contents_url:"https://api.github.com/repos/Codertocat/Hello-World/contents/{+path}",compare_url:"https://api.github.com/repos/Codertocat/Hello-World/compare/{base}...{head}",merges_url:"https://api.github.com/repos/Codertocat/Hello-World/merges",archive_url:"https://api.github.com/repos/Codertocat/Hello-World/{archive_format}{/ref}",downloads_url:"https://api.github.com/repos/Codertocat/Hello-World/downloads",issues_url:"https://api.github.com/repos/Codertocat/Hello-World/issues{/number}",pulls_url:"https://api.github.com/repos/Codertocat/Hello-World/pulls{/number}",milestones_url:"https://api.github.com/repos/Codertocat/Hello-World/milestones{/number}",notifications_url:"https://api.github.com/repos/Codertocat/Hello-World/notifications{?since,all,participating}",labels_url:"https://api.github.com/repos/Codertocat/Hello-World/labels{/name}",releases_url:"https://api.github.com/repos/Codertocat/Hello-World/releases{/id}",deployments_url:"https://api.github.com/repos/Codertocat/Hello-World/deployments",created_at:"2019-05-15T15:19:25Z",updated_at:"2019-05-15T15:20:41Z",pushed_at:"2019-05-15T15:20:52Z",git_url:"git://github.com/Codertocat/Hello-World.git",ssh_url:"git@github.com:Codertocat/Hello-World.git",clone_url:"https://github.com/Codertocat/Hello-World.git",svn_url:"https://github.com/Codertocat/Hello-World",homepage:null,size:0,stargazers_count:0,watchers_count:0,language:"Ruby",has_issues:!0,has_projects:!0,has_downloads:!0,has_wiki:!0,has_pages:!0,forks_count:1,mirror_url:null,archived:!1,disabled:!1,open_issues_count:2,license:null,forks:1,open_issues:2,watchers:0,default_branch:"master"},sender:{login:"Codertocat",id:21031067,node_id:"MDQ6VXNlcjIxMDMxMDY3",avatar_url:"https://avatars1.githubusercontent.com/u/21031067?v=4",gravatar_id:"",url:"https://api.github.com/users/Codertocat",html_url:"https://github.com/Codertocat",followers_url:"https://api.github.com/users/Codertocat/followers",following_url:"https://api.github.com/users/Codertocat/following{/other_user}",gists_url:"https://api.github.com/users/Codertocat/gists{/gist_id}",starred_url:"https://api.github.com/users/Codertocat/starred{/owner}{/repo}",subscriptions_url:"https://api.github.com/users/Codertocat/subscriptions",organizations_url:"https://api.github.com/users/Codertocat/orgs",repos_url:"https://api.github.com/users/Codertocat/repos",events_url:"https://api.github.com/users/Codertocat/events{/privacy}",received_events_url:"https://api.github.com/users/Codertocat/received_events",type:"User",site_admin:!1}},deployment_status:{action:"created",deployment_status:{url:"https://api.github.com/repos/Codertocat/Hello-World/deployments/145988746/statuses/209916254",id:209916254,node_id:"MDE2OkRlcGxveW1lbnRTdGF0dXMyMDk5MTYyNTQ=",state:"success",creator:{login:"Codertocat",id:21031067,node_id:"MDQ6VXNlcjIxMDMxMDY3",avatar_url:"https://avatars1.githubusercontent.com/u/21031067?v=4",gravatar_id:"",url:"https://api.github.com/users/Codertocat",html_url:"https://github.com/Codertocat",followers_url:"https://api.github.com/users/Codertocat/followers",following_url:"https://api.github.com/users/Codertocat/following{/other_user}",gists_url:"https://api.github.com/users/Codertocat/gists{/gist_id}",starred_url:"https://api.github.com/users/Codertocat/starred{/owner}{/repo}",subscriptions_url:"https://api.github.com/users/Codertocat/subscriptions",organizations_url:"https://api.github.com/users/Codertocat/orgs",repos_url:"https://api.github.com/users/Codertocat/repos",events_url:"https://api.github.com/users/Codertocat/events{/privacy}",received_events_url:"https://api.github.com/users/Codertocat/received_events",type:"User",site_admin:!1},description:"",environment:"production",target_url:"",created_at:"2019-05-15T15:20:55Z",updated_at:"2019-05-15T15:20:55Z",deployment_url:"https://api.github.com/repos/Codertocat/Hello-World/deployments/145988746",repository_url:"https://api.github.com/repos/Codertocat/Hello-World"},deployment:{url:"https://api.github.com/repos/Codertocat/Hello-World/deployments/145988746",id:145988746,node_id:"MDEwOkRlcGxveW1lbnQxNDU5ODg3NDY=",sha:"f95f852bd8fca8fcc58a9a2d6c842781e32a215e",ref:"master",task:"deploy",payload:{},original_environment:"production",environment:"production",description:null,creator:{login:"Codertocat",id:21031067,node_id:"MDQ6VXNlcjIxMDMxMDY3",avatar_url:"https://avatars1.githubusercontent.com/u/21031067?v=4",gravatar_id:"",url:"https://api.github.com/users/Codertocat",html_url:"https://github.com/Codertocat",followers_url:"https://api.github.com/users/Codertocat/followers",following_url:"https://api.github.com/users/Codertocat/following{/other_user}",gists_url:"https://api.github.com/users/Codertocat/gists{/gist_id}",starred_url:"https://api.github.com/users/Codertocat/starred{/owner}{/repo}",subscriptions_url:"https://api.github.com/users/Codertocat/subscriptions",organizations_url:"https://api.github.com/users/Codertocat/orgs",repos_url:"https://api.github.com/users/Codertocat/repos",events_url:"https://api.github.com/users/Codertocat/events{/privacy}",received_events_url:"https://api.github.com/users/Codertocat/received_events",type:"User",site_admin:!1},created_at:"2019-05-15T15:20:53Z",updated_at:"2019-05-15T15:20:55Z",statuses_url:"https://api.github.com/repos/Codertocat/Hello-World/deployments/145988746/statuses",repository_url:"https://api.github.com/repos/Codertocat/Hello-World"},repository:{id:186853002,node_id:"MDEwOlJlcG9zaXRvcnkxODY4NTMwMDI=",name:"Hello-World",full_name:"Codertocat/Hello-World",private:!1,owner:{login:"Codertocat",id:21031067,node_id:"MDQ6VXNlcjIxMDMxMDY3",avatar_url:"https://avatars1.githubusercontent.com/u/21031067?v=4",gravatar_id:"",url:"https://api.github.com/users/Codertocat",html_url:"https://github.com/Codertocat",followers_url:"https://api.github.com/users/Codertocat/followers",following_url:"https://api.github.com/users/Codertocat/following{/other_user}",gists_url:"https://api.github.com/users/Codertocat/gists{/gist_id}",starred_url:"https://api.github.com/users/Codertocat/starred{/owner}{/repo}",subscriptions_url:"https://api.github.com/users/Codertocat/subscriptions",organizations_url:"https://api.github.com/users/Codertocat/orgs",repos_url:"https://api.github.com/users/Codertocat/repos",events_url:"https://api.github.com/users/Codertocat/events{/privacy}",received_events_url:"https://api.github.com/users/Codertocat/received_events",type:"User",site_admin:!1},html_url:"https://github.com/Codertocat/Hello-World",description:null,fork:!1,url:"https://api.github.com/repos/Codertocat/Hello-World",forks_url:"https://api.github.com/repos/Codertocat/Hello-World/forks",keys_url:"https://api.github.com/repos/Codertocat/Hello-World/keys{/key_id}",collaborators_url:"https://api.github.com/repos/Codertocat/Hello-World/collaborators{/collaborator}",teams_url:"https://api.github.com/repos/Codertocat/Hello-World/teams",hooks_url:"https://api.github.com/repos/Codertocat/Hello-World/hooks",issue_events_url:"https://api.github.com/repos/Codertocat/Hello-World/issues/events{/number}",events_url:"https://api.github.com/repos/Codertocat/Hello-World/events",assignees_url:"https://api.github.com/repos/Codertocat/Hello-World/assignees{/user}",branches_url:"https://api.github.com/repos/Codertocat/Hello-World/branches{/branch}",tags_url:"https://api.github.com/repos/Codertocat/Hello-World/tags",blobs_url:"https://api.github.com/repos/Codertocat/Hello-World/git/blobs{/sha}",git_tags_url:"https://api.github.com/repos/Codertocat/Hello-World/git/tags{/sha}",git_refs_url:"https://api.github.com/repos/Codertocat/Hello-World/git/refs{/sha}",trees_url:"https://api.github.com/repos/Codertocat/Hello-World/git/trees{/sha}",statuses_url:"https://api.github.com/repos/Codertocat/Hello-World/statuses/{sha}",languages_url:"https://api.github.com/repos/Codertocat/Hello-World/languages",stargazers_url:"https://api.github.com/repos/Codertocat/Hello-World/stargazers",contributors_url:"https://api.github.com/repos/Codertocat/Hello-World/contributors",subscribers_url:"https://api.github.com/repos/Codertocat/Hello-World/subscribers",subscription_url:"https://api.github.com/repos/Codertocat/Hello-World/subscription",commits_url:"https://api.github.com/repos/Codertocat/Hello-World/commits{/sha}",git_commits_url:"https://api.github.com/repos/Codertocat/Hello-World/git/commits{/sha}",comments_url:"https://api.github.com/repos/Codertocat/Hello-World/comments{/number}",issue_comment_url:"https://api.github.com/repos/Codertocat/Hello-World/issues/comments{/number}",contents_url:"https://api.github.com/repos/Codertocat/Hello-World/contents/{+path}",compare_url:"https://api.github.com/repos/Codertocat/Hello-World/compare/{base}...{head}",merges_url:"https://api.github.com/repos/Codertocat/Hello-World/merges",archive_url:"https://api.github.com/repos/Codertocat/Hello-World/{archive_format}{/ref}",downloads_url:"https://api.github.com/repos/Codertocat/Hello-World/downloads",issues_url:"https://api.github.com/repos/Codertocat/Hello-World/issues{/number}",pulls_url:"https://api.github.com/repos/Codertocat/Hello-World/pulls{/number}",milestones_url:"https://api.github.com/repos/Codertocat/Hello-World/milestones{/number}",notifications_url:"https://api.github.com/repos/Codertocat/Hello-World/notifications{?since,all,participating}",labels_url:"https://api.github.com/repos/Codertocat/Hello-World/labels{/name}",releases_url:"https://api.github.com/repos/Codertocat/Hello-World/releases{/id}",deployments_url:"https://api.github.com/repos/Codertocat/Hello-World/deployments",created_at:"2019-05-15T15:19:25Z",updated_at:"2019-05-15T15:20:41Z",pushed_at:"2019-05-15T15:20:52Z",git_url:"git://github.com/Codertocat/Hello-World.git",ssh_url:"git@github.com:Codertocat/Hello-World.git",clone_url:"https://github.com/Codertocat/Hello-World.git",svn_url:"https://github.com/Codertocat/Hello-World",homepage:null,size:0,stargazers_count:0,watchers_count:0,language:"Ruby",has_issues:!0,has_projects:!0,has_downloads:!0,has_wiki:!0,has_pages:!0,forks_count:1,mirror_url:null,archived:!1,disabled:!1,open_issues_count:2,license:null,forks:1,open_issues:2,watchers:0,default_branch:"master"},sender:{login:"Codertocat",id:21031067,node_id:"MDQ6VXNlcjIxMDMxMDY3",avatar_url:"https://avatars1.githubusercontent.com/u/21031067?v=4",gravatar_id:"",url:"https://api.github.com/users/Codertocat",html_url:"https://github.com/Codertocat",followers_url:"https://api.github.com/users/Codertocat/followers",following_url:"https://api.github.com/users/Codertocat/following{/other_user}",gists_url:"https://api.github.com/users/Codertocat/gists{/gist_id}",starred_url:"https://api.github.com/users/Codertocat/starred{/owner}{/repo}",subscriptions_url:"https://api.github.com/users/Codertocat/subscriptions",organizations_url:"https://api.github.com/users/Codertocat/orgs",repos_url:"https://api.github.com/users/Codertocat/repos",events_url:"https://api.github.com/users/Codertocat/events{/privacy}",received_events_url:"https://api.github.com/users/Codertocat/received_events",type:"User",site_admin:!1}},fork:{forkee:{id:186853261,node_id:"MDEwOlJlcG9zaXRvcnkxODY4NTMyNjE=",name:"Hello-World",full_name:"Octocoders/Hello-World",private:!1,owner:{login:"Octocoders",id:38302899,node_id:"MDEyOk9yZ2FuaXphdGlvbjM4MzAyODk5",avatar_url:"https://avatars1.githubusercontent.com/u/38302899?v=4",gravatar_id:"",url:"https://api.github.com/users/Octocoders",html_url:"https://github.com/Octocoders",followers_url:"https://api.github.com/users/Octocoders/followers",following_url:"https://api.github.com/users/Octocoders/following{/other_user}",gists_url:"https://api.github.com/users/Octocoders/gists{/gist_id}",starred_url:"https://api.github.com/users/Octocoders/starred{/owner}{/repo}",subscriptions_url:"https://api.github.com/users/Octocoders/subscriptions",organizations_url:"https://api.github.com/users/Octocoders/orgs",repos_url:"https://api.github.com/users/Octocoders/repos",events_url:"https://api.github.com/users/Octocoders/events{/privacy}",received_events_url:"https://api.github.com/users/Octocoders/received_events",type:"Organization",site_admin:!1},html_url:"https://github.com/Octocoders/Hello-World",description:null,fork:!0,url:"https://api.github.com/repos/Octocoders/Hello-World",forks_url:"https://api.github.com/repos/Octocoders/Hello-World/forks",keys_url:"https://api.github.com/repos/Octocoders/Hello-World/keys{/key_id}",collaborators_url:"https://api.github.com/repos/Octocoders/Hello-World/collaborators{/collaborator}",teams_url:"https://api.github.com/repos/Octocoders/Hello-World/teams",hooks_url:"https://api.github.com/repos/Octocoders/Hello-World/hooks",issue_events_url:"https://api.github.com/repos/Octocoders/Hello-World/issues/events{/number}",events_url:"https://api.github.com/repos/Octocoders/Hello-World/events",assignees_url:"https://api.github.com/repos/Octocoders/Hello-World/assignees{/user}",branches_url:"https://api.github.com/repos/Octocoders/Hello-World/branches{/branch}",tags_url:"https://api.github.com/repos/Octocoders/Hello-World/tags",blobs_url:"https://api.github.com/repos/Octocoders/Hello-World/git/blobs{/sha}",git_tags_url:"https://api.github.com/repos/Octocoders/Hello-World/git/tags{/sha}",git_refs_url:"https://api.github.com/repos/Octocoders/Hello-World/git/refs{/sha}",trees_url:"https://api.github.com/repos/Octocoders/Hello-World/git/trees{/sha}",statuses_url:"https://api.github.com/repos/Octocoders/Hello-World/statuses/{sha}",languages_url:"https://api.github.com/repos/Octocoders/Hello-World/languages",stargazers_url:"https://api.github.com/repos/Octocoders/Hello-World/stargazers",contributors_url:"https://api.github.com/repos/Octocoders/Hello-World/contributors",subscribers_url:"https://api.github.com/repos/Octocoders/Hello-World/subscribers",subscription_url:"https://api.github.com/repos/Octocoders/Hello-World/subscription",commits_url:"https://api.github.com/repos/Octocoders/Hello-World/commits{/sha}",git_commits_url:"https://api.github.com/repos/Octocoders/Hello-World/git/commits{/sha}",comments_url:"https://api.github.com/repos/Octocoders/Hello-World/comments{/number}",issue_comment_url:"https://api.github.com/repos/Octocoders/Hello-World/issues/comments{/number}",contents_url:"https://api.github.com/repos/Octocoders/Hello-World/contents/{+path}",compare_url:"https://api.github.com/repos/Octocoders/Hello-World/compare/{base}...{head}",merges_url:"https://api.github.com/repos/Octocoders/Hello-World/merges",archive_url:"https://api.github.com/repos/Octocoders/Hello-World/{archive_format}{/ref}",downloads_url:"https://api.github.com/repos/Octocoders/Hello-World/downloads",issues_url:"https://api.github.com/repos/Octocoders/Hello-World/issues{/number}",pulls_url:"https://api.github.com/repos/Octocoders/Hello-World/pulls{/number}",milestones_url:"https://api.github.com/repos/Octocoders/Hello-World/milestones{/number}",notifications_url:"https://api.github.com/repos/Octocoders/Hello-World/notifications{?since,all,participating}",labels_url:"https://api.github.com/repos/Octocoders/Hello-World/labels{/name}",releases_url:"https://api.github.com/repos/Octocoders/Hello-World/releases{/id}",deployments_url:"https://api.github.com/repos/Octocoders/Hello-World/deployments",created_at:"2019-05-15T15:20:42Z",updated_at:"2019-05-15T15:20:41Z",pushed_at:"2019-05-15T15:20:33Z",git_url:"git://github.com/Octocoders/Hello-World.git",ssh_url:"git@github.com:Octocoders/Hello-World.git",clone_url:"https://github.com/Octocoders/Hello-World.git",svn_url:"https://github.com/Octocoders/Hello-World",homepage:null,size:0,stargazers_count:0,watchers_count:0,language:null,has_issues:!1,has_projects:!0,has_downloads:!0,has_wiki:!0,has_pages:!1,forks_count:0,mirror_url:null,archived:!1,disabled:!1,open_issues_count:0,license:null,forks:0,open_issues:0,watchers:0,default_branch:"master",public:!0},repository:{id:186853002,node_id:"MDEwOlJlcG9zaXRvcnkxODY4NTMwMDI=",name:"Hello-World",full_name:"Codertocat/Hello-World",private:!1,owner:{login:"Codertocat",id:21031067,node_id:"MDQ6VXNlcjIxMDMxMDY3",avatar_url:"https://avatars1.githubusercontent.com/u/21031067?v=4",gravatar_id:"",url:"https://api.github.com/users/Codertocat",html_url:"https://github.com/Codertocat",followers_url:"https://api.github.com/users/Codertocat/followers",following_url:"https://api.github.com/users/Codertocat/following{/other_user}",gists_url:"https://api.github.com/users/Codertocat/gists{/gist_id}",starred_url:"https://api.github.com/users/Codertocat/starred{/owner}{/repo}",subscriptions_url:"https://api.github.com/users/Codertocat/subscriptions",organizations_url:"https://api.github.com/users/Codertocat/orgs",repos_url:"https://api.github.com/users/Codertocat/repos",events_url:"https://api.github.com/users/Codertocat/events{/privacy}",received_events_url:"https://api.github.com/users/Codertocat/received_events",type:"User",site_admin:!1},html_url:"https://github.com/Codertocat/Hello-World",description:null,fork:!1,url:"https://api.github.com/repos/Codertocat/Hello-World",forks_url:"https://api.github.com/repos/Codertocat/Hello-World/forks",keys_url:"https://api.github.com/repos/Codertocat/Hello-World/keys{/key_id}",collaborators_url:"https://api.github.com/repos/Codertocat/Hello-World/collaborators{/collaborator}",teams_url:"https://api.github.com/repos/Codertocat/Hello-World/teams",hooks_url:"https://api.github.com/repos/Codertocat/Hello-World/hooks",issue_events_url:"https://api.github.com/repos/Codertocat/Hello-World/issues/events{/number}",events_url:"https://api.github.com/repos/Codertocat/Hello-World/events",assignees_url:"https://api.github.com/repos/Codertocat/Hello-World/assignees{/user}",branches_url:"https://api.github.com/repos/Codertocat/Hello-World/branches{/branch}",tags_url:"https://api.github.com/repos/Codertocat/Hello-World/tags",blobs_url:"https://api.github.com/repos/Codertocat/Hello-World/git/blobs{/sha}",git_tags_url:"https://api.github.com/repos/Codertocat/Hello-World/git/tags{/sha}",git_refs_url:"https://api.github.com/repos/Codertocat/Hello-World/git/refs{/sha}",trees_url:"https://api.github.com/repos/Codertocat/Hello-World/git/trees{/sha}",statuses_url:"https://api.github.com/repos/Codertocat/Hello-World/statuses/{sha}",languages_url:"https://api.github.com/repos/Codertocat/Hello-World/languages",stargazers_url:"https://api.github.com/repos/Codertocat/Hello-World/stargazers",contributors_url:"https://api.github.com/repos/Codertocat/Hello-World/contributors",subscribers_url:"https://api.github.com/repos/Codertocat/Hello-World/subscribers",subscription_url:"https://api.github.com/repos/Codertocat/Hello-World/subscription",commits_url:"https://api.github.com/repos/Codertocat/Hello-World/commits{/sha}",git_commits_url:"https://api.github.com/repos/Codertocat/Hello-World/git/commits{/sha}",comments_url:"https://api.github.com/repos/Codertocat/Hello-World/comments{/number}",issue_comment_url:"https://api.github.com/repos/Codertocat/Hello-World/issues/comments{/number}",contents_url:"https://api.github.com/repos/Codertocat/Hello-World/contents/{+path}",compare_url:"https://api.github.com/repos/Codertocat/Hello-World/compare/{base}...{head}",merges_url:"https://api.github.com/repos/Codertocat/Hello-World/merges",archive_url:"https://api.github.com/repos/Codertocat/Hello-World/{archive_format}{/ref}",downloads_url:"https://api.github.com/repos/Codertocat/Hello-World/downloads",issues_url:"https://api.github.com/repos/Codertocat/Hello-World/issues{/number}",pulls_url:"https://api.github.com/repos/Codertocat/Hello-World/pulls{/number}",milestones_url:"https://api.github.com/repos/Codertocat/Hello-World/milestones{/number}",notifications_url:"https://api.github.com/repos/Codertocat/Hello-World/notifications{?since,all,participating}",labels_url:"https://api.github.com/repos/Codertocat/Hello-World/labels{/name}",releases_url:"https://api.github.com/repos/Codertocat/Hello-World/releases{/id}",deployments_url:"https://api.github.com/repos/Codertocat/Hello-World/deployments",created_at:"2019-05-15T15:19:25Z",updated_at:"2019-05-15T15:20:41Z",pushed_at:"2019-05-15T15:20:33Z",git_url:"git://github.com/Codertocat/Hello-World.git",ssh_url:"git@github.com:Codertocat/Hello-World.git",clone_url:"https://github.com/Codertocat/Hello-World.git",svn_url:"https://github.com/Codertocat/Hello-World",homepage:null,size:0,stargazers_count:0,watchers_count:0,language:"Ruby",has_issues:!0,has_projects:!0,has_downloads:!0,has_wiki:!0,has_pages:!0,forks_count:1,mirror_url:null,archived:!1,disabled:!1,open_issues_count:2,license:null,forks:1,open_issues:2,watchers:0,default_branch:"master"},sender:{login:"Octocoders",id:38302899,node_id:"MDEyOk9yZ2FuaXphdGlvbjM4MzAyODk5",avatar_url:"https://avatars1.githubusercontent.com/u/38302899?v=4",gravatar_id:"",url:"https://api.github.com/users/Octocoders",html_url:"https://github.com/Octocoders",followers_url:"https://api.github.com/users/Octocoders/followers",following_url:"https://api.github.com/users/Octocoders/following{/other_user}",gists_url:"https://api.github.com/users/Octocoders/gists{/gist_id}",starred_url:"https://api.github.com/users/Octocoders/starred{/owner}{/repo}",subscriptions_url:"https://api.github.com/users/Octocoders/subscriptions",organizations_url:"https://api.github.com/users/Octocoders/orgs",repos_url:"https://api.github.com/users/Octocoders/repos",events_url:"https://api.github.com/users/Octocoders/events{/privacy}",received_events_url:"https://api.github.com/users/Octocoders/received_events",type:"Organization",site_admin:!1}},github_app_authorization:{action:"revoked",sender:{login:"octocat",id:1,node_id:"MDQ6VXNlcjIxMDMxMDY3",avatar_url:"https://github.com/images/error/octocat_happy.gif",gravatar_id:"",url:"https://api.github.com/users/octocat",html_url:"https://github.com/octocat",followers_url:"https://api.github.com/users/octocat/followers",following_url:"https://api.github.com/users/octocat/following{/other_user}",gists_url:"https://api.github.com/users/octocat/gists{/gist_id}",starred_url:"https://api.github.com/users/octocat/starred{/owner}{/repo}",subscriptions_url:"https://api.github.com/users/octocat/subscriptions",organizations_url:"https://api.github.com/users/octocat/orgs",repos_url:"https://api.github.com/users/octocat/repos",events_url:"https://api.github.com/users/octocat/events{/privacy}",received_events_url:"https://api.github.com/users/octocat/received_events",type:"User",site_admin:!1}},gollum:{pages:[{page_name:"Home",title:"Home",summary:null,action:"edited",sha:"6bf911d3801dd1ef957fc6ade5a8d96429e7fa39",html_url:"https://github.com/Codertocat/Hello-World/wiki/Home"}],repository:{id:186853002,node_id:"MDEwOlJlcG9zaXRvcnkxODY4NTMwMDI=",name:"Hello-World",full_name:"Codertocat/Hello-World",private:!1,owner:{login:"Codertocat",id:21031067,node_id:"MDQ6VXNlcjIxMDMxMDY3",avatar_url:"https://avatars1.githubusercontent.com/u/21031067?v=4",gravatar_id:"",url:"https://api.github.com/users/Codertocat",html_url:"https://github.com/Codertocat",followers_url:"https://api.github.com/users/Codertocat/followers",following_url:"https://api.github.com/users/Codertocat/following{/other_user}",gists_url:"https://api.github.com/users/Codertocat/gists{/gist_id}",starred_url:"https://api.github.com/users/Codertocat/starred{/owner}{/repo}",subscriptions_url:"https://api.github.com/users/Codertocat/subscriptions",organizations_url:"https://api.github.com/users/Codertocat/orgs",repos_url:"https://api.github.com/users/Codertocat/repos",events_url:"https://api.github.com/users/Codertocat/events{/privacy}",received_events_url:"https://api.github.com/users/Codertocat/received_events",type:"User",site_admin:!1},html_url:"https://github.com/Codertocat/Hello-World",description:null,fork:!1,url:"https://api.github.com/repos/Codertocat/Hello-World",forks_url:"https://api.github.com/repos/Codertocat/Hello-World/forks",keys_url:"https://api.github.com/repos/Codertocat/Hello-World/keys{/key_id}",collaborators_url:"https://api.github.com/repos/Codertocat/Hello-World/collaborators{/collaborator}",teams_url:"https://api.github.com/repos/Codertocat/Hello-World/teams",hooks_url:"https://api.github.com/repos/Codertocat/Hello-World/hooks",issue_events_url:"https://api.github.com/repos/Codertocat/Hello-World/issues/events{/number}",events_url:"https://api.github.com/repos/Codertocat/Hello-World/events",assignees_url:"https://api.github.com/repos/Codertocat/Hello-World/assignees{/user}",branches_url:"https://api.github.com/repos/Codertocat/Hello-World/branches{/branch}",tags_url:"https://api.github.com/repos/Codertocat/Hello-World/tags",blobs_url:"https://api.github.com/repos/Codertocat/Hello-World/git/blobs{/sha}",git_tags_url:"https://api.github.com/repos/Codertocat/Hello-World/git/tags{/sha}",git_refs_url:"https://api.github.com/repos/Codertocat/Hello-World/git/refs{/sha}",trees_url:"https://api.github.com/repos/Codertocat/Hello-World/git/trees{/sha}",statuses_url:"https://api.github.com/repos/Codertocat/Hello-World/statuses/{sha}",languages_url:"https://api.github.com/repos/Codertocat/Hello-World/languages",stargazers_url:"https://api.github.com/repos/Codertocat/Hello-World/stargazers",contributors_url:"https://api.github.com/repos/Codertocat/Hello-World/contributors",subscribers_url:"https://api.github.com/repos/Codertocat/Hello-World/subscribers",subscription_url:"https://api.github.com/repos/Codertocat/Hello-World/subscription",commits_url:"https://api.github.com/repos/Codertocat/Hello-World/commits{/sha}",git_commits_url:"https://api.github.com/repos/Codertocat/Hello-World/git/commits{/sha}",comments_url:"https://api.github.com/repos/Codertocat/Hello-World/comments{/number}",issue_comment_url:"https://api.github.com/repos/Codertocat/Hello-World/issues/comments{/number}",contents_url:"https://api.github.com/repos/Codertocat/Hello-World/contents/{+path}",compare_url:"https://api.github.com/repos/Codertocat/Hello-World/compare/{base}...{head}",merges_url:"https://api.github.com/repos/Codertocat/Hello-World/merges",archive_url:"https://api.github.com/repos/Codertocat/Hello-World/{archive_format}{/ref}",downloads_url:"https://api.github.com/repos/Codertocat/Hello-World/downloads",issues_url:"https://api.github.com/repos/Codertocat/Hello-World/issues{/number}",pulls_url:"https://api.github.com/repos/Codertocat/Hello-World/pulls{/number}",milestones_url:"https://api.github.com/repos/Codertocat/Hello-World/milestones{/number}",notifications_url:"https://api.github.com/repos/Codertocat/Hello-World/notifications{?since,all,participating}",labels_url:"https://api.github.com/repos/Codertocat/Hello-World/labels{/name}",releases_url:"https://api.github.com/repos/Codertocat/Hello-World/releases{/id}",deployments_url:"https://api.github.com/repos/Codertocat/Hello-World/deployments",created_at:"2019-05-15T15:19:25Z",updated_at:"2019-05-15T15:19:27Z",pushed_at:"2019-05-15T15:19:26Z",git_url:"git://github.com/Codertocat/Hello-World.git",ssh_url:"git@github.com:Codertocat/Hello-World.git",clone_url:"https://github.com/Codertocat/Hello-World.git",svn_url:"https://github.com/Codertocat/Hello-World",homepage:null,size:0,stargazers_count:0,watchers_count:0,language:null,has_issues:!0,has_projects:!0,has_downloads:!0,has_wiki:!0,has_pages:!1,forks_count:0,mirror_url:null,archived:!1,disabled:!1,open_issues_count:0,license:null,forks:0,open_issues:0,watchers:0,default_branch:"master"},sender:{login:"rachmari",id:9831992,node_id:"MDQ6VXNlcjk4MzE5OTI=",avatar_url:"https://avatars2.githubusercontent.com/u/9831992?v=4",gravatar_id:"",url:"https://api.github.com/users/rachmari",html_url:"https://github.com/rachmari",followers_url:"https://api.github.com/users/rachmari/followers",following_url:"https://api.github.com/users/rachmari/following{/other_user}",gists_url:"https://api.github.com/users/rachmari/gists{/gist_id}",starred_url:"https://api.github.com/users/rachmari/starred{/owner}{/repo}",subscriptions_url:"https://api.github.com/users/rachmari/subscriptions",organizations_url:"https://api.github.com/users/rachmari/orgs",repos_url:"https://api.github.com/users/rachmari/repos",events_url:"https://api.github.com/users/rachmari/events{/privacy}",received_events_url:"https://api.github.com/users/rachmari/received_events",type:"User",site_admin:!0}},installation:{action:"deleted",installation:{id:2,account:{login:"octocat",id:1,node_id:"MDQ6VXNlcjE=",avatar_url:"https://github.com/images/error/octocat_happy.gif",gravatar_id:"",url:"https://api.github.com/users/octocat",html_url:"https://github.com/octocat",followers_url:"https://api.github.com/users/octocat/followers",following_url:"https://api.github.com/users/octocat/following{/other_user}",gists_url:"https://api.github.com/users/octocat/gists{/gist_id}",starred_url:"https://api.github.com/users/octocat/starred{/owner}{/repo}",subscriptions_url:"https://api.github.com/users/octocat/subscriptions",organizations_url:"https://api.github.com/users/octocat/orgs",repos_url:"https://api.github.com/users/octocat/repos",events_url:"https://api.github.com/users/octocat/events{/privacy}",received_events_url:"https://api.github.com/users/octocat/received_events",type:"User",site_admin:!1},repository_selection:"selected",access_tokens_url:"https://api.github.com/installations/2/access_tokens",repositories_url:"https://api.github.com/installation/repositories",html_url:"https://github.com/settings/installations/2",app_id:5725,target_id:3880403,target_type:"User",permissions:{metadata:"read",contents:"read",issues:"write"},events:["push","pull_request"],created_at:1525109898,updated_at:1525109899,single_file_name:"config.yml"},repositories:[{id:1296269,node_id:"MDEwOlJlcG9zaXRvcnkxODY4NTMwMDc=",name:"Hello-World",full_name:"octocat/Hello-World",private:!1}],sender:{login:"octocat",id:1,node_id:"MDQ6VXNlcjE=",avatar_url:"https://github.com/images/error/octocat_happy.gif",gravatar_id:"",url:"https://api.github.com/users/octocat",html_url:"https://github.com/octocat",followers_url:"https://api.github.com/users/octocat/followers",following_url:"https://api.github.com/users/octocat/following{/other_user}",gists_url:"https://api.github.com/users/octocat/gists{/gist_id}",starred_url:"https://api.github.com/users/octocat/starred{/owner}{/repo}",subscriptions_url:"https://api.github.com/users/octocat/subscriptions",organizations_url:"https://api.github.com/users/octocat/orgs",repos_url:"https://api.github.com/users/octocat/repos",events_url:"https://api.github.com/users/octocat/events{/privacy}",received_events_url:"https://api.github.com/users/octocat/received_events",type:"User",site_admin:!1}},installation_repositories:{action:"added",installation:{id:957387,account:{login:"Codertocat",id:21031067,node_id:"MDQ6VXNlcjIxMDMxMDY3",avatar_url:"https://avatars1.githubusercontent.com/u/21031067?v=4",gravatar_id:"",url:"https://api.github.com/users/Codertocat",html_url:"https://github.com/Codertocat",followers_url:"https://api.github.com/users/Codertocat/followers",following_url:"https://api.github.com/users/Codertocat/following{/other_user}",gists_url:"https://api.github.com/users/Codertocat/gists{/gist_id}",starred_url:"https://api.github.com/users/Codertocat/starred{/owner}{/repo}",subscriptions_url:"https://api.github.com/users/Codertocat/subscriptions",organizations_url:"https://api.github.com/users/Codertocat/orgs",repos_url:"https://api.github.com/users/Codertocat/repos",events_url:"https://api.github.com/users/Codertocat/events{/privacy}",received_events_url:"https://api.github.com/users/Codertocat/received_events",type:"User",site_admin:!1},repository_selection:"selected",access_tokens_url:"https://api.github.com/app/installations/957387/access_tokens",repositories_url:"https://api.github.com/installation/repositories",html_url:"https://github.com/settings/installations/957387",app_id:29310,target_id:21031067,target_type:"User",permissions:{administration:"write",statuses:"write",repository_projects:"write",repository_hooks:"write",pull_requests:"write",pages:"write",issues:"write",deployments:"write",contents:"write",checks:"write",metadata:"read",vulnerability_alerts:"read"},events:[],created_at:1557933591,updated_at:1557933591,single_file_name:null},repository_selection:"selected",repositories_added:[{id:186853007,node_id:"MDEwOlJlcG9zaXRvcnkxODY4NTMwMDc=",name:"Space",full_name:"Codertocat/Space",private:!1}],repositories_removed:[],sender:{login:"Codertocat",id:21031067,node_id:"MDQ6VXNlcjIxMDMxMDY3",avatar_url:"https://avatars1.githubusercontent.com/u/21031067?v=4",gravatar_id:"",url:"https://api.github.com/users/Codertocat",html_url:"https://github.com/Codertocat",followers_url:"https://api.github.com/users/Codertocat/followers",following_url:"https://api.github.com/users/Codertocat/following{/other_user}",gists_url:"https://api.github.com/users/Codertocat/gists{/gist_id}",starred_url:"https://api.github.com/users/Codertocat/starred{/owner}{/repo}",subscriptions_url:"https://api.github.com/users/Codertocat/subscriptions",organizations_url:"https://api.github.com/users/Codertocat/orgs",repos_url:"https://api.github.com/users/Codertocat/repos",events_url:"https://api.github.com/users/Codertocat/events{/privacy}",received_events_url:"https://api.github.com/users/Codertocat/received_events",type:"User",site_admin:!1}},issue_comment:{action:"created",issue:{url:"https://api.github.com/repos/Codertocat/Hello-World/issues/1",repository_url:"https://api.github.com/repos/Codertocat/Hello-World",labels_url:"https://api.github.com/repos/Codertocat/Hello-World/issues/1/labels{/name}",comments_url:"https://api.github.com/repos/Codertocat/Hello-World/issues/1/comments",events_url:"https://api.github.com/repos/Codertocat/Hello-World/issues/1/events",html_url:"https://github.com/Codertocat/Hello-World/issues/1",id:444500041,node_id:"MDU6SXNzdWU0NDQ1MDAwNDE=",number:1,title:"Spelling error in the README file",user:{login:"Codertocat",id:21031067,node_id:"MDQ6VXNlcjIxMDMxMDY3",avatar_url:"https://avatars1.githubusercontent.com/u/21031067?v=4",gravatar_id:"",url:"https://api.github.com/users/Codertocat",html_url:"https://github.com/Codertocat",followers_url:"https://api.github.com/users/Codertocat/followers",following_url:"https://api.github.com/users/Codertocat/following{/other_user}",gists_url:"https://api.github.com/users/Codertocat/gists{/gist_id}",starred_url:"https://api.github.com/users/Codertocat/starred{/owner}{/repo}",subscriptions_url:"https://api.github.com/users/Codertocat/subscriptions",organizations_url:"https://api.github.com/users/Codertocat/orgs",repos_url:"https://api.github.com/users/Codertocat/repos",events_url:"https://api.github.com/users/Codertocat/events{/privacy}",received_events_url:"https://api.github.com/users/Codertocat/received_events",type:"User",site_admin:!1},labels:[{id:1362934389,node_id:"MDU6TGFiZWwxMzYyOTM0Mzg5",url:"https://api.github.com/repos/Codertocat/Hello-World/labels/bug",name:"bug",color:"d73a4a",default:!0}],state:"open",locked:!1,assignee:{login:"Codertocat",id:21031067,node_id:"MDQ6VXNlcjIxMDMxMDY3",avatar_url:"https://avatars1.githubusercontent.com/u/21031067?v=4",gravatar_id:"",url:"https://api.github.com/users/Codertocat",html_url:"https://github.com/Codertocat",followers_url:"https://api.github.com/users/Codertocat/followers",following_url:"https://api.github.com/users/Codertocat/following{/other_user}",gists_url:"https://api.github.com/users/Codertocat/gists{/gist_id}",starred_url:"https://api.github.com/users/Codertocat/starred{/owner}{/repo}",subscriptions_url:"https://api.github.com/users/Codertocat/subscriptions",organizations_url:"https://api.github.com/users/Codertocat/orgs",repos_url:"https://api.github.com/users/Codertocat/repos",events_url:"https://api.github.com/users/Codertocat/events{/privacy}",received_events_url:"https://api.github.com/users/Codertocat/received_events",type:"User",site_admin:!1},assignees:[{login:"Codertocat",id:21031067,node_id:"MDQ6VXNlcjIxMDMxMDY3",avatar_url:"https://avatars1.githubusercontent.com/u/21031067?v=4",gravatar_id:"",url:"https://api.github.com/users/Codertocat",html_url:"https://github.com/Codertocat",followers_url:"https://api.github.com/users/Codertocat/followers",following_url:"https://api.github.com/users/Codertocat/following{/other_user}",gists_url:"https://api.github.com/users/Codertocat/gists{/gist_id}",starred_url:"https://api.github.com/users/Codertocat/starred{/owner}{/repo}",subscriptions_url:"https://api.github.com/users/Codertocat/subscriptions",organizations_url:"https://api.github.com/users/Codertocat/orgs",repos_url:"https://api.github.com/users/Codertocat/repos",events_url:"https://api.github.com/users/Codertocat/events{/privacy}",received_events_url:"https://api.github.com/users/Codertocat/received_events",type:"User",site_admin:!1}],milestone:{url:"https://api.github.com/repos/Codertocat/Hello-World/milestones/1",html_url:"https://github.com/Codertocat/Hello-World/milestone/1",labels_url:"https://api.github.com/repos/Codertocat/Hello-World/milestones/1/labels",id:4317517,node_id:"MDk6TWlsZXN0b25lNDMxNzUxNw==",number:1,title:"v1.0",description:"Add new space flight simulator",creator:{login:"Codertocat",id:21031067,node_id:"MDQ6VXNlcjIxMDMxMDY3",avatar_url:"https://avatars1.githubusercontent.com/u/21031067?v=4",gravatar_id:"",url:"https://api.github.com/users/Codertocat",html_url:"https://github.com/Codertocat",followers_url:"https://api.github.com/users/Codertocat/followers",following_url:"https://api.github.com/users/Codertocat/following{/other_user}",gists_url:"https://api.github.com/users/Codertocat/gists{/gist_id}",starred_url:"https://api.github.com/users/Codertocat/starred{/owner}{/repo}",subscriptions_url:"https://api.github.com/users/Codertocat/subscriptions",organizations_url:"https://api.github.com/users/Codertocat/orgs",repos_url:"https://api.github.com/users/Codertocat/repos",events_url:"https://api.github.com/users/Codertocat/events{/privacy}",received_events_url:"https://api.github.com/users/Codertocat/received_events",type:"User",site_admin:!1},open_issues:1,closed_issues:0,state:"closed",created_at:"2019-05-15T15:20:17Z",updated_at:"2019-05-15T15:20:18Z",due_on:"2019-05-23T07:00:00Z",closed_at:"2019-05-15T15:20:18Z"},comments:0,created_at:"2019-05-15T15:20:18Z",updated_at:"2019-05-15T15:20:21Z",closed_at:null,author_association:"OWNER",body:"It looks like you accidently spelled 'commit' with two 't's."},comment:{url:"https://api.github.com/repos/Codertocat/Hello-World/issues/comments/492700400",html_url:"https://github.com/Codertocat/Hello-World/issues/1#issuecomment-492700400",issue_url:"https://api.github.com/repos/Codertocat/Hello-World/issues/1",id:492700400,node_id:"MDEyOklzc3VlQ29tbWVudDQ5MjcwMDQwMA==",user:{login:"Codertocat",id:21031067,node_id:"MDQ6VXNlcjIxMDMxMDY3",avatar_url:"https://avatars1.githubusercontent.com/u/21031067?v=4",gravatar_id:"",url:"https://api.github.com/users/Codertocat",html_url:"https://github.com/Codertocat",followers_url:"https://api.github.com/users/Codertocat/followers",following_url:"https://api.github.com/users/Codertocat/following{/other_user}",gists_url:"https://api.github.com/users/Codertocat/gists{/gist_id}",starred_url:"https://api.github.com/users/Codertocat/starred{/owner}{/repo}",subscriptions_url:"https://api.github.com/users/Codertocat/subscriptions",organizations_url:"https://api.github.com/users/Codertocat/orgs",repos_url:"https://api.github.com/users/Codertocat/repos",events_url:"https://api.github.com/users/Codertocat/events{/privacy}",received_events_url:"https://api.github.com/users/Codertocat/received_events",type:"User",site_admin:!1},created_at:"2019-05-15T15:20:21Z",updated_at:"2019-05-15T15:20:21Z",author_association:"OWNER",body:"You are totally right! I'll get this fixed right away."},repository:{id:186853002,node_id:"MDEwOlJlcG9zaXRvcnkxODY4NTMwMDI=",name:"Hello-World",full_name:"Codertocat/Hello-World",private:!1,owner:{login:"Codertocat",id:21031067,node_id:"MDQ6VXNlcjIxMDMxMDY3",avatar_url:"https://avatars1.githubusercontent.com/u/21031067?v=4",gravatar_id:"",url:"https://api.github.com/users/Codertocat",html_url:"https://github.com/Codertocat",followers_url:"https://api.github.com/users/Codertocat/followers",following_url:"https://api.github.com/users/Codertocat/following{/other_user}",gists_url:"https://api.github.com/users/Codertocat/gists{/gist_id}",starred_url:"https://api.github.com/users/Codertocat/starred{/owner}{/repo}",subscriptions_url:"https://api.github.com/users/Codertocat/subscriptions",organizations_url:"https://api.github.com/users/Codertocat/orgs",repos_url:"https://api.github.com/users/Codertocat/repos",events_url:"https://api.github.com/users/Codertocat/events{/privacy}",received_events_url:"https://api.github.com/users/Codertocat/received_events",type:"User",site_admin:!1},html_url:"https://github.com/Codertocat/Hello-World",description:null,fork:!1,url:"https://api.github.com/repos/Codertocat/Hello-World",forks_url:"https://api.github.com/repos/Codertocat/Hello-World/forks",keys_url:"https://api.github.com/repos/Codertocat/Hello-World/keys{/key_id}",collaborators_url:"https://api.github.com/repos/Codertocat/Hello-World/collaborators{/collaborator}",teams_url:"https://api.github.com/repos/Codertocat/Hello-World/teams",hooks_url:"https://api.github.com/repos/Codertocat/Hello-World/hooks",issue_events_url:"https://api.github.com/repos/Codertocat/Hello-World/issues/events{/number}",events_url:"https://api.github.com/repos/Codertocat/Hello-World/events",assignees_url:"https://api.github.com/repos/Codertocat/Hello-World/assignees{/user}",branches_url:"https://api.github.com/repos/Codertocat/Hello-World/branches{/branch}",tags_url:"https://api.github.com/repos/Codertocat/Hello-World/tags",blobs_url:"https://api.github.com/repos/Codertocat/Hello-World/git/blobs{/sha}",git_tags_url:"https://api.github.com/repos/Codertocat/Hello-World/git/tags{/sha}",git_refs_url:"https://api.github.com/repos/Codertocat/Hello-World/git/refs{/sha}",trees_url:"https://api.github.com/repos/Codertocat/Hello-World/git/trees{/sha}",statuses_url:"https://api.github.com/repos/Codertocat/Hello-World/statuses/{sha}",languages_url:"https://api.github.com/repos/Codertocat/Hello-World/languages",stargazers_url:"https://api.github.com/repos/Codertocat/Hello-World/stargazers",contributors_url:"https://api.github.com/repos/Codertocat/Hello-World/contributors",subscribers_url:"https://api.github.com/repos/Codertocat/Hello-World/subscribers",subscription_url:"https://api.github.com/repos/Codertocat/Hello-World/subscription",commits_url:"https://api.github.com/repos/Codertocat/Hello-World/commits{/sha}",git_commits_url:"https://api.github.com/repos/Codertocat/Hello-World/git/commits{/sha}",comments_url:"https://api.github.com/repos/Codertocat/Hello-World/comments{/number}",issue_comment_url:"https://api.github.com/repos/Codertocat/Hello-World/issues/comments{/number}",contents_url:"https://api.github.com/repos/Codertocat/Hello-World/contents/{+path}",compare_url:"https://api.github.com/repos/Codertocat/Hello-World/compare/{base}...{head}",merges_url:"https://api.github.com/repos/Codertocat/Hello-World/merges",archive_url:"https://api.github.com/repos/Codertocat/Hello-World/{archive_format}{/ref}",downloads_url:"https://api.github.com/repos/Codertocat/Hello-World/downloads",issues_url:"https://api.github.com/repos/Codertocat/Hello-World/issues{/number}",pulls_url:"https://api.github.com/repos/Codertocat/Hello-World/pulls{/number}",milestones_url:"https://api.github.com/repos/Codertocat/Hello-World/milestones{/number}",notifications_url:"https://api.github.com/repos/Codertocat/Hello-World/notifications{?since,all,participating}",labels_url:"https://api.github.com/repos/Codertocat/Hello-World/labels{/name}",releases_url:"https://api.github.com/repos/Codertocat/Hello-World/releases{/id}",deployments_url:"https://api.github.com/repos/Codertocat/Hello-World/deployments",created_at:"2019-05-15T15:19:25Z",updated_at:"2019-05-15T15:19:27Z",pushed_at:"2019-05-15T15:20:13Z",git_url:"git://github.com/Codertocat/Hello-World.git",ssh_url:"git@github.com:Codertocat/Hello-World.git",clone_url:"https://github.com/Codertocat/Hello-World.git",svn_url:"https://github.com/Codertocat/Hello-World",homepage:null,size:0,stargazers_count:0,watchers_count:0,language:null,has_issues:!0,has_projects:!0,has_downloads:!0,has_wiki:!0,has_pages:!0,forks_count:0,mirror_url:null,archived:!1,disabled:!1,open_issues_count:1,license:null,forks:0,open_issues:1,watchers:0,default_branch:"master"},sender:{login:"Codertocat",id:21031067,node_id:"MDQ6VXNlcjIxMDMxMDY3",avatar_url:"https://avatars1.githubusercontent.com/u/21031067?v=4",gravatar_id:"",url:"https://api.github.com/users/Codertocat",html_url:"https://github.com/Codertocat",followers_url:"https://api.github.com/users/Codertocat/followers",following_url:"https://api.github.com/users/Codertocat/following{/other_user}",gists_url:"https://api.github.com/users/Codertocat/gists{/gist_id}",starred_url:"https://api.github.com/users/Codertocat/starred{/owner}{/repo}",subscriptions_url:"https://api.github.com/users/Codertocat/subscriptions",organizations_url:"https://api.github.com/users/Codertocat/orgs",repos_url:"https://api.github.com/users/Codertocat/repos",events_url:"https://api.github.com/users/Codertocat/events{/privacy}",received_events_url:"https://api.github.com/users/Codertocat/received_events",type:"User",site_admin:!1}},issues:{action:"edited",issue:{url:"https://api.github.com/repos/Codertocat/Hello-World/issues/1",repository_url:"https://api.github.com/repos/Codertocat/Hello-World",labels_url:"https://api.github.com/repos/Codertocat/Hello-World/issues/1/labels{/name}",comments_url:"https://api.github.com/repos/Codertocat/Hello-World/issues/1/comments",events_url:"https://api.github.com/repos/Codertocat/Hello-World/issues/1/events",html_url:"https://github.com/Codertocat/Hello-World/issues/1",id:444500041,node_id:"MDU6SXNzdWU0NDQ1MDAwNDE=",number:1,title:"Spelling error in the README file",user:{login:"Codertocat",id:21031067,node_id:"MDQ6VXNlcjIxMDMxMDY3",avatar_url:"https://avatars1.githubusercontent.com/u/21031067?v=4",gravatar_id:"",url:"https://api.github.com/users/Codertocat",html_url:"https://github.com/Codertocat",followers_url:"https://api.github.com/users/Codertocat/followers",following_url:"https://api.github.com/users/Codertocat/following{/other_user}",gists_url:"https://api.github.com/users/Codertocat/gists{/gist_id}",starred_url:"https://api.github.com/users/Codertocat/starred{/owner}{/repo}",subscriptions_url:"https://api.github.com/users/Codertocat/subscriptions",organizations_url:"https://api.github.com/users/Codertocat/orgs",repos_url:"https://api.github.com/users/Codertocat/repos",events_url:"https://api.github.com/users/Codertocat/events{/privacy}",received_events_url:"https://api.github.com/users/Codertocat/received_events",type:"User",site_admin:!1},labels:[{id:1362934389,node_id:"MDU6TGFiZWwxMzYyOTM0Mzg5",url:"https://api.github.com/repos/Codertocat/Hello-World/labels/bug",name:"bug",color:"d73a4a",default:!0}],state:"open",locked:!1,assignee:{login:"Codertocat",id:21031067,node_id:"MDQ6VXNlcjIxMDMxMDY3",avatar_url:"https://avatars1.githubusercontent.com/u/21031067?v=4",gravatar_id:"",url:"https://api.github.com/users/Codertocat",html_url:"https://github.com/Codertocat",followers_url:"https://api.github.com/users/Codertocat/followers",following_url:"https://api.github.com/users/Codertocat/following{/other_user}",gists_url:"https://api.github.com/users/Codertocat/gists{/gist_id}",starred_url:"https://api.github.com/users/Codertocat/starred{/owner}{/repo}",subscriptions_url:"https://api.github.com/users/Codertocat/subscriptions",organizations_url:"https://api.github.com/users/Codertocat/orgs",repos_url:"https://api.github.com/users/Codertocat/repos",events_url:"https://api.github.com/users/Codertocat/events{/privacy}",received_events_url:"https://api.github.com/users/Codertocat/received_events",type:"User",site_admin:!1},assignees:[{login:"Codertocat",id:21031067,node_id:"MDQ6VXNlcjIxMDMxMDY3",avatar_url:"https://avatars1.githubusercontent.com/u/21031067?v=4",gravatar_id:"",url:"https://api.github.com/users/Codertocat",html_url:"https://github.com/Codertocat",followers_url:"https://api.github.com/users/Codertocat/followers",following_url:"https://api.github.com/users/Codertocat/following{/other_user}",gists_url:"https://api.github.com/users/Codertocat/gists{/gist_id}",starred_url:"https://api.github.com/users/Codertocat/starred{/owner}{/repo}",subscriptions_url:"https://api.github.com/users/Codertocat/subscriptions",organizations_url:"https://api.github.com/users/Codertocat/orgs",repos_url:"https://api.github.com/users/Codertocat/repos",events_url:"https://api.github.com/users/Codertocat/events{/privacy}",received_events_url:"https://api.github.com/users/Codertocat/received_events",type:"User",site_admin:!1}],milestone:{url:"https://api.github.com/repos/Codertocat/Hello-World/milestones/1",html_url:"https://github.com/Codertocat/Hello-World/milestone/1",labels_url:"https://api.github.com/repos/Codertocat/Hello-World/milestones/1/labels",id:4317517,node_id:"MDk6TWlsZXN0b25lNDMxNzUxNw==",number:1,title:"v1.0",description:"Add new space flight simulator",creator:{login:"Codertocat",id:21031067,node_id:"MDQ6VXNlcjIxMDMxMDY3",avatar_url:"https://avatars1.githubusercontent.com/u/21031067?v=4",gravatar_id:"",url:"https://api.github.com/users/Codertocat",html_url:"https://github.com/Codertocat",followers_url:"https://api.github.com/users/Codertocat/followers",following_url:"https://api.github.com/users/Codertocat/following{/other_user}",gists_url:"https://api.github.com/users/Codertocat/gists{/gist_id}",starred_url:"https://api.github.com/users/Codertocat/starred{/owner}{/repo}",subscriptions_url:"https://api.github.com/users/Codertocat/subscriptions",organizations_url:"https://api.github.com/users/Codertocat/orgs",repos_url:"https://api.github.com/users/Codertocat/repos",events_url:"https://api.github.com/users/Codertocat/events{/privacy}",received_events_url:"https://api.github.com/users/Codertocat/received_events",type:"User",site_admin:!1},open_issues:1,closed_issues:0,state:"closed",created_at:"2019-05-15T15:20:17Z",updated_at:"2019-05-15T15:20:18Z",due_on:"2019-05-23T07:00:00Z",closed_at:"2019-05-15T15:20:18Z"},comments:0,created_at:"2019-05-15T15:20:18Z",updated_at:"2019-05-15T15:20:18Z",closed_at:null,author_association:"OWNER",body:"It looks like you accidently spelled 'commit' with two 't's."},changes:{},repository:{id:186853002,node_id:"MDEwOlJlcG9zaXRvcnkxODY4NTMwMDI=",name:"Hello-World",full_name:"Codertocat/Hello-World",private:!1,owner:{login:"Codertocat",id:21031067,node_id:"MDQ6VXNlcjIxMDMxMDY3",avatar_url:"https://avatars1.githubusercontent.com/u/21031067?v=4",gravatar_id:"",url:"https://api.github.com/users/Codertocat",html_url:"https://github.com/Codertocat",followers_url:"https://api.github.com/users/Codertocat/followers",following_url:"https://api.github.com/users/Codertocat/following{/other_user}",gists_url:"https://api.github.com/users/Codertocat/gists{/gist_id}",starred_url:"https://api.github.com/users/Codertocat/starred{/owner}{/repo}",subscriptions_url:"https://api.github.com/users/Codertocat/subscriptions",organizations_url:"https://api.github.com/users/Codertocat/orgs",repos_url:"https://api.github.com/users/Codertocat/repos",events_url:"https://api.github.com/users/Codertocat/events{/privacy}",received_events_url:"https://api.github.com/users/Codertocat/received_events",type:"User",site_admin:!1},html_url:"https://github.com/Codertocat/Hello-World",description:null,fork:!1,url:"https://api.github.com/repos/Codertocat/Hello-World",forks_url:"https://api.github.com/repos/Codertocat/Hello-World/forks",keys_url:"https://api.github.com/repos/Codertocat/Hello-World/keys{/key_id}",collaborators_url:"https://api.github.com/repos/Codertocat/Hello-World/collaborators{/collaborator}",teams_url:"https://api.github.com/repos/Codertocat/Hello-World/teams",hooks_url:"https://api.github.com/repos/Codertocat/Hello-World/hooks",issue_events_url:"https://api.github.com/repos/Codertocat/Hello-World/issues/events{/number}",events_url:"https://api.github.com/repos/Codertocat/Hello-World/events",assignees_url:"https://api.github.com/repos/Codertocat/Hello-World/assignees{/user}",branches_url:"https://api.github.com/repos/Codertocat/Hello-World/branches{/branch}",tags_url:"https://api.github.com/repos/Codertocat/Hello-World/tags",blobs_url:"https://api.github.com/repos/Codertocat/Hello-World/git/blobs{/sha}",git_tags_url:"https://api.github.com/repos/Codertocat/Hello-World/git/tags{/sha}",git_refs_url:"https://api.github.com/repos/Codertocat/Hello-World/git/refs{/sha}",trees_url:"https://api.github.com/repos/Codertocat/Hello-World/git/trees{/sha}",statuses_url:"https://api.github.com/repos/Codertocat/Hello-World/statuses/{sha}",languages_url:"https://api.github.com/repos/Codertocat/Hello-World/languages",stargazers_url:"https://api.github.com/repos/Codertocat/Hello-World/stargazers",contributors_url:"https://api.github.com/repos/Codertocat/Hello-World/contributors",subscribers_url:"https://api.github.com/repos/Codertocat/Hello-World/subscribers",subscription_url:"https://api.github.com/repos/Codertocat/Hello-World/subscription",commits_url:"https://api.github.com/repos/Codertocat/Hello-World/commits{/sha}",git_commits_url:"https://api.github.com/repos/Codertocat/Hello-World/git/commits{/sha}",comments_url:"https://api.github.com/repos/Codertocat/Hello-World/comments{/number}",issue_comment_url:"https://api.github.com/repos/Codertocat/Hello-World/issues/comments{/number}",contents_url:"https://api.github.com/repos/Codertocat/Hello-World/contents/{+path}",compare_url:"https://api.github.com/repos/Codertocat/Hello-World/compare/{base}...{head}",merges_url:"https://api.github.com/repos/Codertocat/Hello-World/merges",archive_url:"https://api.github.com/repos/Codertocat/Hello-World/{archive_format}{/ref}",downloads_url:"https://api.github.com/repos/Codertocat/Hello-World/downloads",issues_url:"https://api.github.com/repos/Codertocat/Hello-World/issues{/number}",pulls_url:"https://api.github.com/repos/Codertocat/Hello-World/pulls{/number}",milestones_url:"https://api.github.com/repos/Codertocat/Hello-World/milestones{/number}",notifications_url:"https://api.github.com/repos/Codertocat/Hello-World/notifications{?since,all,participating}",labels_url:"https://api.github.com/repos/Codertocat/Hello-World/labels{/name}",releases_url:"https://api.github.com/repos/Codertocat/Hello-World/releases{/id}",deployments_url:"https://api.github.com/repos/Codertocat/Hello-World/deployments",created_at:"2019-05-15T15:19:25Z",updated_at:"2019-05-15T15:19:27Z",pushed_at:"2019-05-15T15:20:13Z",git_url:"git://github.com/Codertocat/Hello-World.git",ssh_url:"git@github.com:Codertocat/Hello-World.git",clone_url:"https://github.com/Codertocat/Hello-World.git",svn_url:"https://github.com/Codertocat/Hello-World",homepage:null,size:0,stargazers_count:0,watchers_count:0,language:null,has_issues:!0,has_projects:!0,has_downloads:!0,has_wiki:!0,has_pages:!0,forks_count:0,mirror_url:null,archived:!1,disabled:!1,open_issues_count:1,license:null,forks:0,open_issues:1,watchers:0,default_branch:"master"},sender:{login:"Codertocat",id:21031067,node_id:"MDQ6VXNlcjIxMDMxMDY3",avatar_url:"https://avatars1.githubusercontent.com/u/21031067?v=4",gravatar_id:"",url:"https://api.github.com/users/Codertocat",html_url:"https://github.com/Codertocat",followers_url:"https://api.github.com/users/Codertocat/followers",following_url:"https://api.github.com/users/Codertocat/following{/other_user}",gists_url:"https://api.github.com/users/Codertocat/gists{/gist_id}",starred_url:"https://api.github.com/users/Codertocat/starred{/owner}{/repo}",subscriptions_url:"https://api.github.com/users/Codertocat/subscriptions",organizations_url:"https://api.github.com/users/Codertocat/orgs",repos_url:"https://api.github.com/users/Codertocat/repos",events_url:"https://api.github.com/users/Codertocat/events{/privacy}",received_events_url:"https://api.github.com/users/Codertocat/received_events",type:"User",site_admin:!1}},label:{action:"deleted",label:{id:1362937026,node_id:"MDU6TGFiZWwxMzYyOTM3MDI2",url:"https://api.github.com/repos/Codertocat/Hello-World/labels/:bug:%20Bugfix",name:":bug: Bugfix",color:"cceeaa",default:!1},repository:{id:186853002,node_id:"MDEwOlJlcG9zaXRvcnkxODY4NTMwMDI=",name:"Hello-World",full_name:"Codertocat/Hello-World",private:!1,owner:{login:"Codertocat",id:21031067,node_id:"MDQ6VXNlcjIxMDMxMDY3",avatar_url:"https://avatars1.githubusercontent.com/u/21031067?v=4",gravatar_id:"",url:"https://api.github.com/users/Codertocat",html_url:"https://github.com/Codertocat",followers_url:"https://api.github.com/users/Codertocat/followers",following_url:"https://api.github.com/users/Codertocat/following{/other_user}",gists_url:"https://api.github.com/users/Codertocat/gists{/gist_id}",starred_url:"https://api.github.com/users/Codertocat/starred{/owner}{/repo}",subscriptions_url:"https://api.github.com/users/Codertocat/subscriptions",organizations_url:"https://api.github.com/users/Codertocat/orgs",repos_url:"https://api.github.com/users/Codertocat/repos",events_url:"https://api.github.com/users/Codertocat/events{/privacy}",received_events_url:"https://api.github.com/users/Codertocat/received_events",type:"User",site_admin:!1},html_url:"https://github.com/Codertocat/Hello-World",description:null,fork:!1,url:"https://api.github.com/repos/Codertocat/Hello-World",forks_url:"https://api.github.com/repos/Codertocat/Hello-World/forks",keys_url:"https://api.github.com/repos/Codertocat/Hello-World/keys{/key_id}",collaborators_url:"https://api.github.com/repos/Codertocat/Hello-World/collaborators{/collaborator}",teams_url:"https://api.github.com/repos/Codertocat/Hello-World/teams",hooks_url:"https://api.github.com/repos/Codertocat/Hello-World/hooks",issue_events_url:"https://api.github.com/repos/Codertocat/Hello-World/issues/events{/number}",events_url:"https://api.github.com/repos/Codertocat/Hello-World/events",assignees_url:"https://api.github.com/repos/Codertocat/Hello-World/assignees{/user}",branches_url:"https://api.github.com/repos/Codertocat/Hello-World/branches{/branch}",tags_url:"https://api.github.com/repos/Codertocat/Hello-World/tags",blobs_url:"https://api.github.com/repos/Codertocat/Hello-World/git/blobs{/sha}",git_tags_url:"https://api.github.com/repos/Codertocat/Hello-World/git/tags{/sha}",git_refs_url:"https://api.github.com/repos/Codertocat/Hello-World/git/refs{/sha}",trees_url:"https://api.github.com/repos/Codertocat/Hello-World/git/trees{/sha}",statuses_url:"https://api.github.com/repos/Codertocat/Hello-World/statuses/{sha}",languages_url:"https://api.github.com/repos/Codertocat/Hello-World/languages",stargazers_url:"https://api.github.com/repos/Codertocat/Hello-World/stargazers",contributors_url:"https://api.github.com/repos/Codertocat/Hello-World/contributors",subscribers_url:"https://api.github.com/repos/Codertocat/Hello-World/subscribers",subscription_url:"https://api.github.com/repos/Codertocat/Hello-World/subscription",commits_url:"https://api.github.com/repos/Codertocat/Hello-World/commits{/sha}",git_commits_url:"https://api.github.com/repos/Codertocat/Hello-World/git/commits{/sha}",comments_url:"https://api.github.com/repos/Codertocat/Hello-World/comments{/number}",issue_comment_url:"https://api.github.com/repos/Codertocat/Hello-World/issues/comments{/number}",contents_url:"https://api.github.com/repos/Codertocat/Hello-World/contents/{+path}",compare_url:"https://api.github.com/repos/Codertocat/Hello-World/compare/{base}...{head}",merges_url:"https://api.github.com/repos/Codertocat/Hello-World/merges",archive_url:"https://api.github.com/repos/Codertocat/Hello-World/{archive_format}{/ref}",downloads_url:"https://api.github.com/repos/Codertocat/Hello-World/downloads",issues_url:"https://api.github.com/repos/Codertocat/Hello-World/issues{/number}",pulls_url:"https://api.github.com/repos/Codertocat/Hello-World/pulls{/number}",milestones_url:"https://api.github.com/repos/Codertocat/Hello-World/milestones{/number}",notifications_url:"https://api.github.com/repos/Codertocat/Hello-World/notifications{?since,all,participating}",labels_url:"https://api.github.com/repos/Codertocat/Hello-World/labels{/name}",releases_url:"https://api.github.com/repos/Codertocat/Hello-World/releases{/id}",deployments_url:"https://api.github.com/repos/Codertocat/Hello-World/deployments",created_at:"2019-05-15T15:19:25Z",updated_at:"2019-05-15T15:21:03Z",pushed_at:"2019-05-15T15:20:57Z",git_url:"git://github.com/Codertocat/Hello-World.git",ssh_url:"git@github.com:Codertocat/Hello-World.git",clone_url:"https://github.com/Codertocat/Hello-World.git",svn_url:"https://github.com/Codertocat/Hello-World",homepage:null,size:0,stargazers_count:0,watchers_count:0,language:"Ruby",has_issues:!0,has_projects:!0,has_downloads:!0,has_wiki:!0,has_pages:!0,forks_count:1,mirror_url:null,archived:!1,disabled:!1,open_issues_count:2,license:null,forks:1,open_issues:2,watchers:0,default_branch:"master"},sender:{login:"Codertocat",id:21031067,node_id:"MDQ6VXNlcjIxMDMxMDY3",avatar_url:"https://avatars1.githubusercontent.com/u/21031067?v=4",gravatar_id:"",url:"https://api.github.com/users/Codertocat",html_url:"https://github.com/Codertocat",followers_url:"https://api.github.com/users/Codertocat/followers",following_url:"https://api.github.com/users/Codertocat/following{/other_user}",gists_url:"https://api.github.com/users/Codertocat/gists{/gist_id}",starred_url:"https://api.github.com/users/Codertocat/starred{/owner}{/repo}",subscriptions_url:"https://api.github.com/users/Codertocat/subscriptions",organizations_url:"https://api.github.com/users/Codertocat/orgs",repos_url:"https://api.github.com/users/Codertocat/repos",events_url:"https://api.github.com/users/Codertocat/events{/privacy}",received_events_url:"https://api.github.com/users/Codertocat/received_events",type:"User",site_admin:!1}},marketplace_purchase:{action:"purchased",effective_date:"2017-10-25T00:00:00+00:00",sender:{login:"username",id:3877742,avatar_url:"https://avatars2.githubusercontent.com/u/3877742?v=4",gravatar_id:"",url:"https://api.github.com/users/username",html_url:"https://github.com/username",followers_url:"https://api.github.com/users/username/followers",following_url:"https://api.github.com/users/username/following{/other_user}",gists_url:"https://api.github.com/users/username/gists{/gist_id}",starred_url:"https://api.github.com/users/username/starred{/owner}{/repo}",subscriptions_url:"https://api.github.com/users/username/subscriptions",organizations_url:"https://api.github.com/users/username/orgs",repos_url:"https://api.github.com/users/username/repos",events_url:"https://api.github.com/users/username/events{/privacy}",received_events_url:"https://api.github.com/users/username/received_events",type:"User",site_admin:!0,email:"username@email.com"},marketplace_purchase:{account:{type:"Organization",id:18404719,login:"username",organization_billing_email:"username@email.com"},billing_cycle:"monthly",unit_count:1,on_free_trial:!1,free_trial_ends_on:null,next_billing_date:"2017-11-05T00:00:00+00:00",plan:{id:435,name:"Basic Plan",description:"Basic Plan",monthly_price_in_cents:1e3,yearly_price_in_cents:1e4,price_model:"per-unit",has_free_trial:!0,unit_name:"seat",bullets:["Is Basic","Because Basic "]}}},member:{action:"added",member:{login:"hacktocat",id:39652351,node_id:"MDQ6VXNlcjM5NjUyMzUx",avatar_url:"https://avatars2.githubusercontent.com/u/39652351?v=4",gravatar_id:"",url:"https://api.github.com/users/hacktocat",html_url:"https://github.com/hacktocat",followers_url:"https://api.github.com/users/hacktocat/followers",following_url:"https://api.github.com/users/hacktocat/following{/other_user}",gists_url:"https://api.github.com/users/hacktocat/gists{/gist_id}",starred_url:"https://api.github.com/users/hacktocat/starred{/owner}{/repo}",subscriptions_url:"https://api.github.com/users/hacktocat/subscriptions",organizations_url:"https://api.github.com/users/hacktocat/orgs",repos_url:"https://api.github.com/users/hacktocat/repos",events_url:"https://api.github.com/users/hacktocat/events{/privacy}",received_events_url:"https://api.github.com/users/hacktocat/received_events",type:"User",site_admin:!1},repository:{id:186853002,node_id:"MDEwOlJlcG9zaXRvcnkxODY4NTMwMDI=",name:"Hello-World",full_name:"Codertocat/Hello-World",private:!1,owner:{login:"Codertocat",id:21031067,node_id:"MDQ6VXNlcjIxMDMxMDY3",avatar_url:"https://avatars1.githubusercontent.com/u/21031067?v=4",gravatar_id:"",url:"https://api.github.com/users/Codertocat",html_url:"https://github.com/Codertocat",followers_url:"https://api.github.com/users/Codertocat/followers",following_url:"https://api.github.com/users/Codertocat/following{/other_user}",gists_url:"https://api.github.com/users/Codertocat/gists{/gist_id}",starred_url:"https://api.github.com/users/Codertocat/starred{/owner}{/repo}",subscriptions_url:"https://api.github.com/users/Codertocat/subscriptions",organizations_url:"https://api.github.com/users/Codertocat/orgs",repos_url:"https://api.github.com/users/Codertocat/repos",events_url:"https://api.github.com/users/Codertocat/events{/privacy}",received_events_url:"https://api.github.com/users/Codertocat/received_events",type:"User",site_admin:!1},html_url:"https://github.com/Codertocat/Hello-World",description:null,fork:!1,url:"https://api.github.com/repos/Codertocat/Hello-World",forks_url:"https://api.github.com/repos/Codertocat/Hello-World/forks",keys_url:"https://api.github.com/repos/Codertocat/Hello-World/keys{/key_id}",collaborators_url:"https://api.github.com/repos/Codertocat/Hello-World/collaborators{/collaborator}",teams_url:"https://api.github.com/repos/Codertocat/Hello-World/teams",hooks_url:"https://api.github.com/repos/Codertocat/Hello-World/hooks",issue_events_url:"https://api.github.com/repos/Codertocat/Hello-World/issues/events{/number}",events_url:"https://api.github.com/repos/Codertocat/Hello-World/events",assignees_url:"https://api.github.com/repos/Codertocat/Hello-World/assignees{/user}",branches_url:"https://api.github.com/repos/Codertocat/Hello-World/branches{/branch}",tags_url:"https://api.github.com/repos/Codertocat/Hello-World/tags",blobs_url:"https://api.github.com/repos/Codertocat/Hello-World/git/blobs{/sha}",git_tags_url:"https://api.github.com/repos/Codertocat/Hello-World/git/tags{/sha}",git_refs_url:"https://api.github.com/repos/Codertocat/Hello-World/git/refs{/sha}",trees_url:"https://api.github.com/repos/Codertocat/Hello-World/git/trees{/sha}",statuses_url:"https://api.github.com/repos/Codertocat/Hello-World/statuses/{sha}",languages_url:"https://api.github.com/repos/Codertocat/Hello-World/languages",stargazers_url:"https://api.github.com/repos/Codertocat/Hello-World/stargazers",contributors_url:"https://api.github.com/repos/Codertocat/Hello-World/contributors",subscribers_url:"https://api.github.com/repos/Codertocat/Hello-World/subscribers",subscription_url:"https://api.github.com/repos/Codertocat/Hello-World/subscription",commits_url:"https://api.github.com/repos/Codertocat/Hello-World/commits{/sha}",git_commits_url:"https://api.github.com/repos/Codertocat/Hello-World/git/commits{/sha}",comments_url:"https://api.github.com/repos/Codertocat/Hello-World/comments{/number}",issue_comment_url:"https://api.github.com/repos/Codertocat/Hello-World/issues/comments{/number}",contents_url:"https://api.github.com/repos/Codertocat/Hello-World/contents/{+path}",compare_url:"https://api.github.com/repos/Codertocat/Hello-World/compare/{base}...{head}",merges_url:"https://api.github.com/repos/Codertocat/Hello-World/merges",archive_url:"https://api.github.com/repos/Codertocat/Hello-World/{archive_format}{/ref}",downloads_url:"https://api.github.com/repos/Codertocat/Hello-World/downloads",issues_url:"https://api.github.com/repos/Codertocat/Hello-World/issues{/number}",pulls_url:"https://api.github.com/repos/Codertocat/Hello-World/pulls{/number}",milestones_url:"https://api.github.com/repos/Codertocat/Hello-World/milestones{/number}",notifications_url:"https://api.github.com/repos/Codertocat/Hello-World/notifications{?since,all,participating}",labels_url:"https://api.github.com/repos/Codertocat/Hello-World/labels{/name}",releases_url:"https://api.github.com/repos/Codertocat/Hello-World/releases{/id}",deployments_url:"https://api.github.com/repos/Codertocat/Hello-World/deployments",created_at:"2019-05-15T15:19:25Z",updated_at:"2019-05-15T15:20:41Z",pushed_at:"2019-05-15T15:20:57Z",git_url:"git://github.com/Codertocat/Hello-World.git",ssh_url:"git@github.com:Codertocat/Hello-World.git",clone_url:"https://github.com/Codertocat/Hello-World.git",svn_url:"https://github.com/Codertocat/Hello-World",homepage:null,size:0,stargazers_count:0,watchers_count:0,language:"Ruby",has_issues:!0,has_projects:!0,has_downloads:!0,has_wiki:!0,has_pages:!0,forks_count:1,mirror_url:null,archived:!1,disabled:!1,open_issues_count:2,license:null,forks:1,open_issues:2,watchers:0,default_branch:"master"},sender:{login:"hacktocat",id:39652351,node_id:"MDQ6VXNlcjM5NjUyMzUx",avatar_url:"https://avatars2.githubusercontent.com/u/39652351?v=4",gravatar_id:"",url:"https://api.github.com/users/hacktocat",html_url:"https://github.com/hacktocat",followers_url:"https://api.github.com/users/hacktocat/followers",following_url:"https://api.github.com/users/hacktocat/following{/other_user}",gists_url:"https://api.github.com/users/hacktocat/gists{/gist_id}",starred_url:"https://api.github.com/users/hacktocat/starred{/owner}{/repo}",subscriptions_url:"https://api.github.com/users/hacktocat/subscriptions",organizations_url:"https://api.github.com/users/hacktocat/orgs",repos_url:"https://api.github.com/users/hacktocat/repos",events_url:"https://api.github.com/users/hacktocat/events{/privacy}",received_events_url:"https://api.github.com/users/hacktocat/received_events",type:"User",site_admin:!1}},membership:{action:"removed",scope:"team",member:{login:"Codertocat",id:21031067,node_id:"MDQ6VXNlcjIxMDMxMDY3",avatar_url:"https://avatars1.githubusercontent.com/u/21031067?v=4",gravatar_id:"",url:"https://api.github.com/users/Codertocat",html_url:"https://github.com/Codertocat",followers_url:"https://api.github.com/users/Codertocat/followers",following_url:"https://api.github.com/users/Codertocat/following{/other_user}",gists_url:"https://api.github.com/users/Codertocat/gists{/gist_id}",starred_url:"https://api.github.com/users/Codertocat/starred{/owner}{/repo}",subscriptions_url:"https://api.github.com/users/Codertocat/subscriptions",organizations_url:"https://api.github.com/users/Codertocat/orgs",repos_url:"https://api.github.com/users/Codertocat/repos",events_url:"https://api.github.com/users/Codertocat/events{/privacy}",received_events_url:"https://api.github.com/users/Codertocat/received_events",type:"User",site_admin:!1},sender:{login:"Codertocat",id:21031067,node_id:"MDQ6VXNlcjIxMDMxMDY3",avatar_url:"https://avatars1.githubusercontent.com/u/21031067?v=4",gravatar_id:"",url:"https://api.github.com/users/Codertocat",html_url:"https://github.com/Codertocat",followers_url:"https://api.github.com/users/Codertocat/followers",following_url:"https://api.github.com/users/Codertocat/following{/other_user}",gists_url:"https://api.github.com/users/Codertocat/gists{/gist_id}",starred_url:"https://api.github.com/users/Codertocat/starred{/owner}{/repo}",subscriptions_url:"https://api.github.com/users/Codertocat/subscriptions",organizations_url:"https://api.github.com/users/Codertocat/orgs",repos_url:"https://api.github.com/users/Codertocat/repos",events_url:"https://api.github.com/users/Codertocat/events{/privacy}",received_events_url:"https://api.github.com/users/Codertocat/received_events",type:"User",site_admin:!1},team:{name:"github",id:3253328,node_id:"MDQ6VGVhbTMyNTMzMjg=",slug:"github",description:"Open-source team",privacy:"secret",url:"https://api.github.com/teams/3253328",html_url:"https://github.com/orgs/Octocoders/teams/github",members_url:"https://api.github.com/teams/3253328/members{/member}",repositories_url:"https://api.github.com/teams/3253328/repos",permission:"pull"},organization:{login:"Octocoders",id:38302899,node_id:"MDEyOk9yZ2FuaXphdGlvbjM4MzAyODk5",url:"https://api.github.com/orgs/Octocoders",repos_url:"https://api.github.com/orgs/Octocoders/repos",events_url:"https://api.github.com/orgs/Octocoders/events",hooks_url:"https://api.github.com/orgs/Octocoders/hooks",issues_url:"https://api.github.com/orgs/Octocoders/issues",members_url:"https://api.github.com/orgs/Octocoders/members{/member}",public_members_url:"https://api.github.com/orgs/Octocoders/public_members{/member}",avatar_url:"https://avatars1.githubusercontent.com/u/38302899?v=4",description:""}},meta:{action:"deleted",hook_id:101047067,hook:{type:"Repository",id:101047067,name:"web",active:!0,events:["meta"],config:{content_type:"json",insecure_ssl:"0",url:"http://example.com/hook"},updated_at:"2019-04-10T03:57:12Z",created_at:"2019-04-10T03:57:12Z"},repository:{id:135493233,node_id:"MDEwOlJlcG9zaXRvcnkxMzU0OTMyMzM=",name:"Hello-World",full_name:"Codertocat/Hello-World",owner:{login:"Codertocat",id:21031067,node_id:"MDQ6VXNlcjIxMDMxMDY3",avatar_url:"https://avatars1.githubusercontent.com/u/21031067?v=4",gravatar_id:"",url:"https://api.github.com/users/Codertocat",html_url:"https://github.com/Codertocat",followers_url:"https://api.github.com/users/Codertocat/followers",following_url:"https://api.github.com/users/Codertocat/following{/other_user}",gists_url:"https://api.github.com/users/Codertocat/gists{/gist_id}",starred_url:"https://api.github.com/users/Codertocat/starred{/owner}{/repo}",subscriptions_url:"https://api.github.com/users/Codertocat/subscriptions",organizations_url:"https://api.github.com/users/Codertocat/orgs",repos_url:"https://api.github.com/users/Codertocat/repos",events_url:"https://api.github.com/users/Codertocat/events{/privacy}",received_events_url:"https://api.github.com/users/Codertocat/received_events",type:"User",site_admin:!1},private:!1,html_url:"https://github.com/Codertocat/Hello-World",description:null,fork:!1,url:"https://api.github.com/repos/Codertocat/Hello-World",forks_url:"https://api.github.com/repos/Codertocat/Hello-World/forks",keys_url:"https://api.github.com/repos/Codertocat/Hello-World/keys{/key_id}",collaborators_url:"https://api.github.com/repos/Codertocat/Hello-World/collaborators{/collaborator}",teams_url:"https://api.github.com/repos/Codertocat/Hello-World/teams",hooks_url:"https://api.github.com/repos/Codertocat/Hello-World/hooks",issue_events_url:"https://api.github.com/repos/Codertocat/Hello-World/issues/events{/number}",events_url:"https://api.github.com/repos/Codertocat/Hello-World/events",assignees_url:"https://api.github.com/repos/Codertocat/Hello-World/assignees{/user}",branches_url:"https://api.github.com/repos/Codertocat/Hello-World/branches{/branch}",tags_url:"https://api.github.com/repos/Codertocat/Hello-World/tags",blobs_url:"https://api.github.com/repos/Codertocat/Hello-World/git/blobs{/sha}",git_tags_url:"https://api.github.com/repos/Codertocat/Hello-World/git/tags{/sha}",git_refs_url:"https://api.github.com/repos/Codertocat/Hello-World/git/refs{/sha}",trees_url:"https://api.github.com/repos/Codertocat/Hello-World/git/trees{/sha}",statuses_url:"https://api.github.com/repos/Codertocat/Hello-World/statuses/{sha}",languages_url:"https://api.github.com/repos/Codertocat/Hello-World/languages",stargazers_url:"https://api.github.com/repos/Codertocat/Hello-World/stargazers",contributors_url:"https://api.github.com/repos/Codertocat/Hello-World/contributors",subscribers_url:"https://api.github.com/repos/Codertocat/Hello-World/subscribers",subscription_url:"https://api.github.com/repos/Codertocat/Hello-World/subscription",commits_url:"https://api.github.com/repos/Codertocat/Hello-World/commits{/sha}",git_commits_url:"https://api.github.com/repos/Codertocat/Hello-World/git/commits{/sha}",comments_url:"https://api.github.com/repos/Codertocat/Hello-World/comments{/number}",issue_comment_url:"https://api.github.com/repos/Codertocat/Hello-World/issues/comments{/number}",contents_url:"https://api.github.com/repos/Codertocat/Hello-World/contents/{+path}",compare_url:"https://api.github.com/repos/Codertocat/Hello-World/compare/{base}...{head}",merges_url:"https://api.github.com/repos/Codertocat/Hello-World/merges",archive_url:"https://api.github.com/repos/Codertocat/Hello-World/{archive_format}{/ref}",downloads_url:"https://api.github.com/repos/Codertocat/Hello-World/downloads",issues_url:"https://api.github.com/repos/Codertocat/Hello-World/issues{/number}",pulls_url:"https://api.github.com/repos/Codertocat/Hello-World/pulls{/number}",milestones_url:"https://api.github.com/repos/Codertocat/Hello-World/milestones{/number}",notifications_url:"https://api.github.com/repos/Codertocat/Hello-World/notifications{?since,all,participating}",labels_url:"https://api.github.com/repos/Codertocat/Hello-World/labels{/name}",releases_url:"https://api.github.com/repos/Codertocat/Hello-World/releases{/id}",deployments_url:"https://api.github.com/repos/Codertocat/Hello-World/deployments",created_at:"2018-05-30T20:18:04Z",updated_at:"2018-05-30T20:18:50Z",pushed_at:"2018-05-30T20:18:48Z",git_url:"git://github.com/Codertocat/Hello-World.git",ssh_url:"git@github.com:Codertocat/Hello-World.git",clone_url:"https://github.com/Codertocat/Hello-World.git",svn_url:"https://github.com/Codertocat/Hello-World",homepage:null,size:0,stargazers_count:0,watchers_count:0,language:null,has_issues:!0,has_projects:!0,has_downloads:!0,has_wiki:!0,has_pages:!0,forks_count:0,mirror_url:null,archived:!1,open_issues_count:1,license:null,forks:0,open_issues:1,watchers:0,default_branch:"master"},sender:{login:"Codertocat",id:21031067,node_id:"MDQ6VXNlcjIxMDMxMDY3",avatar_url:"https://avatars1.githubusercontent.com/u/21031067?v=4",gravatar_id:"",url:"https://api.github.com/users/Codertocat",html_url:"https://github.com/Codertocat",followers_url:"https://api.github.com/users/Codertocat/followers",following_url:"https://api.github.com/users/Codertocat/following{/other_user}",gists_url:"https://api.github.com/users/Codertocat/gists{/gist_id}",starred_url:"https://api.github.com/users/Codertocat/starred{/owner}{/repo}",subscriptions_url:"https://api.github.com/users/Codertocat/subscriptions",organizations_url:"https://api.github.com/users/Codertocat/orgs",repos_url:"https://api.github.com/users/Codertocat/repos",events_url:"https://api.github.com/users/Codertocat/events{/privacy}",received_events_url:"https://api.github.com/users/Codertocat/received_events",type:"User",site_admin:!1}},milestone:{action:"created",milestone:{url:"https://api.github.com/repos/Codertocat/Hello-World/milestones/1",html_url:"https://github.com/Codertocat/Hello-World/milestone/1",labels_url:"https://api.github.com/repos/Codertocat/Hello-World/milestones/1/labels",id:4317517,node_id:"MDk6TWlsZXN0b25lNDMxNzUxNw==",number:1,title:"v1.0",description:"Add new space flight simulator",creator:{login:"Codertocat",id:21031067,node_id:"MDQ6VXNlcjIxMDMxMDY3",avatar_url:"https://avatars1.githubusercontent.com/u/21031067?v=4",gravatar_id:"",url:"https://api.github.com/users/Codertocat",html_url:"https://github.com/Codertocat",followers_url:"https://api.github.com/users/Codertocat/followers",following_url:"https://api.github.com/users/Codertocat/following{/other_user}",gists_url:"https://api.github.com/users/Codertocat/gists{/gist_id}",starred_url:"https://api.github.com/users/Codertocat/starred{/owner}{/repo}",subscriptions_url:"https://api.github.com/users/Codertocat/subscriptions",organizations_url:"https://api.github.com/users/Codertocat/orgs",repos_url:"https://api.github.com/users/Codertocat/repos",events_url:"https://api.github.com/users/Codertocat/events{/privacy}",received_events_url:"https://api.github.com/users/Codertocat/received_events",type:"User",site_admin:!1},open_issues:0,closed_issues:0,state:"open",created_at:"2019-05-15T15:20:17Z",updated_at:"2019-05-15T15:20:17Z",due_on:"2019-05-23T07:00:00Z",closed_at:null},repository:{id:186853002,node_id:"MDEwOlJlcG9zaXRvcnkxODY4NTMwMDI=",name:"Hello-World",full_name:"Codertocat/Hello-World",private:!1,owner:{login:"Codertocat",id:21031067,node_id:"MDQ6VXNlcjIxMDMxMDY3",avatar_url:"https://avatars1.githubusercontent.com/u/21031067?v=4",gravatar_id:"",url:"https://api.github.com/users/Codertocat",html_url:"https://github.com/Codertocat",followers_url:"https://api.github.com/users/Codertocat/followers",following_url:"https://api.github.com/users/Codertocat/following{/other_user}",gists_url:"https://api.github.com/users/Codertocat/gists{/gist_id}",starred_url:"https://api.github.com/users/Codertocat/starred{/owner}{/repo}",subscriptions_url:"https://api.github.com/users/Codertocat/subscriptions",organizations_url:"https://api.github.com/users/Codertocat/orgs",repos_url:"https://api.github.com/users/Codertocat/repos",events_url:"https://api.github.com/users/Codertocat/events{/privacy}",received_events_url:"https://api.github.com/users/Codertocat/received_events",type:"User",site_admin:!1},html_url:"https://github.com/Codertocat/Hello-World",description:null,fork:!1,url:"https://api.github.com/repos/Codertocat/Hello-World",forks_url:"https://api.github.com/repos/Codertocat/Hello-World/forks",keys_url:"https://api.github.com/repos/Codertocat/Hello-World/keys{/key_id}",collaborators_url:"https://api.github.com/repos/Codertocat/Hello-World/collaborators{/collaborator}",teams_url:"https://api.github.com/repos/Codertocat/Hello-World/teams",hooks_url:"https://api.github.com/repos/Codertocat/Hello-World/hooks",issue_events_url:"https://api.github.com/repos/Codertocat/Hello-World/issues/events{/number}",events_url:"https://api.github.com/repos/Codertocat/Hello-World/events",assignees_url:"https://api.github.com/repos/Codertocat/Hello-World/assignees{/user}",branches_url:"https://api.github.com/repos/Codertocat/Hello-World/branches{/branch}",tags_url:"https://api.github.com/repos/Codertocat/Hello-World/tags",blobs_url:"https://api.github.com/repos/Codertocat/Hello-World/git/blobs{/sha}",git_tags_url:"https://api.github.com/repos/Codertocat/Hello-World/git/tags{/sha}",git_refs_url:"https://api.github.com/repos/Codertocat/Hello-World/git/refs{/sha}",trees_url:"https://api.github.com/repos/Codertocat/Hello-World/git/trees{/sha}",statuses_url:"https://api.github.com/repos/Codertocat/Hello-World/statuses/{sha}",languages_url:"https://api.github.com/repos/Codertocat/Hello-World/languages",stargazers_url:"https://api.github.com/repos/Codertocat/Hello-World/stargazers",contributors_url:"https://api.github.com/repos/Codertocat/Hello-World/contributors",subscribers_url:"https://api.github.com/repos/Codertocat/Hello-World/subscribers",subscription_url:"https://api.github.com/repos/Codertocat/Hello-World/subscription",commits_url:"https://api.github.com/repos/Codertocat/Hello-World/commits{/sha}",git_commits_url:"https://api.github.com/repos/Codertocat/Hello-World/git/commits{/sha}",comments_url:"https://api.github.com/repos/Codertocat/Hello-World/comments{/number}",issue_comment_url:"https://api.github.com/repos/Codertocat/Hello-World/issues/comments{/number}",contents_url:"https://api.github.com/repos/Codertocat/Hello-World/contents/{+path}",compare_url:"https://api.github.com/repos/Codertocat/Hello-World/compare/{base}...{head}",merges_url:"https://api.github.com/repos/Codertocat/Hello-World/merges",archive_url:"https://api.github.com/repos/Codertocat/Hello-World/{archive_format}{/ref}",downloads_url:"https://api.github.com/repos/Codertocat/Hello-World/downloads",issues_url:"https://api.github.com/repos/Codertocat/Hello-World/issues{/number}",pulls_url:"https://api.github.com/repos/Codertocat/Hello-World/pulls{/number}",milestones_url:"https://api.github.com/repos/Codertocat/Hello-World/milestones{/number}",notifications_url:"https://api.github.com/repos/Codertocat/Hello-World/notifications{?since,all,participating}",labels_url:"https://api.github.com/repos/Codertocat/Hello-World/labels{/name}",releases_url:"https://api.github.com/repos/Codertocat/Hello-World/releases{/id}",deployments_url:"https://api.github.com/repos/Codertocat/Hello-World/deployments",created_at:"2019-05-15T15:19:25Z",updated_at:"2019-05-15T15:19:27Z",pushed_at:"2019-05-15T15:20:13Z",git_url:"git://github.com/Codertocat/Hello-World.git",ssh_url:"git@github.com:Codertocat/Hello-World.git",clone_url:"https://github.com/Codertocat/Hello-World.git",svn_url:"https://github.com/Codertocat/Hello-World",homepage:null,size:0,stargazers_count:0,watchers_count:0,language:null,has_issues:!0,has_projects:!0,has_downloads:!0,has_wiki:!0,has_pages:!0,forks_count:0,mirror_url:null,archived:!1,disabled:!1,open_issues_count:0,license:null,forks:0,open_issues:0,watchers:0,default_branch:"master"},sender:{login:"Codertocat",id:21031067,node_id:"MDQ6VXNlcjIxMDMxMDY3",avatar_url:"https://avatars1.githubusercontent.com/u/21031067?v=4",gravatar_id:"",url:"https://api.github.com/users/Codertocat",html_url:"https://github.com/Codertocat",followers_url:"https://api.github.com/users/Codertocat/followers",following_url:"https://api.github.com/users/Codertocat/following{/other_user}",gists_url:"https://api.github.com/users/Codertocat/gists{/gist_id}",starred_url:"https://api.github.com/users/Codertocat/starred{/owner}{/repo}",subscriptions_url:"https://api.github.com/users/Codertocat/subscriptions",organizations_url:"https://api.github.com/users/Codertocat/orgs",repos_url:"https://api.github.com/users/Codertocat/repos",events_url:"https://api.github.com/users/Codertocat/events{/privacy}",received_events_url:"https://api.github.com/users/Codertocat/received_events",type:"User",site_admin:!1}},org_block:{action:"blocked",blocked_user:{login:"hacktocat",id:39652351,node_id:"MDQ6VXNlcjM5NjUyMzUx",avatar_url:"https://avatars2.githubusercontent.com/u/39652351?v=4",gravatar_id:"",url:"https://api.github.com/users/hacktocat",html_url:"https://github.com/hacktocat",followers_url:"https://api.github.com/users/hacktocat/followers",following_url:"https://api.github.com/users/hacktocat/following{/other_user}",gists_url:"https://api.github.com/users/hacktocat/gists{/gist_id}",starred_url:"https://api.github.com/users/hacktocat/starred{/owner}{/repo}",subscriptions_url:"https://api.github.com/users/hacktocat/subscriptions",organizations_url:"https://api.github.com/users/hacktocat/orgs",repos_url:"https://api.github.com/users/hacktocat/repos",events_url:"https://api.github.com/users/hacktocat/events{/privacy}",received_events_url:"https://api.github.com/users/hacktocat/received_events",type:"User",site_admin:!1},organization:{login:"Octocoders",id:38302899,node_id:"MDEyOk9yZ2FuaXphdGlvbjM4MzAyODk5",url:"https://api.github.com/orgs/Octocoders",repos_url:"https://api.github.com/orgs/Octocoders/repos",events_url:"https://api.github.com/orgs/Octocoders/events",hooks_url:"https://api.github.com/orgs/Octocoders/hooks",issues_url:"https://api.github.com/orgs/Octocoders/issues",members_url:"https://api.github.com/orgs/Octocoders/members{/member}",public_members_url:"https://api.github.com/orgs/Octocoders/public_members{/member}",avatar_url:"https://avatars1.githubusercontent.com/u/38302899?v=4",description:""},sender:{login:"Octocoders",id:38302899,node_id:"MDEyOk9yZ2FuaXphdGlvbjM4MzAyODk5",avatar_url:"https://avatars1.githubusercontent.com/u/38302899?v=4",gravatar_id:"",url:"https://api.github.com/users/Octocoders",html_url:"https://github.com/Octocoders",followers_url:"https://api.github.com/users/Octocoders/followers",following_url:"https://api.github.com/users/Octocoders/following{/other_user}",gists_url:"https://api.github.com/users/Octocoders/gists{/gist_id}",starred_url:"https://api.github.com/users/Octocoders/starred{/owner}{/repo}",subscriptions_url:"https://api.github.com/users/Octocoders/subscriptions",organizations_url:"https://api.github.com/users/Octocoders/orgs",repos_url:"https://api.github.com/users/Octocoders/repos",events_url:"https://api.github.com/users/Octocoders/events{/privacy}",received_events_url:"https://api.github.com/users/Octocoders/received_events",type:"Organization",site_admin:!1}},organization:{action:"member_added",membership:{url:"https://api.github.com/orgs/Octocoders/memberships/hacktocat",state:"pending",role:"member",organization_url:"https://api.github.com/orgs/Octocoders",user:{login:"hacktocat",id:39652351,node_id:"MDQ6VXNlcjM5NjUyMzUx",avatar_url:"https://avatars2.githubusercontent.com/u/39652351?v=4",gravatar_id:"",url:"https://api.github.com/users/hacktocat",html_url:"https://github.com/hacktocat",followers_url:"https://api.github.com/users/hacktocat/followers",following_url:"https://api.github.com/users/hacktocat/following{/other_user}",gists_url:"https://api.github.com/users/hacktocat/gists{/gist_id}",starred_url:"https://api.github.com/users/hacktocat/starred{/owner}{/repo}",subscriptions_url:"https://api.github.com/users/hacktocat/subscriptions",organizations_url:"https://api.github.com/users/hacktocat/orgs",repos_url:"https://api.github.com/users/hacktocat/repos",events_url:"https://api.github.com/users/hacktocat/events{/privacy}",received_events_url:"https://api.github.com/users/hacktocat/received_events",type:"User",site_admin:!1}},organization:{login:"Octocoders",id:38302899,node_id:"MDEyOk9yZ2FuaXphdGlvbjM4MzAyODk5",url:"https://api.github.com/orgs/Octocoders",repos_url:"https://api.github.com/orgs/Octocoders/repos",events_url:"https://api.github.com/orgs/Octocoders/events",hooks_url:"https://api.github.com/orgs/Octocoders/hooks",issues_url:"https://api.github.com/orgs/Octocoders/issues",members_url:"https://api.github.com/orgs/Octocoders/members{/member}",public_members_url:"https://api.github.com/orgs/Octocoders/public_members{/member}",avatar_url:"https://avatars1.githubusercontent.com/u/38302899?v=4",description:""},sender:{login:"Codertocat",id:21031067,node_id:"MDQ6VXNlcjIxMDMxMDY3",avatar_url:"https://avatars1.githubusercontent.com/u/21031067?v=4",gravatar_id:"",url:"https://api.github.com/users/Codertocat",html_url:"https://github.com/Codertocat",followers_url:"https://api.github.com/users/Codertocat/followers",following_url:"https://api.github.com/users/Codertocat/following{/other_user}",gists_url:"https://api.github.com/users/Codertocat/gists{/gist_id}",starred_url:"https://api.github.com/users/Codertocat/starred{/owner}{/repo}",subscriptions_url:"https://api.github.com/users/Codertocat/subscriptions",organizations_url:"https://api.github.com/users/Codertocat/orgs",repos_url:"https://api.github.com/users/Codertocat/repos",events_url:"https://api.github.com/users/Codertocat/events{/privacy}",received_events_url:"https://api.github.com/users/Codertocat/received_events",type:"User",site_admin:!1}},package:{action:"published",package:{id:10696,name:"hello-world-npm",package_type:"npm",html_url:"https://github.com/Codertocat/hello-world-npm/packages/10696",created_at:"2019-05-09T23:28:29Z",updated_at:"2019-05-09T23:28:29Z",owner:{login:"Codertocat",id:21031067,node_id:"MDQ6VXNlcjIxMDMxMDY3",avatar_url:"https://avatars1.githubusercontent.com/u/21031067?v=4",gravatar_id:"",url:"https://api.github.com/users/Codertocat",html_url:"https://github.com/Codertocat",followers_url:"https://api.github.com/users/Codertocat/followers",following_url:"https://api.github.com/users/Codertocat/following{/other_user}",gists_url:"https://api.github.com/users/Codertocat/gists{/gist_id}",starred_url:"https://api.github.com/users/Codertocat/starred{/owner}{/repo}",subscriptions_url:"https://api.github.com/users/Codertocat/subscriptions",organizations_url:"https://api.github.com/users/Codertocat/orgs",repos_url:"https://api.github.com/users/Codertocat/repos",events_url:"https://api.github.com/users/Codertocat/events{/privacy}",received_events_url:"https://api.github.com/users/Codertocat/received_events",type:"User",site_admin:!1},package_version:{id:24147,version:"1.0.0",summary:"A simple npm package to demonstrate GitHub Packages",body:"# hello-world-npm\n\nThis is a simple npm package that demonstrates the [Github Packages](https://github.com/features/package).\n\n## Installation \n\n`$ npm install`\n\n## Usage\n\n```\nconst myPackage = require('hello-world-node-package');\nmyPackage.helloWorld();\n```\n\n",body_html:"<h1>hello-world-npm</h1>\n<p>This is a simple npm package that demonstrates the <a href=\"https://github.com/features/package\">Github Package Registry</a>.</p>\n<h2>Installation</h2>\n<p><code>$ npm install</code></p>\n<h2>Usage</h2>\n<pre><code>const myPackage = require('hello-world-node-package');\nmyPackage.helloWorld();\n</code></pre>",release:{url:"https://api.github.com/repos/Codertocat/hello-world-npm/releases/17264286",html_url:"https://github.com/Codertocat/hello-world-npm/releases/tag/1.0.0",id:17264286,tag_name:"1.0.0",target_commitish:"master",name:"1.0.0",draft:!1,author:{login:"Codertocat",id:21031067,node_id:"MDQ6VXNlcjIxMDMxMDY3",avatar_url:"https://avatars1.githubusercontent.com/u/21031067?v=4",gravatar_id:"",url:"https://api.github.com/users/Codertocat",html_url:"https://github.com/Codertocat",followers_url:"https://api.github.com/users/Codertocat/followers",following_url:"https://api.github.com/users/Codertocat/following{/other_user}",gists_url:"https://api.github.com/users/Codertocat/gists{/gist_id}",starred_url:"https://api.github.com/users/Codertocat/starred{/owner}{/repo}",subscriptions_url:"https://api.github.com/users/Codertocat/subscriptions",organizations_url:"https://api.github.com/users/Codertocat/orgs",repos_url:"https://api.github.com/users/Codertocat/repos",events_url:"https://api.github.com/users/Codertocat/events{/privacy}",received_events_url:"https://api.github.com/users/Codertocat/received_events",type:"User",site_admin:!1},prerelease:!1,created_at:"2019-05-09T23:24:40Z",published_at:"2019-05-09T23:26:59Z"},manifest:'{"_from":"","_id":"@codertocat/hello-world-npm@1.0.0","_nodeVersion":"10.0.0","_npmUser":{},"_npmVersion":"5.6.0","_shasum":"","author":{"name":"Codertocat"},"bugs":{"url":"https://github.com/Codertocat/hello-world-npm/issues"},"description":"A simple npm package to demonstrate GitHub Package Registry","dependencies":null,"devDependencies":null,"peerDependencies":null,"dist":{"integrity":"sha512-CcChRwjJk+pvGVERbgdjc0w5h6HrOs6jK6OJuHmFcmbnGuhiy9tPMtb4WcSSdvwrktAxf96LsJBNqeIHAEHl3A==","shasum":"a413c56a12997ca1b56715ebe81d8c6e0ffe6abb","tarball":"http://npm.pkg.github.com/@codertocat/hello-world-npm/-/@codertocat/hello-world-npm-1.0.0.tgz"},"gitHead":"6c62fb45fe66bfb1ea9a66abc38f6a0cc974292b","homepage":"https://github.com/Codertocat/hello-world-npm#readme","license":"ISC","main":"index.js","name":"@codertocat/hello-world-npm","repository":{"type":"git","url":"git+https://github.com/Codertocat/hello-world-npm.git"},"scripts":{"test":"echo \\"Error: no test specified\\" \\u0026\\u0026 exit 1"},"version":"1.0.0"}',html_url:"https://github.com/Codertocat/hello-world-npm/packages/10696?version=1.0.0",tag_name:"1.0.0",target_commitish:"master",target_oid:"6c62fb45fe66bfb1ea9a66abc38f6a0cc974292b",draft:!1,prerelease:!1,created_at:"2019-05-09T23:28:29Z",updated_at:"2019-05-09T23:28:30Z",metadata:[],package_files:[{download_url:"https://github-production-package-file-4f11e5.s3.amazonaws.com/185882436/3e6d9b00-7288-11e9-9d72-c0df4c711800?X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=AKIAIWNJYAX4CSVEH53A%2F20190509%2Fus-east-1%2Fs3%2Faws4_request&X-Amz-Date=20190509T232830Z&X-Amz-Expires=300&X-Amz-Signature=4b825c49cd93370123a77d0f97a4ebb0d44efb76da46faf1e382f0c668b35819&X-Amz-SignedHeaders=host&actor_id=0&response-content-disposition=filename%3Dhello-world-npm-1.0.0-npm.tgz&response-content-type=application%2Foctet-stream",id:92167,name:"hello-world-npm-1.0.0-npm.tgz",sha256:"ba703915435b6ca2ca666b5d8332db34bf9dc37a198ed70d3a5fa5d08b8415c8",sha1:"a413c56a12997ca1b56715ebe81d8c6e0ffe6abb",md5:"56ebbd5a5a03367f62d0c732bafd3c66",content_type:"application/octet-stream",state:"uploaded",size:654,created_at:"2019-05-09T23:28:30Z",updated_at:"2019-05-09T23:28:30Z"}],author:{login:"Codertocat",id:21031067,node_id:"MDQ6VXNlcjIxMDMxMDY3",avatar_url:"https://avatars1.githubusercontent.com/u/21031067?v=4",gravatar_id:"",url:"https://api.github.com/users/Codertocat",html_url:"https://github.com/Codertocat",followers_url:"https://api.github.com/users/Codertocat/followers",following_url:"https://api.github.com/users/Codertocat/following{/other_user}",gists_url:"https://api.github.com/users/Codertocat/gists{/gist_id}",starred_url:"https://api.github.com/users/Codertocat/starred{/owner}{/repo}",subscriptions_url:"https://api.github.com/users/Codertocat/subscriptions",organizations_url:"https://api.github.com/users/Codertocat/orgs",repos_url:"https://api.github.com/users/Codertocat/repos",events_url:"https://api.github.com/users/Codertocat/events{/privacy}",received_events_url:"https://api.github.com/users/Codertocat/received_events",type:"User",site_admin:!1},installation_command:"npm install @Codertocat/@1.0.0"},registry:{about_url:"https://help.github.com/about-github-packages",name:"GitHub npm registry",type:"npm",url:"https://npm.pkg.github.com/@Codertocat",vendor:"GitHub Inc"}},repository:{id:185882436,node_id:"MDEwOlJlcG9zaXRvcnkxODU4ODI0MzY=",name:"hello-world-npm",full_name:"Codertocat/hello-world-npm",private:!0,owner:{login:"Codertocat",id:21031067,node_id:"MDQ6VXNlcjIxMDMxMDY3",avatar_url:"https://avatars1.githubusercontent.com/u/21031067?v=4",gravatar_id:"",url:"https://api.github.com/users/Codertocat",html_url:"https://github.com/Codertocat",followers_url:"https://api.github.com/users/Codertocat/followers",following_url:"https://api.github.com/users/Codertocat/following{/other_user}",gists_url:"https://api.github.com/users/Codertocat/gists{/gist_id}",starred_url:"https://api.github.com/users/Codertocat/starred{/owner}{/repo}",subscriptions_url:"https://api.github.com/users/Codertocat/subscriptions",organizations_url:"https://api.github.com/users/Codertocat/orgs",repos_url:"https://api.github.com/users/Codertocat/repos",events_url:"https://api.github.com/users/Codertocat/events{/privacy}",received_events_url:"https://api.github.com/users/Codertocat/received_events",type:"User",site_admin:!1},html_url:"https://github.com/Codertocat/hello-world-npm",description:null,fork:!1,url:"https://api.github.com/repos/Codertocat/hello-world-npm",forks_url:"https://api.github.com/repos/Codertocat/hello-world-npm/forks",keys_url:"https://api.github.com/repos/Codertocat/hello-world-npm/keys{/key_id}",collaborators_url:"https://api.github.com/repos/Codertocat/hello-world-npm/collaborators{/collaborator}",teams_url:"https://api.github.com/repos/Codertocat/hello-world-npm/teams",hooks_url:"https://api.github.com/repos/Codertocat/hello-world-npm/hooks",issue_events_url:"https://api.github.com/repos/Codertocat/hello-world-npm/issues/events{/number}",events_url:"https://api.github.com/repos/Codertocat/hello-world-npm/events",assignees_url:"https://api.github.com/repos/Codertocat/hello-world-npm/assignees{/user}",branches_url:"https://api.github.com/repos/Codertocat/hello-world-npm/branches{/branch}",tags_url:"https://api.github.com/repos/Codertocat/hello-world-npm/tags",blobs_url:"https://api.github.com/repos/Codertocat/hello-world-npm/git/blobs{/sha}",git_tags_url:"https://api.github.com/repos/Codertocat/hello-world-npm/git/tags{/sha}",git_refs_url:"https://api.github.com/repos/Codertocat/hello-world-npm/git/refs{/sha}",trees_url:"https://api.github.com/repos/Codertocat/hello-world-npm/git/trees{/sha}",statuses_url:"https://api.github.com/repos/Codertocat/hello-world-npm/statuses/{sha}",languages_url:"https://api.github.com/repos/Codertocat/hello-world-npm/languages",stargazers_url:"https://api.github.com/repos/Codertocat/hello-world-npm/stargazers",contributors_url:"https://api.github.com/repos/Codertocat/hello-world-npm/contributors",subscribers_url:"https://api.github.com/repos/Codertocat/hello-world-npm/subscribers",subscription_url:"https://api.github.com/repos/Codertocat/hello-world-npm/subscription",commits_url:"https://api.github.com/repos/Codertocat/hello-world-npm/commits{/sha}",git_commits_url:"https://api.github.com/repos/Codertocat/hello-world-npm/git/commits{/sha}",comments_url:"https://api.github.com/repos/Codertocat/hello-world-npm/comments{/number}",issue_comment_url:"https://api.github.com/repos/Codertocat/hello-world-npm/issues/comments{/number}",contents_url:"https://api.github.com/repos/Codertocat/hello-world-npm/contents/{+path}",compare_url:"https://api.github.com/repos/Codertocat/hello-world-npm/compare/{base}...{head}",merges_url:"https://api.github.com/repos/Codertocat/hello-world-npm/merges",archive_url:"https://api.github.com/repos/Codertocat/hello-world-npm/{archive_format}{/ref}",downloads_url:"https://api.github.com/repos/Codertocat/hello-world-npm/downloads",issues_url:"https://api.github.com/repos/Codertocat/hello-world-npm/issues{/number}",pulls_url:"https://api.github.com/repos/Codertocat/hello-world-npm/pulls{/number}",milestones_url:"https://api.github.com/repos/Codertocat/hello-world-npm/milestones{/number}",notifications_url:"https://api.github.com/repos/Codertocat/hello-world-npm/notifications{?since,all,participating}",labels_url:"https://api.github.com/repos/Codertocat/hello-world-npm/labels{/name}",releases_url:"https://api.github.com/repos/Codertocat/hello-world-npm/releases{/id}",deployments_url:"https://api.github.com/repos/Codertocat/hello-world-npm/deployments",created_at:"2019-05-09T22:53:26Z",updated_at:"2019-05-09T23:24:42Z",pushed_at:"2019-05-09T23:27:00Z",git_url:"git://github.com/Codertocat/hello-world-npm.git",ssh_url:"git@github.com:Codertocat/hello-world-npm.git",clone_url:"https://github.com/Codertocat/hello-world-npm.git",svn_url:"https://github.com/Codertocat/hello-world-npm",homepage:null,size:0,stargazers_count:0,watchers_count:0,language:"JavaScript",has_issues:!0,has_projects:!0,has_downloads:!0,has_wiki:!0,has_pages:!1,forks_count:0,mirror_url:null,archived:!1,disabled:!1,open_issues_count:0,license:null,forks:0,open_issues:0,watchers:0,default_branch:"master"},sender:{login:"Codertocat",id:21031067,node_id:"MDQ6VXNlcjIxMDMxMDY3",avatar_url:"https://avatars1.githubusercontent.com/u/21031067?v=4",gravatar_id:"",url:"https://api.github.com/users/Codertocat",html_url:"https://github.com/Codertocat",followers_url:"https://api.github.com/users/Codertocat/followers",following_url:"https://api.github.com/users/Codertocat/following{/other_user}",gists_url:"https://api.github.com/users/Codertocat/gists{/gist_id}",starred_url:"https://api.github.com/users/Codertocat/starred{/owner}{/repo}",subscriptions_url:"https://api.github.com/users/Codertocat/subscriptions",organizations_url:"https://api.github.com/users/Codertocat/orgs",repos_url:"https://api.github.com/users/Codertocat/repos",events_url:"https://api.github.com/users/Codertocat/events{/privacy}",received_events_url:"https://api.github.com/users/Codertocat/received_events",type:"User",site_admin:!1}},page_build:{id:130514899,build:{url:"https://api.github.com/repos/Codertocat/Hello-World/pages/builds/130514899",status:"built",error:{message:null},pusher:{login:"Codertocat",id:21031067,node_id:"MDQ6VXNlcjIxMDMxMDY3",avatar_url:"https://avatars1.githubusercontent.com/u/21031067?v=4",gravatar_id:"",url:"https://api.github.com/users/Codertocat",html_url:"https://github.com/Codertocat",followers_url:"https://api.github.com/users/Codertocat/followers",following_url:"https://api.github.com/users/Codertocat/following{/other_user}",gists_url:"https://api.github.com/users/Codertocat/gists{/gist_id}",starred_url:"https://api.github.com/users/Codertocat/starred{/owner}{/repo}",subscriptions_url:"https://api.github.com/users/Codertocat/subscriptions",organizations_url:"https://api.github.com/users/Codertocat/orgs",repos_url:"https://api.github.com/users/Codertocat/repos",events_url:"https://api.github.com/users/Codertocat/events{/privacy}",received_events_url:"https://api.github.com/users/Codertocat/received_events",type:"User",site_admin:!1},commit:"507fc9acd0d04ac4a9db87d12cb228c052cd813a",duration:16984,created_at:"2019-05-15T15:20:23Z",updated_at:"2019-05-15T15:20:40Z"},repository:{id:186853002,node_id:"MDEwOlJlcG9zaXRvcnkxODY4NTMwMDI=",name:"Hello-World",full_name:"Codertocat/Hello-World",private:!1,owner:{login:"Codertocat",id:21031067,node_id:"MDQ6VXNlcjIxMDMxMDY3",avatar_url:"https://avatars1.githubusercontent.com/u/21031067?v=4",gravatar_id:"",url:"https://api.github.com/users/Codertocat",html_url:"https://github.com/Codertocat",followers_url:"https://api.github.com/users/Codertocat/followers",following_url:"https://api.github.com/users/Codertocat/following{/other_user}",gists_url:"https://api.github.com/users/Codertocat/gists{/gist_id}",starred_url:"https://api.github.com/users/Codertocat/starred{/owner}{/repo}",subscriptions_url:"https://api.github.com/users/Codertocat/subscriptions",organizations_url:"https://api.github.com/users/Codertocat/orgs",repos_url:"https://api.github.com/users/Codertocat/repos",events_url:"https://api.github.com/users/Codertocat/events{/privacy}",received_events_url:"https://api.github.com/users/Codertocat/received_events",type:"User",site_admin:!1},html_url:"https://github.com/Codertocat/Hello-World",description:null,fork:!1,url:"https://api.github.com/repos/Codertocat/Hello-World",forks_url:"https://api.github.com/repos/Codertocat/Hello-World/forks",keys_url:"https://api.github.com/repos/Codertocat/Hello-World/keys{/key_id}",collaborators_url:"https://api.github.com/repos/Codertocat/Hello-World/collaborators{/collaborator}",teams_url:"https://api.github.com/repos/Codertocat/Hello-World/teams",hooks_url:"https://api.github.com/repos/Codertocat/Hello-World/hooks",issue_events_url:"https://api.github.com/repos/Codertocat/Hello-World/issues/events{/number}",events_url:"https://api.github.com/repos/Codertocat/Hello-World/events",assignees_url:"https://api.github.com/repos/Codertocat/Hello-World/assignees{/user}",branches_url:"https://api.github.com/repos/Codertocat/Hello-World/branches{/branch}",tags_url:"https://api.github.com/repos/Codertocat/Hello-World/tags",blobs_url:"https://api.github.com/repos/Codertocat/Hello-World/git/blobs{/sha}",git_tags_url:"https://api.github.com/repos/Codertocat/Hello-World/git/tags{/sha}",git_refs_url:"https://api.github.com/repos/Codertocat/Hello-World/git/refs{/sha}",trees_url:"https://api.github.com/repos/Codertocat/Hello-World/git/trees{/sha}",statuses_url:"https://api.github.com/repos/Codertocat/Hello-World/statuses/{sha}",languages_url:"https://api.github.com/repos/Codertocat/Hello-World/languages",stargazers_url:"https://api.github.com/repos/Codertocat/Hello-World/stargazers",contributors_url:"https://api.github.com/repos/Codertocat/Hello-World/contributors",subscribers_url:"https://api.github.com/repos/Codertocat/Hello-World/subscribers",subscription_url:"https://api.github.com/repos/Codertocat/Hello-World/subscription",commits_url:"https://api.github.com/repos/Codertocat/Hello-World/commits{/sha}",git_commits_url:"https://api.github.com/repos/Codertocat/Hello-World/git/commits{/sha}",comments_url:"https://api.github.com/repos/Codertocat/Hello-World/comments{/number}",issue_comment_url:"https://api.github.com/repos/Codertocat/Hello-World/issues/comments{/number}",contents_url:"https://api.github.com/repos/Codertocat/Hello-World/contents/{+path}",compare_url:"https://api.github.com/repos/Codertocat/Hello-World/compare/{base}...{head}",merges_url:"https://api.github.com/repos/Codertocat/Hello-World/merges",archive_url:"https://api.github.com/repos/Codertocat/Hello-World/{archive_format}{/ref}",downloads_url:"https://api.github.com/repos/Codertocat/Hello-World/downloads",issues_url:"https://api.github.com/repos/Codertocat/Hello-World/issues{/number}",pulls_url:"https://api.github.com/repos/Codertocat/Hello-World/pulls{/number}",milestones_url:"https://api.github.com/repos/Codertocat/Hello-World/milestones{/number}",notifications_url:"https://api.github.com/repos/Codertocat/Hello-World/notifications{?since,all,participating}",labels_url:"https://api.github.com/repos/Codertocat/Hello-World/labels{/name}",releases_url:"https://api.github.com/repos/Codertocat/Hello-World/releases{/id}",deployments_url:"https://api.github.com/repos/Codertocat/Hello-World/deployments",created_at:"2019-05-15T15:19:25Z",updated_at:"2019-05-15T15:20:34Z",pushed_at:"2019-05-15T15:20:33Z",git_url:"git://github.com/Codertocat/Hello-World.git",ssh_url:"git@github.com:Codertocat/Hello-World.git",clone_url:"https://github.com/Codertocat/Hello-World.git",svn_url:"https://github.com/Codertocat/Hello-World",homepage:null,size:0,stargazers_count:0,watchers_count:0,language:"Ruby",has_issues:!0,has_projects:!0,has_downloads:!0,has_wiki:!0,has_pages:!0,forks_count:0,mirror_url:null,archived:!1,disabled:!1,open_issues_count:2,license:null,forks:0,open_issues:2,watchers:0,default_branch:"master"},sender:{login:"Codertocat",id:21031067,node_id:"MDQ6VXNlcjIxMDMxMDY3",avatar_url:"https://avatars1.githubusercontent.com/u/21031067?v=4",gravatar_id:"",url:"https://api.github.com/users/Codertocat",html_url:"https://github.com/Codertocat",followers_url:"https://api.github.com/users/Codertocat/followers",following_url:"https://api.github.com/users/Codertocat/following{/other_user}",gists_url:"https://api.github.com/users/Codertocat/gists{/gist_id}",starred_url:"https://api.github.com/users/Codertocat/starred{/owner}{/repo}",subscriptions_url:"https://api.github.com/users/Codertocat/subscriptions",organizations_url:"https://api.github.com/users/Codertocat/orgs",repos_url:"https://api.github.com/users/Codertocat/repos",events_url:"https://api.github.com/users/Codertocat/events{/privacy}",received_events_url:"https://api.github.com/users/Codertocat/received_events",type:"User",site_admin:!1}},ping:{zen:"Anything added dilutes everything else.",hook_id:109948940,hook:{type:"Repository",id:109948940,name:"web",active:!0,events:["*"],config:{content_type:"json",url:"https://smee.io/****************",insecure_ssl:"0"},updated_at:"2019-05-15T15:20:49Z",created_at:"2019-05-15T15:20:49Z",url:"https://api.github.com/repos/Octocoders/Hello-World/hooks/109948940",test_url:"https://api.github.com/repos/Octocoders/Hello-World/hooks/109948940/test",ping_url:"https://api.github.com/repos/Octocoders/Hello-World/hooks/109948940/pings",last_response:{code:null,status:"unused",message:null}},repository:{id:186853261,node_id:"MDEwOlJlcG9zaXRvcnkxODY4NTMyNjE=",name:"Hello-World",full_name:"Octocoders/Hello-World",private:!1,owner:{login:"Octocoders",id:38302899,node_id:"MDEyOk9yZ2FuaXphdGlvbjM4MzAyODk5",avatar_url:"https://avatars1.githubusercontent.com/u/38302899?v=4",gravatar_id:"",url:"https://api.github.com/users/Octocoders",html_url:"https://github.com/Octocoders",followers_url:"https://api.github.com/users/Octocoders/followers",following_url:"https://api.github.com/users/Octocoders/following{/other_user}",gists_url:"https://api.github.com/users/Octocoders/gists{/gist_id}",starred_url:"https://api.github.com/users/Octocoders/starred{/owner}{/repo}",subscriptions_url:"https://api.github.com/users/Octocoders/subscriptions",organizations_url:"https://api.github.com/users/Octocoders/orgs",repos_url:"https://api.github.com/users/Octocoders/repos",events_url:"https://api.github.com/users/Octocoders/events{/privacy}",received_events_url:"https://api.github.com/users/Octocoders/received_events",type:"Organization",site_admin:!1},html_url:"https://github.com/Octocoders/Hello-World",description:null,fork:!0,url:"https://api.github.com/repos/Octocoders/Hello-World",forks_url:"https://api.github.com/repos/Octocoders/Hello-World/forks",keys_url:"https://api.github.com/repos/Octocoders/Hello-World/keys{/key_id}",collaborators_url:"https://api.github.com/repos/Octocoders/Hello-World/collaborators{/collaborator}",teams_url:"https://api.github.com/repos/Octocoders/Hello-World/teams",hooks_url:"https://api.github.com/repos/Octocoders/Hello-World/hooks",issue_events_url:"https://api.github.com/repos/Octocoders/Hello-World/issues/events{/number}",events_url:"https://api.github.com/repos/Octocoders/Hello-World/events",assignees_url:"https://api.github.com/repos/Octocoders/Hello-World/assignees{/user}",branches_url:"https://api.github.com/repos/Octocoders/Hello-World/branches{/branch}",tags_url:"https://api.github.com/repos/Octocoders/Hello-World/tags",blobs_url:"https://api.github.com/repos/Octocoders/Hello-World/git/blobs{/sha}",git_tags_url:"https://api.github.com/repos/Octocoders/Hello-World/git/tags{/sha}",git_refs_url:"https://api.github.com/repos/Octocoders/Hello-World/git/refs{/sha}",trees_url:"https://api.github.com/repos/Octocoders/Hello-World/git/trees{/sha}",statuses_url:"https://api.github.com/repos/Octocoders/Hello-World/statuses/{sha}",languages_url:"https://api.github.com/repos/Octocoders/Hello-World/languages",stargazers_url:"https://api.github.com/repos/Octocoders/Hello-World/stargazers",contributors_url:"https://api.github.com/repos/Octocoders/Hello-World/contributors",subscribers_url:"https://api.github.com/repos/Octocoders/Hello-World/subscribers",subscription_url:"https://api.github.com/repos/Octocoders/Hello-World/subscription",commits_url:"https://api.github.com/repos/Octocoders/Hello-World/commits{/sha}",git_commits_url:"https://api.github.com/repos/Octocoders/Hello-World/git/commits{/sha}",comments_url:"https://api.github.com/repos/Octocoders/Hello-World/comments{/number}",issue_comment_url:"https://api.github.com/repos/Octocoders/Hello-World/issues/comments{/number}",contents_url:"https://api.github.com/repos/Octocoders/Hello-World/contents/{+path}",compare_url:"https://api.github.com/repos/Octocoders/Hello-World/compare/{base}...{head}",merges_url:"https://api.github.com/repos/Octocoders/Hello-World/merges",archive_url:"https://api.github.com/repos/Octocoders/Hello-World/{archive_format}{/ref}",downloads_url:"https://api.github.com/repos/Octocoders/Hello-World/downloads",issues_url:"https://api.github.com/repos/Octocoders/Hello-World/issues{/number}",pulls_url:"https://api.github.com/repos/Octocoders/Hello-World/pulls{/number}",milestones_url:"https://api.github.com/repos/Octocoders/Hello-World/milestones{/number}",notifications_url:"https://api.github.com/repos/Octocoders/Hello-World/notifications{?since,all,participating}",labels_url:"https://api.github.com/repos/Octocoders/Hello-World/labels{/name}",releases_url:"https://api.github.com/repos/Octocoders/Hello-World/releases{/id}",deployments_url:"https://api.github.com/repos/Octocoders/Hello-World/deployments",created_at:"2019-05-15T15:20:42Z",updated_at:"2019-05-15T15:20:45Z",pushed_at:"2019-05-15T15:20:33Z",git_url:"git://github.com/Octocoders/Hello-World.git",ssh_url:"git@github.com:Octocoders/Hello-World.git",clone_url:"https://github.com/Octocoders/Hello-World.git",svn_url:"https://github.com/Octocoders/Hello-World",homepage:null,size:0,stargazers_count:0,watchers_count:0,language:"Ruby",has_issues:!1,has_projects:!0,has_downloads:!0,has_wiki:!0,has_pages:!1,forks_count:0,mirror_url:null,archived:!1,disabled:!1,open_issues_count:0,license:null,forks:0,open_issues:0,watchers:0,default_branch:"master"},sender:{login:"Codertocat",id:21031067,node_id:"MDQ6VXNlcjIxMDMxMDY3",avatar_url:"https://avatars1.githubusercontent.com/u/21031067?v=4",gravatar_id:"",url:"https://api.github.com/users/Codertocat",html_url:"https://github.com/Codertocat",followers_url:"https://api.github.com/users/Codertocat/followers",following_url:"https://api.github.com/users/Codertocat/following{/other_user}",gists_url:"https://api.github.com/users/Codertocat/gists{/gist_id}",starred_url:"https://api.github.com/users/Codertocat/starred{/owner}{/repo}",subscriptions_url:"https://api.github.com/users/Codertocat/subscriptions",organizations_url:"https://api.github.com/users/Codertocat/orgs",repos_url:"https://api.github.com/users/Codertocat/repos",events_url:"https://api.github.com/users/Codertocat/events{/privacy}",received_events_url:"https://api.github.com/users/Codertocat/received_events",type:"User",site_admin:!1}},project:{action:"created",project:{owner_url:"https://api.github.com/repos/Codertocat/Hello-World",url:"https://api.github.com/projects/2640902",html_url:"https://github.com/Codertocat/Hello-World/projects/1",columns_url:"https://api.github.com/projects/2640902/columns",id:2640902,node_id:"MDc6UHJvamVjdDI2NDA5MDI=",name:"Space 2.0",body:"Project tasks for a trip to Space",number:1,state:"open",creator:{login:"Codertocat",id:21031067,node_id:"MDQ6VXNlcjIxMDMxMDY3",avatar_url:"https://avatars1.githubusercontent.com/u/21031067?v=4",gravatar_id:"",url:"https://api.github.com/users/Codertocat",html_url:"https://github.com/Codertocat",followers_url:"https://api.github.com/users/Codertocat/followers",following_url:"https://api.github.com/users/Codertocat/following{/other_user}",gists_url:"https://api.github.com/users/Codertocat/gists{/gist_id}",starred_url:"https://api.github.com/users/Codertocat/starred{/owner}{/repo}",subscriptions_url:"https://api.github.com/users/Codertocat/subscriptions",organizations_url:"https://api.github.com/users/Codertocat/orgs",repos_url:"https://api.github.com/users/Codertocat/repos",events_url:"https://api.github.com/users/Codertocat/events{/privacy}",received_events_url:"https://api.github.com/users/Codertocat/received_events",type:"User",site_admin:!1},created_at:"2019-05-15T15:21:06Z",updated_at:"2019-05-15T15:21:06Z"},repository:{id:186853002,node_id:"MDEwOlJlcG9zaXRvcnkxODY4NTMwMDI=",name:"Hello-World",full_name:"Codertocat/Hello-World",private:!1,owner:{login:"Codertocat",id:21031067,node_id:"MDQ6VXNlcjIxMDMxMDY3",avatar_url:"https://avatars1.githubusercontent.com/u/21031067?v=4",gravatar_id:"",url:"https://api.github.com/users/Codertocat",html_url:"https://github.com/Codertocat",followers_url:"https://api.github.com/users/Codertocat/followers",following_url:"https://api.github.com/users/Codertocat/following{/other_user}",gists_url:"https://api.github.com/users/Codertocat/gists{/gist_id}",starred_url:"https://api.github.com/users/Codertocat/starred{/owner}{/repo}",subscriptions_url:"https://api.github.com/users/Codertocat/subscriptions",organizations_url:"https://api.github.com/users/Codertocat/orgs",repos_url:"https://api.github.com/users/Codertocat/repos",events_url:"https://api.github.com/users/Codertocat/events{/privacy}",received_events_url:"https://api.github.com/users/Codertocat/received_events",type:"User",site_admin:!1},html_url:"https://github.com/Codertocat/Hello-World",description:null,fork:!1,url:"https://api.github.com/repos/Codertocat/Hello-World",forks_url:"https://api.github.com/repos/Codertocat/Hello-World/forks",keys_url:"https://api.github.com/repos/Codertocat/Hello-World/keys{/key_id}",collaborators_url:"https://api.github.com/repos/Codertocat/Hello-World/collaborators{/collaborator}",teams_url:"https://api.github.com/repos/Codertocat/Hello-World/teams",hooks_url:"https://api.github.com/repos/Codertocat/Hello-World/hooks",issue_events_url:"https://api.github.com/repos/Codertocat/Hello-World/issues/events{/number}",events_url:"https://api.github.com/repos/Codertocat/Hello-World/events",assignees_url:"https://api.github.com/repos/Codertocat/Hello-World/assignees{/user}",branches_url:"https://api.github.com/repos/Codertocat/Hello-World/branches{/branch}",tags_url:"https://api.github.com/repos/Codertocat/Hello-World/tags",blobs_url:"https://api.github.com/repos/Codertocat/Hello-World/git/blobs{/sha}",git_tags_url:"https://api.github.com/repos/Codertocat/Hello-World/git/tags{/sha}",git_refs_url:"https://api.github.com/repos/Codertocat/Hello-World/git/refs{/sha}",trees_url:"https://api.github.com/repos/Codertocat/Hello-World/git/trees{/sha}",statuses_url:"https://api.github.com/repos/Codertocat/Hello-World/statuses/{sha}",languages_url:"https://api.github.com/repos/Codertocat/Hello-World/languages",stargazers_url:"https://api.github.com/repos/Codertocat/Hello-World/stargazers",contributors_url:"https://api.github.com/repos/Codertocat/Hello-World/contributors",subscribers_url:"https://api.github.com/repos/Codertocat/Hello-World/subscribers",subscription_url:"https://api.github.com/repos/Codertocat/Hello-World/subscription",commits_url:"https://api.github.com/repos/Codertocat/Hello-World/commits{/sha}",git_commits_url:"https://api.github.com/repos/Codertocat/Hello-World/git/commits{/sha}",comments_url:"https://api.github.com/repos/Codertocat/Hello-World/comments{/number}",issue_comment_url:"https://api.github.com/repos/Codertocat/Hello-World/issues/comments{/number}",contents_url:"https://api.github.com/repos/Codertocat/Hello-World/contents/{+path}",compare_url:"https://api.github.com/repos/Codertocat/Hello-World/compare/{base}...{head}",merges_url:"https://api.github.com/repos/Codertocat/Hello-World/merges",archive_url:"https://api.github.com/repos/Codertocat/Hello-World/{archive_format}{/ref}",downloads_url:"https://api.github.com/repos/Codertocat/Hello-World/downloads",issues_url:"https://api.github.com/repos/Codertocat/Hello-World/issues{/number}",pulls_url:"https://api.github.com/repos/Codertocat/Hello-World/pulls{/number}",milestones_url:"https://api.github.com/repos/Codertocat/Hello-World/milestones{/number}",notifications_url:"https://api.github.com/repos/Codertocat/Hello-World/notifications{?since,all,participating}",labels_url:"https://api.github.com/repos/Codertocat/Hello-World/labels{/name}",releases_url:"https://api.github.com/repos/Codertocat/Hello-World/releases{/id}",deployments_url:"https://api.github.com/repos/Codertocat/Hello-World/deployments",created_at:"2019-05-15T15:19:25Z",updated_at:"2019-05-15T15:21:03Z",pushed_at:"2019-05-15T15:20:57Z",git_url:"git://github.com/Codertocat/Hello-World.git",ssh_url:"git@github.com:Codertocat/Hello-World.git",clone_url:"https://github.com/Codertocat/Hello-World.git",svn_url:"https://github.com/Codertocat/Hello-World",homepage:null,size:0,stargazers_count:0,watchers_count:0,language:"Ruby",has_issues:!0,has_projects:!0,has_downloads:!0,has_wiki:!0,has_pages:!0,forks_count:1,mirror_url:null,archived:!1,disabled:!1,open_issues_count:2,license:null,forks:1,open_issues:2,watchers:0,default_branch:"master"},sender:{login:"Codertocat",id:21031067,node_id:"MDQ6VXNlcjIxMDMxMDY3",avatar_url:"https://avatars1.githubusercontent.com/u/21031067?v=4",gravatar_id:"",url:"https://api.github.com/users/Codertocat",html_url:"https://github.com/Codertocat",followers_url:"https://api.github.com/users/Codertocat/followers",following_url:"https://api.github.com/users/Codertocat/following{/other_user}",gists_url:"https://api.github.com/users/Codertocat/gists{/gist_id}",starred_url:"https://api.github.com/users/Codertocat/starred{/owner}{/repo}",subscriptions_url:"https://api.github.com/users/Codertocat/subscriptions",organizations_url:"https://api.github.com/users/Codertocat/orgs",repos_url:"https://api.github.com/users/Codertocat/repos",events_url:"https://api.github.com/users/Codertocat/events{/privacy}",received_events_url:"https://api.github.com/users/Codertocat/received_events",type:"User",site_admin:!1}},project_card:{action:"created",project_card:{url:"https://api.github.com/projects/columns/cards/21567453",project_url:"https://api.github.com/projects/2640902",column_url:"https://api.github.com/projects/columns/5368157",column_id:5368157,id:21567453,node_id:"MDExOlByb2plY3RDYXJkMjE1Njc0NTM=",note:"Work that can be completed in one hour or less.",archived:!1,creator:{login:"Codertocat",id:21031067,node_id:"MDQ6VXNlcjIxMDMxMDY3",avatar_url:"https://avatars1.githubusercontent.com/u/21031067?v=4",gravatar_id:"",url:"https://api.github.com/users/Codertocat",html_url:"https://github.com/Codertocat",followers_url:"https://api.github.com/users/Codertocat/followers",following_url:"https://api.github.com/users/Codertocat/following{/other_user}",gists_url:"https://api.github.com/users/Codertocat/gists{/gist_id}",starred_url:"https://api.github.com/users/Codertocat/starred{/owner}{/repo}",subscriptions_url:"https://api.github.com/users/Codertocat/subscriptions",organizations_url:"https://api.github.com/users/Codertocat/orgs",repos_url:"https://api.github.com/users/Codertocat/repos",events_url:"https://api.github.com/users/Codertocat/events{/privacy}",received_events_url:"https://api.github.com/users/Codertocat/received_events",type:"User",site_admin:!1},created_at:"2019-05-15T15:21:10Z",updated_at:"2019-05-15T15:21:10Z"},repository:{id:186853002,node_id:"MDEwOlJlcG9zaXRvcnkxODY4NTMwMDI=",name:"Hello-World",full_name:"Codertocat/Hello-World",private:!1,owner:{login:"Codertocat",id:21031067,node_id:"MDQ6VXNlcjIxMDMxMDY3",avatar_url:"https://avatars1.githubusercontent.com/u/21031067?v=4",gravatar_id:"",url:"https://api.github.com/users/Codertocat",html_url:"https://github.com/Codertocat",followers_url:"https://api.github.com/users/Codertocat/followers",following_url:"https://api.github.com/users/Codertocat/following{/other_user}",gists_url:"https://api.github.com/users/Codertocat/gists{/gist_id}",starred_url:"https://api.github.com/users/Codertocat/starred{/owner}{/repo}",subscriptions_url:"https://api.github.com/users/Codertocat/subscriptions",organizations_url:"https://api.github.com/users/Codertocat/orgs",repos_url:"https://api.github.com/users/Codertocat/repos",events_url:"https://api.github.com/users/Codertocat/events{/privacy}",received_events_url:"https://api.github.com/users/Codertocat/received_events",type:"User",site_admin:!1},html_url:"https://github.com/Codertocat/Hello-World",description:null,fork:!1,url:"https://api.github.com/repos/Codertocat/Hello-World",forks_url:"https://api.github.com/repos/Codertocat/Hello-World/forks",keys_url:"https://api.github.com/repos/Codertocat/Hello-World/keys{/key_id}",collaborators_url:"https://api.github.com/repos/Codertocat/Hello-World/collaborators{/collaborator}",teams_url:"https://api.github.com/repos/Codertocat/Hello-World/teams",hooks_url:"https://api.github.com/repos/Codertocat/Hello-World/hooks",issue_events_url:"https://api.github.com/repos/Codertocat/Hello-World/issues/events{/number}",events_url:"https://api.github.com/repos/Codertocat/Hello-World/events",assignees_url:"https://api.github.com/repos/Codertocat/Hello-World/assignees{/user}",branches_url:"https://api.github.com/repos/Codertocat/Hello-World/branches{/branch}",tags_url:"https://api.github.com/repos/Codertocat/Hello-World/tags",blobs_url:"https://api.github.com/repos/Codertocat/Hello-World/git/blobs{/sha}",git_tags_url:"https://api.github.com/repos/Codertocat/Hello-World/git/tags{/sha}",git_refs_url:"https://api.github.com/repos/Codertocat/Hello-World/git/refs{/sha}",trees_url:"https://api.github.com/repos/Codertocat/Hello-World/git/trees{/sha}",statuses_url:"https://api.github.com/repos/Codertocat/Hello-World/statuses/{sha}",languages_url:"https://api.github.com/repos/Codertocat/Hello-World/languages",stargazers_url:"https://api.github.com/repos/Codertocat/Hello-World/stargazers",contributors_url:"https://api.github.com/repos/Codertocat/Hello-World/contributors",subscribers_url:"https://api.github.com/repos/Codertocat/Hello-World/subscribers",subscription_url:"https://api.github.com/repos/Codertocat/Hello-World/subscription",commits_url:"https://api.github.com/repos/Codertocat/Hello-World/commits{/sha}",git_commits_url:"https://api.github.com/repos/Codertocat/Hello-World/git/commits{/sha}",comments_url:"https://api.github.com/repos/Codertocat/Hello-World/comments{/number}",issue_comment_url:"https://api.github.com/repos/Codertocat/Hello-World/issues/comments{/number}",contents_url:"https://api.github.com/repos/Codertocat/Hello-World/contents/{+path}",compare_url:"https://api.github.com/repos/Codertocat/Hello-World/compare/{base}...{head}",merges_url:"https://api.github.com/repos/Codertocat/Hello-World/merges",archive_url:"https://api.github.com/repos/Codertocat/Hello-World/{archive_format}{/ref}",downloads_url:"https://api.github.com/repos/Codertocat/Hello-World/downloads",issues_url:"https://api.github.com/repos/Codertocat/Hello-World/issues{/number}",pulls_url:"https://api.github.com/repos/Codertocat/Hello-World/pulls{/number}",milestones_url:"https://api.github.com/repos/Codertocat/Hello-World/milestones{/number}",notifications_url:"https://api.github.com/repos/Codertocat/Hello-World/notifications{?since,all,participating}",labels_url:"https://api.github.com/repos/Codertocat/Hello-World/labels{/name}",releases_url:"https://api.github.com/repos/Codertocat/Hello-World/releases{/id}",deployments_url:"https://api.github.com/repos/Codertocat/Hello-World/deployments",created_at:"2019-05-15T15:19:25Z",updated_at:"2019-05-15T15:21:03Z",pushed_at:"2019-05-15T15:20:57Z",git_url:"git://github.com/Codertocat/Hello-World.git",ssh_url:"git@github.com:Codertocat/Hello-World.git",clone_url:"https://github.com/Codertocat/Hello-World.git",svn_url:"https://github.com/Codertocat/Hello-World",homepage:null,size:0,stargazers_count:0,watchers_count:0,language:"Ruby",has_issues:!0,has_projects:!0,has_downloads:!0,has_wiki:!0,has_pages:!0,forks_count:1,mirror_url:null,archived:!1,disabled:!1,open_issues_count:2,license:null,forks:1,open_issues:2,watchers:0,default_branch:"master"},sender:{login:"Codertocat",id:21031067,node_id:"MDQ6VXNlcjIxMDMxMDY3",avatar_url:"https://avatars1.githubusercontent.com/u/21031067?v=4",gravatar_id:"",url:"https://api.github.com/users/Codertocat",html_url:"https://github.com/Codertocat",followers_url:"https://api.github.com/users/Codertocat/followers",following_url:"https://api.github.com/users/Codertocat/following{/other_user}",gists_url:"https://api.github.com/users/Codertocat/gists{/gist_id}",starred_url:"https://api.github.com/users/Codertocat/starred{/owner}{/repo}",subscriptions_url:"https://api.github.com/users/Codertocat/subscriptions",organizations_url:"https://api.github.com/users/Codertocat/orgs",repos_url:"https://api.github.com/users/Codertocat/repos",events_url:"https://api.github.com/users/Codertocat/events{/privacy}",received_events_url:"https://api.github.com/users/Codertocat/received_events",type:"User",site_admin:!1}},project_column:{action:"created",project_column:{url:"https://api.github.com/projects/columns/5368157",project_url:"https://api.github.com/projects/2640902",cards_url:"https://api.github.com/projects/columns/5368157/cards",id:5368157,node_id:"MDEzOlByb2plY3RDb2x1bW41MzY4MTU3",name:"Small bugfixes",created_at:"2019-05-15T15:21:09Z",updated_at:"2019-05-15T15:21:09Z"},repository:{id:186853002,node_id:"MDEwOlJlcG9zaXRvcnkxODY4NTMwMDI=",name:"Hello-World",full_name:"Codertocat/Hello-World",private:!1,owner:{login:"Codertocat",id:21031067,node_id:"MDQ6VXNlcjIxMDMxMDY3",avatar_url:"https://avatars1.githubusercontent.com/u/21031067?v=4",gravatar_id:"",url:"https://api.github.com/users/Codertocat",html_url:"https://github.com/Codertocat",followers_url:"https://api.github.com/users/Codertocat/followers",following_url:"https://api.github.com/users/Codertocat/following{/other_user}",gists_url:"https://api.github.com/users/Codertocat/gists{/gist_id}",starred_url:"https://api.github.com/users/Codertocat/starred{/owner}{/repo}",subscriptions_url:"https://api.github.com/users/Codertocat/subscriptions",organizations_url:"https://api.github.com/users/Codertocat/orgs",repos_url:"https://api.github.com/users/Codertocat/repos",events_url:"https://api.github.com/users/Codertocat/events{/privacy}",received_events_url:"https://api.github.com/users/Codertocat/received_events",type:"User",site_admin:!1},html_url:"https://github.com/Codertocat/Hello-World",description:null,fork:!1,url:"https://api.github.com/repos/Codertocat/Hello-World",forks_url:"https://api.github.com/repos/Codertocat/Hello-World/forks",keys_url:"https://api.github.com/repos/Codertocat/Hello-World/keys{/key_id}",collaborators_url:"https://api.github.com/repos/Codertocat/Hello-World/collaborators{/collaborator}",teams_url:"https://api.github.com/repos/Codertocat/Hello-World/teams",hooks_url:"https://api.github.com/repos/Codertocat/Hello-World/hooks",issue_events_url:"https://api.github.com/repos/Codertocat/Hello-World/issues/events{/number}",events_url:"https://api.github.com/repos/Codertocat/Hello-World/events",assignees_url:"https://api.github.com/repos/Codertocat/Hello-World/assignees{/user}",branches_url:"https://api.github.com/repos/Codertocat/Hello-World/branches{/branch}",tags_url:"https://api.github.com/repos/Codertocat/Hello-World/tags",blobs_url:"https://api.github.com/repos/Codertocat/Hello-World/git/blobs{/sha}",git_tags_url:"https://api.github.com/repos/Codertocat/Hello-World/git/tags{/sha}",git_refs_url:"https://api.github.com/repos/Codertocat/Hello-World/git/refs{/sha}",trees_url:"https://api.github.com/repos/Codertocat/Hello-World/git/trees{/sha}",statuses_url:"https://api.github.com/repos/Codertocat/Hello-World/statuses/{sha}",languages_url:"https://api.github.com/repos/Codertocat/Hello-World/languages",stargazers_url:"https://api.github.com/repos/Codertocat/Hello-World/stargazers",contributors_url:"https://api.github.com/repos/Codertocat/Hello-World/contributors",subscribers_url:"https://api.github.com/repos/Codertocat/Hello-World/subscribers",subscription_url:"https://api.github.com/repos/Codertocat/Hello-World/subscription",commits_url:"https://api.github.com/repos/Codertocat/Hello-World/commits{/sha}",git_commits_url:"https://api.github.com/repos/Codertocat/Hello-World/git/commits{/sha}",comments_url:"https://api.github.com/repos/Codertocat/Hello-World/comments{/number}",issue_comment_url:"https://api.github.com/repos/Codertocat/Hello-World/issues/comments{/number}",contents_url:"https://api.github.com/repos/Codertocat/Hello-World/contents/{+path}",compare_url:"https://api.github.com/repos/Codertocat/Hello-World/compare/{base}...{head}",merges_url:"https://api.github.com/repos/Codertocat/Hello-World/merges",archive_url:"https://api.github.com/repos/Codertocat/Hello-World/{archive_format}{/ref}",downloads_url:"https://api.github.com/repos/Codertocat/Hello-World/downloads",issues_url:"https://api.github.com/repos/Codertocat/Hello-World/issues{/number}",pulls_url:"https://api.github.com/repos/Codertocat/Hello-World/pulls{/number}",milestones_url:"https://api.github.com/repos/Codertocat/Hello-World/milestones{/number}",notifications_url:"https://api.github.com/repos/Codertocat/Hello-World/notifications{?since,all,participating}",labels_url:"https://api.github.com/repos/Codertocat/Hello-World/labels{/name}",releases_url:"https://api.github.com/repos/Codertocat/Hello-World/releases{/id}",deployments_url:"https://api.github.com/repos/Codertocat/Hello-World/deployments",created_at:"2019-05-15T15:19:25Z",updated_at:"2019-05-15T15:21:03Z",pushed_at:"2019-05-15T15:20:57Z",git_url:"git://github.com/Codertocat/Hello-World.git",ssh_url:"git@github.com:Codertocat/Hello-World.git",clone_url:"https://github.com/Codertocat/Hello-World.git",svn_url:"https://github.com/Codertocat/Hello-World",homepage:null,size:0,stargazers_count:0,watchers_count:0,language:"Ruby",has_issues:!0,has_projects:!0,has_downloads:!0,has_wiki:!0,has_pages:!0,forks_count:1,mirror_url:null,archived:!1,disabled:!1,open_issues_count:2,license:null,forks:1,open_issues:2,watchers:0,default_branch:"master"},sender:{login:"Codertocat",id:21031067,node_id:"MDQ6VXNlcjIxMDMxMDY3",avatar_url:"https://avatars1.githubusercontent.com/u/21031067?v=4",gravatar_id:"",url:"https://api.github.com/users/Codertocat",html_url:"https://github.com/Codertocat",followers_url:"https://api.github.com/users/Codertocat/followers",following_url:"https://api.github.com/users/Codertocat/following{/other_user}",gists_url:"https://api.github.com/users/Codertocat/gists{/gist_id}",starred_url:"https://api.github.com/users/Codertocat/starred{/owner}{/repo}",subscriptions_url:"https://api.github.com/users/Codertocat/subscriptions",organizations_url:"https://api.github.com/users/Codertocat/orgs",repos_url:"https://api.github.com/users/Codertocat/repos",events_url:"https://api.github.com/users/Codertocat/events{/privacy}",received_events_url:"https://api.github.com/users/Codertocat/received_events",type:"User",site_admin:!1}},public:{repository:{id:186853002,node_id:"MDEwOlJlcG9zaXRvcnkxODY4NTMwMDI=",name:"Hello-World",full_name:"Codertocat/Hello-World",private:!1,owner:{login:"Codertocat",id:21031067,node_id:"MDQ6VXNlcjIxMDMxMDY3",avatar_url:"https://avatars1.githubusercontent.com/u/21031067?v=4",gravatar_id:"",url:"https://api.github.com/users/Codertocat",html_url:"https://github.com/Codertocat",followers_url:"https://api.github.com/users/Codertocat/followers",following_url:"https://api.github.com/users/Codertocat/following{/other_user}",gists_url:"https://api.github.com/users/Codertocat/gists{/gist_id}",starred_url:"https://api.github.com/users/Codertocat/starred{/owner}{/repo}",subscriptions_url:"https://api.github.com/users/Codertocat/subscriptions",organizations_url:"https://api.github.com/users/Codertocat/orgs",repos_url:"https://api.github.com/users/Codertocat/repos",events_url:"https://api.github.com/users/Codertocat/events{/privacy}",received_events_url:"https://api.github.com/users/Codertocat/received_events",type:"User",site_admin:!1},html_url:"https://github.com/Codertocat/Hello-World",description:null,fork:!1,url:"https://api.github.com/repos/Codertocat/Hello-World",forks_url:"https://api.github.com/repos/Codertocat/Hello-World/forks",keys_url:"https://api.github.com/repos/Codertocat/Hello-World/keys{/key_id}",collaborators_url:"https://api.github.com/repos/Codertocat/Hello-World/collaborators{/collaborator}",teams_url:"https://api.github.com/repos/Codertocat/Hello-World/teams",hooks_url:"https://api.github.com/repos/Codertocat/Hello-World/hooks",issue_events_url:"https://api.github.com/repos/Codertocat/Hello-World/issues/events{/number}",events_url:"https://api.github.com/repos/Codertocat/Hello-World/events",assignees_url:"https://api.github.com/repos/Codertocat/Hello-World/assignees{/user}",branches_url:"https://api.github.com/repos/Codertocat/Hello-World/branches{/branch}",tags_url:"https://api.github.com/repos/Codertocat/Hello-World/tags",blobs_url:"https://api.github.com/repos/Codertocat/Hello-World/git/blobs{/sha}",git_tags_url:"https://api.github.com/repos/Codertocat/Hello-World/git/tags{/sha}",git_refs_url:"https://api.github.com/repos/Codertocat/Hello-World/git/refs{/sha}",trees_url:"https://api.github.com/repos/Codertocat/Hello-World/git/trees{/sha}",statuses_url:"https://api.github.com/repos/Codertocat/Hello-World/statuses/{sha}",languages_url:"https://api.github.com/repos/Codertocat/Hello-World/languages",stargazers_url:"https://api.github.com/repos/Codertocat/Hello-World/stargazers",contributors_url:"https://api.github.com/repos/Codertocat/Hello-World/contributors",subscribers_url:"https://api.github.com/repos/Codertocat/Hello-World/subscribers",subscription_url:"https://api.github.com/repos/Codertocat/Hello-World/subscription",commits_url:"https://api.github.com/repos/Codertocat/Hello-World/commits{/sha}",git_commits_url:"https://api.github.com/repos/Codertocat/Hello-World/git/commits{/sha}",comments_url:"https://api.github.com/repos/Codertocat/Hello-World/comments{/number}",issue_comment_url:"https://api.github.com/repos/Codertocat/Hello-World/issues/comments{/number}",contents_url:"https://api.github.com/repos/Codertocat/Hello-World/contents/{+path}",compare_url:"https://api.github.com/repos/Codertocat/Hello-World/compare/{base}...{head}",merges_url:"https://api.github.com/repos/Codertocat/Hello-World/merges",archive_url:"https://api.github.com/repos/Codertocat/Hello-World/{archive_format}{/ref}",downloads_url:"https://api.github.com/repos/Codertocat/Hello-World/downloads",issues_url:"https://api.github.com/repos/Codertocat/Hello-World/issues{/number}",pulls_url:"https://api.github.com/repos/Codertocat/Hello-World/pulls{/number}",milestones_url:"https://api.github.com/repos/Codertocat/Hello-World/milestones{/number}",notifications_url:"https://api.github.com/repos/Codertocat/Hello-World/notifications{?since,all,participating}",labels_url:"https://api.github.com/repos/Codertocat/Hello-World/labels{/name}",releases_url:"https://api.github.com/repos/Codertocat/Hello-World/releases{/id}",deployments_url:"https://api.github.com/repos/Codertocat/Hello-World/deployments",created_at:"2019-05-15T15:19:25Z",updated_at:"2019-05-15T15:21:03Z",pushed_at:"2019-05-15T15:20:57Z",git_url:"git://github.com/Codertocat/Hello-World.git",ssh_url:"git@github.com:Codertocat/Hello-World.git",clone_url:"https://github.com/Codertocat/Hello-World.git",svn_url:"https://github.com/Codertocat/Hello-World",homepage:null,size:0,stargazers_count:0,watchers_count:0,language:"Ruby",has_issues:!0,has_projects:!0,has_downloads:!0,has_wiki:!0,has_pages:!0,forks_count:1,mirror_url:null,archived:!1,disabled:!1,open_issues_count:2,license:null,forks:1,open_issues:2,watchers:0,default_branch:"master"},sender:{login:"Codertocat",id:21031067,node_id:"MDQ6VXNlcjIxMDMxMDY3",avatar_url:"https://avatars1.githubusercontent.com/u/21031067?v=4",gravatar_id:"",url:"https://api.github.com/users/Codertocat",html_url:"https://github.com/Codertocat",followers_url:"https://api.github.com/users/Codertocat/followers",following_url:"https://api.github.com/users/Codertocat/following{/other_user}",gists_url:"https://api.github.com/users/Codertocat/gists{/gist_id}",starred_url:"https://api.github.com/users/Codertocat/starred{/owner}{/repo}",subscriptions_url:"https://api.github.com/users/Codertocat/subscriptions",organizations_url:"https://api.github.com/users/Codertocat/orgs",repos_url:"https://api.github.com/users/Codertocat/repos",events_url:"https://api.github.com/users/Codertocat/events{/privacy}",received_events_url:"https://api.github.com/users/Codertocat/received_events",type:"User",site_admin:!1}},pull_request:{action:"opened",number:2,pull_request:{url:"https://api.github.com/repos/Codertocat/Hello-World/pulls/2",id:279147437,node_id:"MDExOlB1bGxSZXF1ZXN0Mjc5MTQ3NDM3",html_url:"https://github.com/Codertocat/Hello-World/pull/2",diff_url:"https://github.com/Codertocat/Hello-World/pull/2.diff",patch_url:"https://github.com/Codertocat/Hello-World/pull/2.patch",issue_url:"https://api.github.com/repos/Codertocat/Hello-World/issues/2",number:2,state:"open",locked:!1,title:"Update the README with new information.",user:{login:"Codertocat",id:21031067,node_id:"MDQ6VXNlcjIxMDMxMDY3",avatar_url:"https://avatars1.githubusercontent.com/u/21031067?v=4",gravatar_id:"",url:"https://api.github.com/users/Codertocat",html_url:"https://github.com/Codertocat",followers_url:"https://api.github.com/users/Codertocat/followers",following_url:"https://api.github.com/users/Codertocat/following{/other_user}",gists_url:"https://api.github.com/users/Codertocat/gists{/gist_id}",starred_url:"https://api.github.com/users/Codertocat/starred{/owner}{/repo}",subscriptions_url:"https://api.github.com/users/Codertocat/subscriptions",organizations_url:"https://api.github.com/users/Codertocat/orgs",repos_url:"https://api.github.com/users/Codertocat/repos",events_url:"https://api.github.com/users/Codertocat/events{/privacy}",received_events_url:"https://api.github.com/users/Codertocat/received_events",type:"User",site_admin:!1},body:"This is a pretty simple change that we need to pull into master.",created_at:"2019-05-15T15:20:33Z",updated_at:"2019-05-15T15:20:33Z",closed_at:null,merged_at:null,merge_commit_sha:null,assignee:null,assignees:[],requested_reviewers:[],requested_teams:[],labels:[],milestone:null,commits_url:"https://api.github.com/repos/Codertocat/Hello-World/pulls/2/commits",review_comments_url:"https://api.github.com/repos/Codertocat/Hello-World/pulls/2/comments",review_comment_url:"https://api.github.com/repos/Codertocat/Hello-World/pulls/comments{/number}",comments_url:"https://api.github.com/repos/Codertocat/Hello-World/issues/2/comments",statuses_url:"https://api.github.com/repos/Codertocat/Hello-World/statuses/ec26c3e57ca3a959ca5aad62de7213c562f8c821",head:{label:"Codertocat:changes",ref:"changes",sha:"ec26c3e57ca3a959ca5aad62de7213c562f8c821",user:{login:"Codertocat",id:21031067,node_id:"MDQ6VXNlcjIxMDMxMDY3",avatar_url:"https://avatars1.githubusercontent.com/u/21031067?v=4",gravatar_id:"",url:"https://api.github.com/users/Codertocat",html_url:"https://github.com/Codertocat",followers_url:"https://api.github.com/users/Codertocat/followers",following_url:"https://api.github.com/users/Codertocat/following{/other_user}",gists_url:"https://api.github.com/users/Codertocat/gists{/gist_id}",starred_url:"https://api.github.com/users/Codertocat/starred{/owner}{/repo}",subscriptions_url:"https://api.github.com/users/Codertocat/subscriptions",organizations_url:"https://api.github.com/users/Codertocat/orgs",repos_url:"https://api.github.com/users/Codertocat/repos",events_url:"https://api.github.com/users/Codertocat/events{/privacy}",received_events_url:"https://api.github.com/users/Codertocat/received_events",type:"User",site_admin:!1},repo:{id:186853002,node_id:"MDEwOlJlcG9zaXRvcnkxODY4NTMwMDI=",name:"Hello-World",full_name:"Codertocat/Hello-World",private:!1,owner:{login:"Codertocat",id:21031067,node_id:"MDQ6VXNlcjIxMDMxMDY3",avatar_url:"https://avatars1.githubusercontent.com/u/21031067?v=4",gravatar_id:"",url:"https://api.github.com/users/Codertocat",html_url:"https://github.com/Codertocat",followers_url:"https://api.github.com/users/Codertocat/followers",following_url:"https://api.github.com/users/Codertocat/following{/other_user}",gists_url:"https://api.github.com/users/Codertocat/gists{/gist_id}",starred_url:"https://api.github.com/users/Codertocat/starred{/owner}{/repo}",subscriptions_url:"https://api.github.com/users/Codertocat/subscriptions",organizations_url:"https://api.github.com/users/Codertocat/orgs",repos_url:"https://api.github.com/users/Codertocat/repos",events_url:"https://api.github.com/users/Codertocat/events{/privacy}",received_events_url:"https://api.github.com/users/Codertocat/received_events",type:"User",site_admin:!1},html_url:"https://github.com/Codertocat/Hello-World",description:null,fork:!1,url:"https://api.github.com/repos/Codertocat/Hello-World",forks_url:"https://api.github.com/repos/Codertocat/Hello-World/forks",keys_url:"https://api.github.com/repos/Codertocat/Hello-World/keys{/key_id}",collaborators_url:"https://api.github.com/repos/Codertocat/Hello-World/collaborators{/collaborator}",teams_url:"https://api.github.com/repos/Codertocat/Hello-World/teams",hooks_url:"https://api.github.com/repos/Codertocat/Hello-World/hooks",issue_events_url:"https://api.github.com/repos/Codertocat/Hello-World/issues/events{/number}",events_url:"https://api.github.com/repos/Codertocat/Hello-World/events",assignees_url:"https://api.github.com/repos/Codertocat/Hello-World/assignees{/user}",branches_url:"https://api.github.com/repos/Codertocat/Hello-World/branches{/branch}",tags_url:"https://api.github.com/repos/Codertocat/Hello-World/tags",blobs_url:"https://api.github.com/repos/Codertocat/Hello-World/git/blobs{/sha}",git_tags_url:"https://api.github.com/repos/Codertocat/Hello-World/git/tags{/sha}",git_refs_url:"https://api.github.com/repos/Codertocat/Hello-World/git/refs{/sha}",trees_url:"https://api.github.com/repos/Codertocat/Hello-World/git/trees{/sha}",statuses_url:"https://api.github.com/repos/Codertocat/Hello-World/statuses/{sha}",languages_url:"https://api.github.com/repos/Codertocat/Hello-World/languages",stargazers_url:"https://api.github.com/repos/Codertocat/Hello-World/stargazers",contributors_url:"https://api.github.com/repos/Codertocat/Hello-World/contributors",subscribers_url:"https://api.github.com/repos/Codertocat/Hello-World/subscribers",subscription_url:"https://api.github.com/repos/Codertocat/Hello-World/subscription",commits_url:"https://api.github.com/repos/Codertocat/Hello-World/commits{/sha}",git_commits_url:"https://api.github.com/repos/Codertocat/Hello-World/git/commits{/sha}",comments_url:"https://api.github.com/repos/Codertocat/Hello-World/comments{/number}",issue_comment_url:"https://api.github.com/repos/Codertocat/Hello-World/issues/comments{/number}",contents_url:"https://api.github.com/repos/Codertocat/Hello-World/contents/{+path}",compare_url:"https://api.github.com/repos/Codertocat/Hello-World/compare/{base}...{head}",merges_url:"https://api.github.com/repos/Codertocat/Hello-World/merges",archive_url:"https://api.github.com/repos/Codertocat/Hello-World/{archive_format}{/ref}",downloads_url:"https://api.github.com/repos/Codertocat/Hello-World/downloads",issues_url:"https://api.github.com/repos/Codertocat/Hello-World/issues{/number}",pulls_url:"https://api.github.com/repos/Codertocat/Hello-World/pulls{/number}",milestones_url:"https://api.github.com/repos/Codertocat/Hello-World/milestones{/number}",notifications_url:"https://api.github.com/repos/Codertocat/Hello-World/notifications{?since,all,participating}",labels_url:"https://api.github.com/repos/Codertocat/Hello-World/labels{/name}",releases_url:"https://api.github.com/repos/Codertocat/Hello-World/releases{/id}",deployments_url:"https://api.github.com/repos/Codertocat/Hello-World/deployments",created_at:"2019-05-15T15:19:25Z",updated_at:"2019-05-15T15:19:27Z",pushed_at:"2019-05-15T15:20:32Z",git_url:"git://github.com/Codertocat/Hello-World.git",ssh_url:"git@github.com:Codertocat/Hello-World.git",clone_url:"https://github.com/Codertocat/Hello-World.git",svn_url:"https://github.com/Codertocat/Hello-World",homepage:null,size:0,stargazers_count:0,watchers_count:0,language:null,has_issues:!0,has_projects:!0,has_downloads:!0,has_wiki:!0,has_pages:!0,forks_count:0,mirror_url:null,archived:!1,disabled:!1,open_issues_count:2,license:null,forks:0,open_issues:2,watchers:0,default_branch:"master",allow_squash_merge:!0,allow_merge_commit:!0,allow_rebase_merge:!0,delete_branch_on_merge:!1}},base:{label:"Codertocat:master",ref:"master",sha:"f95f852bd8fca8fcc58a9a2d6c842781e32a215e",user:{login:"Codertocat",id:21031067,node_id:"MDQ6VXNlcjIxMDMxMDY3",avatar_url:"https://avatars1.githubusercontent.com/u/21031067?v=4",gravatar_id:"",url:"https://api.github.com/users/Codertocat",html_url:"https://github.com/Codertocat",followers_url:"https://api.github.com/users/Codertocat/followers",following_url:"https://api.github.com/users/Codertocat/following{/other_user}",gists_url:"https://api.github.com/users/Codertocat/gists{/gist_id}",starred_url:"https://api.github.com/users/Codertocat/starred{/owner}{/repo}",subscriptions_url:"https://api.github.com/users/Codertocat/subscriptions",organizations_url:"https://api.github.com/users/Codertocat/orgs",repos_url:"https://api.github.com/users/Codertocat/repos",events_url:"https://api.github.com/users/Codertocat/events{/privacy}",received_events_url:"https://api.github.com/users/Codertocat/received_events",type:"User",site_admin:!1},repo:{id:186853002,node_id:"MDEwOlJlcG9zaXRvcnkxODY4NTMwMDI=",name:"Hello-World",full_name:"Codertocat/Hello-World",private:!1,owner:{login:"Codertocat",id:21031067,node_id:"MDQ6VXNlcjIxMDMxMDY3",avatar_url:"https://avatars1.githubusercontent.com/u/21031067?v=4",gravatar_id:"",url:"https://api.github.com/users/Codertocat",html_url:"https://github.com/Codertocat",followers_url:"https://api.github.com/users/Codertocat/followers",following_url:"https://api.github.com/users/Codertocat/following{/other_user}",gists_url:"https://api.github.com/users/Codertocat/gists{/gist_id}",starred_url:"https://api.github.com/users/Codertocat/starred{/owner}{/repo}",subscriptions_url:"https://api.github.com/users/Codertocat/subscriptions",organizations_url:"https://api.github.com/users/Codertocat/orgs",repos_url:"https://api.github.com/users/Codertocat/repos",events_url:"https://api.github.com/users/Codertocat/events{/privacy}",received_events_url:"https://api.github.com/users/Codertocat/received_events",type:"User",site_admin:!1},html_url:"https://github.com/Codertocat/Hello-World",description:null,fork:!1,url:"https://api.github.com/repos/Codertocat/Hello-World",forks_url:"https://api.github.com/repos/Codertocat/Hello-World/forks",keys_url:"https://api.github.com/repos/Codertocat/Hello-World/keys{/key_id}",collaborators_url:"https://api.github.com/repos/Codertocat/Hello-World/collaborators{/collaborator}",teams_url:"https://api.github.com/repos/Codertocat/Hello-World/teams",hooks_url:"https://api.github.com/repos/Codertocat/Hello-World/hooks",issue_events_url:"https://api.github.com/repos/Codertocat/Hello-World/issues/events{/number}",events_url:"https://api.github.com/repos/Codertocat/Hello-World/events",assignees_url:"https://api.github.com/repos/Codertocat/Hello-World/assignees{/user}",branches_url:"https://api.github.com/repos/Codertocat/Hello-World/branches{/branch}",tags_url:"https://api.github.com/repos/Codertocat/Hello-World/tags",blobs_url:"https://api.github.com/repos/Codertocat/Hello-World/git/blobs{/sha}",git_tags_url:"https://api.github.com/repos/Codertocat/Hello-World/git/tags{/sha}",git_refs_url:"https://api.github.com/repos/Codertocat/Hello-World/git/refs{/sha}",trees_url:"https://api.github.com/repos/Codertocat/Hello-World/git/trees{/sha}",statuses_url:"https://api.github.com/repos/Codertocat/Hello-World/statuses/{sha}",languages_url:"https://api.github.com/repos/Codertocat/Hello-World/languages",stargazers_url:"https://api.github.com/repos/Codertocat/Hello-World/stargazers",contributors_url:"https://api.github.com/repos/Codertocat/Hello-World/contributors",subscribers_url:"https://api.github.com/repos/Codertocat/Hello-World/subscribers",subscription_url:"https://api.github.com/repos/Codertocat/Hello-World/subscription",commits_url:"https://api.github.com/repos/Codertocat/Hello-World/commits{/sha}",git_commits_url:"https://api.github.com/repos/Codertocat/Hello-World/git/commits{/sha}",comments_url:"https://api.github.com/repos/Codertocat/Hello-World/comments{/number}",issue_comment_url:"https://api.github.com/repos/Codertocat/Hello-World/issues/comments{/number}",contents_url:"https://api.github.com/repos/Codertocat/Hello-World/contents/{+path}",compare_url:"https://api.github.com/repos/Codertocat/Hello-World/compare/{base}...{head}",merges_url:"https://api.github.com/repos/Codertocat/Hello-World/merges",archive_url:"https://api.github.com/repos/Codertocat/Hello-World/{archive_format}{/ref}",downloads_url:"https://api.github.com/repos/Codertocat/Hello-World/downloads",issues_url:"https://api.github.com/repos/Codertocat/Hello-World/issues{/number}",pulls_url:"https://api.github.com/repos/Codertocat/Hello-World/pulls{/number}",milestones_url:"https://api.github.com/repos/Codertocat/Hello-World/milestones{/number}",notifications_url:"https://api.github.com/repos/Codertocat/Hello-World/notifications{?since,all,participating}",labels_url:"https://api.github.com/repos/Codertocat/Hello-World/labels{/name}",releases_url:"https://api.github.com/repos/Codertocat/Hello-World/releases{/id}",deployments_url:"https://api.github.com/repos/Codertocat/Hello-World/deployments",created_at:"2019-05-15T15:19:25Z",updated_at:"2019-05-15T15:19:27Z",pushed_at:"2019-05-15T15:20:32Z",git_url:"git://github.com/Codertocat/Hello-World.git",ssh_url:"git@github.com:Codertocat/Hello-World.git",clone_url:"https://github.com/Codertocat/Hello-World.git",svn_url:"https://github.com/Codertocat/Hello-World",homepage:null,size:0,stargazers_count:0,watchers_count:0,language:null,has_issues:!0,has_projects:!0,has_downloads:!0,has_wiki:!0,has_pages:!0,forks_count:0,mirror_url:null,archived:!1,disabled:!1,open_issues_count:2,license:null,forks:0,open_issues:2,watchers:0,default_branch:"master",allow_squash_merge:!0,allow_merge_commit:!0,allow_rebase_merge:!0,delete_branch_on_merge:!1}},_links:{self:{href:"https://api.github.com/repos/Codertocat/Hello-World/pulls/2"},html:{href:"https://github.com/Codertocat/Hello-World/pull/2"},issue:{href:"https://api.github.com/repos/Codertocat/Hello-World/issues/2"},comments:{href:"https://api.github.com/repos/Codertocat/Hello-World/issues/2/comments"},review_comments:{href:"https://api.github.com/repos/Codertocat/Hello-World/pulls/2/comments"},review_comment:{href:"https://api.github.com/repos/Codertocat/Hello-World/pulls/comments{/number}"},commits:{href:"https://api.github.com/repos/Codertocat/Hello-World/pulls/2/commits"},statuses:{href:"https://api.github.com/repos/Codertocat/Hello-World/statuses/ec26c3e57ca3a959ca5aad62de7213c562f8c821"}},author_association:"OWNER",draft:!1,merged:!1,mergeable:null,rebaseable:null,mergeable_state:"unknown",merged_by:null,comments:0,review_comments:0,maintainer_can_modify:!1,commits:1,additions:1,deletions:1,changed_files:1},repository:{id:186853002,node_id:"MDEwOlJlcG9zaXRvcnkxODY4NTMwMDI=",name:"Hello-World",full_name:"Codertocat/Hello-World",private:!1,owner:{login:"Codertocat",id:21031067,node_id:"MDQ6VXNlcjIxMDMxMDY3",avatar_url:"https://avatars1.githubusercontent.com/u/21031067?v=4",gravatar_id:"",url:"https://api.github.com/users/Codertocat",html_url:"https://github.com/Codertocat",followers_url:"https://api.github.com/users/Codertocat/followers",following_url:"https://api.github.com/users/Codertocat/following{/other_user}",gists_url:"https://api.github.com/users/Codertocat/gists{/gist_id}",starred_url:"https://api.github.com/users/Codertocat/starred{/owner}{/repo}",subscriptions_url:"https://api.github.com/users/Codertocat/subscriptions",organizations_url:"https://api.github.com/users/Codertocat/orgs",repos_url:"https://api.github.com/users/Codertocat/repos",events_url:"https://api.github.com/users/Codertocat/events{/privacy}",received_events_url:"https://api.github.com/users/Codertocat/received_events",type:"User",site_admin:!1},html_url:"https://github.com/Codertocat/Hello-World",description:null,fork:!1,url:"https://api.github.com/repos/Codertocat/Hello-World",forks_url:"https://api.github.com/repos/Codertocat/Hello-World/forks",keys_url:"https://api.github.com/repos/Codertocat/Hello-World/keys{/key_id}",collaborators_url:"https://api.github.com/repos/Codertocat/Hello-World/collaborators{/collaborator}",teams_url:"https://api.github.com/repos/Codertocat/Hello-World/teams",hooks_url:"https://api.github.com/repos/Codertocat/Hello-World/hooks",issue_events_url:"https://api.github.com/repos/Codertocat/Hello-World/issues/events{/number}",events_url:"https://api.github.com/repos/Codertocat/Hello-World/events",assignees_url:"https://api.github.com/repos/Codertocat/Hello-World/assignees{/user}",branches_url:"https://api.github.com/repos/Codertocat/Hello-World/branches{/branch}",tags_url:"https://api.github.com/repos/Codertocat/Hello-World/tags",blobs_url:"https://api.github.com/repos/Codertocat/Hello-World/git/blobs{/sha}",git_tags_url:"https://api.github.com/repos/Codertocat/Hello-World/git/tags{/sha}",git_refs_url:"https://api.github.com/repos/Codertocat/Hello-World/git/refs{/sha}",trees_url:"https://api.github.com/repos/Codertocat/Hello-World/git/trees{/sha}",statuses_url:"https://api.github.com/repos/Codertocat/Hello-World/statuses/{sha}",languages_url:"https://api.github.com/repos/Codertocat/Hello-World/languages",stargazers_url:"https://api.github.com/repos/Codertocat/Hello-World/stargazers",contributors_url:"https://api.github.com/repos/Codertocat/Hello-World/contributors",subscribers_url:"https://api.github.com/repos/Codertocat/Hello-World/subscribers",subscription_url:"https://api.github.com/repos/Codertocat/Hello-World/subscription",commits_url:"https://api.github.com/repos/Codertocat/Hello-World/commits{/sha}",git_commits_url:"https://api.github.com/repos/Codertocat/Hello-World/git/commits{/sha}",comments_url:"https://api.github.com/repos/Codertocat/Hello-World/comments{/number}",issue_comment_url:"https://api.github.com/repos/Codertocat/Hello-World/issues/comments{/number}",contents_url:"https://api.github.com/repos/Codertocat/Hello-World/contents/{+path}",compare_url:"https://api.github.com/repos/Codertocat/Hello-World/compare/{base}...{head}",merges_url:"https://api.github.com/repos/Codertocat/Hello-World/merges",archive_url:"https://api.github.com/repos/Codertocat/Hello-World/{archive_format}{/ref}",downloads_url:"https://api.github.com/repos/Codertocat/Hello-World/downloads",issues_url:"https://api.github.com/repos/Codertocat/Hello-World/issues{/number}",pulls_url:"https://api.github.com/repos/Codertocat/Hello-World/pulls{/number}",milestones_url:"https://api.github.com/repos/Codertocat/Hello-World/milestones{/number}",notifications_url:"https://api.github.com/repos/Codertocat/Hello-World/notifications{?since,all,participating}",labels_url:"https://api.github.com/repos/Codertocat/Hello-World/labels{/name}",releases_url:"https://api.github.com/repos/Codertocat/Hello-World/releases{/id}",deployments_url:"https://api.github.com/repos/Codertocat/Hello-World/deployments",created_at:"2019-05-15T15:19:25Z",updated_at:"2019-05-15T15:19:27Z",pushed_at:"2019-05-15T15:20:32Z",git_url:"git://github.com/Codertocat/Hello-World.git",ssh_url:"git@github.com:Codertocat/Hello-World.git",clone_url:"https://github.com/Codertocat/Hello-World.git",svn_url:"https://github.com/Codertocat/Hello-World",homepage:null,size:0,stargazers_count:0,watchers_count:0,language:null,has_issues:!0,has_projects:!0,has_downloads:!0,has_wiki:!0,has_pages:!0,forks_count:0,mirror_url:null,archived:!1,disabled:!1,open_issues_count:2,license:null,forks:0,open_issues:2,watchers:0,default_branch:"master"},sender:{login:"Codertocat",id:21031067,node_id:"MDQ6VXNlcjIxMDMxMDY3",avatar_url:"https://avatars1.githubusercontent.com/u/21031067?v=4",gravatar_id:"",url:"https://api.github.com/users/Codertocat",html_url:"https://github.com/Codertocat",followers_url:"https://api.github.com/users/Codertocat/followers",following_url:"https://api.github.com/users/Codertocat/following{/other_user}",gists_url:"https://api.github.com/users/Codertocat/gists{/gist_id}",starred_url:"https://api.github.com/users/Codertocat/starred{/owner}{/repo}",subscriptions_url:"https://api.github.com/users/Codertocat/subscriptions",organizations_url:"https://api.github.com/users/Codertocat/orgs",repos_url:"https://api.github.com/users/Codertocat/repos",events_url:"https://api.github.com/users/Codertocat/events{/privacy}",received_events_url:"https://api.github.com/users/Codertocat/received_events",type:"User",site_admin:!1}},pull_request_review:{action:"submitted",review:{id:237895671,node_id:"MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MjM3ODk1Njcx",user:{login:"Codertocat",id:21031067,node_id:"MDQ6VXNlcjIxMDMxMDY3",avatar_url:"https://avatars1.githubusercontent.com/u/21031067?v=4",gravatar_id:"",url:"https://api.github.com/users/Codertocat",html_url:"https://github.com/Codertocat",followers_url:"https://api.github.com/users/Codertocat/followers",following_url:"https://api.github.com/users/Codertocat/following{/other_user}",gists_url:"https://api.github.com/users/Codertocat/gists{/gist_id}",starred_url:"https://api.github.com/users/Codertocat/starred{/owner}{/repo}",subscriptions_url:"https://api.github.com/users/Codertocat/subscriptions",organizations_url:"https://api.github.com/users/Codertocat/orgs",repos_url:"https://api.github.com/users/Codertocat/repos",events_url:"https://api.github.com/users/Codertocat/events{/privacy}",received_events_url:"https://api.github.com/users/Codertocat/received_events",type:"User",site_admin:!1},body:null,commit_id:"ec26c3e57ca3a959ca5aad62de7213c562f8c821",submitted_at:"2019-05-15T15:20:38Z",state:"commented",html_url:"https://github.com/Codertocat/Hello-World/pull/2#pullrequestreview-237895671",pull_request_url:"https://api.github.com/repos/Codertocat/Hello-World/pulls/2",author_association:"OWNER",_links:{html:{href:"https://github.com/Codertocat/Hello-World/pull/2#pullrequestreview-237895671"},pull_request:{href:"https://api.github.com/repos/Codertocat/Hello-World/pulls/2"}}},pull_request:{url:"https://api.github.com/repos/Codertocat/Hello-World/pulls/2",id:279147437,node_id:"MDExOlB1bGxSZXF1ZXN0Mjc5MTQ3NDM3",html_url:"https://github.com/Codertocat/Hello-World/pull/2",diff_url:"https://github.com/Codertocat/Hello-World/pull/2.diff",patch_url:"https://github.com/Codertocat/Hello-World/pull/2.patch",issue_url:"https://api.github.com/repos/Codertocat/Hello-World/issues/2",number:2,state:"open",locked:!1,title:"Update the README with new information.",user:{login:"Codertocat",id:21031067,node_id:"MDQ6VXNlcjIxMDMxMDY3",avatar_url:"https://avatars1.githubusercontent.com/u/21031067?v=4",gravatar_id:"",url:"https://api.github.com/users/Codertocat",html_url:"https://github.com/Codertocat",followers_url:"https://api.github.com/users/Codertocat/followers",following_url:"https://api.github.com/users/Codertocat/following{/other_user}",gists_url:"https://api.github.com/users/Codertocat/gists{/gist_id}",starred_url:"https://api.github.com/users/Codertocat/starred{/owner}{/repo}",subscriptions_url:"https://api.github.com/users/Codertocat/subscriptions",organizations_url:"https://api.github.com/users/Codertocat/orgs",repos_url:"https://api.github.com/users/Codertocat/repos",events_url:"https://api.github.com/users/Codertocat/events{/privacy}",received_events_url:"https://api.github.com/users/Codertocat/received_events",type:"User",site_admin:!1},body:"This is a pretty simple change that we need to pull into master.",created_at:"2019-05-15T15:20:33Z",updated_at:"2019-05-15T15:20:38Z",closed_at:null,merged_at:null,merge_commit_sha:"c4295bd74fb0f4fda03689c3df3f2803b658fd85",assignee:null,assignees:[],requested_reviewers:[],requested_teams:[],labels:[],milestone:null,commits_url:"https://api.github.com/repos/Codertocat/Hello-World/pulls/2/commits",review_comments_url:"https://api.github.com/repos/Codertocat/Hello-World/pulls/2/comments",review_comment_url:"https://api.github.com/repos/Codertocat/Hello-World/pulls/comments{/number}",comments_url:"https://api.github.com/repos/Codertocat/Hello-World/issues/2/comments",statuses_url:"https://api.github.com/repos/Codertocat/Hello-World/statuses/ec26c3e57ca3a959ca5aad62de7213c562f8c821",head:{label:"Codertocat:changes",ref:"changes",sha:"ec26c3e57ca3a959ca5aad62de7213c562f8c821",user:{login:"Codertocat",id:21031067,node_id:"MDQ6VXNlcjIxMDMxMDY3",avatar_url:"https://avatars1.githubusercontent.com/u/21031067?v=4",gravatar_id:"",url:"https://api.github.com/users/Codertocat",html_url:"https://github.com/Codertocat",followers_url:"https://api.github.com/users/Codertocat/followers",following_url:"https://api.github.com/users/Codertocat/following{/other_user}",gists_url:"https://api.github.com/users/Codertocat/gists{/gist_id}",starred_url:"https://api.github.com/users/Codertocat/starred{/owner}{/repo}",subscriptions_url:"https://api.github.com/users/Codertocat/subscriptions",organizations_url:"https://api.github.com/users/Codertocat/orgs",repos_url:"https://api.github.com/users/Codertocat/repos",events_url:"https://api.github.com/users/Codertocat/events{/privacy}",received_events_url:"https://api.github.com/users/Codertocat/received_events",type:"User",site_admin:!1},repo:{id:186853002,node_id:"MDEwOlJlcG9zaXRvcnkxODY4NTMwMDI=",name:"Hello-World",full_name:"Codertocat/Hello-World",private:!1,owner:{login:"Codertocat",id:21031067,node_id:"MDQ6VXNlcjIxMDMxMDY3",avatar_url:"https://avatars1.githubusercontent.com/u/21031067?v=4",gravatar_id:"",url:"https://api.github.com/users/Codertocat",html_url:"https://github.com/Codertocat",followers_url:"https://api.github.com/users/Codertocat/followers",following_url:"https://api.github.com/users/Codertocat/following{/other_user}",gists_url:"https://api.github.com/users/Codertocat/gists{/gist_id}",starred_url:"https://api.github.com/users/Codertocat/starred{/owner}{/repo}",subscriptions_url:"https://api.github.com/users/Codertocat/subscriptions",organizations_url:"https://api.github.com/users/Codertocat/orgs",repos_url:"https://api.github.com/users/Codertocat/repos",events_url:"https://api.github.com/users/Codertocat/events{/privacy}",received_events_url:"https://api.github.com/users/Codertocat/received_events",type:"User",site_admin:!1},html_url:"https://github.com/Codertocat/Hello-World",description:null,fork:!1,url:"https://api.github.com/repos/Codertocat/Hello-World",forks_url:"https://api.github.com/repos/Codertocat/Hello-World/forks",keys_url:"https://api.github.com/repos/Codertocat/Hello-World/keys{/key_id}",collaborators_url:"https://api.github.com/repos/Codertocat/Hello-World/collaborators{/collaborator}",teams_url:"https://api.github.com/repos/Codertocat/Hello-World/teams",hooks_url:"https://api.github.com/repos/Codertocat/Hello-World/hooks",issue_events_url:"https://api.github.com/repos/Codertocat/Hello-World/issues/events{/number}",events_url:"https://api.github.com/repos/Codertocat/Hello-World/events",assignees_url:"https://api.github.com/repos/Codertocat/Hello-World/assignees{/user}",branches_url:"https://api.github.com/repos/Codertocat/Hello-World/branches{/branch}",tags_url:"https://api.github.com/repos/Codertocat/Hello-World/tags",blobs_url:"https://api.github.com/repos/Codertocat/Hello-World/git/blobs{/sha}",git_tags_url:"https://api.github.com/repos/Codertocat/Hello-World/git/tags{/sha}",git_refs_url:"https://api.github.com/repos/Codertocat/Hello-World/git/refs{/sha}",trees_url:"https://api.github.com/repos/Codertocat/Hello-World/git/trees{/sha}",statuses_url:"https://api.github.com/repos/Codertocat/Hello-World/statuses/{sha}",languages_url:"https://api.github.com/repos/Codertocat/Hello-World/languages",stargazers_url:"https://api.github.com/repos/Codertocat/Hello-World/stargazers",contributors_url:"https://api.github.com/repos/Codertocat/Hello-World/contributors",subscribers_url:"https://api.github.com/repos/Codertocat/Hello-World/subscribers",subscription_url:"https://api.github.com/repos/Codertocat/Hello-World/subscription",commits_url:"https://api.github.com/repos/Codertocat/Hello-World/commits{/sha}",git_commits_url:"https://api.github.com/repos/Codertocat/Hello-World/git/commits{/sha}",comments_url:"https://api.github.com/repos/Codertocat/Hello-World/comments{/number}",issue_comment_url:"https://api.github.com/repos/Codertocat/Hello-World/issues/comments{/number}",contents_url:"https://api.github.com/repos/Codertocat/Hello-World/contents/{+path}",compare_url:"https://api.github.com/repos/Codertocat/Hello-World/compare/{base}...{head}",merges_url:"https://api.github.com/repos/Codertocat/Hello-World/merges",archive_url:"https://api.github.com/repos/Codertocat/Hello-World/{archive_format}{/ref}",downloads_url:"https://api.github.com/repos/Codertocat/Hello-World/downloads",issues_url:"https://api.github.com/repos/Codertocat/Hello-World/issues{/number}",pulls_url:"https://api.github.com/repos/Codertocat/Hello-World/pulls{/number}",milestones_url:"https://api.github.com/repos/Codertocat/Hello-World/milestones{/number}",notifications_url:"https://api.github.com/repos/Codertocat/Hello-World/notifications{?since,all,participating}",labels_url:"https://api.github.com/repos/Codertocat/Hello-World/labels{/name}",releases_url:"https://api.github.com/repos/Codertocat/Hello-World/releases{/id}",deployments_url:"https://api.github.com/repos/Codertocat/Hello-World/deployments",created_at:"2019-05-15T15:19:25Z",updated_at:"2019-05-15T15:20:34Z",pushed_at:"2019-05-15T15:20:33Z",git_url:"git://github.com/Codertocat/Hello-World.git",ssh_url:"git@github.com:Codertocat/Hello-World.git",clone_url:"https://github.com/Codertocat/Hello-World.git",svn_url:"https://github.com/Codertocat/Hello-World",homepage:null,size:0,stargazers_count:0,watchers_count:0,language:"Ruby",has_issues:!0,has_projects:!0,has_downloads:!0,has_wiki:!0,has_pages:!0,forks_count:0,mirror_url:null,archived:!1,disabled:!1,open_issues_count:2,license:null,forks:0,open_issues:2,watchers:0,default_branch:"master",allow_squash_merge:!0,allow_merge_commit:!0,allow_rebase_merge:!0,delete_branch_on_merge:!1}},base:{label:"Codertocat:master",ref:"master",sha:"f95f852bd8fca8fcc58a9a2d6c842781e32a215e",user:{login:"Codertocat",id:21031067,node_id:"MDQ6VXNlcjIxMDMxMDY3",avatar_url:"https://avatars1.githubusercontent.com/u/21031067?v=4",gravatar_id:"",url:"https://api.github.com/users/Codertocat",html_url:"https://github.com/Codertocat",followers_url:"https://api.github.com/users/Codertocat/followers",following_url:"https://api.github.com/users/Codertocat/following{/other_user}",gists_url:"https://api.github.com/users/Codertocat/gists{/gist_id}",starred_url:"https://api.github.com/users/Codertocat/starred{/owner}{/repo}",subscriptions_url:"https://api.github.com/users/Codertocat/subscriptions",organizations_url:"https://api.github.com/users/Codertocat/orgs",repos_url:"https://api.github.com/users/Codertocat/repos",events_url:"https://api.github.com/users/Codertocat/events{/privacy}",received_events_url:"https://api.github.com/users/Codertocat/received_events",type:"User",site_admin:!1},repo:{id:186853002,node_id:"MDEwOlJlcG9zaXRvcnkxODY4NTMwMDI=",name:"Hello-World",full_name:"Codertocat/Hello-World",private:!1,owner:{login:"Codertocat",id:21031067,node_id:"MDQ6VXNlcjIxMDMxMDY3",avatar_url:"https://avatars1.githubusercontent.com/u/21031067?v=4",gravatar_id:"",url:"https://api.github.com/users/Codertocat",html_url:"https://github.com/Codertocat",followers_url:"https://api.github.com/users/Codertocat/followers",following_url:"https://api.github.com/users/Codertocat/following{/other_user}",gists_url:"https://api.github.com/users/Codertocat/gists{/gist_id}",starred_url:"https://api.github.com/users/Codertocat/starred{/owner}{/repo}",subscriptions_url:"https://api.github.com/users/Codertocat/subscriptions",organizations_url:"https://api.github.com/users/Codertocat/orgs",repos_url:"https://api.github.com/users/Codertocat/repos",events_url:"https://api.github.com/users/Codertocat/events{/privacy}",received_events_url:"https://api.github.com/users/Codertocat/received_events",type:"User",site_admin:!1},html_url:"https://github.com/Codertocat/Hello-World",description:null,fork:!1,url:"https://api.github.com/repos/Codertocat/Hello-World",forks_url:"https://api.github.com/repos/Codertocat/Hello-World/forks",keys_url:"https://api.github.com/repos/Codertocat/Hello-World/keys{/key_id}",collaborators_url:"https://api.github.com/repos/Codertocat/Hello-World/collaborators{/collaborator}",teams_url:"https://api.github.com/repos/Codertocat/Hello-World/teams",hooks_url:"https://api.github.com/repos/Codertocat/Hello-World/hooks",issue_events_url:"https://api.github.com/repos/Codertocat/Hello-World/issues/events{/number}",events_url:"https://api.github.com/repos/Codertocat/Hello-World/events",assignees_url:"https://api.github.com/repos/Codertocat/Hello-World/assignees{/user}",branches_url:"https://api.github.com/repos/Codertocat/Hello-World/branches{/branch}",tags_url:"https://api.github.com/repos/Codertocat/Hello-World/tags",blobs_url:"https://api.github.com/repos/Codertocat/Hello-World/git/blobs{/sha}",git_tags_url:"https://api.github.com/repos/Codertocat/Hello-World/git/tags{/sha}",git_refs_url:"https://api.github.com/repos/Codertocat/Hello-World/git/refs{/sha}",trees_url:"https://api.github.com/repos/Codertocat/Hello-World/git/trees{/sha}",statuses_url:"https://api.github.com/repos/Codertocat/Hello-World/statuses/{sha}",languages_url:"https://api.github.com/repos/Codertocat/Hello-World/languages",stargazers_url:"https://api.github.com/repos/Codertocat/Hello-World/stargazers",contributors_url:"https://api.github.com/repos/Codertocat/Hello-World/contributors",subscribers_url:"https://api.github.com/repos/Codertocat/Hello-World/subscribers",subscription_url:"https://api.github.com/repos/Codertocat/Hello-World/subscription",commits_url:"https://api.github.com/repos/Codertocat/Hello-World/commits{/sha}",git_commits_url:"https://api.github.com/repos/Codertocat/Hello-World/git/commits{/sha}",comments_url:"https://api.github.com/repos/Codertocat/Hello-World/comments{/number}",issue_comment_url:"https://api.github.com/repos/Codertocat/Hello-World/issues/comments{/number}",contents_url:"https://api.github.com/repos/Codertocat/Hello-World/contents/{+path}",compare_url:"https://api.github.com/repos/Codertocat/Hello-World/compare/{base}...{head}",merges_url:"https://api.github.com/repos/Codertocat/Hello-World/merges",archive_url:"https://api.github.com/repos/Codertocat/Hello-World/{archive_format}{/ref}",downloads_url:"https://api.github.com/repos/Codertocat/Hello-World/downloads",issues_url:"https://api.github.com/repos/Codertocat/Hello-World/issues{/number}",pulls_url:"https://api.github.com/repos/Codertocat/Hello-World/pulls{/number}",milestones_url:"https://api.github.com/repos/Codertocat/Hello-World/milestones{/number}",notifications_url:"https://api.github.com/repos/Codertocat/Hello-World/notifications{?since,all,participating}",labels_url:"https://api.github.com/repos/Codertocat/Hello-World/labels{/name}",releases_url:"https://api.github.com/repos/Codertocat/Hello-World/releases{/id}",deployments_url:"https://api.github.com/repos/Codertocat/Hello-World/deployments",created_at:"2019-05-15T15:19:25Z",updated_at:"2019-05-15T15:20:34Z",pushed_at:"2019-05-15T15:20:33Z",git_url:"git://github.com/Codertocat/Hello-World.git",ssh_url:"git@github.com:Codertocat/Hello-World.git",clone_url:"https://github.com/Codertocat/Hello-World.git",svn_url:"https://github.com/Codertocat/Hello-World",homepage:null,size:0,stargazers_count:0,watchers_count:0,language:"Ruby",has_issues:!0,has_projects:!0,has_downloads:!0,has_wiki:!0,has_pages:!0,forks_count:0,mirror_url:null,archived:!1,disabled:!1,open_issues_count:2,license:null,forks:0,open_issues:2,watchers:0,default_branch:"master",allow_squash_merge:!0,allow_merge_commit:!0,allow_rebase_merge:!0,delete_branch_on_merge:!1}},_links:{self:{href:"https://api.github.com/repos/Codertocat/Hello-World/pulls/2"},html:{href:"https://github.com/Codertocat/Hello-World/pull/2"},issue:{href:"https://api.github.com/repos/Codertocat/Hello-World/issues/2"},comments:{href:"https://api.github.com/repos/Codertocat/Hello-World/issues/2/comments"},review_comments:{href:"https://api.github.com/repos/Codertocat/Hello-World/pulls/2/comments"},review_comment:{href:"https://api.github.com/repos/Codertocat/Hello-World/pulls/comments{/number}"},commits:{href:"https://api.github.com/repos/Codertocat/Hello-World/pulls/2/commits"},statuses:{href:"https://api.github.com/repos/Codertocat/Hello-World/statuses/ec26c3e57ca3a959ca5aad62de7213c562f8c821"}},author_association:"OWNER"},repository:{id:186853002,node_id:"MDEwOlJlcG9zaXRvcnkxODY4NTMwMDI=",name:"Hello-World",full_name:"Codertocat/Hello-World",private:!1,owner:{login:"Codertocat",id:21031067,node_id:"MDQ6VXNlcjIxMDMxMDY3",avatar_url:"https://avatars1.githubusercontent.com/u/21031067?v=4",gravatar_id:"",url:"https://api.github.com/users/Codertocat",html_url:"https://github.com/Codertocat",followers_url:"https://api.github.com/users/Codertocat/followers",following_url:"https://api.github.com/users/Codertocat/following{/other_user}",gists_url:"https://api.github.com/users/Codertocat/gists{/gist_id}",starred_url:"https://api.github.com/users/Codertocat/starred{/owner}{/repo}",subscriptions_url:"https://api.github.com/users/Codertocat/subscriptions",organizations_url:"https://api.github.com/users/Codertocat/orgs",repos_url:"https://api.github.com/users/Codertocat/repos",events_url:"https://api.github.com/users/Codertocat/events{/privacy}",received_events_url:"https://api.github.com/users/Codertocat/received_events",type:"User",site_admin:!1},html_url:"https://github.com/Codertocat/Hello-World",description:null,fork:!1,url:"https://api.github.com/repos/Codertocat/Hello-World",forks_url:"https://api.github.com/repos/Codertocat/Hello-World/forks",keys_url:"https://api.github.com/repos/Codertocat/Hello-World/keys{/key_id}",collaborators_url:"https://api.github.com/repos/Codertocat/Hello-World/collaborators{/collaborator}",teams_url:"https://api.github.com/repos/Codertocat/Hello-World/teams",hooks_url:"https://api.github.com/repos/Codertocat/Hello-World/hooks",issue_events_url:"https://api.github.com/repos/Codertocat/Hello-World/issues/events{/number}",events_url:"https://api.github.com/repos/Codertocat/Hello-World/events",assignees_url:"https://api.github.com/repos/Codertocat/Hello-World/assignees{/user}",branches_url:"https://api.github.com/repos/Codertocat/Hello-World/branches{/branch}",tags_url:"https://api.github.com/repos/Codertocat/Hello-World/tags",blobs_url:"https://api.github.com/repos/Codertocat/Hello-World/git/blobs{/sha}",git_tags_url:"https://api.github.com/repos/Codertocat/Hello-World/git/tags{/sha}",git_refs_url:"https://api.github.com/repos/Codertocat/Hello-World/git/refs{/sha}",trees_url:"https://api.github.com/repos/Codertocat/Hello-World/git/trees{/sha}",statuses_url:"https://api.github.com/repos/Codertocat/Hello-World/statuses/{sha}",languages_url:"https://api.github.com/repos/Codertocat/Hello-World/languages",stargazers_url:"https://api.github.com/repos/Codertocat/Hello-World/stargazers",contributors_url:"https://api.github.com/repos/Codertocat/Hello-World/contributors",subscribers_url:"https://api.github.com/repos/Codertocat/Hello-World/subscribers",subscription_url:"https://api.github.com/repos/Codertocat/Hello-World/subscription",commits_url:"https://api.github.com/repos/Codertocat/Hello-World/commits{/sha}",git_commits_url:"https://api.github.com/repos/Codertocat/Hello-World/git/commits{/sha}",comments_url:"https://api.github.com/repos/Codertocat/Hello-World/comments{/number}",issue_comment_url:"https://api.github.com/repos/Codertocat/Hello-World/issues/comments{/number}",contents_url:"https://api.github.com/repos/Codertocat/Hello-World/contents/{+path}",compare_url:"https://api.github.com/repos/Codertocat/Hello-World/compare/{base}...{head}",merges_url:"https://api.github.com/repos/Codertocat/Hello-World/merges",archive_url:"https://api.github.com/repos/Codertocat/Hello-World/{archive_format}{/ref}",downloads_url:"https://api.github.com/repos/Codertocat/Hello-World/downloads",issues_url:"https://api.github.com/repos/Codertocat/Hello-World/issues{/number}",pulls_url:"https://api.github.com/repos/Codertocat/Hello-World/pulls{/number}",milestones_url:"https://api.github.com/repos/Codertocat/Hello-World/milestones{/number}",notifications_url:"https://api.github.com/repos/Codertocat/Hello-World/notifications{?since,all,participating}",labels_url:"https://api.github.com/repos/Codertocat/Hello-World/labels{/name}",releases_url:"https://api.github.com/repos/Codertocat/Hello-World/releases{/id}",deployments_url:"https://api.github.com/repos/Codertocat/Hello-World/deployments",created_at:"2019-05-15T15:19:25Z",updated_at:"2019-05-15T15:20:34Z",pushed_at:"2019-05-15T15:20:33Z",git_url:"git://github.com/Codertocat/Hello-World.git",ssh_url:"git@github.com:Codertocat/Hello-World.git",clone_url:"https://github.com/Codertocat/Hello-World.git",svn_url:"https://github.com/Codertocat/Hello-World",homepage:null,size:0,stargazers_count:0,watchers_count:0,language:"Ruby",has_issues:!0,has_projects:!0,has_downloads:!0,has_wiki:!0,has_pages:!0,forks_count:0,mirror_url:null,archived:!1,disabled:!1,open_issues_count:2,license:null,forks:0,open_issues:2,watchers:0,default_branch:"master"},sender:{login:"Codertocat",id:21031067,node_id:"MDQ6VXNlcjIxMDMxMDY3",avatar_url:"https://avatars1.githubusercontent.com/u/21031067?v=4",gravatar_id:"",url:"https://api.github.com/users/Codertocat",html_url:"https://github.com/Codertocat",followers_url:"https://api.github.com/users/Codertocat/followers",following_url:"https://api.github.com/users/Codertocat/following{/other_user}",gists_url:"https://api.github.com/users/Codertocat/gists{/gist_id}",starred_url:"https://api.github.com/users/Codertocat/starred{/owner}{/repo}",subscriptions_url:"https://api.github.com/users/Codertocat/subscriptions",organizations_url:"https://api.github.com/users/Codertocat/orgs",repos_url:"https://api.github.com/users/Codertocat/repos",events_url:"https://api.github.com/users/Codertocat/events{/privacy}",received_events_url:"https://api.github.com/users/Codertocat/received_events",type:"User",site_admin:!1}},pull_request_review_comment:{action:"created",comment:{url:"https://api.github.com/repos/Codertocat/Hello-World/pulls/comments/284312630",pull_request_review_id:237895671,id:284312630,node_id:"MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDI4NDMxMjYzMA==",diff_hunk:"@@ -1 +1 @@\n-# Hello-World",path:"README.md",position:1,original_position:1,commit_id:"ec26c3e57ca3a959ca5aad62de7213c562f8c821",original_commit_id:"ec26c3e57ca3a959ca5aad62de7213c562f8c821",user:{login:"Codertocat",id:21031067,node_id:"MDQ6VXNlcjIxMDMxMDY3",avatar_url:"https://avatars1.githubusercontent.com/u/21031067?v=4",gravatar_id:"",url:"https://api.github.com/users/Codertocat",html_url:"https://github.com/Codertocat",followers_url:"https://api.github.com/users/Codertocat/followers",following_url:"https://api.github.com/users/Codertocat/following{/other_user}",gists_url:"https://api.github.com/users/Codertocat/gists{/gist_id}",starred_url:"https://api.github.com/users/Codertocat/starred{/owner}{/repo}",subscriptions_url:"https://api.github.com/users/Codertocat/subscriptions",organizations_url:"https://api.github.com/users/Codertocat/orgs",repos_url:"https://api.github.com/users/Codertocat/repos",events_url:"https://api.github.com/users/Codertocat/events{/privacy}",received_events_url:"https://api.github.com/users/Codertocat/received_events",type:"User",site_admin:!1},body:"Maybe you should use more emojji on this line.",created_at:"2019-05-15T15:20:37Z",updated_at:"2019-05-15T15:20:38Z",html_url:"https://github.com/Codertocat/Hello-World/pull/2#discussion_r284312630",pull_request_url:"https://api.github.com/repos/Codertocat/Hello-World/pulls/2",author_association:"OWNER",_links:{self:{href:"https://api.github.com/repos/Codertocat/Hello-World/pulls/comments/284312630"},html:{href:"https://github.com/Codertocat/Hello-World/pull/2#discussion_r284312630"},pull_request:{href:"https://api.github.com/repos/Codertocat/Hello-World/pulls/2"}}},pull_request:{url:"https://api.github.com/repos/Codertocat/Hello-World/pulls/2",id:279147437,node_id:"MDExOlB1bGxSZXF1ZXN0Mjc5MTQ3NDM3",html_url:"https://github.com/Codertocat/Hello-World/pull/2",diff_url:"https://github.com/Codertocat/Hello-World/pull/2.diff",patch_url:"https://github.com/Codertocat/Hello-World/pull/2.patch",issue_url:"https://api.github.com/repos/Codertocat/Hello-World/issues/2",number:2,state:"open",locked:!1,title:"Update the README with new information.",user:{login:"Codertocat",id:21031067,node_id:"MDQ6VXNlcjIxMDMxMDY3",avatar_url:"https://avatars1.githubusercontent.com/u/21031067?v=4",gravatar_id:"",url:"https://api.github.com/users/Codertocat",html_url:"https://github.com/Codertocat",followers_url:"https://api.github.com/users/Codertocat/followers",following_url:"https://api.github.com/users/Codertocat/following{/other_user}",gists_url:"https://api.github.com/users/Codertocat/gists{/gist_id}",starred_url:"https://api.github.com/users/Codertocat/starred{/owner}{/repo}",subscriptions_url:"https://api.github.com/users/Codertocat/subscriptions",organizations_url:"https://api.github.com/users/Codertocat/orgs",repos_url:"https://api.github.com/users/Codertocat/repos",events_url:"https://api.github.com/users/Codertocat/events{/privacy}",received_events_url:"https://api.github.com/users/Codertocat/received_events",type:"User",site_admin:!1},body:"This is a pretty simple change that we need to pull into master.",created_at:"2019-05-15T15:20:33Z",updated_at:"2019-05-15T15:20:38Z",closed_at:null,merged_at:null,merge_commit_sha:"c4295bd74fb0f4fda03689c3df3f2803b658fd85",assignee:null,assignees:[],requested_reviewers:[],requested_teams:[],labels:[],milestone:null,commits_url:"https://api.github.com/repos/Codertocat/Hello-World/pulls/2/commits",review_comments_url:"https://api.github.com/repos/Codertocat/Hello-World/pulls/2/comments",review_comment_url:"https://api.github.com/repos/Codertocat/Hello-World/pulls/comments{/number}",comments_url:"https://api.github.com/repos/Codertocat/Hello-World/issues/2/comments",statuses_url:"https://api.github.com/repos/Codertocat/Hello-World/statuses/ec26c3e57ca3a959ca5aad62de7213c562f8c821",head:{label:"Codertocat:changes",ref:"changes",sha:"ec26c3e57ca3a959ca5aad62de7213c562f8c821",user:{login:"Codertocat",id:21031067,node_id:"MDQ6VXNlcjIxMDMxMDY3",avatar_url:"https://avatars1.githubusercontent.com/u/21031067?v=4",gravatar_id:"",url:"https://api.github.com/users/Codertocat",html_url:"https://github.com/Codertocat",followers_url:"https://api.github.com/users/Codertocat/followers",following_url:"https://api.github.com/users/Codertocat/following{/other_user}",gists_url:"https://api.github.com/users/Codertocat/gists{/gist_id}",starred_url:"https://api.github.com/users/Codertocat/starred{/owner}{/repo}",subscriptions_url:"https://api.github.com/users/Codertocat/subscriptions",organizations_url:"https://api.github.com/users/Codertocat/orgs",repos_url:"https://api.github.com/users/Codertocat/repos",events_url:"https://api.github.com/users/Codertocat/events{/privacy}",received_events_url:"https://api.github.com/users/Codertocat/received_events",type:"User",site_admin:!1},repo:{id:186853002,node_id:"MDEwOlJlcG9zaXRvcnkxODY4NTMwMDI=",name:"Hello-World",full_name:"Codertocat/Hello-World",private:!1,owner:{login:"Codertocat",id:21031067,node_id:"MDQ6VXNlcjIxMDMxMDY3",avatar_url:"https://avatars1.githubusercontent.com/u/21031067?v=4",gravatar_id:"",url:"https://api.github.com/users/Codertocat",html_url:"https://github.com/Codertocat",followers_url:"https://api.github.com/users/Codertocat/followers",following_url:"https://api.github.com/users/Codertocat/following{/other_user}",gists_url:"https://api.github.com/users/Codertocat/gists{/gist_id}",starred_url:"https://api.github.com/users/Codertocat/starred{/owner}{/repo}",subscriptions_url:"https://api.github.com/users/Codertocat/subscriptions",organizations_url:"https://api.github.com/users/Codertocat/orgs",repos_url:"https://api.github.com/users/Codertocat/repos",events_url:"https://api.github.com/users/Codertocat/events{/privacy}",received_events_url:"https://api.github.com/users/Codertocat/received_events",type:"User",site_admin:!1},html_url:"https://github.com/Codertocat/Hello-World",description:null,fork:!1,url:"https://api.github.com/repos/Codertocat/Hello-World",forks_url:"https://api.github.com/repos/Codertocat/Hello-World/forks",keys_url:"https://api.github.com/repos/Codertocat/Hello-World/keys{/key_id}",collaborators_url:"https://api.github.com/repos/Codertocat/Hello-World/collaborators{/collaborator}",teams_url:"https://api.github.com/repos/Codertocat/Hello-World/teams",hooks_url:"https://api.github.com/repos/Codertocat/Hello-World/hooks",issue_events_url:"https://api.github.com/repos/Codertocat/Hello-World/issues/events{/number}",events_url:"https://api.github.com/repos/Codertocat/Hello-World/events",assignees_url:"https://api.github.com/repos/Codertocat/Hello-World/assignees{/user}",branches_url:"https://api.github.com/repos/Codertocat/Hello-World/branches{/branch}",tags_url:"https://api.github.com/repos/Codertocat/Hello-World/tags",blobs_url:"https://api.github.com/repos/Codertocat/Hello-World/git/blobs{/sha}",git_tags_url:"https://api.github.com/repos/Codertocat/Hello-World/git/tags{/sha}",git_refs_url:"https://api.github.com/repos/Codertocat/Hello-World/git/refs{/sha}",trees_url:"https://api.github.com/repos/Codertocat/Hello-World/git/trees{/sha}",statuses_url:"https://api.github.com/repos/Codertocat/Hello-World/statuses/{sha}",languages_url:"https://api.github.com/repos/Codertocat/Hello-World/languages",stargazers_url:"https://api.github.com/repos/Codertocat/Hello-World/stargazers",contributors_url:"https://api.github.com/repos/Codertocat/Hello-World/contributors",subscribers_url:"https://api.github.com/repos/Codertocat/Hello-World/subscribers",subscription_url:"https://api.github.com/repos/Codertocat/Hello-World/subscription",commits_url:"https://api.github.com/repos/Codertocat/Hello-World/commits{/sha}",git_commits_url:"https://api.github.com/repos/Codertocat/Hello-World/git/commits{/sha}",comments_url:"https://api.github.com/repos/Codertocat/Hello-World/comments{/number}",issue_comment_url:"https://api.github.com/repos/Codertocat/Hello-World/issues/comments{/number}",contents_url:"https://api.github.com/repos/Codertocat/Hello-World/contents/{+path}",compare_url:"https://api.github.com/repos/Codertocat/Hello-World/compare/{base}...{head}",merges_url:"https://api.github.com/repos/Codertocat/Hello-World/merges",archive_url:"https://api.github.com/repos/Codertocat/Hello-World/{archive_format}{/ref}",downloads_url:"https://api.github.com/repos/Codertocat/Hello-World/downloads",issues_url:"https://api.github.com/repos/Codertocat/Hello-World/issues{/number}",pulls_url:"https://api.github.com/repos/Codertocat/Hello-World/pulls{/number}",milestones_url:"https://api.github.com/repos/Codertocat/Hello-World/milestones{/number}",notifications_url:"https://api.github.com/repos/Codertocat/Hello-World/notifications{?since,all,participating}",labels_url:"https://api.github.com/repos/Codertocat/Hello-World/labels{/name}",releases_url:"https://api.github.com/repos/Codertocat/Hello-World/releases{/id}",deployments_url:"https://api.github.com/repos/Codertocat/Hello-World/deployments",created_at:"2019-05-15T15:19:25Z",updated_at:"2019-05-15T15:20:34Z",pushed_at:"2019-05-15T15:20:33Z",git_url:"git://github.com/Codertocat/Hello-World.git",ssh_url:"git@github.com:Codertocat/Hello-World.git",clone_url:"https://github.com/Codertocat/Hello-World.git",svn_url:"https://github.com/Codertocat/Hello-World",homepage:null,size:0,stargazers_count:0,watchers_count:0,language:"Ruby",has_issues:!0,has_projects:!0,has_downloads:!0,has_wiki:!0,has_pages:!0,forks_count:0,mirror_url:null,archived:!1,disabled:!1,open_issues_count:2,license:null,forks:0,open_issues:2,watchers:0,default_branch:"master",allow_squash_merge:!0,allow_merge_commit:!0,allow_rebase_merge:!0,delete_branch_on_merge:!1}},base:{label:"Codertocat:master",ref:"master",sha:"f95f852bd8fca8fcc58a9a2d6c842781e32a215e",user:{login:"Codertocat",id:21031067,node_id:"MDQ6VXNlcjIxMDMxMDY3",avatar_url:"https://avatars1.githubusercontent.com/u/21031067?v=4",gravatar_id:"",url:"https://api.github.com/users/Codertocat",html_url:"https://github.com/Codertocat",followers_url:"https://api.github.com/users/Codertocat/followers",following_url:"https://api.github.com/users/Codertocat/following{/other_user}",gists_url:"https://api.github.com/users/Codertocat/gists{/gist_id}",starred_url:"https://api.github.com/users/Codertocat/starred{/owner}{/repo}",subscriptions_url:"https://api.github.com/users/Codertocat/subscriptions",organizations_url:"https://api.github.com/users/Codertocat/orgs",repos_url:"https://api.github.com/users/Codertocat/repos",events_url:"https://api.github.com/users/Codertocat/events{/privacy}",received_events_url:"https://api.github.com/users/Codertocat/received_events",type:"User",site_admin:!1},repo:{id:186853002,node_id:"MDEwOlJlcG9zaXRvcnkxODY4NTMwMDI=",name:"Hello-World",full_name:"Codertocat/Hello-World",private:!1,owner:{login:"Codertocat",id:21031067,node_id:"MDQ6VXNlcjIxMDMxMDY3",avatar_url:"https://avatars1.githubusercontent.com/u/21031067?v=4",gravatar_id:"",url:"https://api.github.com/users/Codertocat",html_url:"https://github.com/Codertocat",followers_url:"https://api.github.com/users/Codertocat/followers",following_url:"https://api.github.com/users/Codertocat/following{/other_user}",gists_url:"https://api.github.com/users/Codertocat/gists{/gist_id}",starred_url:"https://api.github.com/users/Codertocat/starred{/owner}{/repo}",subscriptions_url:"https://api.github.com/users/Codertocat/subscriptions",organizations_url:"https://api.github.com/users/Codertocat/orgs",repos_url:"https://api.github.com/users/Codertocat/repos",events_url:"https://api.github.com/users/Codertocat/events{/privacy}",received_events_url:"https://api.github.com/users/Codertocat/received_events",type:"User",site_admin:!1},html_url:"https://github.com/Codertocat/Hello-World",description:null,fork:!1,url:"https://api.github.com/repos/Codertocat/Hello-World",forks_url:"https://api.github.com/repos/Codertocat/Hello-World/forks",keys_url:"https://api.github.com/repos/Codertocat/Hello-World/keys{/key_id}",collaborators_url:"https://api.github.com/repos/Codertocat/Hello-World/collaborators{/collaborator}",teams_url:"https://api.github.com/repos/Codertocat/Hello-World/teams",hooks_url:"https://api.github.com/repos/Codertocat/Hello-World/hooks",issue_events_url:"https://api.github.com/repos/Codertocat/Hello-World/issues/events{/number}",events_url:"https://api.github.com/repos/Codertocat/Hello-World/events",assignees_url:"https://api.github.com/repos/Codertocat/Hello-World/assignees{/user}",branches_url:"https://api.github.com/repos/Codertocat/Hello-World/branches{/branch}",tags_url:"https://api.github.com/repos/Codertocat/Hello-World/tags",blobs_url:"https://api.github.com/repos/Codertocat/Hello-World/git/blobs{/sha}",git_tags_url:"https://api.github.com/repos/Codertocat/Hello-World/git/tags{/sha}",git_refs_url:"https://api.github.com/repos/Codertocat/Hello-World/git/refs{/sha}",trees_url:"https://api.github.com/repos/Codertocat/Hello-World/git/trees{/sha}",statuses_url:"https://api.github.com/repos/Codertocat/Hello-World/statuses/{sha}",languages_url:"https://api.github.com/repos/Codertocat/Hello-World/languages",stargazers_url:"https://api.github.com/repos/Codertocat/Hello-World/stargazers",contributors_url:"https://api.github.com/repos/Codertocat/Hello-World/contributors",subscribers_url:"https://api.github.com/repos/Codertocat/Hello-World/subscribers",subscription_url:"https://api.github.com/repos/Codertocat/Hello-World/subscription",commits_url:"https://api.github.com/repos/Codertocat/Hello-World/commits{/sha}",git_commits_url:"https://api.github.com/repos/Codertocat/Hello-World/git/commits{/sha}",comments_url:"https://api.github.com/repos/Codertocat/Hello-World/comments{/number}",issue_comment_url:"https://api.github.com/repos/Codertocat/Hello-World/issues/comments{/number}",contents_url:"https://api.github.com/repos/Codertocat/Hello-World/contents/{+path}",compare_url:"https://api.github.com/repos/Codertocat/Hello-World/compare/{base}...{head}",merges_url:"https://api.github.com/repos/Codertocat/Hello-World/merges",archive_url:"https://api.github.com/repos/Codertocat/Hello-World/{archive_format}{/ref}",downloads_url:"https://api.github.com/repos/Codertocat/Hello-World/downloads",issues_url:"https://api.github.com/repos/Codertocat/Hello-World/issues{/number}",pulls_url:"https://api.github.com/repos/Codertocat/Hello-World/pulls{/number}",milestones_url:"https://api.github.com/repos/Codertocat/Hello-World/milestones{/number}",notifications_url:"https://api.github.com/repos/Codertocat/Hello-World/notifications{?since,all,participating}",labels_url:"https://api.github.com/repos/Codertocat/Hello-World/labels{/name}",releases_url:"https://api.github.com/repos/Codertocat/Hello-World/releases{/id}",deployments_url:"https://api.github.com/repos/Codertocat/Hello-World/deployments",created_at:"2019-05-15T15:19:25Z",updated_at:"2019-05-15T15:20:34Z",pushed_at:"2019-05-15T15:20:33Z",git_url:"git://github.com/Codertocat/Hello-World.git",ssh_url:"git@github.com:Codertocat/Hello-World.git",clone_url:"https://github.com/Codertocat/Hello-World.git",svn_url:"https://github.com/Codertocat/Hello-World",homepage:null,size:0,stargazers_count:0,watchers_count:0,language:"Ruby",has_issues:!0,has_projects:!0,has_downloads:!0,has_wiki:!0,has_pages:!0,forks_count:0,mirror_url:null,archived:!1,disabled:!1,open_issues_count:2,license:null,forks:0,open_issues:2,watchers:0,default_branch:"master",allow_squash_merge:!0,allow_merge_commit:!0,allow_rebase_merge:!0,delete_branch_on_merge:!1}},_links:{self:{href:"https://api.github.com/repos/Codertocat/Hello-World/pulls/2"},html:{href:"https://github.com/Codertocat/Hello-World/pull/2"},issue:{href:"https://api.github.com/repos/Codertocat/Hello-World/issues/2"},comments:{href:"https://api.github.com/repos/Codertocat/Hello-World/issues/2/comments"},review_comments:{href:"https://api.github.com/repos/Codertocat/Hello-World/pulls/2/comments"},review_comment:{href:"https://api.github.com/repos/Codertocat/Hello-World/pulls/comments{/number}"},commits:{href:"https://api.github.com/repos/Codertocat/Hello-World/pulls/2/commits"},statuses:{href:"https://api.github.com/repos/Codertocat/Hello-World/statuses/ec26c3e57ca3a959ca5aad62de7213c562f8c821"}},author_association:"OWNER"},repository:{id:186853002,node_id:"MDEwOlJlcG9zaXRvcnkxODY4NTMwMDI=",name:"Hello-World",full_name:"Codertocat/Hello-World",private:!1,owner:{login:"Codertocat",id:21031067,node_id:"MDQ6VXNlcjIxMDMxMDY3",avatar_url:"https://avatars1.githubusercontent.com/u/21031067?v=4",gravatar_id:"",url:"https://api.github.com/users/Codertocat",html_url:"https://github.com/Codertocat",followers_url:"https://api.github.com/users/Codertocat/followers",following_url:"https://api.github.com/users/Codertocat/following{/other_user}",gists_url:"https://api.github.com/users/Codertocat/gists{/gist_id}",starred_url:"https://api.github.com/users/Codertocat/starred{/owner}{/repo}",subscriptions_url:"https://api.github.com/users/Codertocat/subscriptions",organizations_url:"https://api.github.com/users/Codertocat/orgs",repos_url:"https://api.github.com/users/Codertocat/repos",events_url:"https://api.github.com/users/Codertocat/events{/privacy}",received_events_url:"https://api.github.com/users/Codertocat/received_events",type:"User",site_admin:!1},html_url:"https://github.com/Codertocat/Hello-World",description:null,fork:!1,url:"https://api.github.com/repos/Codertocat/Hello-World",forks_url:"https://api.github.com/repos/Codertocat/Hello-World/forks",keys_url:"https://api.github.com/repos/Codertocat/Hello-World/keys{/key_id}",collaborators_url:"https://api.github.com/repos/Codertocat/Hello-World/collaborators{/collaborator}",teams_url:"https://api.github.com/repos/Codertocat/Hello-World/teams",hooks_url:"https://api.github.com/repos/Codertocat/Hello-World/hooks",issue_events_url:"https://api.github.com/repos/Codertocat/Hello-World/issues/events{/number}",events_url:"https://api.github.com/repos/Codertocat/Hello-World/events",assignees_url:"https://api.github.com/repos/Codertocat/Hello-World/assignees{/user}",branches_url:"https://api.github.com/repos/Codertocat/Hello-World/branches{/branch}",tags_url:"https://api.github.com/repos/Codertocat/Hello-World/tags",blobs_url:"https://api.github.com/repos/Codertocat/Hello-World/git/blobs{/sha}",git_tags_url:"https://api.github.com/repos/Codertocat/Hello-World/git/tags{/sha}",git_refs_url:"https://api.github.com/repos/Codertocat/Hello-World/git/refs{/sha}",trees_url:"https://api.github.com/repos/Codertocat/Hello-World/git/trees{/sha}",statuses_url:"https://api.github.com/repos/Codertocat/Hello-World/statuses/{sha}",languages_url:"https://api.github.com/repos/Codertocat/Hello-World/languages",stargazers_url:"https://api.github.com/repos/Codertocat/Hello-World/stargazers",contributors_url:"https://api.github.com/repos/Codertocat/Hello-World/contributors",subscribers_url:"https://api.github.com/repos/Codertocat/Hello-World/subscribers",subscription_url:"https://api.github.com/repos/Codertocat/Hello-World/subscription",commits_url:"https://api.github.com/repos/Codertocat/Hello-World/commits{/sha}",git_commits_url:"https://api.github.com/repos/Codertocat/Hello-World/git/commits{/sha}",comments_url:"https://api.github.com/repos/Codertocat/Hello-World/comments{/number}",issue_comment_url:"https://api.github.com/repos/Codertocat/Hello-World/issues/comments{/number}",contents_url:"https://api.github.com/repos/Codertocat/Hello-World/contents/{+path}",compare_url:"https://api.github.com/repos/Codertocat/Hello-World/compare/{base}...{head}",merges_url:"https://api.github.com/repos/Codertocat/Hello-World/merges",archive_url:"https://api.github.com/repos/Codertocat/Hello-World/{archive_format}{/ref}",downloads_url:"https://api.github.com/repos/Codertocat/Hello-World/downloads",issues_url:"https://api.github.com/repos/Codertocat/Hello-World/issues{/number}",pulls_url:"https://api.github.com/repos/Codertocat/Hello-World/pulls{/number}",milestones_url:"https://api.github.com/repos/Codertocat/Hello-World/milestones{/number}",notifications_url:"https://api.github.com/repos/Codertocat/Hello-World/notifications{?since,all,participating}",labels_url:"https://api.github.com/repos/Codertocat/Hello-World/labels{/name}",releases_url:"https://api.github.com/repos/Codertocat/Hello-World/releases{/id}",deployments_url:"https://api.github.com/repos/Codertocat/Hello-World/deployments",created_at:"2019-05-15T15:19:25Z",updated_at:"2019-05-15T15:20:34Z",pushed_at:"2019-05-15T15:20:33Z",git_url:"git://github.com/Codertocat/Hello-World.git",ssh_url:"git@github.com:Codertocat/Hello-World.git",clone_url:"https://github.com/Codertocat/Hello-World.git",svn_url:"https://github.com/Codertocat/Hello-World",homepage:null,size:0,stargazers_count:0,watchers_count:0,language:"Ruby",has_issues:!0,has_projects:!0,has_downloads:!0,has_wiki:!0,has_pages:!0,forks_count:0,mirror_url:null,archived:!1,disabled:!1,open_issues_count:2,license:null,forks:0,open_issues:2,watchers:0,default_branch:"master"},sender:{login:"Codertocat",id:21031067,node_id:"MDQ6VXNlcjIxMDMxMDY3",avatar_url:"https://avatars1.githubusercontent.com/u/21031067?v=4",gravatar_id:"",url:"https://api.github.com/users/Codertocat",html_url:"https://github.com/Codertocat",followers_url:"https://api.github.com/users/Codertocat/followers",following_url:"https://api.github.com/users/Codertocat/following{/other_user}",gists_url:"https://api.github.com/users/Codertocat/gists{/gist_id}",starred_url:"https://api.github.com/users/Codertocat/starred{/owner}{/repo}",subscriptions_url:"https://api.github.com/users/Codertocat/subscriptions",organizations_url:"https://api.github.com/users/Codertocat/orgs",repos_url:"https://api.github.com/users/Codertocat/repos",events_url:"https://api.github.com/users/Codertocat/events{/privacy}",received_events_url:"https://api.github.com/users/Codertocat/received_events",type:"User",site_admin:!1}},push:{ref:"refs/tags/simple-tag",before:"6113728f27ae82c7b1a177c8d03f9e96e0adf246",after:"0000000000000000000000000000000000000000",created:!1,deleted:!0,forced:!1,base_ref:null,compare:"https://github.com/Codertocat/Hello-World/compare/6113728f27ae...000000000000",commits:[],head_commit:null,repository:{id:186853002,node_id:"MDEwOlJlcG9zaXRvcnkxODY4NTMwMDI=",name:"Hello-World",full_name:"Codertocat/Hello-World",private:!1,owner:{name:"Codertocat",email:"21031067+Codertocat@users.noreply.github.com",login:"Codertocat",id:21031067,node_id:"MDQ6VXNlcjIxMDMxMDY3",avatar_url:"https://avatars1.githubusercontent.com/u/21031067?v=4",gravatar_id:"",url:"https://api.github.com/users/Codertocat",html_url:"https://github.com/Codertocat",followers_url:"https://api.github.com/users/Codertocat/followers",following_url:"https://api.github.com/users/Codertocat/following{/other_user}",gists_url:"https://api.github.com/users/Codertocat/gists{/gist_id}",starred_url:"https://api.github.com/users/Codertocat/starred{/owner}{/repo}",subscriptions_url:"https://api.github.com/users/Codertocat/subscriptions",organizations_url:"https://api.github.com/users/Codertocat/orgs",repos_url:"https://api.github.com/users/Codertocat/repos",events_url:"https://api.github.com/users/Codertocat/events{/privacy}",received_events_url:"https://api.github.com/users/Codertocat/received_events",type:"User",site_admin:!1},html_url:"https://github.com/Codertocat/Hello-World",description:null,fork:!1,url:"https://github.com/Codertocat/Hello-World",forks_url:"https://api.github.com/repos/Codertocat/Hello-World/forks",keys_url:"https://api.github.com/repos/Codertocat/Hello-World/keys{/key_id}",collaborators_url:"https://api.github.com/repos/Codertocat/Hello-World/collaborators{/collaborator}",teams_url:"https://api.github.com/repos/Codertocat/Hello-World/teams",hooks_url:"https://api.github.com/repos/Codertocat/Hello-World/hooks",issue_events_url:"https://api.github.com/repos/Codertocat/Hello-World/issues/events{/number}",events_url:"https://api.github.com/repos/Codertocat/Hello-World/events",assignees_url:"https://api.github.com/repos/Codertocat/Hello-World/assignees{/user}",branches_url:"https://api.github.com/repos/Codertocat/Hello-World/branches{/branch}",tags_url:"https://api.github.com/repos/Codertocat/Hello-World/tags",blobs_url:"https://api.github.com/repos/Codertocat/Hello-World/git/blobs{/sha}",git_tags_url:"https://api.github.com/repos/Codertocat/Hello-World/git/tags{/sha}",git_refs_url:"https://api.github.com/repos/Codertocat/Hello-World/git/refs{/sha}",trees_url:"https://api.github.com/repos/Codertocat/Hello-World/git/trees{/sha}",statuses_url:"https://api.github.com/repos/Codertocat/Hello-World/statuses/{sha}",languages_url:"https://api.github.com/repos/Codertocat/Hello-World/languages",stargazers_url:"https://api.github.com/repos/Codertocat/Hello-World/stargazers",contributors_url:"https://api.github.com/repos/Codertocat/Hello-World/contributors",subscribers_url:"https://api.github.com/repos/Codertocat/Hello-World/subscribers",subscription_url:"https://api.github.com/repos/Codertocat/Hello-World/subscription",commits_url:"https://api.github.com/repos/Codertocat/Hello-World/commits{/sha}",git_commits_url:"https://api.github.com/repos/Codertocat/Hello-World/git/commits{/sha}",comments_url:"https://api.github.com/repos/Codertocat/Hello-World/comments{/number}",issue_comment_url:"https://api.github.com/repos/Codertocat/Hello-World/issues/comments{/number}",contents_url:"https://api.github.com/repos/Codertocat/Hello-World/contents/{+path}",compare_url:"https://api.github.com/repos/Codertocat/Hello-World/compare/{base}...{head}",merges_url:"https://api.github.com/repos/Codertocat/Hello-World/merges",archive_url:"https://api.github.com/repos/Codertocat/Hello-World/{archive_format}{/ref}",downloads_url:"https://api.github.com/repos/Codertocat/Hello-World/downloads",issues_url:"https://api.github.com/repos/Codertocat/Hello-World/issues{/number}",pulls_url:"https://api.github.com/repos/Codertocat/Hello-World/pulls{/number}",milestones_url:"https://api.github.com/repos/Codertocat/Hello-World/milestones{/number}",notifications_url:"https://api.github.com/repos/Codertocat/Hello-World/notifications{?since,all,participating}",labels_url:"https://api.github.com/repos/Codertocat/Hello-World/labels{/name}",releases_url:"https://api.github.com/repos/Codertocat/Hello-World/releases{/id}",deployments_url:"https://api.github.com/repos/Codertocat/Hello-World/deployments",created_at:1557933565,updated_at:"2019-05-15T15:20:41Z",pushed_at:1557933657,git_url:"git://github.com/Codertocat/Hello-World.git",ssh_url:"git@github.com:Codertocat/Hello-World.git",clone_url:"https://github.com/Codertocat/Hello-World.git",svn_url:"https://github.com/Codertocat/Hello-World",homepage:null,size:0,stargazers_count:0,watchers_count:0,language:"Ruby",has_issues:!0,has_projects:!0,has_downloads:!0,has_wiki:!0,has_pages:!0,forks_count:1,mirror_url:null,archived:!1,disabled:!1,open_issues_count:2,license:null,forks:1,open_issues:2,watchers:0,default_branch:"master",stargazers:0,master_branch:"master"},pusher:{name:"Codertocat",email:"21031067+Codertocat@users.noreply.github.com"},sender:{login:"Codertocat",id:21031067,node_id:"MDQ6VXNlcjIxMDMxMDY3",avatar_url:"https://avatars1.githubusercontent.com/u/21031067?v=4",gravatar_id:"",url:"https://api.github.com/users/Codertocat",html_url:"https://github.com/Codertocat",followers_url:"https://api.github.com/users/Codertocat/followers",following_url:"https://api.github.com/users/Codertocat/following{/other_user}",gists_url:"https://api.github.com/users/Codertocat/gists{/gist_id}",starred_url:"https://api.github.com/users/Codertocat/starred{/owner}{/repo}",subscriptions_url:"https://api.github.com/users/Codertocat/subscriptions",organizations_url:"https://api.github.com/users/Codertocat/orgs",repos_url:"https://api.github.com/users/Codertocat/repos",events_url:"https://api.github.com/users/Codertocat/events{/privacy}",received_events_url:"https://api.github.com/users/Codertocat/received_events",type:"User",site_admin:!1}},release:{action:"published",release:{url:"https://api.github.com/repos/Codertocat/Hello-World/releases/17372790",assets_url:"https://api.github.com/repos/Codertocat/Hello-World/releases/17372790/assets",upload_url:"https://uploads.github.com/repos/Codertocat/Hello-World/releases/17372790/assets{?name,label}",html_url:"https://github.com/Codertocat/Hello-World/releases/tag/0.0.1",id:17372790,node_id:"MDc6UmVsZWFzZTE3MzcyNzkw",tag_name:"0.0.1",target_commitish:"master",name:null,draft:!1,author:{login:"Codertocat",id:21031067,node_id:"MDQ6VXNlcjIxMDMxMDY3",avatar_url:"https://avatars1.githubusercontent.com/u/21031067?v=4",gravatar_id:"",url:"https://api.github.com/users/Codertocat",html_url:"https://github.com/Codertocat",followers_url:"https://api.github.com/users/Codertocat/followers",following_url:"https://api.github.com/users/Codertocat/following{/other_user}",gists_url:"https://api.github.com/users/Codertocat/gists{/gist_id}",starred_url:"https://api.github.com/users/Codertocat/starred{/owner}{/repo}",subscriptions_url:"https://api.github.com/users/Codertocat/subscriptions",organizations_url:"https://api.github.com/users/Codertocat/orgs",repos_url:"https://api.github.com/users/Codertocat/repos",events_url:"https://api.github.com/users/Codertocat/events{/privacy}",received_events_url:"https://api.github.com/users/Codertocat/received_events",type:"User",site_admin:!1},prerelease:!1,created_at:"2019-05-15T15:19:25Z",published_at:"2019-05-15T15:20:53Z",assets:[],tarball_url:"https://api.github.com/repos/Codertocat/Hello-World/tarball/0.0.1",zipball_url:"https://api.github.com/repos/Codertocat/Hello-World/zipball/0.0.1",body:null},repository:{id:186853002,node_id:"MDEwOlJlcG9zaXRvcnkxODY4NTMwMDI=",name:"Hello-World",full_name:"Codertocat/Hello-World",private:!1,owner:{login:"Codertocat",id:21031067,node_id:"MDQ6VXNlcjIxMDMxMDY3",avatar_url:"https://avatars1.githubusercontent.com/u/21031067?v=4",gravatar_id:"",url:"https://api.github.com/users/Codertocat",html_url:"https://github.com/Codertocat",followers_url:"https://api.github.com/users/Codertocat/followers",following_url:"https://api.github.com/users/Codertocat/following{/other_user}",gists_url:"https://api.github.com/users/Codertocat/gists{/gist_id}",starred_url:"https://api.github.com/users/Codertocat/starred{/owner}{/repo}",subscriptions_url:"https://api.github.com/users/Codertocat/subscriptions",organizations_url:"https://api.github.com/users/Codertocat/orgs",repos_url:"https://api.github.com/users/Codertocat/repos",events_url:"https://api.github.com/users/Codertocat/events{/privacy}",received_events_url:"https://api.github.com/users/Codertocat/received_events",type:"User",site_admin:!1},html_url:"https://github.com/Codertocat/Hello-World",description:null,fork:!1,url:"https://api.github.com/repos/Codertocat/Hello-World",forks_url:"https://api.github.com/repos/Codertocat/Hello-World/forks",keys_url:"https://api.github.com/repos/Codertocat/Hello-World/keys{/key_id}",collaborators_url:"https://api.github.com/repos/Codertocat/Hello-World/collaborators{/collaborator}",teams_url:"https://api.github.com/repos/Codertocat/Hello-World/teams",hooks_url:"https://api.github.com/repos/Codertocat/Hello-World/hooks",issue_events_url:"https://api.github.com/repos/Codertocat/Hello-World/issues/events{/number}",events_url:"https://api.github.com/repos/Codertocat/Hello-World/events",assignees_url:"https://api.github.com/repos/Codertocat/Hello-World/assignees{/user}",branches_url:"https://api.github.com/repos/Codertocat/Hello-World/branches{/branch}",tags_url:"https://api.github.com/repos/Codertocat/Hello-World/tags",blobs_url:"https://api.github.com/repos/Codertocat/Hello-World/git/blobs{/sha}",git_tags_url:"https://api.github.com/repos/Codertocat/Hello-World/git/tags{/sha}",git_refs_url:"https://api.github.com/repos/Codertocat/Hello-World/git/refs{/sha}",trees_url:"https://api.github.com/repos/Codertocat/Hello-World/git/trees{/sha}",statuses_url:"https://api.github.com/repos/Codertocat/Hello-World/statuses/{sha}",languages_url:"https://api.github.com/repos/Codertocat/Hello-World/languages",stargazers_url:"https://api.github.com/repos/Codertocat/Hello-World/stargazers",contributors_url:"https://api.github.com/repos/Codertocat/Hello-World/contributors",subscribers_url:"https://api.github.com/repos/Codertocat/Hello-World/subscribers",subscription_url:"https://api.github.com/repos/Codertocat/Hello-World/subscription",commits_url:"https://api.github.com/repos/Codertocat/Hello-World/commits{/sha}",git_commits_url:"https://api.github.com/repos/Codertocat/Hello-World/git/commits{/sha}",comments_url:"https://api.github.com/repos/Codertocat/Hello-World/comments{/number}",issue_comment_url:"https://api.github.com/repos/Codertocat/Hello-World/issues/comments{/number}",contents_url:"https://api.github.com/repos/Codertocat/Hello-World/contents/{+path}",compare_url:"https://api.github.com/repos/Codertocat/Hello-World/compare/{base}...{head}",merges_url:"https://api.github.com/repos/Codertocat/Hello-World/merges",archive_url:"https://api.github.com/repos/Codertocat/Hello-World/{archive_format}{/ref}",downloads_url:"https://api.github.com/repos/Codertocat/Hello-World/downloads",issues_url:"https://api.github.com/repos/Codertocat/Hello-World/issues{/number}",pulls_url:"https://api.github.com/repos/Codertocat/Hello-World/pulls{/number}",milestones_url:"https://api.github.com/repos/Codertocat/Hello-World/milestones{/number}",notifications_url:"https://api.github.com/repos/Codertocat/Hello-World/notifications{?since,all,participating}",labels_url:"https://api.github.com/repos/Codertocat/Hello-World/labels{/name}",releases_url:"https://api.github.com/repos/Codertocat/Hello-World/releases{/id}",deployments_url:"https://api.github.com/repos/Codertocat/Hello-World/deployments",created_at:"2019-05-15T15:19:25Z",updated_at:"2019-05-15T15:20:41Z",pushed_at:"2019-05-15T15:20:52Z",git_url:"git://github.com/Codertocat/Hello-World.git",ssh_url:"git@github.com:Codertocat/Hello-World.git",clone_url:"https://github.com/Codertocat/Hello-World.git",svn_url:"https://github.com/Codertocat/Hello-World",homepage:null,size:0,stargazers_count:0,watchers_count:0,language:"Ruby",has_issues:!0,has_projects:!0,has_downloads:!0,has_wiki:!0,has_pages:!0,forks_count:1,mirror_url:null,archived:!1,disabled:!1,open_issues_count:2,license:null,forks:1,open_issues:2,watchers:0,default_branch:"master"},sender:{login:"Codertocat",id:21031067,node_id:"MDQ6VXNlcjIxMDMxMDY3",avatar_url:"https://avatars1.githubusercontent.com/u/21031067?v=4",gravatar_id:"",url:"https://api.github.com/users/Codertocat",html_url:"https://github.com/Codertocat",followers_url:"https://api.github.com/users/Codertocat/followers",following_url:"https://api.github.com/users/Codertocat/following{/other_user}",gists_url:"https://api.github.com/users/Codertocat/gists{/gist_id}",starred_url:"https://api.github.com/users/Codertocat/starred{/owner}{/repo}",subscriptions_url:"https://api.github.com/users/Codertocat/subscriptions",organizations_url:"https://api.github.com/users/Codertocat/orgs",repos_url:"https://api.github.com/users/Codertocat/repos",events_url:"https://api.github.com/users/Codertocat/events{/privacy}",received_events_url:"https://api.github.com/users/Codertocat/received_events",type:"User",site_admin:!1}},repository:{action:"publicized",repository:{id:186853002,node_id:"MDEwOlJlcG9zaXRvcnkxODY4NTMwMDI=",name:"Hello-World",full_name:"Codertocat/Hello-World",private:!1,owner:{login:"Codertocat",id:21031067,node_id:"MDQ6VXNlcjIxMDMxMDY3",avatar_url:"https://avatars1.githubusercontent.com/u/21031067?v=4",gravatar_id:"",url:"https://api.github.com/users/Codertocat",html_url:"https://github.com/Codertocat",followers_url:"https://api.github.com/users/Codertocat/followers",following_url:"https://api.github.com/users/Codertocat/following{/other_user}",gists_url:"https://api.github.com/users/Codertocat/gists{/gist_id}",starred_url:"https://api.github.com/users/Codertocat/starred{/owner}{/repo}",subscriptions_url:"https://api.github.com/users/Codertocat/subscriptions",organizations_url:"https://api.github.com/users/Codertocat/orgs",repos_url:"https://api.github.com/users/Codertocat/repos",events_url:"https://api.github.com/users/Codertocat/events{/privacy}",received_events_url:"https://api.github.com/users/Codertocat/received_events",type:"User",site_admin:!1},html_url:"https://github.com/Codertocat/Hello-World",description:null,fork:!1,url:"https://api.github.com/repos/Codertocat/Hello-World",forks_url:"https://api.github.com/repos/Codertocat/Hello-World/forks",keys_url:"https://api.github.com/repos/Codertocat/Hello-World/keys{/key_id}",collaborators_url:"https://api.github.com/repos/Codertocat/Hello-World/collaborators{/collaborator}",teams_url:"https://api.github.com/repos/Codertocat/Hello-World/teams",hooks_url:"https://api.github.com/repos/Codertocat/Hello-World/hooks",issue_events_url:"https://api.github.com/repos/Codertocat/Hello-World/issues/events{/number}",events_url:"https://api.github.com/repos/Codertocat/Hello-World/events",assignees_url:"https://api.github.com/repos/Codertocat/Hello-World/assignees{/user}",branches_url:"https://api.github.com/repos/Codertocat/Hello-World/branches{/branch}",tags_url:"https://api.github.com/repos/Codertocat/Hello-World/tags",blobs_url:"https://api.github.com/repos/Codertocat/Hello-World/git/blobs{/sha}",git_tags_url:"https://api.github.com/repos/Codertocat/Hello-World/git/tags{/sha}",git_refs_url:"https://api.github.com/repos/Codertocat/Hello-World/git/refs{/sha}",trees_url:"https://api.github.com/repos/Codertocat/Hello-World/git/trees{/sha}",statuses_url:"https://api.github.com/repos/Codertocat/Hello-World/statuses/{sha}",languages_url:"https://api.github.com/repos/Codertocat/Hello-World/languages",stargazers_url:"https://api.github.com/repos/Codertocat/Hello-World/stargazers",contributors_url:"https://api.github.com/repos/Codertocat/Hello-World/contributors",subscribers_url:"https://api.github.com/repos/Codertocat/Hello-World/subscribers",subscription_url:"https://api.github.com/repos/Codertocat/Hello-World/subscription",commits_url:"https://api.github.com/repos/Codertocat/Hello-World/commits{/sha}",git_commits_url:"https://api.github.com/repos/Codertocat/Hello-World/git/commits{/sha}",comments_url:"https://api.github.com/repos/Codertocat/Hello-World/comments{/number}",issue_comment_url:"https://api.github.com/repos/Codertocat/Hello-World/issues/comments{/number}",contents_url:"https://api.github.com/repos/Codertocat/Hello-World/contents/{+path}",compare_url:"https://api.github.com/repos/Codertocat/Hello-World/compare/{base}...{head}",merges_url:"https://api.github.com/repos/Codertocat/Hello-World/merges",archive_url:"https://api.github.com/repos/Codertocat/Hello-World/{archive_format}{/ref}",downloads_url:"https://api.github.com/repos/Codertocat/Hello-World/downloads",issues_url:"https://api.github.com/repos/Codertocat/Hello-World/issues{/number}",pulls_url:"https://api.github.com/repos/Codertocat/Hello-World/pulls{/number}",milestones_url:"https://api.github.com/repos/Codertocat/Hello-World/milestones{/number}",notifications_url:"https://api.github.com/repos/Codertocat/Hello-World/notifications{?since,all,participating}",labels_url:"https://api.github.com/repos/Codertocat/Hello-World/labels{/name}",releases_url:"https://api.github.com/repos/Codertocat/Hello-World/releases{/id}",deployments_url:"https://api.github.com/repos/Codertocat/Hello-World/deployments",created_at:"2019-05-15T15:19:25Z",updated_at:"2019-05-15T15:21:03Z",pushed_at:"2019-05-15T15:20:57Z",git_url:"git://github.com/Codertocat/Hello-World.git",ssh_url:"git@github.com:Codertocat/Hello-World.git",clone_url:"https://github.com/Codertocat/Hello-World.git",svn_url:"https://github.com/Codertocat/Hello-World",homepage:null,size:0,stargazers_count:0,watchers_count:0,language:"Ruby",has_issues:!0,has_projects:!0,has_downloads:!0,has_wiki:!0,has_pages:!0,forks_count:1,mirror_url:null,archived:!1,disabled:!1,open_issues_count:2,license:null,forks:1,open_issues:2,watchers:0,default_branch:"master"},sender:{login:"Codertocat",id:21031067,node_id:"MDQ6VXNlcjIxMDMxMDY3",avatar_url:"https://avatars1.githubusercontent.com/u/21031067?v=4",gravatar_id:"",url:"https://api.github.com/users/Codertocat",html_url:"https://github.com/Codertocat",followers_url:"https://api.github.com/users/Codertocat/followers",following_url:"https://api.github.com/users/Codertocat/following{/other_user}",gists_url:"https://api.github.com/users/Codertocat/gists{/gist_id}",starred_url:"https://api.github.com/users/Codertocat/starred{/owner}{/repo}",subscriptions_url:"https://api.github.com/users/Codertocat/subscriptions",organizations_url:"https://api.github.com/users/Codertocat/orgs",repos_url:"https://api.github.com/users/Codertocat/repos",events_url:"https://api.github.com/users/Codertocat/events{/privacy}",received_events_url:"https://api.github.com/users/Codertocat/received_events",type:"User",site_admin:!1}},repository_dispatch:{action:"on-demand-test",branch:"master",client_payload:{unit:!1,integration:!0},repository:{id:17273051,node_id:"MDEwOlJlcG9zaXRvcnkxNzI3MzA1MQ==",name:"octo-repo",full_name:"octo-org/octo-repo",private:!0,owner:{login:"octo-org",id:6811672,node_id:"MDEyOk9yZ2FuaXphdGlvbjY4MTE2NzI=",avatar_url:"https://avatars3.githubusercontent.com/u/6811672?v=4",gravatar_id:"",url:"https://api.github.com/users/octo-org",html_url:"https://github.com/octo-org",followers_url:"https://api.github.com/users/octo-org/followers",following_url:"https://api.github.com/users/octo-org/following{/other_user}",gists_url:"https://api.github.com/users/octo-org/gists{/gist_id}",starred_url:"https://api.github.com/users/octo-org/starred{/owner}{/repo}",subscriptions_url:"https://api.github.com/users/octo-org/subscriptions",organizations_url:"https://api.github.com/users/octo-org/orgs",repos_url:"https://api.github.com/users/octo-org/repos",events_url:"https://api.github.com/users/octo-org/events{/privacy}",received_events_url:"https://api.github.com/users/octo-org/received_events",type:"Organization",site_admin:!1},html_url:"https://github.com/octo-org/octo-repo",description:"My first repo on GitHub!",fork:!1,url:"https://api.github.com/repos/octo-org/octo-repo",forks_url:"https://api.github.com/repos/octo-org/octo-repo/forks",keys_url:"https://api.github.com/repos/octo-org/octo-repo/keys{/key_id}",collaborators_url:"https://api.github.com/repos/octo-org/octo-repo/collaborators{/collaborator}",teams_url:"https://api.github.com/repos/octo-org/octo-repo/teams",hooks_url:"https://api.github.com/repos/octo-org/octo-repo/hooks",issue_events_url:"https://api.github.com/repos/octo-org/octo-repo/issues/events{/number}",events_url:"https://api.github.com/repos/octo-org/octo-repo/events",assignees_url:"https://api.github.com/repos/octo-org/octo-repo/assignees{/user}",branches_url:"https://api.github.com/repos/octo-org/octo-repo/branches{/branch}",tags_url:"https://api.github.com/repos/octo-org/octo-repo/tags",blobs_url:"https://api.github.com/repos/octo-org/octo-repo/git/blobs{/sha}",git_tags_url:"https://api.github.com/repos/octo-org/octo-repo/git/tags{/sha}",git_refs_url:"https://api.github.com/repos/octo-org/octo-repo/git/refs{/sha}",trees_url:"https://api.github.com/repos/octo-org/octo-repo/git/trees{/sha}",statuses_url:"https://api.github.com/repos/octo-org/octo-repo/statuses/{sha}",languages_url:"https://api.github.com/repos/octo-org/octo-repo/languages",stargazers_url:"https://api.github.com/repos/octo-org/octo-repo/stargazers",contributors_url:"https://api.github.com/repos/octo-org/octo-repo/contributors",subscribers_url:"https://api.github.com/repos/octo-org/octo-repo/subscribers",subscription_url:"https://api.github.com/repos/octo-org/octo-repo/subscription",commits_url:"https://api.github.com/repos/octo-org/octo-repo/commits{/sha}",git_commits_url:"https://api.github.com/repos/octo-org/octo-repo/git/commits{/sha}",comments_url:"https://api.github.com/repos/octo-org/octo-repo/comments{/number}",issue_comment_url:"https://api.github.com/repos/octo-org/octo-repo/issues/comments{/number}",contents_url:"https://api.github.com/repos/octo-org/octo-repo/contents/{+path}",compare_url:"https://api.github.com/repos/octo-org/octo-repo/compare/{base}...{head}",merges_url:"https://api.github.com/repos/octo-org/octo-repo/merges",archive_url:"https://api.github.com/repos/octo-org/octo-repo/{archive_format}{/ref}",downloads_url:"https://api.github.com/repos/octo-org/octo-repo/downloads",issues_url:"https://api.github.com/repos/octo-org/octo-repo/issues{/number}",pulls_url:"https://api.github.com/repos/octo-org/octo-repo/pulls{/number}",milestones_url:"https://api.github.com/repos/octo-org/octo-repo/milestones{/number}",notifications_url:"https://api.github.com/repos/octo-org/octo-repo/notifications{?since,all,participating}",labels_url:"https://api.github.com/repos/octo-org/octo-repo/labels{/name}",releases_url:"https://api.github.com/repos/octo-org/octo-repo/releases{/id}",deployments_url:"https://api.github.com/repos/octo-org/octo-repo/deployments",created_at:"2014-02-28T02:42:51Z",updated_at:"2018-10-10T15:58:51Z",pushed_at:"2018-10-10T15:58:47Z",git_url:"git://github.com/octo-org/octo-repo.git",ssh_url:"git@github.com:octo-org/octo-repo.git",clone_url:"https://github.com/octo-org/octo-repo.git",svn_url:"https://github.com/octo-org/octo-repo",homepage:"",size:59,stargazers_count:0,watchers_count:0,language:"JavaScript",has_issues:!0,has_projects:!0,has_downloads:!0,has_wiki:!0,has_pages:!1,forks_count:1,mirror_url:null,archived:!1,open_issues_count:23,license:null,forks:1,open_issues:23,watchers:0,default_branch:"master"},organization:{login:"octo-org",id:6811672,node_id:"MDEyOk9yZ2FuaXphdGlvbjY4MTE2NzI=",url:"https://api.github.com/orgs/octo-org",repos_url:"https://api.github.com/orgs/octo-org/repos",events_url:"https://api.github.com/orgs/octo-org/events",hooks_url:"https://api.github.com/orgs/octo-org/hooks",issues_url:"https://api.github.com/orgs/octo-org/issues",members_url:"https://api.github.com/orgs/octo-org/members{/member}",public_members_url:"https://api.github.com/orgs/octo-org/public_members{/member}",avatar_url:"https://avatars3.githubusercontent.com/u/6811672?v=4",description:"Working better together!"},sender:{login:"Codertocat",id:21031067,node_id:"MDQ6VXNlcjIxMDMxMDY3",avatar_url:"https://avatars1.githubusercontent.com/u/21031067?v=4",gravatar_id:"",url:"https://api.github.com/users/Codertocat",html_url:"https://github.com/Codertocat",followers_url:"https://api.github.com/users/Codertocat/followers",following_url:"https://api.github.com/users/Codertocat/following{/other_user}",gists_url:"https://api.github.com/users/Codertocat/gists{/gist_id}",starred_url:"https://api.github.com/users/Codertocat/starred{/owner}{/repo}",subscriptions_url:"https://api.github.com/users/Codertocat/subscriptions",organizations_url:"https://api.github.com/users/Codertocat/orgs",repos_url:"https://api.github.com/users/Codertocat/repos",events_url:"https://api.github.com/users/Codertocat/events{/privacy}",received_events_url:"https://api.github.com/users/Codertocat/received_events",type:"User",site_admin:!1},installation:{id:375706,node_id:"MDIzOkludGVncmF0aW9uSW5zdGFsbGF0aW9uMzc1NzA2"}},repository_import:{status:"success",repository:{id:135493233,node_id:"MDEwOlJlcG9zaXRvcnkxMzU0OTMyMzM=",name:"Hello-World",full_name:"Codertocat/Hello-World",owner:{login:"Codertocat",id:21031067,node_id:"MDQ6VXNlcjIxMDMxMDY3",avatar_url:"https://avatars1.githubusercontent.com/u/21031067?v=4",gravatar_id:"",url:"https://api.github.com/users/Codertocat",html_url:"https://github.com/Codertocat",followers_url:"https://api.github.com/users/Codertocat/followers",following_url:"https://api.github.com/users/Codertocat/following{/other_user}",gists_url:"https://api.github.com/users/Codertocat/gists{/gist_id}",starred_url:"https://api.github.com/users/Codertocat/starred{/owner}{/repo}",subscriptions_url:"https://api.github.com/users/Codertocat/subscriptions",organizations_url:"https://api.github.com/users/Codertocat/orgs",repos_url:"https://api.github.com/users/Codertocat/repos",events_url:"https://api.github.com/users/Codertocat/events{/privacy}",received_events_url:"https://api.github.com/users/Codertocat/received_events",type:"User",site_admin:!1},private:!1,html_url:"https://github.com/Codertocat/Hello-World",description:null,fork:!1,url:"https://api.github.com/repos/Codertocat/Hello-World",forks_url:"https://api.github.com/repos/Codertocat/Hello-World/forks",keys_url:"https://api.github.com/repos/Codertocat/Hello-World/keys{/key_id}",collaborators_url:"https://api.github.com/repos/Codertocat/Hello-World/collaborators{/collaborator}",teams_url:"https://api.github.com/repos/Codertocat/Hello-World/teams",hooks_url:"https://api.github.com/repos/Codertocat/Hello-World/hooks",issue_events_url:"https://api.github.com/repos/Codertocat/Hello-World/issues/events{/number}",events_url:"https://api.github.com/repos/Codertocat/Hello-World/events",assignees_url:"https://api.github.com/repos/Codertocat/Hello-World/assignees{/user}",branches_url:"https://api.github.com/repos/Codertocat/Hello-World/branches{/branch}",tags_url:"https://api.github.com/repos/Codertocat/Hello-World/tags",blobs_url:"https://api.github.com/repos/Codertocat/Hello-World/git/blobs{/sha}",git_tags_url:"https://api.github.com/repos/Codertocat/Hello-World/git/tags{/sha}",git_refs_url:"https://api.github.com/repos/Codertocat/Hello-World/git/refs{/sha}",trees_url:"https://api.github.com/repos/Codertocat/Hello-World/git/trees{/sha}",statuses_url:"https://api.github.com/repos/Codertocat/Hello-World/statuses/{sha}",languages_url:"https://api.github.com/repos/Codertocat/Hello-World/languages",stargazers_url:"https://api.github.com/repos/Codertocat/Hello-World/stargazers",contributors_url:"https://api.github.com/repos/Codertocat/Hello-World/contributors",subscribers_url:"https://api.github.com/repos/Codertocat/Hello-World/subscribers",subscription_url:"https://api.github.com/repos/Codertocat/Hello-World/subscription",commits_url:"https://api.github.com/repos/Codertocat/Hello-World/commits{/sha}",git_commits_url:"https://api.github.com/repos/Codertocat/Hello-World/git/commits{/sha}",comments_url:"https://api.github.com/repos/Codertocat/Hello-World/comments{/number}",issue_comment_url:"https://api.github.com/repos/Codertocat/Hello-World/issues/comments{/number}",contents_url:"https://api.github.com/repos/Codertocat/Hello-World/contents/{+path}",compare_url:"https://api.github.com/repos/Codertocat/Hello-World/compare/{base}...{head}",merges_url:"https://api.github.com/repos/Codertocat/Hello-World/merges",archive_url:"https://api.github.com/repos/Codertocat/Hello-World/{archive_format}{/ref}",downloads_url:"https://api.github.com/repos/Codertocat/Hello-World/downloads",issues_url:"https://api.github.com/repos/Codertocat/Hello-World/issues{/number}",pulls_url:"https://api.github.com/repos/Codertocat/Hello-World/pulls{/number}",milestones_url:"https://api.github.com/repos/Codertocat/Hello-World/milestones{/number}",notifications_url:"https://api.github.com/repos/Codertocat/Hello-World/notifications{?since,all,participating}",labels_url:"https://api.github.com/repos/Codertocat/Hello-World/labels{/name}",releases_url:"https://api.github.com/repos/Codertocat/Hello-World/releases{/id}",deployments_url:"https://api.github.com/repos/Codertocat/Hello-World/deployments",created_at:"2018-05-30T20:18:04Z",updated_at:"2018-05-30T20:18:49Z",pushed_at:"2018-05-30T20:18:48Z",git_url:"git://github.com/Codertocat/Hello-World.git",ssh_url:"git@github.com:Codertocat/Hello-World.git",clone_url:"https://github.com/Codertocat/Hello-World.git",svn_url:"https://github.com/Codertocat/Hello-World",homepage:null,size:0,stargazers_count:0,watchers_count:0,language:null,has_issues:!0,has_projects:!0,has_downloads:!0,has_wiki:!0,has_pages:!0,forks_count:0,mirror_url:null,archived:!1,open_issues_count:2,license:null,forks:0,open_issues:2,watchers:0,default_branch:"master"},organization:{login:"Octocoders",id:38302899,node_id:"MDEyOk9yZ2FuaXphdGlvbjM4MzAyODk5",url:"https://api.github.com/orgs/Octocoders",repos_url:"https://api.github.com/orgs/Octocoders/repos",events_url:"https://api.github.com/orgs/Octocoders/events",hooks_url:"https://api.github.com/orgs/Octocoders/hooks",issues_url:"https://api.github.com/orgs/Octocoders/issues",members_url:"https://api.github.com/orgs/Octocoders/members{/member}",public_members_url:"https://api.github.com/orgs/Octocoders/public_members{/member}",avatar_url:"https://avatars1.githubusercontent.com/u/38302899?v=4",description:""},sender:{login:"Codertocat",id:21031067,node_id:"MDQ6VXNlcjIxMDMxMDY3",avatar_url:"https://avatars1.githubusercontent.com/u/21031067?v=4",gravatar_id:"",url:"https://api.github.com/users/Codertocat",html_url:"https://github.com/Codertocat",followers_url:"https://api.github.com/users/Codertocat/followers",following_url:"https://api.github.com/users/Codertocat/following{/other_user}",gists_url:"https://api.github.com/users/Codertocat/gists{/gist_id}",starred_url:"https://api.github.com/users/Codertocat/starred{/owner}{/repo}",subscriptions_url:"https://api.github.com/users/Codertocat/subscriptions",organizations_url:"https://api.github.com/users/Codertocat/orgs",repos_url:"https://api.github.com/users/Codertocat/repos",events_url:"https://api.github.com/users/Codertocat/events{/privacy}",received_events_url:"https://api.github.com/users/Codertocat/received_events",type:"User",site_admin:!1}},repository_vulnerability_alert:{action:"create",alert:{id:91095730,affected_range:">= 2.0.4, < 2.0.6",affected_package_name:"rack",external_reference:"https://nvd.nist.gov/vuln/detail/CVE-2018-16470",external_identifier:"CVE-2018-16470",fixed_in:"2.0.6"},repository:{id:186853002,node_id:"MDEwOlJlcG9zaXRvcnkxODY4NTMwMDI=",name:"Hello-World",full_name:"Codertocat/Hello-World",private:!1,owner:{login:"Codertocat",id:21031067,node_id:"MDQ6VXNlcjIxMDMxMDY3",avatar_url:"https://avatars1.githubusercontent.com/u/21031067?v=4",gravatar_id:"",url:"https://api.github.com/users/Codertocat",html_url:"https://github.com/Codertocat",followers_url:"https://api.github.com/users/Codertocat/followers",following_url:"https://api.github.com/users/Codertocat/following{/other_user}",gists_url:"https://api.github.com/users/Codertocat/gists{/gist_id}",starred_url:"https://api.github.com/users/Codertocat/starred{/owner}{/repo}",subscriptions_url:"https://api.github.com/users/Codertocat/subscriptions",organizations_url:"https://api.github.com/users/Codertocat/orgs",repos_url:"https://api.github.com/users/Codertocat/repos",events_url:"https://api.github.com/users/Codertocat/events{/privacy}",received_events_url:"https://api.github.com/users/Codertocat/received_events",type:"User",site_admin:!1},html_url:"https://github.com/Codertocat/Hello-World",description:null,fork:!1,url:"https://api.github.com/repos/Codertocat/Hello-World",forks_url:"https://api.github.com/repos/Codertocat/Hello-World/forks",keys_url:"https://api.github.com/repos/Codertocat/Hello-World/keys{/key_id}",collaborators_url:"https://api.github.com/repos/Codertocat/Hello-World/collaborators{/collaborator}",teams_url:"https://api.github.com/repos/Codertocat/Hello-World/teams",hooks_url:"https://api.github.com/repos/Codertocat/Hello-World/hooks",issue_events_url:"https://api.github.com/repos/Codertocat/Hello-World/issues/events{/number}",events_url:"https://api.github.com/repos/Codertocat/Hello-World/events",assignees_url:"https://api.github.com/repos/Codertocat/Hello-World/assignees{/user}",branches_url:"https://api.github.com/repos/Codertocat/Hello-World/branches{/branch}",tags_url:"https://api.github.com/repos/Codertocat/Hello-World/tags",blobs_url:"https://api.github.com/repos/Codertocat/Hello-World/git/blobs{/sha}",git_tags_url:"https://api.github.com/repos/Codertocat/Hello-World/git/tags{/sha}",git_refs_url:"https://api.github.com/repos/Codertocat/Hello-World/git/refs{/sha}",trees_url:"https://api.github.com/repos/Codertocat/Hello-World/git/trees{/sha}",statuses_url:"https://api.github.com/repos/Codertocat/Hello-World/statuses/{sha}",languages_url:"https://api.github.com/repos/Codertocat/Hello-World/languages",stargazers_url:"https://api.github.com/repos/Codertocat/Hello-World/stargazers",contributors_url:"https://api.github.com/repos/Codertocat/Hello-World/contributors",subscribers_url:"https://api.github.com/repos/Codertocat/Hello-World/subscribers",subscription_url:"https://api.github.com/repos/Codertocat/Hello-World/subscription",commits_url:"https://api.github.com/repos/Codertocat/Hello-World/commits{/sha}",git_commits_url:"https://api.github.com/repos/Codertocat/Hello-World/git/commits{/sha}",comments_url:"https://api.github.com/repos/Codertocat/Hello-World/comments{/number}",issue_comment_url:"https://api.github.com/repos/Codertocat/Hello-World/issues/comments{/number}",contents_url:"https://api.github.com/repos/Codertocat/Hello-World/contents/{+path}",compare_url:"https://api.github.com/repos/Codertocat/Hello-World/compare/{base}...{head}",merges_url:"https://api.github.com/repos/Codertocat/Hello-World/merges",archive_url:"https://api.github.com/repos/Codertocat/Hello-World/{archive_format}{/ref}",downloads_url:"https://api.github.com/repos/Codertocat/Hello-World/downloads",issues_url:"https://api.github.com/repos/Codertocat/Hello-World/issues{/number}",pulls_url:"https://api.github.com/repos/Codertocat/Hello-World/pulls{/number}",milestones_url:"https://api.github.com/repos/Codertocat/Hello-World/milestones{/number}",notifications_url:"https://api.github.com/repos/Codertocat/Hello-World/notifications{?since,all,participating}",labels_url:"https://api.github.com/repos/Codertocat/Hello-World/labels{/name}",releases_url:"https://api.github.com/repos/Codertocat/Hello-World/releases{/id}",deployments_url:"https://api.github.com/repos/Codertocat/Hello-World/deployments",created_at:"2019-05-15T15:19:25Z",updated_at:"2019-05-15T15:19:27Z",pushed_at:"2019-05-15T15:20:32Z",git_url:"git://github.com/Codertocat/Hello-World.git",ssh_url:"git@github.com:Codertocat/Hello-World.git",clone_url:"https://github.com/Codertocat/Hello-World.git",svn_url:"https://github.com/Codertocat/Hello-World",homepage:null,size:0,stargazers_count:0,watchers_count:0,language:null,has_issues:!0,has_projects:!0,has_downloads:!0,has_wiki:!0,has_pages:!0,forks_count:0,mirror_url:null,archived:!1,disabled:!1,open_issues_count:2,license:null,forks:0,open_issues:2,watchers:0,default_branch:"master"},sender:{login:"github",id:9919,node_id:"MDEyOk9yZ2FuaXphdGlvbjk5MTk=",avatar_url:"https://avatars1.githubusercontent.com/u/9919?v=4",gravatar_id:"",url:"https://api.github.com/users/github",html_url:"https://github.com/github",followers_url:"https://api.github.com/users/github/followers",following_url:"https://api.github.com/users/github/following{/other_user}",gists_url:"https://api.github.com/users/github/gists{/gist_id}",starred_url:"https://api.github.com/users/github/starred{/owner}{/repo}",subscriptions_url:"https://api.github.com/users/github/subscriptions",organizations_url:"https://api.github.com/users/github/orgs",repos_url:"https://api.github.com/users/github/repos",events_url:"https://api.github.com/users/github/events{/privacy}",received_events_url:"https://api.github.com/users/github/received_events",type:"Organization",site_admin:!1}},security_advisory:{action:"published",security_advisory:{ghsa_id:"GHSA-rf4j-j272-fj86",summary:"Moderate severity vulnerability that affects django",description:"django.contrib.auth.forms.AuthenticationForm in Django 2.0 before 2.0.2, and 1.11.8 and 1.11.9, allows remote attackers to obtain potentially sensitive information by leveraging data exposure from the confirm_login_allowed() method, as demonstrated by discovering whether a user account is inactive.",severity:"moderate",identifiers:[{value:"GHSA-rf4j-j272-fj86",type:"GHSA"},{value:"CVE-2018-6188",type:"CVE"}],references:[{url:"https://nvd.nist.gov/vuln/detail/CVE-2018-6188"}],published_at:"2018-10-03T21:13:54Z",updated_at:"2018-10-03T21:13:54Z",withdrawn_at:null,vulnerabilities:[{package:{ecosystem:"pip",name:"django"},severity:"moderate",vulnerable_version_range:">= 2.0.0, < 2.0.2",first_patched_version:{identifier:"2.0.2"}},{package:{ecosystem:"pip",name:"django"},severity:"moderate",vulnerable_version_range:">= 1.11.8, < 1.11.10",first_patched_version:{identifier:"1.11.10"}}]}},sponsorship:{action:"created",sponsorship:{node_id:"MDExOlNwb25zb3JzaGlwMQ==",created_at:"2019-12-20T19:24:46+00:00",sponsorable:{login:"octocat",id:5,node_id:"MDQ6VXNlcjU=",avatar_url:"https://avatars2.githubusercontent.com/u/5?",gravatar_id:"",url:"https://api.github.com/users/octocat",html_url:"https://github.com/octocat",followers_url:"https://api.github.com/users/octocat/followers",following_url:"https://api.github.com/users/octocat/following{/other_user}",gists_url:"https://api.github.com/users/octocat/gists{/gist_id}",starred_url:"https://api.github.com/users/octocat/starred{/owner}{/repo}",subscriptions_url:"https://api.github.com/users/octocat/subscriptions",organizations_url:"https://api.github.com/users/octocat/orgs",repos_url:"https://api.github.com/users/octocat/repos",events_url:"https://api.github.com/users/octocat/events{/privacy}",received_events_url:"https://api.github.com/users/octocat/received_events",type:"User",site_admin:!1},sponsor:{login:"monalisa",id:2,node_id:"MDQ6VXNlcjI=",avatar_url:"https://avatars2.githubusercontent.com/u/2?",gravatar_id:"",url:"https://api.github.com/users/monalisa",html_url:"https://github.com/monalisa",followers_url:"https://api.github.com/users/monalisa/followers",following_url:"https://api.github.com/users/monalisa/following{/other_user}",gists_url:"https://api.github.com/users/monalisa/gists{/gist_id}",starred_url:"https://api.github.com/users/monalisa/starred{/owner}{/repo}",subscriptions_url:"https://api.github.com/users/monalisa/subscriptions",organizations_url:"https://api.github.com/users/monalisa/orgs",repos_url:"https://api.github.com/users/monalisa/repos",events_url:"https://api.github.com/users/monalisa/events{/privacy}",received_events_url:"https://api.github.com/users/monalisa/received_events",type:"User",site_admin:!0},privacy_level:"public",tier:{node_id:"MDEyOlNwb25zb3JzVGllcjE=",created_at:"2019-12-20T19:17:05Z",description:"foo",monthly_price_in_cents:500,monthly_price_in_dollars:5,name:"$5 a month"}},sender:{login:"monalisa",id:2,node_id:"MDQ6VXNlcjI=",avatar_url:"https://avatars2.githubusercontent.com/u/2?",gravatar_id:"",url:"https://api.github.com/users/monalisa",html_url:"https://github.com/monalisa",followers_url:"https://api.github.com/users/monalisa/followers",following_url:"https://api.github.com/users/monalisa/following{/other_user}",gists_url:"https://api.github.com/users/monalisa/gists{/gist_id}",starred_url:"https://api.github.com/users/monalisa/starred{/owner}{/repo}",subscriptions_url:"https://api.github.com/users/monalisa/subscriptions",organizations_url:"https://api.github.com/users/monalisa/orgs",repos_url:"https://api.github.com/users/monalisa/repos",events_url:"https://api.github.com/users/monalisa/events{/privacy}",received_events_url:"https://api.github.com/users/monalisa/received_events",type:"User",site_admin:!0}},star:{action:"created",starred_at:"2019-05-15T15:20:40Z",repository:{id:186853002,node_id:"MDEwOlJlcG9zaXRvcnkxODY4NTMwMDI=",name:"Hello-World",full_name:"Codertocat/Hello-World",private:!1,owner:{login:"Codertocat",id:21031067,node_id:"MDQ6VXNlcjIxMDMxMDY3",avatar_url:"https://avatars1.githubusercontent.com/u/21031067?v=4",gravatar_id:"",url:"https://api.github.com/users/Codertocat",html_url:"https://github.com/Codertocat",followers_url:"https://api.github.com/users/Codertocat/followers",following_url:"https://api.github.com/users/Codertocat/following{/other_user}",gists_url:"https://api.github.com/users/Codertocat/gists{/gist_id}",starred_url:"https://api.github.com/users/Codertocat/starred{/owner}{/repo}",subscriptions_url:"https://api.github.com/users/Codertocat/subscriptions",organizations_url:"https://api.github.com/users/Codertocat/orgs",repos_url:"https://api.github.com/users/Codertocat/repos",events_url:"https://api.github.com/users/Codertocat/events{/privacy}",received_events_url:"https://api.github.com/users/Codertocat/received_events",type:"User",site_admin:!1},html_url:"https://github.com/Codertocat/Hello-World",description:null,fork:!1,url:"https://api.github.com/repos/Codertocat/Hello-World",forks_url:"https://api.github.com/repos/Codertocat/Hello-World/forks",keys_url:"https://api.github.com/repos/Codertocat/Hello-World/keys{/key_id}",collaborators_url:"https://api.github.com/repos/Codertocat/Hello-World/collaborators{/collaborator}",teams_url:"https://api.github.com/repos/Codertocat/Hello-World/teams",hooks_url:"https://api.github.com/repos/Codertocat/Hello-World/hooks",issue_events_url:"https://api.github.com/repos/Codertocat/Hello-World/issues/events{/number}",events_url:"https://api.github.com/repos/Codertocat/Hello-World/events",assignees_url:"https://api.github.com/repos/Codertocat/Hello-World/assignees{/user}",branches_url:"https://api.github.com/repos/Codertocat/Hello-World/branches{/branch}",tags_url:"https://api.github.com/repos/Codertocat/Hello-World/tags",blobs_url:"https://api.github.com/repos/Codertocat/Hello-World/git/blobs{/sha}",git_tags_url:"https://api.github.com/repos/Codertocat/Hello-World/git/tags{/sha}",git_refs_url:"https://api.github.com/repos/Codertocat/Hello-World/git/refs{/sha}",trees_url:"https://api.github.com/repos/Codertocat/Hello-World/git/trees{/sha}",statuses_url:"https://api.github.com/repos/Codertocat/Hello-World/statuses/{sha}",languages_url:"https://api.github.com/repos/Codertocat/Hello-World/languages",stargazers_url:"https://api.github.com/repos/Codertocat/Hello-World/stargazers",contributors_url:"https://api.github.com/repos/Codertocat/Hello-World/contributors",subscribers_url:"https://api.github.com/repos/Codertocat/Hello-World/subscribers",subscription_url:"https://api.github.com/repos/Codertocat/Hello-World/subscription",commits_url:"https://api.github.com/repos/Codertocat/Hello-World/commits{/sha}",git_commits_url:"https://api.github.com/repos/Codertocat/Hello-World/git/commits{/sha}",comments_url:"https://api.github.com/repos/Codertocat/Hello-World/comments{/number}",issue_comment_url:"https://api.github.com/repos/Codertocat/Hello-World/issues/comments{/number}",contents_url:"https://api.github.com/repos/Codertocat/Hello-World/contents/{+path}",compare_url:"https://api.github.com/repos/Codertocat/Hello-World/compare/{base}...{head}",merges_url:"https://api.github.com/repos/Codertocat/Hello-World/merges",archive_url:"https://api.github.com/repos/Codertocat/Hello-World/{archive_format}{/ref}",downloads_url:"https://api.github.com/repos/Codertocat/Hello-World/downloads",issues_url:"https://api.github.com/repos/Codertocat/Hello-World/issues{/number}",pulls_url:"https://api.github.com/repos/Codertocat/Hello-World/pulls{/number}",milestones_url:"https://api.github.com/repos/Codertocat/Hello-World/milestones{/number}",notifications_url:"https://api.github.com/repos/Codertocat/Hello-World/notifications{?since,all,participating}",labels_url:"https://api.github.com/repos/Codertocat/Hello-World/labels{/name}",releases_url:"https://api.github.com/repos/Codertocat/Hello-World/releases{/id}",deployments_url:"https://api.github.com/repos/Codertocat/Hello-World/deployments",created_at:"2019-05-15T15:19:25Z",updated_at:"2019-05-15T15:20:40Z",pushed_at:"2019-05-15T15:20:33Z",git_url:"git://github.com/Codertocat/Hello-World.git",ssh_url:"git@github.com:Codertocat/Hello-World.git",clone_url:"https://github.com/Codertocat/Hello-World.git",svn_url:"https://github.com/Codertocat/Hello-World",homepage:null,size:0,stargazers_count:1,watchers_count:1,language:"Ruby",has_issues:!0,has_projects:!0,has_downloads:!0,has_wiki:!0,has_pages:!0,forks_count:0,mirror_url:null,archived:!1,disabled:!1,open_issues_count:2,license:null,forks:0,open_issues:2,watchers:1,default_branch:"master"},sender:{login:"Codertocat",id:21031067,node_id:"MDQ6VXNlcjIxMDMxMDY3",avatar_url:"https://avatars1.githubusercontent.com/u/21031067?v=4",gravatar_id:"",url:"https://api.github.com/users/Codertocat",html_url:"https://github.com/Codertocat",followers_url:"https://api.github.com/users/Codertocat/followers",following_url:"https://api.github.com/users/Codertocat/following{/other_user}",gists_url:"https://api.github.com/users/Codertocat/gists{/gist_id}",starred_url:"https://api.github.com/users/Codertocat/starred{/owner}{/repo}",subscriptions_url:"https://api.github.com/users/Codertocat/subscriptions",organizations_url:"https://api.github.com/users/Codertocat/orgs",repos_url:"https://api.github.com/users/Codertocat/repos",events_url:"https://api.github.com/users/Codertocat/events{/privacy}",received_events_url:"https://api.github.com/users/Codertocat/received_events",type:"User",site_admin:!1}},status:{id:6805126730,sha:"6113728f27ae82c7b1a177c8d03f9e96e0adf246",name:"Codertocat/Hello-World",target_url:null,context:"default",description:null,state:"success",commit:{sha:"6113728f27ae82c7b1a177c8d03f9e96e0adf246",node_id:"MDY6Q29tbWl0MTg2ODUzMDAyOjYxMTM3MjhmMjdhZTgyYzdiMWExNzdjOGQwM2Y5ZTk2ZTBhZGYyNDY=",commit:{author:{name:"Codertocat",email:"21031067+Codertocat@users.noreply.github.com",date:"2019-05-15T15:19:25Z"},committer:{name:"GitHub",email:"noreply@github.com",date:"2019-05-15T15:19:25Z"},message:"Initial commit",tree:{sha:"1b13fc88733f95cc8cb16170f6990ef30d78acf4",url:"https://api.github.com/repos/Codertocat/Hello-World/git/trees/1b13fc88733f95cc8cb16170f6990ef30d78acf4"},url:"https://api.github.com/repos/Codertocat/Hello-World/git/commits/6113728f27ae82c7b1a177c8d03f9e96e0adf246",comment_count:1,verification:{verified:!0,reason:"valid",signature:"-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJc3C39CRBK7hj4Ov3rIwAAdHIIABvaC0PQWgtUDQ5cz8ISR/Gf\npQYSuDMeeRa90wXzafPYowzID+UNU2eaRD4ak1bhb7kYVsZnPhUt5jTLKzr4Zuq8\nvt9ucrUvLDQWUZe2jX4wipM8ykWIlDho+9OAoocbVAn0kPBZEqJK74fH0Uj8vUfw\nIX71oq7XYsd2iGi9iMrYczr3aTe4EyQoYj/R+aAuRlLwU5LVciuyl0AmxMQXJ+qn\nowTpROWvXb1HijQZgx2x1lAEBzvahOiayOsJ+ZZ1DZX1lpXaSoeAjth1t2ckHlWW\n907fehmtX2cfccfrTLJC55QdhWU305ZtUoNRTp7TrdUecXnQcWKFcMmE/Yx1vps=\n=LQlK\n-----END PGP SIGNATURE-----\n",payload:"tree 1b13fc88733f95cc8cb16170f6990ef30d78acf4\nauthor Codertocat <21031067+Codertocat@users.noreply.github.com> 1557933565 -0500\ncommitter GitHub <noreply@github.com> 1557933565 -0500\n\nInitial commit"}},url:"https://api.github.com/repos/Codertocat/Hello-World/commits/6113728f27ae82c7b1a177c8d03f9e96e0adf246",html_url:"https://github.com/Codertocat/Hello-World/commit/6113728f27ae82c7b1a177c8d03f9e96e0adf246",comments_url:"https://api.github.com/repos/Codertocat/Hello-World/commits/6113728f27ae82c7b1a177c8d03f9e96e0adf246/comments",author:{login:"Codertocat",id:21031067,node_id:"MDQ6VXNlcjIxMDMxMDY3",avatar_url:"https://avatars1.githubusercontent.com/u/21031067?v=4",gravatar_id:"",url:"https://api.github.com/users/Codertocat",html_url:"https://github.com/Codertocat",followers_url:"https://api.github.com/users/Codertocat/followers",following_url:"https://api.github.com/users/Codertocat/following{/other_user}",gists_url:"https://api.github.com/users/Codertocat/gists{/gist_id}",starred_url:"https://api.github.com/users/Codertocat/starred{/owner}{/repo}",subscriptions_url:"https://api.github.com/users/Codertocat/subscriptions",organizations_url:"https://api.github.com/users/Codertocat/orgs",repos_url:"https://api.github.com/users/Codertocat/repos",events_url:"https://api.github.com/users/Codertocat/events{/privacy}",received_events_url:"https://api.github.com/users/Codertocat/received_events",type:"User",site_admin:!1},committer:{login:"web-flow",id:19864447,node_id:"MDQ6VXNlcjE5ODY0NDQ3",avatar_url:"https://avatars3.githubusercontent.com/u/19864447?v=4",gravatar_id:"",url:"https://api.github.com/users/web-flow",html_url:"https://github.com/web-flow",followers_url:"https://api.github.com/users/web-flow/followers",following_url:"https://api.github.com/users/web-flow/following{/other_user}",gists_url:"https://api.github.com/users/web-flow/gists{/gist_id}",starred_url:"https://api.github.com/users/web-flow/starred{/owner}{/repo}",subscriptions_url:"https://api.github.com/users/web-flow/subscriptions",organizations_url:"https://api.github.com/users/web-flow/orgs",repos_url:"https://api.github.com/users/web-flow/repos",events_url:"https://api.github.com/users/web-flow/events{/privacy}",received_events_url:"https://api.github.com/users/web-flow/received_events",type:"User",site_admin:!1},parents:[]},branches:[{name:"master",commit:{sha:"f95f852bd8fca8fcc58a9a2d6c842781e32a215e",url:"https://api.github.com/repos/Codertocat/Hello-World/commits/f95f852bd8fca8fcc58a9a2d6c842781e32a215e"},protected:!1},{name:"changes",commit:{sha:"ec26c3e57ca3a959ca5aad62de7213c562f8c821",url:"https://api.github.com/repos/Codertocat/Hello-World/commits/ec26c3e57ca3a959ca5aad62de7213c562f8c821"},protected:!1},{name:"gh-pages",commit:{sha:"507fc9acd0d04ac4a9db87d12cb228c052cd813a",url:"https://api.github.com/repos/Codertocat/Hello-World/commits/507fc9acd0d04ac4a9db87d12cb228c052cd813a"},protected:!1}],created_at:"2019-05-15T15:20:55+00:00",updated_at:"2019-05-15T15:20:55+00:00",repository:{id:186853002,node_id:"MDEwOlJlcG9zaXRvcnkxODY4NTMwMDI=",name:"Hello-World",full_name:"Codertocat/Hello-World",private:!1,owner:{login:"Codertocat",id:21031067,node_id:"MDQ6VXNlcjIxMDMxMDY3",avatar_url:"https://avatars1.githubusercontent.com/u/21031067?v=4",gravatar_id:"",url:"https://api.github.com/users/Codertocat",html_url:"https://github.com/Codertocat",followers_url:"https://api.github.com/users/Codertocat/followers",following_url:"https://api.github.com/users/Codertocat/following{/other_user}",gists_url:"https://api.github.com/users/Codertocat/gists{/gist_id}",starred_url:"https://api.github.com/users/Codertocat/starred{/owner}{/repo}",subscriptions_url:"https://api.github.com/users/Codertocat/subscriptions",organizations_url:"https://api.github.com/users/Codertocat/orgs",repos_url:"https://api.github.com/users/Codertocat/repos",events_url:"https://api.github.com/users/Codertocat/events{/privacy}",received_events_url:"https://api.github.com/users/Codertocat/received_events",type:"User",site_admin:!1},html_url:"https://github.com/Codertocat/Hello-World",description:null,fork:!1,url:"https://api.github.com/repos/Codertocat/Hello-World",forks_url:"https://api.github.com/repos/Codertocat/Hello-World/forks",keys_url:"https://api.github.com/repos/Codertocat/Hello-World/keys{/key_id}",collaborators_url:"https://api.github.com/repos/Codertocat/Hello-World/collaborators{/collaborator}",teams_url:"https://api.github.com/repos/Codertocat/Hello-World/teams",hooks_url:"https://api.github.com/repos/Codertocat/Hello-World/hooks",issue_events_url:"https://api.github.com/repos/Codertocat/Hello-World/issues/events{/number}",events_url:"https://api.github.com/repos/Codertocat/Hello-World/events",assignees_url:"https://api.github.com/repos/Codertocat/Hello-World/assignees{/user}",branches_url:"https://api.github.com/repos/Codertocat/Hello-World/branches{/branch}",tags_url:"https://api.github.com/repos/Codertocat/Hello-World/tags",blobs_url:"https://api.github.com/repos/Codertocat/Hello-World/git/blobs{/sha}",git_tags_url:"https://api.github.com/repos/Codertocat/Hello-World/git/tags{/sha}",git_refs_url:"https://api.github.com/repos/Codertocat/Hello-World/git/refs{/sha}",trees_url:"https://api.github.com/repos/Codertocat/Hello-World/git/trees{/sha}",statuses_url:"https://api.github.com/repos/Codertocat/Hello-World/statuses/{sha}",languages_url:"https://api.github.com/repos/Codertocat/Hello-World/languages",stargazers_url:"https://api.github.com/repos/Codertocat/Hello-World/stargazers",contributors_url:"https://api.github.com/repos/Codertocat/Hello-World/contributors",subscribers_url:"https://api.github.com/repos/Codertocat/Hello-World/subscribers",subscription_url:"https://api.github.com/repos/Codertocat/Hello-World/subscription",commits_url:"https://api.github.com/repos/Codertocat/Hello-World/commits{/sha}",git_commits_url:"https://api.github.com/repos/Codertocat/Hello-World/git/commits{/sha}",comments_url:"https://api.github.com/repos/Codertocat/Hello-World/comments{/number}",issue_comment_url:"https://api.github.com/repos/Codertocat/Hello-World/issues/comments{/number}",contents_url:"https://api.github.com/repos/Codertocat/Hello-World/contents/{+path}",compare_url:"https://api.github.com/repos/Codertocat/Hello-World/compare/{base}...{head}",merges_url:"https://api.github.com/repos/Codertocat/Hello-World/merges",archive_url:"https://api.github.com/repos/Codertocat/Hello-World/{archive_format}{/ref}",downloads_url:"https://api.github.com/repos/Codertocat/Hello-World/downloads",issues_url:"https://api.github.com/repos/Codertocat/Hello-World/issues{/number}",pulls_url:"https://api.github.com/repos/Codertocat/Hello-World/pulls{/number}",milestones_url:"https://api.github.com/repos/Codertocat/Hello-World/milestones{/number}",notifications_url:"https://api.github.com/repos/Codertocat/Hello-World/notifications{?since,all,participating}",labels_url:"https://api.github.com/repos/Codertocat/Hello-World/labels{/name}",releases_url:"https://api.github.com/repos/Codertocat/Hello-World/releases{/id}",deployments_url:"https://api.github.com/repos/Codertocat/Hello-World/deployments",created_at:"2019-05-15T15:19:25Z",updated_at:"2019-05-15T15:20:41Z",pushed_at:"2019-05-15T15:20:52Z",git_url:"git://github.com/Codertocat/Hello-World.git",ssh_url:"git@github.com:Codertocat/Hello-World.git",clone_url:"https://github.com/Codertocat/Hello-World.git",svn_url:"https://github.com/Codertocat/Hello-World",homepage:null,size:0,stargazers_count:0,watchers_count:0,language:"Ruby",has_issues:!0,has_projects:!0,has_downloads:!0,has_wiki:!0,has_pages:!0,forks_count:1,mirror_url:null,archived:!1,disabled:!1,open_issues_count:2,license:null,forks:1,open_issues:2,watchers:0,default_branch:"master"},sender:{login:"Codertocat",id:21031067,node_id:"MDQ6VXNlcjIxMDMxMDY3",avatar_url:"https://avatars1.githubusercontent.com/u/21031067?v=4",gravatar_id:"",url:"https://api.github.com/users/Codertocat",html_url:"https://github.com/Codertocat",followers_url:"https://api.github.com/users/Codertocat/followers",following_url:"https://api.github.com/users/Codertocat/following{/other_user}",gists_url:"https://api.github.com/users/Codertocat/gists{/gist_id}",starred_url:"https://api.github.com/users/Codertocat/starred{/owner}{/repo}",subscriptions_url:"https://api.github.com/users/Codertocat/subscriptions",organizations_url:"https://api.github.com/users/Codertocat/orgs",repos_url:"https://api.github.com/users/Codertocat/repos",events_url:"https://api.github.com/users/Codertocat/events{/privacy}",received_events_url:"https://api.github.com/users/Codertocat/received_events",type:"User",site_admin:!1}},team:{action:"added_to_repository",team:{name:"github",id:3253328,node_id:"MDQ6VGVhbTMyNTMzMjg=",slug:"github",description:"Open-source team",privacy:"secret",url:"https://api.github.com/teams/3253328",html_url:"https://github.com/orgs/Octocoders/teams/github",members_url:"https://api.github.com/teams/3253328/members{/member}",repositories_url:"https://api.github.com/teams/3253328/repos",permission:"pull"},repository:{id:186853261,node_id:"MDEwOlJlcG9zaXRvcnkxODY4NTMyNjE=",name:"Hello-World",full_name:"Octocoders/Hello-World",private:!1,owner:{login:"Octocoders",id:38302899,node_id:"MDEyOk9yZ2FuaXphdGlvbjM4MzAyODk5",avatar_url:"https://avatars1.githubusercontent.com/u/38302899?v=4",gravatar_id:"",url:"https://api.github.com/users/Octocoders",html_url:"https://github.com/Octocoders",followers_url:"https://api.github.com/users/Octocoders/followers",following_url:"https://api.github.com/users/Octocoders/following{/other_user}",gists_url:"https://api.github.com/users/Octocoders/gists{/gist_id}",starred_url:"https://api.github.com/users/Octocoders/starred{/owner}{/repo}",subscriptions_url:"https://api.github.com/users/Octocoders/subscriptions",organizations_url:"https://api.github.com/users/Octocoders/orgs",repos_url:"https://api.github.com/users/Octocoders/repos",events_url:"https://api.github.com/users/Octocoders/events{/privacy}",received_events_url:"https://api.github.com/users/Octocoders/received_events",type:"Organization",site_admin:!1},html_url:"https://github.com/Octocoders/Hello-World",description:null,fork:!0,url:"https://api.github.com/repos/Octocoders/Hello-World",forks_url:"https://api.github.com/repos/Octocoders/Hello-World/forks",keys_url:"https://api.github.com/repos/Octocoders/Hello-World/keys{/key_id}",collaborators_url:"https://api.github.com/repos/Octocoders/Hello-World/collaborators{/collaborator}",teams_url:"https://api.github.com/repos/Octocoders/Hello-World/teams",hooks_url:"https://api.github.com/repos/Octocoders/Hello-World/hooks",issue_events_url:"https://api.github.com/repos/Octocoders/Hello-World/issues/events{/number}",events_url:"https://api.github.com/repos/Octocoders/Hello-World/events",assignees_url:"https://api.github.com/repos/Octocoders/Hello-World/assignees{/user}",branches_url:"https://api.github.com/repos/Octocoders/Hello-World/branches{/branch}",tags_url:"https://api.github.com/repos/Octocoders/Hello-World/tags",blobs_url:"https://api.github.com/repos/Octocoders/Hello-World/git/blobs{/sha}",git_tags_url:"https://api.github.com/repos/Octocoders/Hello-World/git/tags{/sha}",git_refs_url:"https://api.github.com/repos/Octocoders/Hello-World/git/refs{/sha}",trees_url:"https://api.github.com/repos/Octocoders/Hello-World/git/trees{/sha}",statuses_url:"https://api.github.com/repos/Octocoders/Hello-World/statuses/{sha}",languages_url:"https://api.github.com/repos/Octocoders/Hello-World/languages",stargazers_url:"https://api.github.com/repos/Octocoders/Hello-World/stargazers",contributors_url:"https://api.github.com/repos/Octocoders/Hello-World/contributors",subscribers_url:"https://api.github.com/repos/Octocoders/Hello-World/subscribers",subscription_url:"https://api.github.com/repos/Octocoders/Hello-World/subscription",commits_url:"https://api.github.com/repos/Octocoders/Hello-World/commits{/sha}",git_commits_url:"https://api.github.com/repos/Octocoders/Hello-World/git/commits{/sha}",comments_url:"https://api.github.com/repos/Octocoders/Hello-World/comments{/number}",issue_comment_url:"https://api.github.com/repos/Octocoders/Hello-World/issues/comments{/number}",contents_url:"https://api.github.com/repos/Octocoders/Hello-World/contents/{+path}",compare_url:"https://api.github.com/repos/Octocoders/Hello-World/compare/{base}...{head}",merges_url:"https://api.github.com/repos/Octocoders/Hello-World/merges",archive_url:"https://api.github.com/repos/Octocoders/Hello-World/{archive_format}{/ref}",downloads_url:"https://api.github.com/repos/Octocoders/Hello-World/downloads",issues_url:"https://api.github.com/repos/Octocoders/Hello-World/issues{/number}",pulls_url:"https://api.github.com/repos/Octocoders/Hello-World/pulls{/number}",milestones_url:"https://api.github.com/repos/Octocoders/Hello-World/milestones{/number}",notifications_url:"https://api.github.com/repos/Octocoders/Hello-World/notifications{?since,all,participating}",labels_url:"https://api.github.com/repos/Octocoders/Hello-World/labels{/name}",releases_url:"https://api.github.com/repos/Octocoders/Hello-World/releases{/id}",deployments_url:"https://api.github.com/repos/Octocoders/Hello-World/deployments",created_at:"2019-05-15T15:20:42Z",updated_at:"2019-05-15T15:20:45Z",pushed_at:"2019-05-15T15:20:33Z",git_url:"git://github.com/Octocoders/Hello-World.git",ssh_url:"git@github.com:Octocoders/Hello-World.git",clone_url:"https://github.com/Octocoders/Hello-World.git",svn_url:"https://github.com/Octocoders/Hello-World",homepage:null,size:0,stargazers_count:0,watchers_count:0,language:"Ruby",has_issues:!1,has_projects:!0,has_downloads:!0,has_wiki:!0,has_pages:!1,forks_count:0,mirror_url:null,archived:!1,disabled:!1,open_issues_count:0,license:null,forks:0,open_issues:0,watchers:0,default_branch:"master",permissions:{pull:!0,push:!1,admin:!1}},organization:{login:"Octocoders",id:38302899,node_id:"MDEyOk9yZ2FuaXphdGlvbjM4MzAyODk5",url:"https://api.github.com/orgs/Octocoders",repos_url:"https://api.github.com/orgs/Octocoders/repos",events_url:"https://api.github.com/orgs/Octocoders/events",hooks_url:"https://api.github.com/orgs/Octocoders/hooks",issues_url:"https://api.github.com/orgs/Octocoders/issues",members_url:"https://api.github.com/orgs/Octocoders/members{/member}",public_members_url:"https://api.github.com/orgs/Octocoders/public_members{/member}",avatar_url:"https://avatars1.githubusercontent.com/u/38302899?v=4",description:""},sender:{login:"Codertocat",id:21031067,node_id:"MDQ6VXNlcjIxMDMxMDY3",avatar_url:"https://avatars1.githubusercontent.com/u/21031067?v=4",gravatar_id:"",url:"https://api.github.com/users/Codertocat",html_url:"https://github.com/Codertocat",followers_url:"https://api.github.com/users/Codertocat/followers",following_url:"https://api.github.com/users/Codertocat/following{/other_user}",gists_url:"https://api.github.com/users/Codertocat/gists{/gist_id}",starred_url:"https://api.github.com/users/Codertocat/starred{/owner}{/repo}",subscriptions_url:"https://api.github.com/users/Codertocat/subscriptions",organizations_url:"https://api.github.com/users/Codertocat/orgs",repos_url:"https://api.github.com/users/Codertocat/repos",events_url:"https://api.github.com/users/Codertocat/events{/privacy}",received_events_url:"https://api.github.com/users/Codertocat/received_events",type:"User",site_admin:!1}},team_add:{team:{name:"github",id:3253328,node_id:"MDQ6VGVhbTMyNTMzMjg=",slug:"github",description:"Open-source team",privacy:"secret",url:"https://api.github.com/teams/3253328",html_url:"https://github.com/orgs/Octocoders/teams/github",members_url:"https://api.github.com/teams/3253328/members{/member}",repositories_url:"https://api.github.com/teams/3253328/repos",permission:"pull"},repository:{id:186853261,node_id:"MDEwOlJlcG9zaXRvcnkxODY4NTMyNjE=",name:"Hello-World",full_name:"Octocoders/Hello-World",private:!1,owner:{login:"Octocoders",id:38302899,node_id:"MDEyOk9yZ2FuaXphdGlvbjM4MzAyODk5",avatar_url:"https://avatars1.githubusercontent.com/u/38302899?v=4",gravatar_id:"",url:"https://api.github.com/users/Octocoders",html_url:"https://github.com/Octocoders",followers_url:"https://api.github.com/users/Octocoders/followers",following_url:"https://api.github.com/users/Octocoders/following{/other_user}",gists_url:"https://api.github.com/users/Octocoders/gists{/gist_id}",starred_url:"https://api.github.com/users/Octocoders/starred{/owner}{/repo}",subscriptions_url:"https://api.github.com/users/Octocoders/subscriptions",organizations_url:"https://api.github.com/users/Octocoders/orgs",repos_url:"https://api.github.com/users/Octocoders/repos",events_url:"https://api.github.com/users/Octocoders/events{/privacy}",received_events_url:"https://api.github.com/users/Octocoders/received_events",type:"Organization",site_admin:!1},html_url:"https://github.com/Octocoders/Hello-World",description:null,fork:!0,url:"https://api.github.com/repos/Octocoders/Hello-World",forks_url:"https://api.github.com/repos/Octocoders/Hello-World/forks",keys_url:"https://api.github.com/repos/Octocoders/Hello-World/keys{/key_id}",collaborators_url:"https://api.github.com/repos/Octocoders/Hello-World/collaborators{/collaborator}",teams_url:"https://api.github.com/repos/Octocoders/Hello-World/teams",hooks_url:"https://api.github.com/repos/Octocoders/Hello-World/hooks",issue_events_url:"https://api.github.com/repos/Octocoders/Hello-World/issues/events{/number}",events_url:"https://api.github.com/repos/Octocoders/Hello-World/events",assignees_url:"https://api.github.com/repos/Octocoders/Hello-World/assignees{/user}",branches_url:"https://api.github.com/repos/Octocoders/Hello-World/branches{/branch}",tags_url:"https://api.github.com/repos/Octocoders/Hello-World/tags",blobs_url:"https://api.github.com/repos/Octocoders/Hello-World/git/blobs{/sha}",git_tags_url:"https://api.github.com/repos/Octocoders/Hello-World/git/tags{/sha}",git_refs_url:"https://api.github.com/repos/Octocoders/Hello-World/git/refs{/sha}",trees_url:"https://api.github.com/repos/Octocoders/Hello-World/git/trees{/sha}",statuses_url:"https://api.github.com/repos/Octocoders/Hello-World/statuses/{sha}",languages_url:"https://api.github.com/repos/Octocoders/Hello-World/languages",stargazers_url:"https://api.github.com/repos/Octocoders/Hello-World/stargazers",contributors_url:"https://api.github.com/repos/Octocoders/Hello-World/contributors",subscribers_url:"https://api.github.com/repos/Octocoders/Hello-World/subscribers",subscription_url:"https://api.github.com/repos/Octocoders/Hello-World/subscription",commits_url:"https://api.github.com/repos/Octocoders/Hello-World/commits{/sha}",git_commits_url:"https://api.github.com/repos/Octocoders/Hello-World/git/commits{/sha}",comments_url:"https://api.github.com/repos/Octocoders/Hello-World/comments{/number}",issue_comment_url:"https://api.github.com/repos/Octocoders/Hello-World/issues/comments{/number}",contents_url:"https://api.github.com/repos/Octocoders/Hello-World/contents/{+path}",compare_url:"https://api.github.com/repos/Octocoders/Hello-World/compare/{base}...{head}",merges_url:"https://api.github.com/repos/Octocoders/Hello-World/merges",archive_url:"https://api.github.com/repos/Octocoders/Hello-World/{archive_format}{/ref}",downloads_url:"https://api.github.com/repos/Octocoders/Hello-World/downloads",issues_url:"https://api.github.com/repos/Octocoders/Hello-World/issues{/number}",pulls_url:"https://api.github.com/repos/Octocoders/Hello-World/pulls{/number}",milestones_url:"https://api.github.com/repos/Octocoders/Hello-World/milestones{/number}",notifications_url:"https://api.github.com/repos/Octocoders/Hello-World/notifications{?since,all,participating}",labels_url:"https://api.github.com/repos/Octocoders/Hello-World/labels{/name}",releases_url:"https://api.github.com/repos/Octocoders/Hello-World/releases{/id}",deployments_url:"https://api.github.com/repos/Octocoders/Hello-World/deployments",created_at:"2019-05-15T15:20:42Z",updated_at:"2019-05-15T15:20:45Z",pushed_at:"2019-05-15T15:20:33Z",git_url:"git://github.com/Octocoders/Hello-World.git",ssh_url:"git@github.com:Octocoders/Hello-World.git",clone_url:"https://github.com/Octocoders/Hello-World.git",svn_url:"https://github.com/Octocoders/Hello-World",homepage:null,size:0,stargazers_count:0,watchers_count:0,language:"Ruby",has_issues:!1,has_projects:!0,has_downloads:!0,has_wiki:!0,has_pages:!1,forks_count:0,mirror_url:null,archived:!1,disabled:!1,open_issues_count:0,license:null,forks:0,open_issues:0,watchers:0,default_branch:"master"},organization:{login:"Octocoders",id:38302899,node_id:"MDEyOk9yZ2FuaXphdGlvbjM4MzAyODk5",url:"https://api.github.com/orgs/Octocoders",repos_url:"https://api.github.com/orgs/Octocoders/repos",events_url:"https://api.github.com/orgs/Octocoders/events",hooks_url:"https://api.github.com/orgs/Octocoders/hooks",issues_url:"https://api.github.com/orgs/Octocoders/issues",members_url:"https://api.github.com/orgs/Octocoders/members{/member}",public_members_url:"https://api.github.com/orgs/Octocoders/public_members{/member}",avatar_url:"https://avatars1.githubusercontent.com/u/38302899?v=4",description:""},sender:{login:"Octocoders",id:38302899,node_id:"MDEyOk9yZ2FuaXphdGlvbjM4MzAyODk5",avatar_url:"https://avatars1.githubusercontent.com/u/38302899?v=4",gravatar_id:"",url:"https://api.github.com/users/Octocoders",html_url:"https://github.com/Octocoders",followers_url:"https://api.github.com/users/Octocoders/followers",following_url:"https://api.github.com/users/Octocoders/following{/other_user}",gists_url:"https://api.github.com/users/Octocoders/gists{/gist_id}",starred_url:"https://api.github.com/users/Octocoders/starred{/owner}{/repo}",subscriptions_url:"https://api.github.com/users/Octocoders/subscriptions",organizations_url:"https://api.github.com/users/Octocoders/orgs",repos_url:"https://api.github.com/users/Octocoders/repos",events_url:"https://api.github.com/users/Octocoders/events{/privacy}",received_events_url:"https://api.github.com/users/Octocoders/received_events",type:"Organization",site_admin:!1}},watch:{action:"started",repository:{id:186853002,node_id:"MDEwOlJlcG9zaXRvcnkxODY4NTMwMDI=",name:"Hello-World",full_name:"Codertocat/Hello-World",private:!1,owner:{login:"Codertocat",id:21031067,node_id:"MDQ6VXNlcjIxMDMxMDY3",avatar_url:"https://avatars1.githubusercontent.com/u/21031067?v=4",gravatar_id:"",url:"https://api.github.com/users/Codertocat",html_url:"https://github.com/Codertocat",followers_url:"https://api.github.com/users/Codertocat/followers",following_url:"https://api.github.com/users/Codertocat/following{/other_user}",gists_url:"https://api.github.com/users/Codertocat/gists{/gist_id}",starred_url:"https://api.github.com/users/Codertocat/starred{/owner}{/repo}",subscriptions_url:"https://api.github.com/users/Codertocat/subscriptions",organizations_url:"https://api.github.com/users/Codertocat/orgs",repos_url:"https://api.github.com/users/Codertocat/repos",events_url:"https://api.github.com/users/Codertocat/events{/privacy}",received_events_url:"https://api.github.com/users/Codertocat/received_events",type:"User",site_admin:!1},html_url:"https://github.com/Codertocat/Hello-World",description:null,fork:!1,url:"https://api.github.com/repos/Codertocat/Hello-World",forks_url:"https://api.github.com/repos/Codertocat/Hello-World/forks",keys_url:"https://api.github.com/repos/Codertocat/Hello-World/keys{/key_id}",collaborators_url:"https://api.github.com/repos/Codertocat/Hello-World/collaborators{/collaborator}",teams_url:"https://api.github.com/repos/Codertocat/Hello-World/teams",hooks_url:"https://api.github.com/repos/Codertocat/Hello-World/hooks",issue_events_url:"https://api.github.com/repos/Codertocat/Hello-World/issues/events{/number}",events_url:"https://api.github.com/repos/Codertocat/Hello-World/events",assignees_url:"https://api.github.com/repos/Codertocat/Hello-World/assignees{/user}",branches_url:"https://api.github.com/repos/Codertocat/Hello-World/branches{/branch}",tags_url:"https://api.github.com/repos/Codertocat/Hello-World/tags",blobs_url:"https://api.github.com/repos/Codertocat/Hello-World/git/blobs{/sha}",git_tags_url:"https://api.github.com/repos/Codertocat/Hello-World/git/tags{/sha}",git_refs_url:"https://api.github.com/repos/Codertocat/Hello-World/git/refs{/sha}",trees_url:"https://api.github.com/repos/Codertocat/Hello-World/git/trees{/sha}",statuses_url:"https://api.github.com/repos/Codertocat/Hello-World/statuses/{sha}",languages_url:"https://api.github.com/repos/Codertocat/Hello-World/languages",stargazers_url:"https://api.github.com/repos/Codertocat/Hello-World/stargazers",contributors_url:"https://api.github.com/repos/Codertocat/Hello-World/contributors",subscribers_url:"https://api.github.com/repos/Codertocat/Hello-World/subscribers",subscription_url:"https://api.github.com/repos/Codertocat/Hello-World/subscription",commits_url:"https://api.github.com/repos/Codertocat/Hello-World/commits{/sha}",git_commits_url:"https://api.github.com/repos/Codertocat/Hello-World/git/commits{/sha}",comments_url:"https://api.github.com/repos/Codertocat/Hello-World/comments{/number}",issue_comment_url:"https://api.github.com/repos/Codertocat/Hello-World/issues/comments{/number}",contents_url:"https://api.github.com/repos/Codertocat/Hello-World/contents/{+path}",compare_url:"https://api.github.com/repos/Codertocat/Hello-World/compare/{base}...{head}",merges_url:"https://api.github.com/repos/Codertocat/Hello-World/merges",archive_url:"https://api.github.com/repos/Codertocat/Hello-World/{archive_format}{/ref}",downloads_url:"https://api.github.com/repos/Codertocat/Hello-World/downloads",issues_url:"https://api.github.com/repos/Codertocat/Hello-World/issues{/number}",pulls_url:"https://api.github.com/repos/Codertocat/Hello-World/pulls{/number}",milestones_url:"https://api.github.com/repos/Codertocat/Hello-World/milestones{/number}",notifications_url:"https://api.github.com/repos/Codertocat/Hello-World/notifications{?since,all,participating}",labels_url:"https://api.github.com/repos/Codertocat/Hello-World/labels{/name}",releases_url:"https://api.github.com/repos/Codertocat/Hello-World/releases{/id}",deployments_url:"https://api.github.com/repos/Codertocat/Hello-World/deployments",created_at:"2019-05-15T15:19:25Z",updated_at:"2019-05-15T15:20:40Z",pushed_at:"2019-05-15T15:20:33Z",git_url:"git://github.com/Codertocat/Hello-World.git",ssh_url:"git@github.com:Codertocat/Hello-World.git",clone_url:"https://github.com/Codertocat/Hello-World.git",svn_url:"https://github.com/Codertocat/Hello-World",homepage:null,size:0,stargazers_count:1,watchers_count:1,language:"Ruby",has_issues:!0,has_projects:!0,has_downloads:!0,has_wiki:!0,has_pages:!0,forks_count:0,mirror_url:null,archived:!1,disabled:!1,open_issues_count:2,license:null,forks:0,open_issues:2,watchers:1,default_branch:"master"},sender:{login:"Codertocat",id:21031067,node_id:"MDQ6VXNlcjIxMDMxMDY3",avatar_url:"https://avatars1.githubusercontent.com/u/21031067?v=4",gravatar_id:"",url:"https://api.github.com/users/Codertocat",html_url:"https://github.com/Codertocat",followers_url:"https://api.github.com/users/Codertocat/followers",following_url:"https://api.github.com/users/Codertocat/following{/other_user}",gists_url:"https://api.github.com/users/Codertocat/gists{/gist_id}",starred_url:"https://api.github.com/users/Codertocat/starred{/owner}{/repo}",subscriptions_url:"https://api.github.com/users/Codertocat/subscriptions",organizations_url:"https://api.github.com/users/Codertocat/orgs",repos_url:"https://api.github.com/users/Codertocat/repos",events_url:"https://api.github.com/users/Codertocat/events{/privacy}",received_events_url:"https://api.github.com/users/Codertocat/received_events",type:"User",site_admin:!1}},workflow_dispatch:{inputs:{name:"Mona the Octocat"},ref:"refs/heads/master",repository:{id:17273051,node_id:"MDEwOlJlcG9zaXRvcnkxNzI3MzA1MQ==",name:"octo-repo",full_name:"octo-org/octo-repo",private:!0,owner:{login:"octo-org",id:6811672,node_id:"MDEyOk9yZ2FuaXphdGlvbjY4MTE2NzI=",avatar_url:"https://avatars3.githubusercontent.com/u/6811672?v=4",gravatar_id:"",url:"https://api.github.com/users/octo-org",html_url:"https://github.com/octo-org",followers_url:"https://api.github.com/users/octo-org/followers",following_url:"https://api.github.com/users/octo-org/following{/other_user}",gists_url:"https://api.github.com/users/octo-org/gists{/gist_id}",starred_url:"https://api.github.com/users/octo-org/starred{/owner}{/repo}",subscriptions_url:"https://api.github.com/users/octo-org/subscriptions",organizations_url:"https://api.github.com/users/octo-org/orgs",repos_url:"https://api.github.com/users/octo-org/repos",events_url:"https://api.github.com/users/octo-org/events{/privacy}",received_events_url:"https://api.github.com/users/octo-org/received_events",type:"Organization",site_admin:!1},html_url:"https://github.com/octo-org/octo-repo",description:"My first repo on GitHub!",fork:!1,url:"https://api.github.com/repos/octo-org/octo-repo",forks_url:"https://api.github.com/repos/octo-org/octo-repo/forks",keys_url:"https://api.github.com/repos/octo-org/octo-repo/keys{/key_id}",collaborators_url:"https://api.github.com/repos/octo-org/octo-repo/collaborators{/collaborator}",teams_url:"https://api.github.com/repos/octo-org/octo-repo/teams",hooks_url:"https://api.github.com/repos/octo-org/octo-repo/hooks",issue_events_url:"https://api.github.com/repos/octo-org/octo-repo/issues/events{/number}",events_url:"https://api.github.com/repos/octo-org/octo-repo/events",assignees_url:"https://api.github.com/repos/octo-org/octo-repo/assignees{/user}",branches_url:"https://api.github.com/repos/octo-org/octo-repo/branches{/branch}",tags_url:"https://api.github.com/repos/octo-org/octo-repo/tags",blobs_url:"https://api.github.com/repos/octo-org/octo-repo/git/blobs{/sha}",git_tags_url:"https://api.github.com/repos/octo-org/octo-repo/git/tags{/sha}",git_refs_url:"https://api.github.com/repos/octo-org/octo-repo/git/refs{/sha}",trees_url:"https://api.github.com/repos/octo-org/octo-repo/git/trees{/sha}",statuses_url:"https://api.github.com/repos/octo-org/octo-repo/statuses/{sha}",languages_url:"https://api.github.com/repos/octo-org/octo-repo/languages",stargazers_url:"https://api.github.com/repos/octo-org/octo-repo/stargazers",contributors_url:"https://api.github.com/repos/octo-org/octo-repo/contributors",subscribers_url:"https://api.github.com/repos/octo-org/octo-repo/subscribers",subscription_url:"https://api.github.com/repos/octo-org/octo-repo/subscription",commits_url:"https://api.github.com/repos/octo-org/octo-repo/commits{/sha}",git_commits_url:"https://api.github.com/repos/octo-org/octo-repo/git/commits{/sha}",comments_url:"https://api.github.com/repos/octo-org/octo-repo/comments{/number}",issue_comment_url:"https://api.github.com/repos/octo-org/octo-repo/issues/comments{/number}",contents_url:"https://api.github.com/repos/octo-org/octo-repo/contents/{+path}",compare_url:"https://api.github.com/repos/octo-org/octo-repo/compare/{base}...{head}",merges_url:"https://api.github.com/repos/octo-org/octo-repo/merges",archive_url:"https://api.github.com/repos/octo-org/octo-repo/{archive_format}{/ref}",downloads_url:"https://api.github.com/repos/octo-org/octo-repo/downloads",issues_url:"https://api.github.com/repos/octo-org/octo-repo/issues{/number}",pulls_url:"https://api.github.com/repos/octo-org/octo-repo/pulls{/number}",milestones_url:"https://api.github.com/repos/octo-org/octo-repo/milestones{/number}",notifications_url:"https://api.github.com/repos/octo-org/octo-repo/notifications{?since,all,participating}",labels_url:"https://api.github.com/repos/octo-org/octo-repo/labels{/name}",releases_url:"https://api.github.com/repos/octo-org/octo-repo/releases{/id}",deployments_url:"https://api.github.com/repos/octo-org/octo-repo/deployments",created_at:"2014-02-28T02:42:51Z",updated_at:"2018-10-10T15:58:51Z",pushed_at:"2018-10-10T15:58:47Z",git_url:"git://github.com/octo-org/octo-repo.git",ssh_url:"git@github.com:octo-org/octo-repo.git",clone_url:"https://github.com/octo-org/octo-repo.git",svn_url:"https://github.com/octo-org/octo-repo",homepage:"",size:59,stargazers_count:0,watchers_count:0,language:"JavaScript",has_issues:!0,has_projects:!0,has_downloads:!0,has_wiki:!0,has_pages:!1,forks_count:1,mirror_url:null,archived:!1,open_issues_count:23,license:null,forks:1,open_issues:23,watchers:0,default_branch:"master"},organization:{login:"octo-org",id:6811672,node_id:"MDEyOk9yZ2FuaXphdGlvbjY4MTE2NzI=",url:"https://api.github.com/orgs/octo-org",repos_url:"https://api.github.com/orgs/octo-org/repos",events_url:"https://api.github.com/orgs/octo-org/events",hooks_url:"https://api.github.com/orgs/octo-org/hooks",issues_url:"https://api.github.com/orgs/octo-org/issues",members_url:"https://api.github.com/orgs/octo-org/members{/member}",public_members_url:"https://api.github.com/orgs/octo-org/public_members{/member}",avatar_url:"https://avatars3.githubusercontent.com/u/6811672?v=4",description:"Working better together!"},sender:{login:"Codertocat",id:21031067,node_id:"MDQ6VXNlcjIxMDMxMDY3",avatar_url:"https://avatars1.githubusercontent.com/u/21031067?v=4",gravatar_id:"",url:"https://api.github.com/users/Codertocat",html_url:"https://github.com/Codertocat",followers_url:"https://api.github.com/users/Codertocat/followers",following_url:"https://api.github.com/users/Codertocat/following{/other_user}",gists_url:"https://api.github.com/users/Codertocat/gists{/gist_id}",starred_url:"https://api.github.com/users/Codertocat/starred{/owner}{/repo}",subscriptions_url:"https://api.github.com/users/Codertocat/subscriptions",organizations_url:"https://api.github.com/users/Codertocat/orgs",repos_url:"https://api.github.com/users/Codertocat/repos",events_url:"https://api.github.com/users/Codertocat/events{/privacy}",received_events_url:"https://api.github.com/users/Codertocat/received_events",type:"User",site_admin:!1},workflow:".github/workflows/hello-world-workflow.yml"},workflow_run:{action:"completed",organization:{avatar_url:"https://avatars1.githubusercontent.com/u/21031067?v=4",description:"",events_url:"https://api.github.com/orgs/Octocoders/events",hooks_url:"https://api.github.com/orgs/Octocoders/hooks",id:33435682,issues_url:"https://api.github.com/orgs/Octocoders/issues",login:"Codertocat",members_url:"https://api.github.com/orgs/Octocoders/members{/member}",node_id:"MDQ6VXNlcjIxMDMxMDY3",public_members_url:"https://api.github.com/orgs/Octocoders/public_members{/member}",repos_url:"https://api.github.com/orgs/Octocoders/repos",url:"https://api.github.com/orgs/Codertocat"},repository:{archive_url:"https://api.github.com/repos/Codertocat/Hello-World/{archive_format}{/ref}",archived:!1,assignees_url:"https://api.github.com/repos/Codertocat/Hello-World/assignees{/user}",blobs_url:"https://api.github.com/repos/Codertocat/Hello-World/git/blobs{/sha}",branches_url:"https://api.github.com/repos/Codertocat/Hello-World/branches{/branch}",clone_url:"https://github.com/Codertocat/Hello-World.git",collaborators_url:"https://api.github.com/repos/Codertocat/Hello-World/collaborators{/collaborator}",comments_url:"https://api.github.com/repos/Codertocat/Hello-World/comments{/number}",commits_url:"https://api.github.com/repos/Codertocat/Hello-World/commits{/sha}",compare_url:"https://api.github.com/repos/Codertocat/Hello-World/compare/{base}...{head}",contents_url:"https://api.github.com/repos/Codertocat/Hello-World/contents/{+path}",contributors_url:"https://api.github.com/repos/Codertocat/Hello-World/contributors",created_at:"2020-07-29T09:57:16Z",default_branch:"main",deployments_url:"https://api.github.com/repos/Codertocat/Hello-World/deployments",description:null,disabled:!1,downloads_url:"https://api.github.com/repos/Codertocat/Hello-World/downloads",events_url:"https://api.github.com/repos/Codertocat/Hello-World/events",fork:!1,forks:0,forks_count:0,forks_url:"https://api.github.com/repos/Codertocat/Hello-World/forks",full_name:"Codertocat/Hello-World",git_commits_url:"https://api.github.com/repos/Codertocat/Hello-World/git/commits{/sha}",git_refs_url:"https://api.github.com/repos/Codertocat/Hello-World/git/refs{/sha}",git_tags_url:"https://api.github.com/repos/Codertocat/Hello-World/git/tags{/sha}",git_url:"git://github.com/Codertocat/Hello-World.git",has_downloads:!0,has_issues:!0,has_pages:!1,has_projects:!0,has_wiki:!0,homepage:null,hooks_url:"https://api.github.com/repos/Codertocat/Hello-World/hooks",html_url:"https://github.com/Codertocat/Hello-World",id:283462325,issue_comment_url:"https://api.github.com/repos/Codertocat/Hello-World/issues/comments{/number}",issue_events_url:"https://api.github.com/repos/Codertocat/Hello-World/issues/events{/number}",issues_url:"https://api.github.com/repos/Codertocat/Hello-World/issues{/number}",keys_url:"https://api.github.com/repos/Codertocat/Hello-World/keys{/key_id}",labels_url:"https://api.github.com/repos/Codertocat/Hello-World/labels{/name}",language:null,languages_url:"https://api.github.com/repos/Codertocat/Hello-World/languages",license:null,merges_url:"https://api.github.com/repos/Codertocat/Hello-World/merges",milestones_url:"https://api.github.com/repos/Codertocat/Hello-World/milestones{/number}",mirror_url:null,name:"Hello-World",node_id:"MDEwOlJlcG9zaXRvcnkyODM0NjIzMjU=",notifications_url:"https://api.github.com/repos/Codertocat/Hello-World/notifications{?since,all,participating}",open_issues:0,open_issues_count:0,owner:{avatar_url:"https://avatars1.githubusercontent.com/u/21031067?v=4",events_url:"https://api.github.com/users/Codertocat/events{/privacy}",followers_url:"https://api.github.com/users/Codertocat/followers",following_url:"https://api.github.com/users/Codertocat/following{/other_user}",gists_url:"https://api.github.com/users/Codertocat/gists{/gist_id}",gravatar_id:"",html_url:"https://github.com/Codertocat",id:33435682,login:"Codertocat",node_id:"MDEyOk9yZ2FuaXphdGlvbjMzNDM1Njgy",organizations_url:"https://api.github.com/users/Codertocat/orgs",received_events_url:"https://api.github.com/users/Codertocat/received_events",repos_url:"https://api.github.com/users/Codertocat/repos",site_admin:!1,starred_url:"https://api.github.com/users/Codertocat/starred{/owner}{/repo}",subscriptions_url:"https://api.github.com/users/Codertocat/subscriptions",type:"Organization",url:"https://api.github.com/users/Codertocat"},private:!0,pulls_url:"https://api.github.com/repos/Codertocat/Hello-World/pulls{/number}",pushed_at:"2020-07-29T10:06:16Z",releases_url:"https://api.github.com/repos/Codertocat/Hello-World/releases{/id}",size:0,ssh_url:"git@github.com:Codertocat/Hello-World.git",stargazers_count:0,stargazers_url:"https://api.github.com/repos/Codertocat/Hello-World/stargazers",statuses_url:"https://api.github.com/repos/Codertocat/Hello-World/statuses/{sha}",subscribers_url:"https://api.github.com/repos/Codertocat/Hello-World/subscribers",subscription_url:"https://api.github.com/repos/Codertocat/Hello-World/subscription",svn_url:"https://github.com/Codertocat/Hello-World",tags_url:"https://api.github.com/repos/Codertocat/Hello-World/tags",teams_url:"https://api.github.com/repos/Codertocat/Hello-World/teams",trees_url:"https://api.github.com/repos/Codertocat/Hello-World/git/trees{/sha}",updated_at:"2020-07-29T10:06:18Z",url:"https://api.github.com/repos/Codertocat/Hello-World",watchers:0,watchers_count:0},sender:{avatar_url:"https://avatars3.githubusercontent.com/u/54248166?v=4",events_url:"https://api.github.com/users/Codertocat/events{/privacy}",followers_url:"https://api.github.com/users/Codertocat/followers",following_url:"https://api.github.com/users/Codertocat/following{/other_user}",gists_url:"https://api.github.com/users/Codertocat/gists{/gist_id}",gravatar_id:"",html_url:"https://github.com/Codertocat",id:54248166,login:"Codertocat",node_id:"MDEwOkNoZWNrU3VpdGUxMTg1NzgxNDc=",organizations_url:"https://api.github.com/users/Codertocat/orgs",received_events_url:"https://api.github.com/users/Codertocat/received_events",repos_url:"https://api.github.com/users/Codertocat/repos",site_admin:!0,starred_url:"https://api.github.com/users/Codertocat/starred{/owner}{/repo}",subscriptions_url:"https://api.github.com/users/Codertocat/subscriptions",type:"User",url:"https://api.github.com/users/Codertocat"}}};function Ut(t,o){const e=o.indexOf("jobs");if(-1!==e&&!(e>=o.length-2))return l(o.slice(0,e+2),t)}class It{constructor(t,o,e){this.workflow=t,this.path=o,this.secrets=e}get(t){var o,e,r;switch(t){case"github":return{event:(r=this.workflow,function(t){return Et({},...t.map(t=>Zt[t]))}(r&&r.on?Object.keys(r.on):["push"])),event_path:"",workflow:(null===(o=this.workflow)||void 0===o?void 0:o.name)||"workflow.yaml",job:"",run_id:"42",run_number:"23",actor:"monalisa",repository:"repository",repository_owner:"repository_owner",event_name:(null===(e=this.workflow)||void 0===e?void 0:e.on)&&Object.keys(this.workflow.on)[0]||"push",sha:"6113728f27ae82c7b1a177c8d03f9e96e0adf246",ref:"main",head_ref:"refs/heads/branch",base_ref:"refs/heads/main",token:"***",workspace:"",action:"",action_path:""};case"env":let t={};return this.workflow&&l(this.path,this.workflow,o=>{if(o.env){const e={...o.env};for(const o of Object.keys(e)){const r=e[o];if(s(r))try{e[o]=ot(r,{get:o=>"env"===o?t:this.get(o)})}catch(t){}}t={...t,...e}}}),t;case"runner":return{os:"macOS",temp:"/tmp",tool_cache:"/tmp/cache"};case"job":{const t=Ut(this.workflow,this.path);return t?{status:"success",container:{id:"",network:""},services:t.services}:{}}case"needs":{const t=Ut(this.workflow,this.path);return t?t.needs.reduce((t,o)=>({...t,[o]:{result:"success",outputs:this.workflow.jobs[o].outputs||{}}}),{}):{}}case"matrix":{var i;const t=Ut(this.workflow,this.path);return t&&(null===(i=t.strategy)||void 0===i?void 0:i.matrix)?Object.keys(t.strategy.matrix).reduce((o,e)=>{var r,s;return{...o,[e]:null===(r=t.strategy.matrix)||void 0===r||null===(s=r[e])||void 0===s?void 0:s[0]}},{}):{}}case"strategy":{const t=Ut(this.workflow,this.path);return(null==t?void 0:t.strategy)||{}}case"steps":{const t=this.path.map(t=>Array.isArray(t)?t[0]:t).indexOf("steps");if(-1===t)return{};const o=Ut(this.workflow,this.path);if(!o)return{};const e=l(this.path.slice(0,t+1),this.workflow),r=o.steps.indexOf(e);return-1===r?{}:o.steps.slice(0,r+1).reduce((t,o,e)=>({...t,[o.id||""+e]:{outputs:{},outcome:"success",conclusion:"success"}}),{})}case"secrets":return this.secrets.reduce((t,o)=>(t[o]="***",t),{})}}}function Rt(t,o){try{var e=t()}catch(t){return o(t)}return e&&e.then?e.then(void 0,o):e}function At(t,o){return{get:function(e,r){try{function s(){return new It(e,r,i)}let i;const l=Rt(function(){return Promise.resolve(o.get(`${t.owner}/${t.repository}/secrets`,t.timeToCacheResponsesInMS,function(){try{function o(){return Array.from(e.values())}const e=new Set(["GITHUB_TOKEN"]),r=function(){var o;if(null==t||null===(o=t.client)||void 0===o?void 0:o.actions){const o=[];return o.push(function(){try{return Promise.resolve(t.client.actions.listRepoSecrets({owner:t.owner,repo:t.repository})).then(function(t){t.data.secrets.forEach(t=>e.add(t.name))})}catch(t){return Promise.reject(t)}}()),t.ownerIsOrg&&t.orgFeaturesEnabled&&o.push(function(){try{const o=Rt(function(){return Promise.resolve(t.client.actions.listOrgSecrets({org:t.owner,repo:t.repository})).then(function(t){t.data.secrets.forEach(t=>e.add(t.name))})},function(t){console.error(t),e.add(":: Could not retrieve org secrets {e.?message}")});return Promise.resolve(o&&o.then?o.then(function(){}):void 0)}catch(t){return Promise.reject(t)}}()),Promise.resolve(Promise.all(o)).then(function(){})}}();return Promise.resolve(r&&r.then?r.then(o):o())}catch(t){return Promise.reject(t)}})).then(function(t){i=t})},function(t){console.error(t),i=["GITHUB_TOKEN",":: Could not load secrets: "+(null==t?void 0:t.message)]});return Promise.resolve(l&&l.then?l.then(s):s())}catch(t){return Promise.reject(t)}}}}const Xt=[["check_run","Runs your workflow anytime the check_run event occurs. More than one activity type triggers this event. For information about the REST API, see https://developer.github.com/v3/checks/runs.",["created","rerequested","completed","requested_action"]],["check_suite","Runs your workflow anytime the check_suite event occurs. More than one activity type triggers this event. For information about the REST API, see https://developer.github.com/v3/checks/suites/.",["completed","requested","rerequested"]],["create","Runs your workflow anytime someone creates a branch or tag, which triggers the create event. For information about the REST API, see https://developer.github.com/v3/git/refs/#create-a-reference.",[]],["delete","Runs your workflow anytime someone deletes a branch or tag, which triggers the delete event. For information about the REST API, see https://developer.github.com/v3/git/refs/#delete-a-reference.",[]],["deployment","Runs your workflow anytime someone creates a deployment, which triggers the deployment event. Deployments created with a commit SHA may not have a Git ref. For information about the REST API, see https://developer.github.com/v3/repos/deployments/.",[]],["deployment_status","Runs your workflow anytime a third party provides a deployment status, which triggers the deployment_status event. Deployments created with a commit SHA may not have a Git ref. For information about the REST API, see https://developer.github.com/v3/repos/deployments/#create-a-deployment-status.",[]],["fork","Runs your workflow anytime when someone forks a repository, which triggers the fork event. For information about the REST API, see https://developer.github.com/v3/repos/forks/#create-a-fork.",[]],["gollum","Runs your workflow when someone creates or updates a Wiki page, which triggers the gollum event.",[]],["issue_comment","Runs your workflow anytime the issue_comment event occurs. More than one activity type triggers this event. For information about the REST API, see https://developer.github.com/v3/issues/comments/.",[]],["issues","Runs your workflow anytime the issues event occurs. More than one activity type triggers this event. For information about the REST API, see https://developer.github.com/v3/issues.",[["opened",""],["edited",""],["deleted",""],["transferred",""],["pinned",""],["unpinned",""],["closed",""],["reopened",""],["assigned",""],["unassigned",""],["labeled",""],["unlabeled",""],["locked",""],["unlocked",""],["milestoned",""],["demilestoned",""]]],["label","Runs your workflow anytime the label event occurs. More than one activity type triggers this event. For information about the REST API, see https://developer.github.com/v3/issues/labels/.",["created","edited","deleted"]],["member","Runs your workflow anytime the member event occurs. More than one activity type triggers this event. For information about the REST API, see https://developer.github.com/v3/repos/collaborators/.",["added","edited","deleted"]],["milestone","Runs your workflow anytime the milestone event occurs. More than one activity type triggers this event. For information about the REST API, see https://developer.github.com/v3/issues/milestones/.",["created","closed","opened","edited","deleted"]],["page_build","Runs your workflow anytime someone pushes to a GitHub Pages-enabled branch, which triggers the page_build event. For information about the REST API, see https://developer.github.com/v3/repos/pages/.",[]],["project","Runs your workflow anytime the project event occurs. More than one activity type triggers this event. For information about the REST API, see https://developer.github.com/v3/projects/.",["created","updated","closed","reopened","edited","deleted"]],["project_card","Runs your workflow anytime the project_card event occurs. More than one activity type triggers this event. For information about the REST API, see https://developer.github.com/v3/projects/cards.",["created","moved","converted","edited","deleted"]],["project_column","Runs your workflow anytime the project_column event occurs. More than one activity type triggers this event. For information about the REST API, see https://developer.github.com/v3/projects/columns.",["created","updated","moved","deleted"]],["public","Runs your workflow anytime someone makes a private repository public, which triggers the public event. For information about the REST API, see https://developer.github.com/v3/repos/#edit.",[]],["pull_request","Runs your workflow anytime the pull_request event occurs. More than one activity type triggers this event. For information about the REST API, see https://developer.github.com/v3/pulls.\nNote: Workflows do not run on private base repositories when you open a pull request from a forked repository.\nWhen you create a pull request from a forked repository to the base repository, GitHub sends the pull_request event to the base repository and no pull request events occur on the forked repository.\nWorkflows don't run on forked repositories by default. You must enable GitHub Actions in the Actions tab of the forked repository.\nThe permissions for the GITHUB_TOKEN in forked repositories is read-only. For more information about the GITHUB_TOKEN, see https://help.github.com/en/articles/virtual-environments-for-github-actions.",[["assigned",""],["unassigned",""],["labeled",""],["unlabeled",""],["opened",""],["edited",""],["closed",""],["reopened",""],["synchronize",""],["ready_for_review",""],["locked",""],["unlocked",""],["review_requested",""],["review_request_removed",""]]],["pull_request_review","Runs your workflow anytime the pull_request_review event occurs. More than one activity type triggers this event. For information about the REST API, see https://developer.github.com/v3/pulls/reviews.\nNote: Workflows do not run on private base repositories when you open a pull request from a forked repository.\nWhen you create a pull request from a forked repository to the base repository, GitHub sends the pull_request event to the base repository and no pull request events occur on the forked repository.\nWorkflows don't run on forked repositories by default. You must enable GitHub Actions in the Actions tab of the forked repository.\nThe permissions for the GITHUB_TOKEN in forked repositories is read-only. For more information about the GITHUB_TOKEN, see https://help.github.com/en/articles/virtual-environments-for-github-actions.",["submitted","edited","dismissed"]],["pull_request_review_comment","Runs your workflow anytime a comment on a pull request's unified diff is modified, which triggers the pull_request_review_comment event. More than one activity type triggers this event. For information about the REST API, see https://developer.github.com/v3/pulls/comments.\nNote: Workflows do not run on private base repositories when you open a pull request from a forked repository.\nWhen you create a pull request from a forked repository to the base repository, GitHub sends the pull_request event to the base repository and no pull request events occur on the forked repository.\nWorkflows don't run on forked repositories by default. You must enable GitHub Actions in the Actions tab of the forked repository.\nThe permissions for the GITHUB_TOKEN in forked repositories is read-only. For more information about the GITHUB_TOKEN, see https://help.github.com/en/articles/virtual-environments-for-github-actions.",["created","edited","deleted"]],["push","Runs your workflow when someone pushes to a repository branch, which triggers the push event.\nNote: The webhook payload available to GitHub Actions does not include the added, removed, and modified attributes in the commit object. You can retrieve the full commit object using the REST API. For more information, see https://developer.github.com/v3/repos/commits/#get-a-single-commit.",[]],["registry_package","",[]],["release","Runs your workflow anytime the release event occurs. More than one activity type triggers this event. For information about the REST API, see https://developer.github.com/v3/repos/releases/.",["published","unpublished","created","edited","deleted","prereleased"]],["repository_dispatch","",[]],["schedule","You can schedule a workflow to run at specific UTC times using POSIX cron syntax (https://pubs.opengroup.org/onlinepubs/9699919799/utilities/crontab.html#tag_20_25_07). Scheduled workflows run on the latest commit on the default or base branch. The shortest interval you can run scheduled workflows is once every 5 minutes.\nNote: GitHub Actions does not support the non-standard syntax @yearly, @monthly, @weekly, @daily, @hourly, and @reboot.\nYou can use crontab guru (https://crontab.guru/). to help generate your cron syntax and confirm what time it will run. To help you get started, there is also a list of crontab guru examples (https://crontab.guru/examples.html).",[]],["status","Runs your workflow anytime the status of a Git commit changes, which triggers the status event. For information about the REST API, see https://developer.github.com/v3/repos/statuses/.",[]],["watch","Runs your workflow anytime the watch event occurs. More than one activity type triggers this event. For information about the REST API, see https://developer.github.com/v3/activity/starring/.",[]],["workflow_dispatch","",[]],["workflow_run","",[]]],Pt=Xt.map(([t,o])=>({value:t,description:o})),Yt={branches:{type:"sequence",itemDesc:{type:"value"}},"branches-ignore":{type:"sequence",itemDesc:{type:"value"}},tags:{type:"sequence",itemDesc:{type:"value"}},"tags-ignore":{type:"sequence",itemDesc:{type:"value"}},paths:{type:"sequence",itemDesc:{type:"value"}},"paths-ignore":{type:"sequence",itemDesc:{type:"value"}}},Vt=Et({},Xt.reduce((t,[o,e,r])=>({...t,[o]:{type:"map",description:e,keys:r.length>0&&{types:{type:"sequence",itemDesc:{type:"value",allowedValues:r.map(t=>({value:Array.isArray(t)?t[0]:t,description:Array.isArray(t)?t[1]:void 0}))}}}||void 0}}),{}),{push:{type:"map",keys:{...Yt}},pull_request:{type:"map",keys:{...Yt}},schedule:{type:"sequence",itemDesc:{type:"map",keys:{cron:{type:"value"}},required:["cron"]}},workflow_dispatch:{type:"map",description:"Event that can be manually triggered",keys:{inputs:{type:"map",itemDesc:{type:"map",keys:{required:{type:"value"},description:{type:"value"},default:{type:"value"}}}}}}}),Qt=function(t,o,e){try{const t=e[e.length-2];return Promise.resolve(t&&o.jobs&&Object.keys(o.jobs).filter(o=>o!==t).map(t=>({value:t}))||[])}catch(t){return Promise.reject(t)}},St=(t,e)=>function(r,s,i){try{if(!s)return Promise.resolve([]);"with"===i[i.length-1]&&i.pop();const r=l(i,s);if(!r||!("uses"in r)||"remote"!==r.uses.type)return Promise.resolve([]);const a=r.uses;return Promise.resolve(e.get(`${a.owner}/${a.repository}@${a.ref}`,36e5,function(){try{return Promise.resolve(function(t,o){try{let e;const r=function(){var r;if(null==t||null===(r=t.client)||void 0===r?void 0:r.repos)return Promise.resolve(t.client.repos.getContent({owner:o.owner,repo:o.repository,path:"action.yml",ref:o.ref})).then(function(r){function s(){var t,o;if(null===(t=r)||void 0===t||null===(o=t.data)||void 0===o?void 0:o.content){const t=new Buffer(r.data.content,"base64").toString("ascii");return e=1,t}}const i=function(){if(404===r.status)return Promise.resolve(t.client.repos.getContent({owner:o.owner,repo:o.repository,path:"action.yaml",ref:o.ref})).then(function(t){r=t})}();return i&&i.then?i.then(s):s()})}();return Promise.resolve(r&&r.then?r.then(function(t){return e?t:void 0}):e?r:void 0)}catch(t){return Promise.reject(t)}}(t,a)).then(function(t){if(t){const{inputs:e}=o.safeLoad(t);if(e)return Object.keys(e).map(t=>({value:t,description:`${e[t].description||""} \n\nrequired: \`${!!e[t].required}\` \n\n${e[t].default&&`default:\`${e[t].default}\``||""}`,validation:e[t].required?st.Required:st.None}))}})}catch(t){return Promise.reject(t)}}))}catch(t){return Promise.reject(t)}},Gt=new class{constructor(t=6e5){this.defaultTTLinMS=t,this.cache=new Map}get(t,o,e){try{const r=this,s=r.cache.get(t);return s&&s.cachedAt>Date.now()-(o||r.defaultTTLinMS)?Promise.resolve(s.content):Promise.resolve(function(o,s){try{var i=Promise.resolve(e()).then(function(o){return r.cache.set(t,{cachedAt:Date.now(),content:o}),o})}catch(t){return s(t)}return i&&i.then?i.then(void 0,s):i}(0,function(o){throw r.cache.delete(t),o}))}catch(t){return Promise.reject(t)}}},qt=t=>({type:"value",description:t}),Ft={type:"map",itemDesc:{type:"value"}},Lt={type:"value",allowedValues:[{value:"bash"},{value:"pwsh"},{value:"python"},{value:"sh"},{value:"cmd"},{value:"powershell"}],description:"https://help.github.com/en/actions/reference/workflow-syntax-for-github-actions#custom-shell"},Jt={type:"map",keys:{run:{type:"map",keys:{shell:Lt,"working-directory":qt()}}}},Bt=()=>({type:"map",keys:{image:qt("The Docker image to use as the container to run the action. The value can be the Docker Hub image name or a public docker registry name."),env:Ft,ports:{type:"sequence",itemDesc:qt(),description:"Sets an array of ports to expose on the container."},volumes:{type:"sequence",itemDesc:qt("Pattern: ^[^:]+:[^:]+$"),description:"Sets an array of volumes for the container to use. You can use volumes to share data between services or other steps in a job. You can specify named Docker volumes, anonymous Docker volumes, or bind mounts on the host.\nTo specify a volume, you specify the source and destination path: <source>:<destinationPath>\nThe <source> is a volume name or an absolute path on the host machine, and <destinationPath> is an absolute path in the container."},options:qt("Additional Docker container resource options. For a list of options, see https://docs.docker.com/engine/reference/commandline/create/#options.")},required:["image"]}),Kt=t=>({type:"value",description:"The type of machine to run the job on. The machine can be either a GitHub-hosted runner, or a self-hosted runner.",customValueProvider:function(){try{return Promise.resolve(Gt.get(`${t.owner}/${t.repository}/runs-on-labels`,t.timeToCacheResponsesInMS,function(){try{function o(){return Array.from(e.values()).map(t=>({value:t}))}const e=new Set;e.add("ubuntu-latest"),e.add("windows-latest"),e.add("macos-latest"),e.add("self-hosted");const r=function(){var o;if(null==t||null===(o=t.client)||void 0===o?void 0:o.actions)return Promise.resolve(t.client.actions.listSelfHostedRunnersForRepo({owner:t.owner,repo:t.repository})).then(function(t){t&&t.data.runners&&t.data.runners.forEach(t=>{var o;return null==t||null===(o=t.labels)||void 0===o?void 0:o.forEach(t=>e.add(t.name))})})}();return Promise.resolve(r&&r.then?r.then(o):o())}catch(t){return Promise.reject(t)}}))}catch(t){return Promise.reject(t)}}});function $t(t){return{type:"map",keys:{name:{type:"value",description:"Name of the workflow"},env:Ft,on:{type:"oneOf",oneOf:[{type:"value",allowedValues:Pt},{type:"sequence",itemDesc:{type:"value",allowedValues:Pt}},{type:"map",keys:Vt}]},jobs:{type:"map",itemDesc:{type:"map",keys:{name:qt("Optional custom name for this job"),env:Ft,needs:{type:"oneOf",oneOf:[{type:"value",customValueProvider:Qt},{type:"sequence",itemDesc:{type:"value",customValueProvider:Qt}}]},outputs:{type:"map"},defaults:Jt,if:{type:"value",isExpression:!0},"timeout-minutes":qt(),"continue-on-error":qt(),container:Bt(),services:{type:"map",itemDesc:Bt(),description:"Additional containers to host services for a job in a workflow. These are useful for creating databases or cache services like redis. The runner on the virtual machine will automatically create a network and manage the life cycle of the service containers.\nWhen you use a service container for a job or your step uses container actions, you don't need to set port information to access the service. Docker automatically exposes all ports between containers on the same network.\nWhen both the job and the action run in a container, you can directly reference the container by its hostname. The hostname is automatically mapped to the service name.\nWhen a step does not use a container action, you must access the service using localhost and bind the ports."},"runs-on":{type:"oneOf",oneOf:[Kt(t),{type:"sequence",itemDesc:Kt(t)}],description:"The type of machine to run the job on. The machine can be either a GitHub-hosted runner, or a self-hosted runner."},steps:{type:"sequence",itemDesc:{type:"map",keys:{id:qt("A unique identifier for the step. You can use the id to reference the step in contexts. For more information, see https://help.github.com/en/articles/contexts-and-expression-syntax-for-github-actions."),if:{type:"value",isExpression:!0},name:qt("Optional custom name for the step"),uses:qt(),run:qt("Runs command-line programs using the operating system's shell. If you do not provide a `name`, the step name will default to the text specified in the `run` command."),"working-directory":qt(),shell:Lt,with:{type:"map",customValueProvider:St(t,Gt)},env:Ft,"continue-on-error":qt(),"timeout-minutes":qt()}}},strategy:{type:"map",keys:{matrix:{type:"map",itemDesc:{type:"sequence"},description:"A build matrix is a set of different configurations of the virtual environment. For example you might run a job against more than one supported version of a language, operating system, or tool. Each configuration is a copy of the job that runs and reports a status.\nYou can specify a matrix by supplying an array for the configuration options. For example, if the GitHub virtual environment supports Node.js versions 6, 8, and 10 you could specify an array of those versions in the matrix.\nWhen you define a matrix of operating systems, you must set the required runs-on keyword to the operating system of the current job, rather than hard-coding the operating system name. To access the operating system name, you can use the matrix.os context parameter to set runs-on. For more information, see https://help.github.com/en/articles/contexts-and-expression-syntax-for-github-actions."},"fail-fast":qt("When set to true, GitHub cancels all in-progress jobs if any matrix job fails. Default: true"),"max-parallel":qt("The maximum number of jobs that can run simultaneously when using a matrix job strategy. By default, GitHub will maximize the number of jobs run in parallel depending on the available runners on GitHub-hosted virtual machines.")},required:["matrix"]}},required:["runs-on","steps"]}}},required:["on","jobs"]}}exports.ExpressionParser=F,exports.complete=function(t,o,e,r){try{return Promise.resolve(function(t,o,e,r,s){try{const[i,l,a]=function(t,o){const e=t.split("\n"),r=t.substring(0,o).split("").filter(t=>"\n"===t).length,s=o-e.slice(0,r).reduce((t,o)=>t+o.length+1,0),i=e[r];let l=i.trim();if(-1===l.indexOf("${{")){const t=i.indexOf(":");if(-1===t){const t=i.trim();if(""===t||"-"===t){let l="";"-"!==t||i.endsWith(" ")||(l=" ",o++),e[r]=i.substring(0,s)+l+"dummy"+("-"===t?"":":")+i.substring(s),o++}else t.startsWith("-")||(e[r]=i+":");t.startsWith("-")&&(l=t.substring(t.indexOf("-")+1).trim())}else l=(o>t?i.substring(t+1):i.substring(0,t)).trim(),o-=1}return[e.join("\n"),o,l]}(o,e);return Promise.resolve(ft(t,i,r,s)).then(function(t){let r;function i(o){if(r)return o;if(u.kind===et.SCALAR)return Dt(u,e,at(u),t.workflow,s);throw new Error("Could not find schema for node")}const u=lt(t.workflowST,l),c=t.nodeToDesc.get(u),p=function(){if(c)return Promise.resolve(Ot(u,c,o,a,l,t,s)).then(function(t){return(t=t||[]).sort((t,o)=>t.value.localeCompare(o.value)),r=1,t})}();return p&&p.then?p.then(i):i(p)})}catch(t){return Promise.reject(t)}}(o,e,r,$t(t),At(t,Gt)))}catch(t){return Promise.reject(t)}},exports.evaluateExpression=tt,exports.findNode=lt,exports.hover=function(t,o,e,r){try{return Promise.resolve(function(t,o,e,r,s){try{return Promise.resolve(ft(t,o,r,s)).then(function(t){const o=lt(t.workflowST,e),r=t.nodeToDesc.get(o);if(r)return xt(o,r,e,t.workflow,s)})}catch(t){return Promise.reject(t)}}(o,e,r,$t(t),At(t,Gt)))}catch(t){return Promise.reject(t)}},exports.inPos=it,exports.parse=function(t,o,e){try{return Promise.resolve(ft(o,e,$t(t),At(t,Gt)))}catch(t){return Promise.reject(t)}};
//# sourceMappingURL=index.js.map


/***/ }),

/***/ 893:
/***/ ((module) => {

var toString = {}.toString;

module.exports = Array.isArray || function (arr) {
  return toString.call(arr) == '[object Array]';
};


/***/ }),

/***/ 1917:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";



var yaml = __webpack_require__(916);


module.exports = yaml;


/***/ }),

/***/ 916:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";



var loader = __webpack_require__(5190);
var dumper = __webpack_require__(3034);


function deprecated(name) {
  return function () {
    throw new Error('Function ' + name + ' is deprecated and cannot be used.');
  };
}


module.exports.Type = __webpack_require__(967);
module.exports.Schema = __webpack_require__(6514);
module.exports.FAILSAFE_SCHEMA = __webpack_require__(6037);
module.exports.JSON_SCHEMA = __webpack_require__(1571);
module.exports.CORE_SCHEMA = __webpack_require__(2183);
module.exports.DEFAULT_SAFE_SCHEMA = __webpack_require__(8949);
module.exports.DEFAULT_FULL_SCHEMA = __webpack_require__(6874);
module.exports.load                = loader.load;
module.exports.loadAll             = loader.loadAll;
module.exports.safeLoad            = loader.safeLoad;
module.exports.safeLoadAll         = loader.safeLoadAll;
module.exports.dump                = dumper.dump;
module.exports.safeDump            = dumper.safeDump;
module.exports.YAMLException = __webpack_require__(5199);

// Deprecated schema names from JS-YAML 2.0.x
module.exports.MINIMAL_SCHEMA = __webpack_require__(6037);
module.exports.SAFE_SCHEMA = __webpack_require__(8949);
module.exports.DEFAULT_SCHEMA = __webpack_require__(6874);

// Deprecated functions from JS-YAML 1.x.x
module.exports.scan           = deprecated('scan');
module.exports.parse          = deprecated('parse');
module.exports.compose        = deprecated('compose');
module.exports.addConstructor = deprecated('addConstructor');


/***/ }),

/***/ 9136:
/***/ ((module) => {

"use strict";



function isNothing(subject) {
  return (typeof subject === 'undefined') || (subject === null);
}


function isObject(subject) {
  return (typeof subject === 'object') && (subject !== null);
}


function toArray(sequence) {
  if (Array.isArray(sequence)) return sequence;
  else if (isNothing(sequence)) return [];

  return [ sequence ];
}


function extend(target, source) {
  var index, length, key, sourceKeys;

  if (source) {
    sourceKeys = Object.keys(source);

    for (index = 0, length = sourceKeys.length; index < length; index += 1) {
      key = sourceKeys[index];
      target[key] = source[key];
    }
  }

  return target;
}


function repeat(string, count) {
  var result = '', cycle;

  for (cycle = 0; cycle < count; cycle += 1) {
    result += string;
  }

  return result;
}


function isNegativeZero(number) {
  return (number === 0) && (Number.NEGATIVE_INFINITY === 1 / number);
}


module.exports.isNothing      = isNothing;
module.exports.isObject       = isObject;
module.exports.toArray        = toArray;
module.exports.repeat         = repeat;
module.exports.isNegativeZero = isNegativeZero;
module.exports.extend         = extend;


/***/ }),

/***/ 3034:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";


/*eslint-disable no-use-before-define*/

var common              = __webpack_require__(9136);
var YAMLException       = __webpack_require__(5199);
var DEFAULT_FULL_SCHEMA = __webpack_require__(6874);
var DEFAULT_SAFE_SCHEMA = __webpack_require__(8949);

var _toString       = Object.prototype.toString;
var _hasOwnProperty = Object.prototype.hasOwnProperty;

var CHAR_TAB                  = 0x09; /* Tab */
var CHAR_LINE_FEED            = 0x0A; /* LF */
var CHAR_CARRIAGE_RETURN      = 0x0D; /* CR */
var CHAR_SPACE                = 0x20; /* Space */
var CHAR_EXCLAMATION          = 0x21; /* ! */
var CHAR_DOUBLE_QUOTE         = 0x22; /* " */
var CHAR_SHARP                = 0x23; /* # */
var CHAR_PERCENT              = 0x25; /* % */
var CHAR_AMPERSAND            = 0x26; /* & */
var CHAR_SINGLE_QUOTE         = 0x27; /* ' */
var CHAR_ASTERISK             = 0x2A; /* * */
var CHAR_COMMA                = 0x2C; /* , */
var CHAR_MINUS                = 0x2D; /* - */
var CHAR_COLON                = 0x3A; /* : */
var CHAR_EQUALS               = 0x3D; /* = */
var CHAR_GREATER_THAN         = 0x3E; /* > */
var CHAR_QUESTION             = 0x3F; /* ? */
var CHAR_COMMERCIAL_AT        = 0x40; /* @ */
var CHAR_LEFT_SQUARE_BRACKET  = 0x5B; /* [ */
var CHAR_RIGHT_SQUARE_BRACKET = 0x5D; /* ] */
var CHAR_GRAVE_ACCENT         = 0x60; /* ` */
var CHAR_LEFT_CURLY_BRACKET   = 0x7B; /* { */
var CHAR_VERTICAL_LINE        = 0x7C; /* | */
var CHAR_RIGHT_CURLY_BRACKET  = 0x7D; /* } */

var ESCAPE_SEQUENCES = {};

ESCAPE_SEQUENCES[0x00]   = '\\0';
ESCAPE_SEQUENCES[0x07]   = '\\a';
ESCAPE_SEQUENCES[0x08]   = '\\b';
ESCAPE_SEQUENCES[0x09]   = '\\t';
ESCAPE_SEQUENCES[0x0A]   = '\\n';
ESCAPE_SEQUENCES[0x0B]   = '\\v';
ESCAPE_SEQUENCES[0x0C]   = '\\f';
ESCAPE_SEQUENCES[0x0D]   = '\\r';
ESCAPE_SEQUENCES[0x1B]   = '\\e';
ESCAPE_SEQUENCES[0x22]   = '\\"';
ESCAPE_SEQUENCES[0x5C]   = '\\\\';
ESCAPE_SEQUENCES[0x85]   = '\\N';
ESCAPE_SEQUENCES[0xA0]   = '\\_';
ESCAPE_SEQUENCES[0x2028] = '\\L';
ESCAPE_SEQUENCES[0x2029] = '\\P';

var DEPRECATED_BOOLEANS_SYNTAX = [
  'y', 'Y', 'yes', 'Yes', 'YES', 'on', 'On', 'ON',
  'n', 'N', 'no', 'No', 'NO', 'off', 'Off', 'OFF'
];

function compileStyleMap(schema, map) {
  var result, keys, index, length, tag, style, type;

  if (map === null) return {};

  result = {};
  keys = Object.keys(map);

  for (index = 0, length = keys.length; index < length; index += 1) {
    tag = keys[index];
    style = String(map[tag]);

    if (tag.slice(0, 2) === '!!') {
      tag = 'tag:yaml.org,2002:' + tag.slice(2);
    }
    type = schema.compiledTypeMap['fallback'][tag];

    if (type && _hasOwnProperty.call(type.styleAliases, style)) {
      style = type.styleAliases[style];
    }

    result[tag] = style;
  }

  return result;
}

function encodeHex(character) {
  var string, handle, length;

  string = character.toString(16).toUpperCase();

  if (character <= 0xFF) {
    handle = 'x';
    length = 2;
  } else if (character <= 0xFFFF) {
    handle = 'u';
    length = 4;
  } else if (character <= 0xFFFFFFFF) {
    handle = 'U';
    length = 8;
  } else {
    throw new YAMLException('code point within a string may not be greater than 0xFFFFFFFF');
  }

  return '\\' + handle + common.repeat('0', length - string.length) + string;
}

function State(options) {
  this.schema        = options['schema'] || DEFAULT_FULL_SCHEMA;
  this.indent        = Math.max(1, (options['indent'] || 2));
  this.noArrayIndent = options['noArrayIndent'] || false;
  this.skipInvalid   = options['skipInvalid'] || false;
  this.flowLevel     = (common.isNothing(options['flowLevel']) ? -1 : options['flowLevel']);
  this.styleMap      = compileStyleMap(this.schema, options['styles'] || null);
  this.sortKeys      = options['sortKeys'] || false;
  this.lineWidth     = options['lineWidth'] || 80;
  this.noRefs        = options['noRefs'] || false;
  this.noCompatMode  = options['noCompatMode'] || false;
  this.condenseFlow  = options['condenseFlow'] || false;

  this.implicitTypes = this.schema.compiledImplicit;
  this.explicitTypes = this.schema.compiledExplicit;

  this.tag = null;
  this.result = '';

  this.duplicates = [];
  this.usedDuplicates = null;
}

// Indents every line in a string. Empty lines (\n only) are not indented.
function indentString(string, spaces) {
  var ind = common.repeat(' ', spaces),
      position = 0,
      next = -1,
      result = '',
      line,
      length = string.length;

  while (position < length) {
    next = string.indexOf('\n', position);
    if (next === -1) {
      line = string.slice(position);
      position = length;
    } else {
      line = string.slice(position, next + 1);
      position = next + 1;
    }

    if (line.length && line !== '\n') result += ind;

    result += line;
  }

  return result;
}

function generateNextLine(state, level) {
  return '\n' + common.repeat(' ', state.indent * level);
}

function testImplicitResolving(state, str) {
  var index, length, type;

  for (index = 0, length = state.implicitTypes.length; index < length; index += 1) {
    type = state.implicitTypes[index];

    if (type.resolve(str)) {
      return true;
    }
  }

  return false;
}

// [33] s-white ::= s-space | s-tab
function isWhitespace(c) {
  return c === CHAR_SPACE || c === CHAR_TAB;
}

// Returns true if the character can be printed without escaping.
// From YAML 1.2: "any allowed characters known to be non-printable
// should also be escaped. [However,] This isn’t mandatory"
// Derived from nb-char - \t - #x85 - #xA0 - #x2028 - #x2029.
function isPrintable(c) {
  return  (0x00020 <= c && c <= 0x00007E)
      || ((0x000A1 <= c && c <= 0x00D7FF) && c !== 0x2028 && c !== 0x2029)
      || ((0x0E000 <= c && c <= 0x00FFFD) && c !== 0xFEFF /* BOM */)
      ||  (0x10000 <= c && c <= 0x10FFFF);
}

// [34] ns-char ::= nb-char - s-white
// [27] nb-char ::= c-printable - b-char - c-byte-order-mark
// [26] b-char  ::= b-line-feed | b-carriage-return
// [24] b-line-feed       ::=     #xA    /* LF */
// [25] b-carriage-return ::=     #xD    /* CR */
// [3]  c-byte-order-mark ::=     #xFEFF
function isNsChar(c) {
  return isPrintable(c) && !isWhitespace(c)
    // byte-order-mark
    && c !== 0xFEFF
    // b-char
    && c !== CHAR_CARRIAGE_RETURN
    && c !== CHAR_LINE_FEED;
}

// Simplified test for values allowed after the first character in plain style.
function isPlainSafe(c, prev) {
  // Uses a subset of nb-char - c-flow-indicator - ":" - "#"
  // where nb-char ::= c-printable - b-char - c-byte-order-mark.
  return isPrintable(c) && c !== 0xFEFF
    // - c-flow-indicator
    && c !== CHAR_COMMA
    && c !== CHAR_LEFT_SQUARE_BRACKET
    && c !== CHAR_RIGHT_SQUARE_BRACKET
    && c !== CHAR_LEFT_CURLY_BRACKET
    && c !== CHAR_RIGHT_CURLY_BRACKET
    // - ":" - "#"
    // /* An ns-char preceding */ "#"
    && c !== CHAR_COLON
    && ((c !== CHAR_SHARP) || (prev && isNsChar(prev)));
}

// Simplified test for values allowed as the first character in plain style.
function isPlainSafeFirst(c) {
  // Uses a subset of ns-char - c-indicator
  // where ns-char = nb-char - s-white.
  return isPrintable(c) && c !== 0xFEFF
    && !isWhitespace(c) // - s-white
    // - (c-indicator ::=
    // “-” | “?” | “:” | “,” | “[” | “]” | “{” | “}”
    && c !== CHAR_MINUS
    && c !== CHAR_QUESTION
    && c !== CHAR_COLON
    && c !== CHAR_COMMA
    && c !== CHAR_LEFT_SQUARE_BRACKET
    && c !== CHAR_RIGHT_SQUARE_BRACKET
    && c !== CHAR_LEFT_CURLY_BRACKET
    && c !== CHAR_RIGHT_CURLY_BRACKET
    // | “#” | “&” | “*” | “!” | “|” | “=” | “>” | “'” | “"”
    && c !== CHAR_SHARP
    && c !== CHAR_AMPERSAND
    && c !== CHAR_ASTERISK
    && c !== CHAR_EXCLAMATION
    && c !== CHAR_VERTICAL_LINE
    && c !== CHAR_EQUALS
    && c !== CHAR_GREATER_THAN
    && c !== CHAR_SINGLE_QUOTE
    && c !== CHAR_DOUBLE_QUOTE
    // | “%” | “@” | “`”)
    && c !== CHAR_PERCENT
    && c !== CHAR_COMMERCIAL_AT
    && c !== CHAR_GRAVE_ACCENT;
}

// Determines whether block indentation indicator is required.
function needIndentIndicator(string) {
  var leadingSpaceRe = /^\n* /;
  return leadingSpaceRe.test(string);
}

var STYLE_PLAIN   = 1,
    STYLE_SINGLE  = 2,
    STYLE_LITERAL = 3,
    STYLE_FOLDED  = 4,
    STYLE_DOUBLE  = 5;

// Determines which scalar styles are possible and returns the preferred style.
// lineWidth = -1 => no limit.
// Pre-conditions: str.length > 0.
// Post-conditions:
//    STYLE_PLAIN or STYLE_SINGLE => no \n are in the string.
//    STYLE_LITERAL => no lines are suitable for folding (or lineWidth is -1).
//    STYLE_FOLDED => a line > lineWidth and can be folded (and lineWidth != -1).
function chooseScalarStyle(string, singleLineOnly, indentPerLevel, lineWidth, testAmbiguousType) {
  var i;
  var char, prev_char;
  var hasLineBreak = false;
  var hasFoldableLine = false; // only checked if shouldTrackWidth
  var shouldTrackWidth = lineWidth !== -1;
  var previousLineBreak = -1; // count the first line correctly
  var plain = isPlainSafeFirst(string.charCodeAt(0))
          && !isWhitespace(string.charCodeAt(string.length - 1));

  if (singleLineOnly) {
    // Case: no block styles.
    // Check for disallowed characters to rule out plain and single.
    for (i = 0; i < string.length; i++) {
      char = string.charCodeAt(i);
      if (!isPrintable(char)) {
        return STYLE_DOUBLE;
      }
      prev_char = i > 0 ? string.charCodeAt(i - 1) : null;
      plain = plain && isPlainSafe(char, prev_char);
    }
  } else {
    // Case: block styles permitted.
    for (i = 0; i < string.length; i++) {
      char = string.charCodeAt(i);
      if (char === CHAR_LINE_FEED) {
        hasLineBreak = true;
        // Check if any line can be folded.
        if (shouldTrackWidth) {
          hasFoldableLine = hasFoldableLine ||
            // Foldable line = too long, and not more-indented.
            (i - previousLineBreak - 1 > lineWidth &&
             string[previousLineBreak + 1] !== ' ');
          previousLineBreak = i;
        }
      } else if (!isPrintable(char)) {
        return STYLE_DOUBLE;
      }
      prev_char = i > 0 ? string.charCodeAt(i - 1) : null;
      plain = plain && isPlainSafe(char, prev_char);
    }
    // in case the end is missing a \n
    hasFoldableLine = hasFoldableLine || (shouldTrackWidth &&
      (i - previousLineBreak - 1 > lineWidth &&
       string[previousLineBreak + 1] !== ' '));
  }
  // Although every style can represent \n without escaping, prefer block styles
  // for multiline, since they're more readable and they don't add empty lines.
  // Also prefer folding a super-long line.
  if (!hasLineBreak && !hasFoldableLine) {
    // Strings interpretable as another type have to be quoted;
    // e.g. the string 'true' vs. the boolean true.
    return plain && !testAmbiguousType(string)
      ? STYLE_PLAIN : STYLE_SINGLE;
  }
  // Edge case: block indentation indicator can only have one digit.
  if (indentPerLevel > 9 && needIndentIndicator(string)) {
    return STYLE_DOUBLE;
  }
  // At this point we know block styles are valid.
  // Prefer literal style unless we want to fold.
  return hasFoldableLine ? STYLE_FOLDED : STYLE_LITERAL;
}

// Note: line breaking/folding is implemented for only the folded style.
// NB. We drop the last trailing newline (if any) of a returned block scalar
//  since the dumper adds its own newline. This always works:
//    • No ending newline => unaffected; already using strip "-" chomping.
//    • Ending newline    => removed then restored.
//  Importantly, this keeps the "+" chomp indicator from gaining an extra line.
function writeScalar(state, string, level, iskey) {
  state.dump = (function () {
    if (string.length === 0) {
      return "''";
    }
    if (!state.noCompatMode &&
        DEPRECATED_BOOLEANS_SYNTAX.indexOf(string) !== -1) {
      return "'" + string + "'";
    }

    var indent = state.indent * Math.max(1, level); // no 0-indent scalars
    // As indentation gets deeper, let the width decrease monotonically
    // to the lower bound min(state.lineWidth, 40).
    // Note that this implies
    //  state.lineWidth ≤ 40 + state.indent: width is fixed at the lower bound.
    //  state.lineWidth > 40 + state.indent: width decreases until the lower bound.
    // This behaves better than a constant minimum width which disallows narrower options,
    // or an indent threshold which causes the width to suddenly increase.
    var lineWidth = state.lineWidth === -1
      ? -1 : Math.max(Math.min(state.lineWidth, 40), state.lineWidth - indent);

    // Without knowing if keys are implicit/explicit, assume implicit for safety.
    var singleLineOnly = iskey
      // No block styles in flow mode.
      || (state.flowLevel > -1 && level >= state.flowLevel);
    function testAmbiguity(string) {
      return testImplicitResolving(state, string);
    }

    switch (chooseScalarStyle(string, singleLineOnly, state.indent, lineWidth, testAmbiguity)) {
      case STYLE_PLAIN:
        return string;
      case STYLE_SINGLE:
        return "'" + string.replace(/'/g, "''") + "'";
      case STYLE_LITERAL:
        return '|' + blockHeader(string, state.indent)
          + dropEndingNewline(indentString(string, indent));
      case STYLE_FOLDED:
        return '>' + blockHeader(string, state.indent)
          + dropEndingNewline(indentString(foldString(string, lineWidth), indent));
      case STYLE_DOUBLE:
        return '"' + escapeString(string, lineWidth) + '"';
      default:
        throw new YAMLException('impossible error: invalid scalar style');
    }
  }());
}

// Pre-conditions: string is valid for a block scalar, 1 <= indentPerLevel <= 9.
function blockHeader(string, indentPerLevel) {
  var indentIndicator = needIndentIndicator(string) ? String(indentPerLevel) : '';

  // note the special case: the string '\n' counts as a "trailing" empty line.
  var clip =          string[string.length - 1] === '\n';
  var keep = clip && (string[string.length - 2] === '\n' || string === '\n');
  var chomp = keep ? '+' : (clip ? '' : '-');

  return indentIndicator + chomp + '\n';
}

// (See the note for writeScalar.)
function dropEndingNewline(string) {
  return string[string.length - 1] === '\n' ? string.slice(0, -1) : string;
}

// Note: a long line without a suitable break point will exceed the width limit.
// Pre-conditions: every char in str isPrintable, str.length > 0, width > 0.
function foldString(string, width) {
  // In folded style, $k$ consecutive newlines output as $k+1$ newlines—
  // unless they're before or after a more-indented line, or at the very
  // beginning or end, in which case $k$ maps to $k$.
  // Therefore, parse each chunk as newline(s) followed by a content line.
  var lineRe = /(\n+)([^\n]*)/g;

  // first line (possibly an empty line)
  var result = (function () {
    var nextLF = string.indexOf('\n');
    nextLF = nextLF !== -1 ? nextLF : string.length;
    lineRe.lastIndex = nextLF;
    return foldLine(string.slice(0, nextLF), width);
  }());
  // If we haven't reached the first content line yet, don't add an extra \n.
  var prevMoreIndented = string[0] === '\n' || string[0] === ' ';
  var moreIndented;

  // rest of the lines
  var match;
  while ((match = lineRe.exec(string))) {
    var prefix = match[1], line = match[2];
    moreIndented = (line[0] === ' ');
    result += prefix
      + (!prevMoreIndented && !moreIndented && line !== ''
        ? '\n' : '')
      + foldLine(line, width);
    prevMoreIndented = moreIndented;
  }

  return result;
}

// Greedy line breaking.
// Picks the longest line under the limit each time,
// otherwise settles for the shortest line over the limit.
// NB. More-indented lines *cannot* be folded, as that would add an extra \n.
function foldLine(line, width) {
  if (line === '' || line[0] === ' ') return line;

  // Since a more-indented line adds a \n, breaks can't be followed by a space.
  var breakRe = / [^ ]/g; // note: the match index will always be <= length-2.
  var match;
  // start is an inclusive index. end, curr, and next are exclusive.
  var start = 0, end, curr = 0, next = 0;
  var result = '';

  // Invariants: 0 <= start <= length-1.
  //   0 <= curr <= next <= max(0, length-2). curr - start <= width.
  // Inside the loop:
  //   A match implies length >= 2, so curr and next are <= length-2.
  while ((match = breakRe.exec(line))) {
    next = match.index;
    // maintain invariant: curr - start <= width
    if (next - start > width) {
      end = (curr > start) ? curr : next; // derive end <= length-2
      result += '\n' + line.slice(start, end);
      // skip the space that was output as \n
      start = end + 1;                    // derive start <= length-1
    }
    curr = next;
  }

  // By the invariants, start <= length-1, so there is something left over.
  // It is either the whole string or a part starting from non-whitespace.
  result += '\n';
  // Insert a break if the remainder is too long and there is a break available.
  if (line.length - start > width && curr > start) {
    result += line.slice(start, curr) + '\n' + line.slice(curr + 1);
  } else {
    result += line.slice(start);
  }

  return result.slice(1); // drop extra \n joiner
}

// Escapes a double-quoted string.
function escapeString(string) {
  var result = '';
  var char, nextChar;
  var escapeSeq;

  for (var i = 0; i < string.length; i++) {
    char = string.charCodeAt(i);
    // Check for surrogate pairs (reference Unicode 3.0 section "3.7 Surrogates").
    if (char >= 0xD800 && char <= 0xDBFF/* high surrogate */) {
      nextChar = string.charCodeAt(i + 1);
      if (nextChar >= 0xDC00 && nextChar <= 0xDFFF/* low surrogate */) {
        // Combine the surrogate pair and store it escaped.
        result += encodeHex((char - 0xD800) * 0x400 + nextChar - 0xDC00 + 0x10000);
        // Advance index one extra since we already used that char here.
        i++; continue;
      }
    }
    escapeSeq = ESCAPE_SEQUENCES[char];
    result += !escapeSeq && isPrintable(char)
      ? string[i]
      : escapeSeq || encodeHex(char);
  }

  return result;
}

function writeFlowSequence(state, level, object) {
  var _result = '',
      _tag    = state.tag,
      index,
      length;

  for (index = 0, length = object.length; index < length; index += 1) {
    // Write only valid elements.
    if (writeNode(state, level, object[index], false, false)) {
      if (index !== 0) _result += ',' + (!state.condenseFlow ? ' ' : '');
      _result += state.dump;
    }
  }

  state.tag = _tag;
  state.dump = '[' + _result + ']';
}

function writeBlockSequence(state, level, object, compact) {
  var _result = '',
      _tag    = state.tag,
      index,
      length;

  for (index = 0, length = object.length; index < length; index += 1) {
    // Write only valid elements.
    if (writeNode(state, level + 1, object[index], true, true)) {
      if (!compact || index !== 0) {
        _result += generateNextLine(state, level);
      }

      if (state.dump && CHAR_LINE_FEED === state.dump.charCodeAt(0)) {
        _result += '-';
      } else {
        _result += '- ';
      }

      _result += state.dump;
    }
  }

  state.tag = _tag;
  state.dump = _result || '[]'; // Empty sequence if no valid values.
}

function writeFlowMapping(state, level, object) {
  var _result       = '',
      _tag          = state.tag,
      objectKeyList = Object.keys(object),
      index,
      length,
      objectKey,
      objectValue,
      pairBuffer;

  for (index = 0, length = objectKeyList.length; index < length; index += 1) {

    pairBuffer = '';
    if (index !== 0) pairBuffer += ', ';

    if (state.condenseFlow) pairBuffer += '"';

    objectKey = objectKeyList[index];
    objectValue = object[objectKey];

    if (!writeNode(state, level, objectKey, false, false)) {
      continue; // Skip this pair because of invalid key;
    }

    if (state.dump.length > 1024) pairBuffer += '? ';

    pairBuffer += state.dump + (state.condenseFlow ? '"' : '') + ':' + (state.condenseFlow ? '' : ' ');

    if (!writeNode(state, level, objectValue, false, false)) {
      continue; // Skip this pair because of invalid value.
    }

    pairBuffer += state.dump;

    // Both key and value are valid.
    _result += pairBuffer;
  }

  state.tag = _tag;
  state.dump = '{' + _result + '}';
}

function writeBlockMapping(state, level, object, compact) {
  var _result       = '',
      _tag          = state.tag,
      objectKeyList = Object.keys(object),
      index,
      length,
      objectKey,
      objectValue,
      explicitPair,
      pairBuffer;

  // Allow sorting keys so that the output file is deterministic
  if (state.sortKeys === true) {
    // Default sorting
    objectKeyList.sort();
  } else if (typeof state.sortKeys === 'function') {
    // Custom sort function
    objectKeyList.sort(state.sortKeys);
  } else if (state.sortKeys) {
    // Something is wrong
    throw new YAMLException('sortKeys must be a boolean or a function');
  }

  for (index = 0, length = objectKeyList.length; index < length; index += 1) {
    pairBuffer = '';

    if (!compact || index !== 0) {
      pairBuffer += generateNextLine(state, level);
    }

    objectKey = objectKeyList[index];
    objectValue = object[objectKey];

    if (!writeNode(state, level + 1, objectKey, true, true, true)) {
      continue; // Skip this pair because of invalid key.
    }

    explicitPair = (state.tag !== null && state.tag !== '?') ||
                   (state.dump && state.dump.length > 1024);

    if (explicitPair) {
      if (state.dump && CHAR_LINE_FEED === state.dump.charCodeAt(0)) {
        pairBuffer += '?';
      } else {
        pairBuffer += '? ';
      }
    }

    pairBuffer += state.dump;

    if (explicitPair) {
      pairBuffer += generateNextLine(state, level);
    }

    if (!writeNode(state, level + 1, objectValue, true, explicitPair)) {
      continue; // Skip this pair because of invalid value.
    }

    if (state.dump && CHAR_LINE_FEED === state.dump.charCodeAt(0)) {
      pairBuffer += ':';
    } else {
      pairBuffer += ': ';
    }

    pairBuffer += state.dump;

    // Both key and value are valid.
    _result += pairBuffer;
  }

  state.tag = _tag;
  state.dump = _result || '{}'; // Empty mapping if no valid pairs.
}

function detectType(state, object, explicit) {
  var _result, typeList, index, length, type, style;

  typeList = explicit ? state.explicitTypes : state.implicitTypes;

  for (index = 0, length = typeList.length; index < length; index += 1) {
    type = typeList[index];

    if ((type.instanceOf  || type.predicate) &&
        (!type.instanceOf || ((typeof object === 'object') && (object instanceof type.instanceOf))) &&
        (!type.predicate  || type.predicate(object))) {

      state.tag = explicit ? type.tag : '?';

      if (type.represent) {
        style = state.styleMap[type.tag] || type.defaultStyle;

        if (_toString.call(type.represent) === '[object Function]') {
          _result = type.represent(object, style);
        } else if (_hasOwnProperty.call(type.represent, style)) {
          _result = type.represent[style](object, style);
        } else {
          throw new YAMLException('!<' + type.tag + '> tag resolver accepts not "' + style + '" style');
        }

        state.dump = _result;
      }

      return true;
    }
  }

  return false;
}

// Serializes `object` and writes it to global `result`.
// Returns true on success, or false on invalid object.
//
function writeNode(state, level, object, block, compact, iskey) {
  state.tag = null;
  state.dump = object;

  if (!detectType(state, object, false)) {
    detectType(state, object, true);
  }

  var type = _toString.call(state.dump);

  if (block) {
    block = (state.flowLevel < 0 || state.flowLevel > level);
  }

  var objectOrArray = type === '[object Object]' || type === '[object Array]',
      duplicateIndex,
      duplicate;

  if (objectOrArray) {
    duplicateIndex = state.duplicates.indexOf(object);
    duplicate = duplicateIndex !== -1;
  }

  if ((state.tag !== null && state.tag !== '?') || duplicate || (state.indent !== 2 && level > 0)) {
    compact = false;
  }

  if (duplicate && state.usedDuplicates[duplicateIndex]) {
    state.dump = '*ref_' + duplicateIndex;
  } else {
    if (objectOrArray && duplicate && !state.usedDuplicates[duplicateIndex]) {
      state.usedDuplicates[duplicateIndex] = true;
    }
    if (type === '[object Object]') {
      if (block && (Object.keys(state.dump).length !== 0)) {
        writeBlockMapping(state, level, state.dump, compact);
        if (duplicate) {
          state.dump = '&ref_' + duplicateIndex + state.dump;
        }
      } else {
        writeFlowMapping(state, level, state.dump);
        if (duplicate) {
          state.dump = '&ref_' + duplicateIndex + ' ' + state.dump;
        }
      }
    } else if (type === '[object Array]') {
      var arrayLevel = (state.noArrayIndent && (level > 0)) ? level - 1 : level;
      if (block && (state.dump.length !== 0)) {
        writeBlockSequence(state, arrayLevel, state.dump, compact);
        if (duplicate) {
          state.dump = '&ref_' + duplicateIndex + state.dump;
        }
      } else {
        writeFlowSequence(state, arrayLevel, state.dump);
        if (duplicate) {
          state.dump = '&ref_' + duplicateIndex + ' ' + state.dump;
        }
      }
    } else if (type === '[object String]') {
      if (state.tag !== '?') {
        writeScalar(state, state.dump, level, iskey);
      }
    } else {
      if (state.skipInvalid) return false;
      throw new YAMLException('unacceptable kind of an object to dump ' + type);
    }

    if (state.tag !== null && state.tag !== '?') {
      state.dump = '!<' + state.tag + '> ' + state.dump;
    }
  }

  return true;
}

function getDuplicateReferences(object, state) {
  var objects = [],
      duplicatesIndexes = [],
      index,
      length;

  inspectNode(object, objects, duplicatesIndexes);

  for (index = 0, length = duplicatesIndexes.length; index < length; index += 1) {
    state.duplicates.push(objects[duplicatesIndexes[index]]);
  }
  state.usedDuplicates = new Array(length);
}

function inspectNode(object, objects, duplicatesIndexes) {
  var objectKeyList,
      index,
      length;

  if (object !== null && typeof object === 'object') {
    index = objects.indexOf(object);
    if (index !== -1) {
      if (duplicatesIndexes.indexOf(index) === -1) {
        duplicatesIndexes.push(index);
      }
    } else {
      objects.push(object);

      if (Array.isArray(object)) {
        for (index = 0, length = object.length; index < length; index += 1) {
          inspectNode(object[index], objects, duplicatesIndexes);
        }
      } else {
        objectKeyList = Object.keys(object);

        for (index = 0, length = objectKeyList.length; index < length; index += 1) {
          inspectNode(object[objectKeyList[index]], objects, duplicatesIndexes);
        }
      }
    }
  }
}

function dump(input, options) {
  options = options || {};

  var state = new State(options);

  if (!state.noRefs) getDuplicateReferences(input, state);

  if (writeNode(state, 0, input, true, true)) return state.dump + '\n';

  return '';
}

function safeDump(input, options) {
  return dump(input, common.extend({ schema: DEFAULT_SAFE_SCHEMA }, options));
}

module.exports.dump     = dump;
module.exports.safeDump = safeDump;


/***/ }),

/***/ 5199:
/***/ ((module) => {

"use strict";
// YAML error class. http://stackoverflow.com/questions/8458984
//


function YAMLException(reason, mark) {
  // Super constructor
  Error.call(this);

  this.name = 'YAMLException';
  this.reason = reason;
  this.mark = mark;
  this.message = (this.reason || '(unknown reason)') + (this.mark ? ' ' + this.mark.toString() : '');

  // Include stack trace in error object
  if (Error.captureStackTrace) {
    // Chrome and NodeJS
    Error.captureStackTrace(this, this.constructor);
  } else {
    // FF, IE 10+ and Safari 6+. Fallback for others
    this.stack = (new Error()).stack || '';
  }
}


// Inherit from Error
YAMLException.prototype = Object.create(Error.prototype);
YAMLException.prototype.constructor = YAMLException;


YAMLException.prototype.toString = function toString(compact) {
  var result = this.name + ': ';

  result += this.reason || '(unknown reason)';

  if (!compact && this.mark) {
    result += ' ' + this.mark.toString();
  }

  return result;
};


module.exports = YAMLException;


/***/ }),

/***/ 5190:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";


/*eslint-disable max-len,no-use-before-define*/

var common              = __webpack_require__(9136);
var YAMLException       = __webpack_require__(5199);
var Mark                = __webpack_require__(5426);
var DEFAULT_SAFE_SCHEMA = __webpack_require__(8949);
var DEFAULT_FULL_SCHEMA = __webpack_require__(6874);


var _hasOwnProperty = Object.prototype.hasOwnProperty;


var CONTEXT_FLOW_IN   = 1;
var CONTEXT_FLOW_OUT  = 2;
var CONTEXT_BLOCK_IN  = 3;
var CONTEXT_BLOCK_OUT = 4;


var CHOMPING_CLIP  = 1;
var CHOMPING_STRIP = 2;
var CHOMPING_KEEP  = 3;


var PATTERN_NON_PRINTABLE         = /[\x00-\x08\x0B\x0C\x0E-\x1F\x7F-\x84\x86-\x9F\uFFFE\uFFFF]|[\uD800-\uDBFF](?![\uDC00-\uDFFF])|(?:[^\uD800-\uDBFF]|^)[\uDC00-\uDFFF]/;
var PATTERN_NON_ASCII_LINE_BREAKS = /[\x85\u2028\u2029]/;
var PATTERN_FLOW_INDICATORS       = /[,\[\]\{\}]/;
var PATTERN_TAG_HANDLE            = /^(?:!|!!|![a-z\-]+!)$/i;
var PATTERN_TAG_URI               = /^(?:!|[^,\[\]\{\}])(?:%[0-9a-f]{2}|[0-9a-z\-#;\/\?:@&=\+\$,_\.!~\*'\(\)\[\]])*$/i;


function _class(obj) { return Object.prototype.toString.call(obj); }

function is_EOL(c) {
  return (c === 0x0A/* LF */) || (c === 0x0D/* CR */);
}

function is_WHITE_SPACE(c) {
  return (c === 0x09/* Tab */) || (c === 0x20/* Space */);
}

function is_WS_OR_EOL(c) {
  return (c === 0x09/* Tab */) ||
         (c === 0x20/* Space */) ||
         (c === 0x0A/* LF */) ||
         (c === 0x0D/* CR */);
}

function is_FLOW_INDICATOR(c) {
  return c === 0x2C/* , */ ||
         c === 0x5B/* [ */ ||
         c === 0x5D/* ] */ ||
         c === 0x7B/* { */ ||
         c === 0x7D/* } */;
}

function fromHexCode(c) {
  var lc;

  if ((0x30/* 0 */ <= c) && (c <= 0x39/* 9 */)) {
    return c - 0x30;
  }

  /*eslint-disable no-bitwise*/
  lc = c | 0x20;

  if ((0x61/* a */ <= lc) && (lc <= 0x66/* f */)) {
    return lc - 0x61 + 10;
  }

  return -1;
}

function escapedHexLen(c) {
  if (c === 0x78/* x */) { return 2; }
  if (c === 0x75/* u */) { return 4; }
  if (c === 0x55/* U */) { return 8; }
  return 0;
}

function fromDecimalCode(c) {
  if ((0x30/* 0 */ <= c) && (c <= 0x39/* 9 */)) {
    return c - 0x30;
  }

  return -1;
}

function simpleEscapeSequence(c) {
  /* eslint-disable indent */
  return (c === 0x30/* 0 */) ? '\x00' :
        (c === 0x61/* a */) ? '\x07' :
        (c === 0x62/* b */) ? '\x08' :
        (c === 0x74/* t */) ? '\x09' :
        (c === 0x09/* Tab */) ? '\x09' :
        (c === 0x6E/* n */) ? '\x0A' :
        (c === 0x76/* v */) ? '\x0B' :
        (c === 0x66/* f */) ? '\x0C' :
        (c === 0x72/* r */) ? '\x0D' :
        (c === 0x65/* e */) ? '\x1B' :
        (c === 0x20/* Space */) ? ' ' :
        (c === 0x22/* " */) ? '\x22' :
        (c === 0x2F/* / */) ? '/' :
        (c === 0x5C/* \ */) ? '\x5C' :
        (c === 0x4E/* N */) ? '\x85' :
        (c === 0x5F/* _ */) ? '\xA0' :
        (c === 0x4C/* L */) ? '\u2028' :
        (c === 0x50/* P */) ? '\u2029' : '';
}

function charFromCodepoint(c) {
  if (c <= 0xFFFF) {
    return String.fromCharCode(c);
  }
  // Encode UTF-16 surrogate pair
  // https://en.wikipedia.org/wiki/UTF-16#Code_points_U.2B010000_to_U.2B10FFFF
  return String.fromCharCode(
    ((c - 0x010000) >> 10) + 0xD800,
    ((c - 0x010000) & 0x03FF) + 0xDC00
  );
}

var simpleEscapeCheck = new Array(256); // integer, for fast access
var simpleEscapeMap = new Array(256);
for (var i = 0; i < 256; i++) {
  simpleEscapeCheck[i] = simpleEscapeSequence(i) ? 1 : 0;
  simpleEscapeMap[i] = simpleEscapeSequence(i);
}


function State(input, options) {
  this.input = input;

  this.filename  = options['filename']  || null;
  this.schema    = options['schema']    || DEFAULT_FULL_SCHEMA;
  this.onWarning = options['onWarning'] || null;
  this.legacy    = options['legacy']    || false;
  this.json      = options['json']      || false;
  this.listener  = options['listener']  || null;

  this.implicitTypes = this.schema.compiledImplicit;
  this.typeMap       = this.schema.compiledTypeMap;

  this.length     = input.length;
  this.position   = 0;
  this.line       = 0;
  this.lineStart  = 0;
  this.lineIndent = 0;

  this.documents = [];

  /*
  this.version;
  this.checkLineBreaks;
  this.tagMap;
  this.anchorMap;
  this.tag;
  this.anchor;
  this.kind;
  this.result;*/

}


function generateError(state, message) {
  return new YAMLException(
    message,
    new Mark(state.filename, state.input, state.position, state.line, (state.position - state.lineStart)));
}

function throwError(state, message) {
  throw generateError(state, message);
}

function throwWarning(state, message) {
  if (state.onWarning) {
    state.onWarning.call(null, generateError(state, message));
  }
}


var directiveHandlers = {

  YAML: function handleYamlDirective(state, name, args) {

    var match, major, minor;

    if (state.version !== null) {
      throwError(state, 'duplication of %YAML directive');
    }

    if (args.length !== 1) {
      throwError(state, 'YAML directive accepts exactly one argument');
    }

    match = /^([0-9]+)\.([0-9]+)$/.exec(args[0]);

    if (match === null) {
      throwError(state, 'ill-formed argument of the YAML directive');
    }

    major = parseInt(match[1], 10);
    minor = parseInt(match[2], 10);

    if (major !== 1) {
      throwError(state, 'unacceptable YAML version of the document');
    }

    state.version = args[0];
    state.checkLineBreaks = (minor < 2);

    if (minor !== 1 && minor !== 2) {
      throwWarning(state, 'unsupported YAML version of the document');
    }
  },

  TAG: function handleTagDirective(state, name, args) {

    var handle, prefix;

    if (args.length !== 2) {
      throwError(state, 'TAG directive accepts exactly two arguments');
    }

    handle = args[0];
    prefix = args[1];

    if (!PATTERN_TAG_HANDLE.test(handle)) {
      throwError(state, 'ill-formed tag handle (first argument) of the TAG directive');
    }

    if (_hasOwnProperty.call(state.tagMap, handle)) {
      throwError(state, 'there is a previously declared suffix for "' + handle + '" tag handle');
    }

    if (!PATTERN_TAG_URI.test(prefix)) {
      throwError(state, 'ill-formed tag prefix (second argument) of the TAG directive');
    }

    state.tagMap[handle] = prefix;
  }
};


function captureSegment(state, start, end, checkJson) {
  var _position, _length, _character, _result;

  if (start < end) {
    _result = state.input.slice(start, end);

    if (checkJson) {
      for (_position = 0, _length = _result.length; _position < _length; _position += 1) {
        _character = _result.charCodeAt(_position);
        if (!(_character === 0x09 ||
              (0x20 <= _character && _character <= 0x10FFFF))) {
          throwError(state, 'expected valid JSON character');
        }
      }
    } else if (PATTERN_NON_PRINTABLE.test(_result)) {
      throwError(state, 'the stream contains non-printable characters');
    }

    state.result += _result;
  }
}

function mergeMappings(state, destination, source, overridableKeys) {
  var sourceKeys, key, index, quantity;

  if (!common.isObject(source)) {
    throwError(state, 'cannot merge mappings; the provided source object is unacceptable');
  }

  sourceKeys = Object.keys(source);

  for (index = 0, quantity = sourceKeys.length; index < quantity; index += 1) {
    key = sourceKeys[index];

    if (!_hasOwnProperty.call(destination, key)) {
      destination[key] = source[key];
      overridableKeys[key] = true;
    }
  }
}

function storeMappingPair(state, _result, overridableKeys, keyTag, keyNode, valueNode, startLine, startPos) {
  var index, quantity;

  // The output is a plain object here, so keys can only be strings.
  // We need to convert keyNode to a string, but doing so can hang the process
  // (deeply nested arrays that explode exponentially using aliases).
  if (Array.isArray(keyNode)) {
    keyNode = Array.prototype.slice.call(keyNode);

    for (index = 0, quantity = keyNode.length; index < quantity; index += 1) {
      if (Array.isArray(keyNode[index])) {
        throwError(state, 'nested arrays are not supported inside keys');
      }

      if (typeof keyNode === 'object' && _class(keyNode[index]) === '[object Object]') {
        keyNode[index] = '[object Object]';
      }
    }
  }

  // Avoid code execution in load() via toString property
  // (still use its own toString for arrays, timestamps,
  // and whatever user schema extensions happen to have @@toStringTag)
  if (typeof keyNode === 'object' && _class(keyNode) === '[object Object]') {
    keyNode = '[object Object]';
  }


  keyNode = String(keyNode);

  if (_result === null) {
    _result = {};
  }

  if (keyTag === 'tag:yaml.org,2002:merge') {
    if (Array.isArray(valueNode)) {
      for (index = 0, quantity = valueNode.length; index < quantity; index += 1) {
        mergeMappings(state, _result, valueNode[index], overridableKeys);
      }
    } else {
      mergeMappings(state, _result, valueNode, overridableKeys);
    }
  } else {
    if (!state.json &&
        !_hasOwnProperty.call(overridableKeys, keyNode) &&
        _hasOwnProperty.call(_result, keyNode)) {
      state.line = startLine || state.line;
      state.position = startPos || state.position;
      throwError(state, 'duplicated mapping key');
    }
    _result[keyNode] = valueNode;
    delete overridableKeys[keyNode];
  }

  return _result;
}

function readLineBreak(state) {
  var ch;

  ch = state.input.charCodeAt(state.position);

  if (ch === 0x0A/* LF */) {
    state.position++;
  } else if (ch === 0x0D/* CR */) {
    state.position++;
    if (state.input.charCodeAt(state.position) === 0x0A/* LF */) {
      state.position++;
    }
  } else {
    throwError(state, 'a line break is expected');
  }

  state.line += 1;
  state.lineStart = state.position;
}

function skipSeparationSpace(state, allowComments, checkIndent) {
  var lineBreaks = 0,
      ch = state.input.charCodeAt(state.position);

  while (ch !== 0) {
    while (is_WHITE_SPACE(ch)) {
      ch = state.input.charCodeAt(++state.position);
    }

    if (allowComments && ch === 0x23/* # */) {
      do {
        ch = state.input.charCodeAt(++state.position);
      } while (ch !== 0x0A/* LF */ && ch !== 0x0D/* CR */ && ch !== 0);
    }

    if (is_EOL(ch)) {
      readLineBreak(state);

      ch = state.input.charCodeAt(state.position);
      lineBreaks++;
      state.lineIndent = 0;

      while (ch === 0x20/* Space */) {
        state.lineIndent++;
        ch = state.input.charCodeAt(++state.position);
      }
    } else {
      break;
    }
  }

  if (checkIndent !== -1 && lineBreaks !== 0 && state.lineIndent < checkIndent) {
    throwWarning(state, 'deficient indentation');
  }

  return lineBreaks;
}

function testDocumentSeparator(state) {
  var _position = state.position,
      ch;

  ch = state.input.charCodeAt(_position);

  // Condition state.position === state.lineStart is tested
  // in parent on each call, for efficiency. No needs to test here again.
  if ((ch === 0x2D/* - */ || ch === 0x2E/* . */) &&
      ch === state.input.charCodeAt(_position + 1) &&
      ch === state.input.charCodeAt(_position + 2)) {

    _position += 3;

    ch = state.input.charCodeAt(_position);

    if (ch === 0 || is_WS_OR_EOL(ch)) {
      return true;
    }
  }

  return false;
}

function writeFoldedLines(state, count) {
  if (count === 1) {
    state.result += ' ';
  } else if (count > 1) {
    state.result += common.repeat('\n', count - 1);
  }
}


function readPlainScalar(state, nodeIndent, withinFlowCollection) {
  var preceding,
      following,
      captureStart,
      captureEnd,
      hasPendingContent,
      _line,
      _lineStart,
      _lineIndent,
      _kind = state.kind,
      _result = state.result,
      ch;

  ch = state.input.charCodeAt(state.position);

  if (is_WS_OR_EOL(ch)      ||
      is_FLOW_INDICATOR(ch) ||
      ch === 0x23/* # */    ||
      ch === 0x26/* & */    ||
      ch === 0x2A/* * */    ||
      ch === 0x21/* ! */    ||
      ch === 0x7C/* | */    ||
      ch === 0x3E/* > */    ||
      ch === 0x27/* ' */    ||
      ch === 0x22/* " */    ||
      ch === 0x25/* % */    ||
      ch === 0x40/* @ */    ||
      ch === 0x60/* ` */) {
    return false;
  }

  if (ch === 0x3F/* ? */ || ch === 0x2D/* - */) {
    following = state.input.charCodeAt(state.position + 1);

    if (is_WS_OR_EOL(following) ||
        withinFlowCollection && is_FLOW_INDICATOR(following)) {
      return false;
    }
  }

  state.kind = 'scalar';
  state.result = '';
  captureStart = captureEnd = state.position;
  hasPendingContent = false;

  while (ch !== 0) {
    if (ch === 0x3A/* : */) {
      following = state.input.charCodeAt(state.position + 1);

      if (is_WS_OR_EOL(following) ||
          withinFlowCollection && is_FLOW_INDICATOR(following)) {
        break;
      }

    } else if (ch === 0x23/* # */) {
      preceding = state.input.charCodeAt(state.position - 1);

      if (is_WS_OR_EOL(preceding)) {
        break;
      }

    } else if ((state.position === state.lineStart && testDocumentSeparator(state)) ||
               withinFlowCollection && is_FLOW_INDICATOR(ch)) {
      break;

    } else if (is_EOL(ch)) {
      _line = state.line;
      _lineStart = state.lineStart;
      _lineIndent = state.lineIndent;
      skipSeparationSpace(state, false, -1);

      if (state.lineIndent >= nodeIndent) {
        hasPendingContent = true;
        ch = state.input.charCodeAt(state.position);
        continue;
      } else {
        state.position = captureEnd;
        state.line = _line;
        state.lineStart = _lineStart;
        state.lineIndent = _lineIndent;
        break;
      }
    }

    if (hasPendingContent) {
      captureSegment(state, captureStart, captureEnd, false);
      writeFoldedLines(state, state.line - _line);
      captureStart = captureEnd = state.position;
      hasPendingContent = false;
    }

    if (!is_WHITE_SPACE(ch)) {
      captureEnd = state.position + 1;
    }

    ch = state.input.charCodeAt(++state.position);
  }

  captureSegment(state, captureStart, captureEnd, false);

  if (state.result) {
    return true;
  }

  state.kind = _kind;
  state.result = _result;
  return false;
}

function readSingleQuotedScalar(state, nodeIndent) {
  var ch,
      captureStart, captureEnd;

  ch = state.input.charCodeAt(state.position);

  if (ch !== 0x27/* ' */) {
    return false;
  }

  state.kind = 'scalar';
  state.result = '';
  state.position++;
  captureStart = captureEnd = state.position;

  while ((ch = state.input.charCodeAt(state.position)) !== 0) {
    if (ch === 0x27/* ' */) {
      captureSegment(state, captureStart, state.position, true);
      ch = state.input.charCodeAt(++state.position);

      if (ch === 0x27/* ' */) {
        captureStart = state.position;
        state.position++;
        captureEnd = state.position;
      } else {
        return true;
      }

    } else if (is_EOL(ch)) {
      captureSegment(state, captureStart, captureEnd, true);
      writeFoldedLines(state, skipSeparationSpace(state, false, nodeIndent));
      captureStart = captureEnd = state.position;

    } else if (state.position === state.lineStart && testDocumentSeparator(state)) {
      throwError(state, 'unexpected end of the document within a single quoted scalar');

    } else {
      state.position++;
      captureEnd = state.position;
    }
  }

  throwError(state, 'unexpected end of the stream within a single quoted scalar');
}

function readDoubleQuotedScalar(state, nodeIndent) {
  var captureStart,
      captureEnd,
      hexLength,
      hexResult,
      tmp,
      ch;

  ch = state.input.charCodeAt(state.position);

  if (ch !== 0x22/* " */) {
    return false;
  }

  state.kind = 'scalar';
  state.result = '';
  state.position++;
  captureStart = captureEnd = state.position;

  while ((ch = state.input.charCodeAt(state.position)) !== 0) {
    if (ch === 0x22/* " */) {
      captureSegment(state, captureStart, state.position, true);
      state.position++;
      return true;

    } else if (ch === 0x5C/* \ */) {
      captureSegment(state, captureStart, state.position, true);
      ch = state.input.charCodeAt(++state.position);

      if (is_EOL(ch)) {
        skipSeparationSpace(state, false, nodeIndent);

        // TODO: rework to inline fn with no type cast?
      } else if (ch < 256 && simpleEscapeCheck[ch]) {
        state.result += simpleEscapeMap[ch];
        state.position++;

      } else if ((tmp = escapedHexLen(ch)) > 0) {
        hexLength = tmp;
        hexResult = 0;

        for (; hexLength > 0; hexLength--) {
          ch = state.input.charCodeAt(++state.position);

          if ((tmp = fromHexCode(ch)) >= 0) {
            hexResult = (hexResult << 4) + tmp;

          } else {
            throwError(state, 'expected hexadecimal character');
          }
        }

        state.result += charFromCodepoint(hexResult);

        state.position++;

      } else {
        throwError(state, 'unknown escape sequence');
      }

      captureStart = captureEnd = state.position;

    } else if (is_EOL(ch)) {
      captureSegment(state, captureStart, captureEnd, true);
      writeFoldedLines(state, skipSeparationSpace(state, false, nodeIndent));
      captureStart = captureEnd = state.position;

    } else if (state.position === state.lineStart && testDocumentSeparator(state)) {
      throwError(state, 'unexpected end of the document within a double quoted scalar');

    } else {
      state.position++;
      captureEnd = state.position;
    }
  }

  throwError(state, 'unexpected end of the stream within a double quoted scalar');
}

function readFlowCollection(state, nodeIndent) {
  var readNext = true,
      _line,
      _tag     = state.tag,
      _result,
      _anchor  = state.anchor,
      following,
      terminator,
      isPair,
      isExplicitPair,
      isMapping,
      overridableKeys = {},
      keyNode,
      keyTag,
      valueNode,
      ch;

  ch = state.input.charCodeAt(state.position);

  if (ch === 0x5B/* [ */) {
    terminator = 0x5D;/* ] */
    isMapping = false;
    _result = [];
  } else if (ch === 0x7B/* { */) {
    terminator = 0x7D;/* } */
    isMapping = true;
    _result = {};
  } else {
    return false;
  }

  if (state.anchor !== null) {
    state.anchorMap[state.anchor] = _result;
  }

  ch = state.input.charCodeAt(++state.position);

  while (ch !== 0) {
    skipSeparationSpace(state, true, nodeIndent);

    ch = state.input.charCodeAt(state.position);

    if (ch === terminator) {
      state.position++;
      state.tag = _tag;
      state.anchor = _anchor;
      state.kind = isMapping ? 'mapping' : 'sequence';
      state.result = _result;
      return true;
    } else if (!readNext) {
      throwError(state, 'missed comma between flow collection entries');
    }

    keyTag = keyNode = valueNode = null;
    isPair = isExplicitPair = false;

    if (ch === 0x3F/* ? */) {
      following = state.input.charCodeAt(state.position + 1);

      if (is_WS_OR_EOL(following)) {
        isPair = isExplicitPair = true;
        state.position++;
        skipSeparationSpace(state, true, nodeIndent);
      }
    }

    _line = state.line;
    composeNode(state, nodeIndent, CONTEXT_FLOW_IN, false, true);
    keyTag = state.tag;
    keyNode = state.result;
    skipSeparationSpace(state, true, nodeIndent);

    ch = state.input.charCodeAt(state.position);

    if ((isExplicitPair || state.line === _line) && ch === 0x3A/* : */) {
      isPair = true;
      ch = state.input.charCodeAt(++state.position);
      skipSeparationSpace(state, true, nodeIndent);
      composeNode(state, nodeIndent, CONTEXT_FLOW_IN, false, true);
      valueNode = state.result;
    }

    if (isMapping) {
      storeMappingPair(state, _result, overridableKeys, keyTag, keyNode, valueNode);
    } else if (isPair) {
      _result.push(storeMappingPair(state, null, overridableKeys, keyTag, keyNode, valueNode));
    } else {
      _result.push(keyNode);
    }

    skipSeparationSpace(state, true, nodeIndent);

    ch = state.input.charCodeAt(state.position);

    if (ch === 0x2C/* , */) {
      readNext = true;
      ch = state.input.charCodeAt(++state.position);
    } else {
      readNext = false;
    }
  }

  throwError(state, 'unexpected end of the stream within a flow collection');
}

function readBlockScalar(state, nodeIndent) {
  var captureStart,
      folding,
      chomping       = CHOMPING_CLIP,
      didReadContent = false,
      detectedIndent = false,
      textIndent     = nodeIndent,
      emptyLines     = 0,
      atMoreIndented = false,
      tmp,
      ch;

  ch = state.input.charCodeAt(state.position);

  if (ch === 0x7C/* | */) {
    folding = false;
  } else if (ch === 0x3E/* > */) {
    folding = true;
  } else {
    return false;
  }

  state.kind = 'scalar';
  state.result = '';

  while (ch !== 0) {
    ch = state.input.charCodeAt(++state.position);

    if (ch === 0x2B/* + */ || ch === 0x2D/* - */) {
      if (CHOMPING_CLIP === chomping) {
        chomping = (ch === 0x2B/* + */) ? CHOMPING_KEEP : CHOMPING_STRIP;
      } else {
        throwError(state, 'repeat of a chomping mode identifier');
      }

    } else if ((tmp = fromDecimalCode(ch)) >= 0) {
      if (tmp === 0) {
        throwError(state, 'bad explicit indentation width of a block scalar; it cannot be less than one');
      } else if (!detectedIndent) {
        textIndent = nodeIndent + tmp - 1;
        detectedIndent = true;
      } else {
        throwError(state, 'repeat of an indentation width identifier');
      }

    } else {
      break;
    }
  }

  if (is_WHITE_SPACE(ch)) {
    do { ch = state.input.charCodeAt(++state.position); }
    while (is_WHITE_SPACE(ch));

    if (ch === 0x23/* # */) {
      do { ch = state.input.charCodeAt(++state.position); }
      while (!is_EOL(ch) && (ch !== 0));
    }
  }

  while (ch !== 0) {
    readLineBreak(state);
    state.lineIndent = 0;

    ch = state.input.charCodeAt(state.position);

    while ((!detectedIndent || state.lineIndent < textIndent) &&
           (ch === 0x20/* Space */)) {
      state.lineIndent++;
      ch = state.input.charCodeAt(++state.position);
    }

    if (!detectedIndent && state.lineIndent > textIndent) {
      textIndent = state.lineIndent;
    }

    if (is_EOL(ch)) {
      emptyLines++;
      continue;
    }

    // End of the scalar.
    if (state.lineIndent < textIndent) {

      // Perform the chomping.
      if (chomping === CHOMPING_KEEP) {
        state.result += common.repeat('\n', didReadContent ? 1 + emptyLines : emptyLines);
      } else if (chomping === CHOMPING_CLIP) {
        if (didReadContent) { // i.e. only if the scalar is not empty.
          state.result += '\n';
        }
      }

      // Break this `while` cycle and go to the funciton's epilogue.
      break;
    }

    // Folded style: use fancy rules to handle line breaks.
    if (folding) {

      // Lines starting with white space characters (more-indented lines) are not folded.
      if (is_WHITE_SPACE(ch)) {
        atMoreIndented = true;
        // except for the first content line (cf. Example 8.1)
        state.result += common.repeat('\n', didReadContent ? 1 + emptyLines : emptyLines);

      // End of more-indented block.
      } else if (atMoreIndented) {
        atMoreIndented = false;
        state.result += common.repeat('\n', emptyLines + 1);

      // Just one line break - perceive as the same line.
      } else if (emptyLines === 0) {
        if (didReadContent) { // i.e. only if we have already read some scalar content.
          state.result += ' ';
        }

      // Several line breaks - perceive as different lines.
      } else {
        state.result += common.repeat('\n', emptyLines);
      }

    // Literal style: just add exact number of line breaks between content lines.
    } else {
      // Keep all line breaks except the header line break.
      state.result += common.repeat('\n', didReadContent ? 1 + emptyLines : emptyLines);
    }

    didReadContent = true;
    detectedIndent = true;
    emptyLines = 0;
    captureStart = state.position;

    while (!is_EOL(ch) && (ch !== 0)) {
      ch = state.input.charCodeAt(++state.position);
    }

    captureSegment(state, captureStart, state.position, false);
  }

  return true;
}

function readBlockSequence(state, nodeIndent) {
  var _line,
      _tag      = state.tag,
      _anchor   = state.anchor,
      _result   = [],
      following,
      detected  = false,
      ch;

  if (state.anchor !== null) {
    state.anchorMap[state.anchor] = _result;
  }

  ch = state.input.charCodeAt(state.position);

  while (ch !== 0) {

    if (ch !== 0x2D/* - */) {
      break;
    }

    following = state.input.charCodeAt(state.position + 1);

    if (!is_WS_OR_EOL(following)) {
      break;
    }

    detected = true;
    state.position++;

    if (skipSeparationSpace(state, true, -1)) {
      if (state.lineIndent <= nodeIndent) {
        _result.push(null);
        ch = state.input.charCodeAt(state.position);
        continue;
      }
    }

    _line = state.line;
    composeNode(state, nodeIndent, CONTEXT_BLOCK_IN, false, true);
    _result.push(state.result);
    skipSeparationSpace(state, true, -1);

    ch = state.input.charCodeAt(state.position);

    if ((state.line === _line || state.lineIndent > nodeIndent) && (ch !== 0)) {
      throwError(state, 'bad indentation of a sequence entry');
    } else if (state.lineIndent < nodeIndent) {
      break;
    }
  }

  if (detected) {
    state.tag = _tag;
    state.anchor = _anchor;
    state.kind = 'sequence';
    state.result = _result;
    return true;
  }
  return false;
}

function readBlockMapping(state, nodeIndent, flowIndent) {
  var following,
      allowCompact,
      _line,
      _pos,
      _tag          = state.tag,
      _anchor       = state.anchor,
      _result       = {},
      overridableKeys = {},
      keyTag        = null,
      keyNode       = null,
      valueNode     = null,
      atExplicitKey = false,
      detected      = false,
      ch;

  if (state.anchor !== null) {
    state.anchorMap[state.anchor] = _result;
  }

  ch = state.input.charCodeAt(state.position);

  while (ch !== 0) {
    following = state.input.charCodeAt(state.position + 1);
    _line = state.line; // Save the current line.
    _pos = state.position;

    //
    // Explicit notation case. There are two separate blocks:
    // first for the key (denoted by "?") and second for the value (denoted by ":")
    //
    if ((ch === 0x3F/* ? */ || ch === 0x3A/* : */) && is_WS_OR_EOL(following)) {

      if (ch === 0x3F/* ? */) {
        if (atExplicitKey) {
          storeMappingPair(state, _result, overridableKeys, keyTag, keyNode, null);
          keyTag = keyNode = valueNode = null;
        }

        detected = true;
        atExplicitKey = true;
        allowCompact = true;

      } else if (atExplicitKey) {
        // i.e. 0x3A/* : */ === character after the explicit key.
        atExplicitKey = false;
        allowCompact = true;

      } else {
        throwError(state, 'incomplete explicit mapping pair; a key node is missed; or followed by a non-tabulated empty line');
      }

      state.position += 1;
      ch = following;

    //
    // Implicit notation case. Flow-style node as the key first, then ":", and the value.
    //
    } else if (composeNode(state, flowIndent, CONTEXT_FLOW_OUT, false, true)) {

      if (state.line === _line) {
        ch = state.input.charCodeAt(state.position);

        while (is_WHITE_SPACE(ch)) {
          ch = state.input.charCodeAt(++state.position);
        }

        if (ch === 0x3A/* : */) {
          ch = state.input.charCodeAt(++state.position);

          if (!is_WS_OR_EOL(ch)) {
            throwError(state, 'a whitespace character is expected after the key-value separator within a block mapping');
          }

          if (atExplicitKey) {
            storeMappingPair(state, _result, overridableKeys, keyTag, keyNode, null);
            keyTag = keyNode = valueNode = null;
          }

          detected = true;
          atExplicitKey = false;
          allowCompact = false;
          keyTag = state.tag;
          keyNode = state.result;

        } else if (detected) {
          throwError(state, 'can not read an implicit mapping pair; a colon is missed');

        } else {
          state.tag = _tag;
          state.anchor = _anchor;
          return true; // Keep the result of `composeNode`.
        }

      } else if (detected) {
        throwError(state, 'can not read a block mapping entry; a multiline key may not be an implicit key');

      } else {
        state.tag = _tag;
        state.anchor = _anchor;
        return true; // Keep the result of `composeNode`.
      }

    } else {
      break; // Reading is done. Go to the epilogue.
    }

    //
    // Common reading code for both explicit and implicit notations.
    //
    if (state.line === _line || state.lineIndent > nodeIndent) {
      if (composeNode(state, nodeIndent, CONTEXT_BLOCK_OUT, true, allowCompact)) {
        if (atExplicitKey) {
          keyNode = state.result;
        } else {
          valueNode = state.result;
        }
      }

      if (!atExplicitKey) {
        storeMappingPair(state, _result, overridableKeys, keyTag, keyNode, valueNode, _line, _pos);
        keyTag = keyNode = valueNode = null;
      }

      skipSeparationSpace(state, true, -1);
      ch = state.input.charCodeAt(state.position);
    }

    if (state.lineIndent > nodeIndent && (ch !== 0)) {
      throwError(state, 'bad indentation of a mapping entry');
    } else if (state.lineIndent < nodeIndent) {
      break;
    }
  }

  //
  // Epilogue.
  //

  // Special case: last mapping's node contains only the key in explicit notation.
  if (atExplicitKey) {
    storeMappingPair(state, _result, overridableKeys, keyTag, keyNode, null);
  }

  // Expose the resulting mapping.
  if (detected) {
    state.tag = _tag;
    state.anchor = _anchor;
    state.kind = 'mapping';
    state.result = _result;
  }

  return detected;
}

function readTagProperty(state) {
  var _position,
      isVerbatim = false,
      isNamed    = false,
      tagHandle,
      tagName,
      ch;

  ch = state.input.charCodeAt(state.position);

  if (ch !== 0x21/* ! */) return false;

  if (state.tag !== null) {
    throwError(state, 'duplication of a tag property');
  }

  ch = state.input.charCodeAt(++state.position);

  if (ch === 0x3C/* < */) {
    isVerbatim = true;
    ch = state.input.charCodeAt(++state.position);

  } else if (ch === 0x21/* ! */) {
    isNamed = true;
    tagHandle = '!!';
    ch = state.input.charCodeAt(++state.position);

  } else {
    tagHandle = '!';
  }

  _position = state.position;

  if (isVerbatim) {
    do { ch = state.input.charCodeAt(++state.position); }
    while (ch !== 0 && ch !== 0x3E/* > */);

    if (state.position < state.length) {
      tagName = state.input.slice(_position, state.position);
      ch = state.input.charCodeAt(++state.position);
    } else {
      throwError(state, 'unexpected end of the stream within a verbatim tag');
    }
  } else {
    while (ch !== 0 && !is_WS_OR_EOL(ch)) {

      if (ch === 0x21/* ! */) {
        if (!isNamed) {
          tagHandle = state.input.slice(_position - 1, state.position + 1);

          if (!PATTERN_TAG_HANDLE.test(tagHandle)) {
            throwError(state, 'named tag handle cannot contain such characters');
          }

          isNamed = true;
          _position = state.position + 1;
        } else {
          throwError(state, 'tag suffix cannot contain exclamation marks');
        }
      }

      ch = state.input.charCodeAt(++state.position);
    }

    tagName = state.input.slice(_position, state.position);

    if (PATTERN_FLOW_INDICATORS.test(tagName)) {
      throwError(state, 'tag suffix cannot contain flow indicator characters');
    }
  }

  if (tagName && !PATTERN_TAG_URI.test(tagName)) {
    throwError(state, 'tag name cannot contain such characters: ' + tagName);
  }

  if (isVerbatim) {
    state.tag = tagName;

  } else if (_hasOwnProperty.call(state.tagMap, tagHandle)) {
    state.tag = state.tagMap[tagHandle] + tagName;

  } else if (tagHandle === '!') {
    state.tag = '!' + tagName;

  } else if (tagHandle === '!!') {
    state.tag = 'tag:yaml.org,2002:' + tagName;

  } else {
    throwError(state, 'undeclared tag handle "' + tagHandle + '"');
  }

  return true;
}

function readAnchorProperty(state) {
  var _position,
      ch;

  ch = state.input.charCodeAt(state.position);

  if (ch !== 0x26/* & */) return false;

  if (state.anchor !== null) {
    throwError(state, 'duplication of an anchor property');
  }

  ch = state.input.charCodeAt(++state.position);
  _position = state.position;

  while (ch !== 0 && !is_WS_OR_EOL(ch) && !is_FLOW_INDICATOR(ch)) {
    ch = state.input.charCodeAt(++state.position);
  }

  if (state.position === _position) {
    throwError(state, 'name of an anchor node must contain at least one character');
  }

  state.anchor = state.input.slice(_position, state.position);
  return true;
}

function readAlias(state) {
  var _position, alias,
      ch;

  ch = state.input.charCodeAt(state.position);

  if (ch !== 0x2A/* * */) return false;

  ch = state.input.charCodeAt(++state.position);
  _position = state.position;

  while (ch !== 0 && !is_WS_OR_EOL(ch) && !is_FLOW_INDICATOR(ch)) {
    ch = state.input.charCodeAt(++state.position);
  }

  if (state.position === _position) {
    throwError(state, 'name of an alias node must contain at least one character');
  }

  alias = state.input.slice(_position, state.position);

  if (!state.anchorMap.hasOwnProperty(alias)) {
    throwError(state, 'unidentified alias "' + alias + '"');
  }

  state.result = state.anchorMap[alias];
  skipSeparationSpace(state, true, -1);
  return true;
}

function composeNode(state, parentIndent, nodeContext, allowToSeek, allowCompact) {
  var allowBlockStyles,
      allowBlockScalars,
      allowBlockCollections,
      indentStatus = 1, // 1: this>parent, 0: this=parent, -1: this<parent
      atNewLine  = false,
      hasContent = false,
      typeIndex,
      typeQuantity,
      type,
      flowIndent,
      blockIndent;

  if (state.listener !== null) {
    state.listener('open', state);
  }

  state.tag    = null;
  state.anchor = null;
  state.kind   = null;
  state.result = null;

  allowBlockStyles = allowBlockScalars = allowBlockCollections =
    CONTEXT_BLOCK_OUT === nodeContext ||
    CONTEXT_BLOCK_IN  === nodeContext;

  if (allowToSeek) {
    if (skipSeparationSpace(state, true, -1)) {
      atNewLine = true;

      if (state.lineIndent > parentIndent) {
        indentStatus = 1;
      } else if (state.lineIndent === parentIndent) {
        indentStatus = 0;
      } else if (state.lineIndent < parentIndent) {
        indentStatus = -1;
      }
    }
  }

  if (indentStatus === 1) {
    while (readTagProperty(state) || readAnchorProperty(state)) {
      if (skipSeparationSpace(state, true, -1)) {
        atNewLine = true;
        allowBlockCollections = allowBlockStyles;

        if (state.lineIndent > parentIndent) {
          indentStatus = 1;
        } else if (state.lineIndent === parentIndent) {
          indentStatus = 0;
        } else if (state.lineIndent < parentIndent) {
          indentStatus = -1;
        }
      } else {
        allowBlockCollections = false;
      }
    }
  }

  if (allowBlockCollections) {
    allowBlockCollections = atNewLine || allowCompact;
  }

  if (indentStatus === 1 || CONTEXT_BLOCK_OUT === nodeContext) {
    if (CONTEXT_FLOW_IN === nodeContext || CONTEXT_FLOW_OUT === nodeContext) {
      flowIndent = parentIndent;
    } else {
      flowIndent = parentIndent + 1;
    }

    blockIndent = state.position - state.lineStart;

    if (indentStatus === 1) {
      if (allowBlockCollections &&
          (readBlockSequence(state, blockIndent) ||
           readBlockMapping(state, blockIndent, flowIndent)) ||
          readFlowCollection(state, flowIndent)) {
        hasContent = true;
      } else {
        if ((allowBlockScalars && readBlockScalar(state, flowIndent)) ||
            readSingleQuotedScalar(state, flowIndent) ||
            readDoubleQuotedScalar(state, flowIndent)) {
          hasContent = true;

        } else if (readAlias(state)) {
          hasContent = true;

          if (state.tag !== null || state.anchor !== null) {
            throwError(state, 'alias node should not have any properties');
          }

        } else if (readPlainScalar(state, flowIndent, CONTEXT_FLOW_IN === nodeContext)) {
          hasContent = true;

          if (state.tag === null) {
            state.tag = '?';
          }
        }

        if (state.anchor !== null) {
          state.anchorMap[state.anchor] = state.result;
        }
      }
    } else if (indentStatus === 0) {
      // Special case: block sequences are allowed to have same indentation level as the parent.
      // http://www.yaml.org/spec/1.2/spec.html#id2799784
      hasContent = allowBlockCollections && readBlockSequence(state, blockIndent);
    }
  }

  if (state.tag !== null && state.tag !== '!') {
    if (state.tag === '?') {
      // Implicit resolving is not allowed for non-scalar types, and '?'
      // non-specific tag is only automatically assigned to plain scalars.
      //
      // We only need to check kind conformity in case user explicitly assigns '?'
      // tag, for example like this: "!<?> [0]"
      //
      if (state.result !== null && state.kind !== 'scalar') {
        throwError(state, 'unacceptable node kind for !<?> tag; it should be "scalar", not "' + state.kind + '"');
      }

      for (typeIndex = 0, typeQuantity = state.implicitTypes.length; typeIndex < typeQuantity; typeIndex += 1) {
        type = state.implicitTypes[typeIndex];

        if (type.resolve(state.result)) { // `state.result` updated in resolver if matched
          state.result = type.construct(state.result);
          state.tag = type.tag;
          if (state.anchor !== null) {
            state.anchorMap[state.anchor] = state.result;
          }
          break;
        }
      }
    } else if (_hasOwnProperty.call(state.typeMap[state.kind || 'fallback'], state.tag)) {
      type = state.typeMap[state.kind || 'fallback'][state.tag];

      if (state.result !== null && type.kind !== state.kind) {
        throwError(state, 'unacceptable node kind for !<' + state.tag + '> tag; it should be "' + type.kind + '", not "' + state.kind + '"');
      }

      if (!type.resolve(state.result)) { // `state.result` updated in resolver if matched
        throwError(state, 'cannot resolve a node with !<' + state.tag + '> explicit tag');
      } else {
        state.result = type.construct(state.result);
        if (state.anchor !== null) {
          state.anchorMap[state.anchor] = state.result;
        }
      }
    } else {
      throwError(state, 'unknown tag !<' + state.tag + '>');
    }
  }

  if (state.listener !== null) {
    state.listener('close', state);
  }
  return state.tag !== null ||  state.anchor !== null || hasContent;
}

function readDocument(state) {
  var documentStart = state.position,
      _position,
      directiveName,
      directiveArgs,
      hasDirectives = false,
      ch;

  state.version = null;
  state.checkLineBreaks = state.legacy;
  state.tagMap = {};
  state.anchorMap = {};

  while ((ch = state.input.charCodeAt(state.position)) !== 0) {
    skipSeparationSpace(state, true, -1);

    ch = state.input.charCodeAt(state.position);

    if (state.lineIndent > 0 || ch !== 0x25/* % */) {
      break;
    }

    hasDirectives = true;
    ch = state.input.charCodeAt(++state.position);
    _position = state.position;

    while (ch !== 0 && !is_WS_OR_EOL(ch)) {
      ch = state.input.charCodeAt(++state.position);
    }

    directiveName = state.input.slice(_position, state.position);
    directiveArgs = [];

    if (directiveName.length < 1) {
      throwError(state, 'directive name must not be less than one character in length');
    }

    while (ch !== 0) {
      while (is_WHITE_SPACE(ch)) {
        ch = state.input.charCodeAt(++state.position);
      }

      if (ch === 0x23/* # */) {
        do { ch = state.input.charCodeAt(++state.position); }
        while (ch !== 0 && !is_EOL(ch));
        break;
      }

      if (is_EOL(ch)) break;

      _position = state.position;

      while (ch !== 0 && !is_WS_OR_EOL(ch)) {
        ch = state.input.charCodeAt(++state.position);
      }

      directiveArgs.push(state.input.slice(_position, state.position));
    }

    if (ch !== 0) readLineBreak(state);

    if (_hasOwnProperty.call(directiveHandlers, directiveName)) {
      directiveHandlers[directiveName](state, directiveName, directiveArgs);
    } else {
      throwWarning(state, 'unknown document directive "' + directiveName + '"');
    }
  }

  skipSeparationSpace(state, true, -1);

  if (state.lineIndent === 0 &&
      state.input.charCodeAt(state.position)     === 0x2D/* - */ &&
      state.input.charCodeAt(state.position + 1) === 0x2D/* - */ &&
      state.input.charCodeAt(state.position + 2) === 0x2D/* - */) {
    state.position += 3;
    skipSeparationSpace(state, true, -1);

  } else if (hasDirectives) {
    throwError(state, 'directives end mark is expected');
  }

  composeNode(state, state.lineIndent - 1, CONTEXT_BLOCK_OUT, false, true);
  skipSeparationSpace(state, true, -1);

  if (state.checkLineBreaks &&
      PATTERN_NON_ASCII_LINE_BREAKS.test(state.input.slice(documentStart, state.position))) {
    throwWarning(state, 'non-ASCII line breaks are interpreted as content');
  }

  state.documents.push(state.result);

  if (state.position === state.lineStart && testDocumentSeparator(state)) {

    if (state.input.charCodeAt(state.position) === 0x2E/* . */) {
      state.position += 3;
      skipSeparationSpace(state, true, -1);
    }
    return;
  }

  if (state.position < (state.length - 1)) {
    throwError(state, 'end of the stream or a document separator is expected');
  } else {
    return;
  }
}


function loadDocuments(input, options) {
  input = String(input);
  options = options || {};

  if (input.length !== 0) {

    // Add tailing `\n` if not exists
    if (input.charCodeAt(input.length - 1) !== 0x0A/* LF */ &&
        input.charCodeAt(input.length - 1) !== 0x0D/* CR */) {
      input += '\n';
    }

    // Strip BOM
    if (input.charCodeAt(0) === 0xFEFF) {
      input = input.slice(1);
    }
  }

  var state = new State(input, options);

  var nullpos = input.indexOf('\0');

  if (nullpos !== -1) {
    state.position = nullpos;
    throwError(state, 'null byte is not allowed in input');
  }

  // Use 0 as string terminator. That significantly simplifies bounds check.
  state.input += '\0';

  while (state.input.charCodeAt(state.position) === 0x20/* Space */) {
    state.lineIndent += 1;
    state.position += 1;
  }

  while (state.position < (state.length - 1)) {
    readDocument(state);
  }

  return state.documents;
}


function loadAll(input, iterator, options) {
  if (iterator !== null && typeof iterator === 'object' && typeof options === 'undefined') {
    options = iterator;
    iterator = null;
  }

  var documents = loadDocuments(input, options);

  if (typeof iterator !== 'function') {
    return documents;
  }

  for (var index = 0, length = documents.length; index < length; index += 1) {
    iterator(documents[index]);
  }
}


function load(input, options) {
  var documents = loadDocuments(input, options);

  if (documents.length === 0) {
    /*eslint-disable no-undefined*/
    return undefined;
  } else if (documents.length === 1) {
    return documents[0];
  }
  throw new YAMLException('expected a single document in the stream, but found more');
}


function safeLoadAll(input, iterator, options) {
  if (typeof iterator === 'object' && iterator !== null && typeof options === 'undefined') {
    options = iterator;
    iterator = null;
  }

  return loadAll(input, iterator, common.extend({ schema: DEFAULT_SAFE_SCHEMA }, options));
}


function safeLoad(input, options) {
  return load(input, common.extend({ schema: DEFAULT_SAFE_SCHEMA }, options));
}


module.exports.loadAll     = loadAll;
module.exports.load        = load;
module.exports.safeLoadAll = safeLoadAll;
module.exports.safeLoad    = safeLoad;


/***/ }),

/***/ 5426:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";



var common = __webpack_require__(9136);


function Mark(name, buffer, position, line, column) {
  this.name     = name;
  this.buffer   = buffer;
  this.position = position;
  this.line     = line;
  this.column   = column;
}


Mark.prototype.getSnippet = function getSnippet(indent, maxLength) {
  var head, start, tail, end, snippet;

  if (!this.buffer) return null;

  indent = indent || 4;
  maxLength = maxLength || 75;

  head = '';
  start = this.position;

  while (start > 0 && '\x00\r\n\x85\u2028\u2029'.indexOf(this.buffer.charAt(start - 1)) === -1) {
    start -= 1;
    if (this.position - start > (maxLength / 2 - 1)) {
      head = ' ... ';
      start += 5;
      break;
    }
  }

  tail = '';
  end = this.position;

  while (end < this.buffer.length && '\x00\r\n\x85\u2028\u2029'.indexOf(this.buffer.charAt(end)) === -1) {
    end += 1;
    if (end - this.position > (maxLength / 2 - 1)) {
      tail = ' ... ';
      end -= 5;
      break;
    }
  }

  snippet = this.buffer.slice(start, end);

  return common.repeat(' ', indent) + head + snippet + tail + '\n' +
         common.repeat(' ', indent + this.position - start + head.length) + '^';
};


Mark.prototype.toString = function toString(compact) {
  var snippet, where = '';

  if (this.name) {
    where += 'in "' + this.name + '" ';
  }

  where += 'at line ' + (this.line + 1) + ', column ' + (this.column + 1);

  if (!compact) {
    snippet = this.getSnippet();

    if (snippet) {
      where += ':\n' + snippet;
    }
  }

  return where;
};


module.exports = Mark;


/***/ }),

/***/ 6514:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";


/*eslint-disable max-len*/

var common        = __webpack_require__(9136);
var YAMLException = __webpack_require__(5199);
var Type          = __webpack_require__(967);


function compileList(schema, name, result) {
  var exclude = [];

  schema.include.forEach(function (includedSchema) {
    result = compileList(includedSchema, name, result);
  });

  schema[name].forEach(function (currentType) {
    result.forEach(function (previousType, previousIndex) {
      if (previousType.tag === currentType.tag && previousType.kind === currentType.kind) {
        exclude.push(previousIndex);
      }
    });

    result.push(currentType);
  });

  return result.filter(function (type, index) {
    return exclude.indexOf(index) === -1;
  });
}


function compileMap(/* lists... */) {
  var result = {
        scalar: {},
        sequence: {},
        mapping: {},
        fallback: {}
      }, index, length;

  function collectType(type) {
    result[type.kind][type.tag] = result['fallback'][type.tag] = type;
  }

  for (index = 0, length = arguments.length; index < length; index += 1) {
    arguments[index].forEach(collectType);
  }
  return result;
}


function Schema(definition) {
  this.include  = definition.include  || [];
  this.implicit = definition.implicit || [];
  this.explicit = definition.explicit || [];

  this.implicit.forEach(function (type) {
    if (type.loadKind && type.loadKind !== 'scalar') {
      throw new YAMLException('There is a non-scalar type in the implicit list of a schema. Implicit resolving of such types is not supported.');
    }
  });

  this.compiledImplicit = compileList(this, 'implicit', []);
  this.compiledExplicit = compileList(this, 'explicit', []);
  this.compiledTypeMap  = compileMap(this.compiledImplicit, this.compiledExplicit);
}


Schema.DEFAULT = null;


Schema.create = function createSchema() {
  var schemas, types;

  switch (arguments.length) {
    case 1:
      schemas = Schema.DEFAULT;
      types = arguments[0];
      break;

    case 2:
      schemas = arguments[0];
      types = arguments[1];
      break;

    default:
      throw new YAMLException('Wrong number of arguments for Schema.create function');
  }

  schemas = common.toArray(schemas);
  types = common.toArray(types);

  if (!schemas.every(function (schema) { return schema instanceof Schema; })) {
    throw new YAMLException('Specified list of super schemas (or a single Schema object) contains a non-Schema object.');
  }

  if (!types.every(function (type) { return type instanceof Type; })) {
    throw new YAMLException('Specified list of YAML types (or a single Type object) contains a non-Type object.');
  }

  return new Schema({
    include: schemas,
    explicit: types
  });
};


module.exports = Schema;


/***/ }),

/***/ 2183:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
// Standard YAML's Core schema.
// http://www.yaml.org/spec/1.2/spec.html#id2804923
//
// NOTE: JS-YAML does not support schema-specific tag resolution restrictions.
// So, Core schema has no distinctions from JSON schema is JS-YAML.





var Schema = __webpack_require__(6514);


module.exports = new Schema({
  include: [
    __webpack_require__(1571)
  ]
});


/***/ }),

/***/ 6874:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
// JS-YAML's default schema for `load` function.
// It is not described in the YAML specification.
//
// This schema is based on JS-YAML's default safe schema and includes
// JavaScript-specific types: !!js/undefined, !!js/regexp and !!js/function.
//
// Also this schema is used as default base schema at `Schema.create` function.





var Schema = __webpack_require__(6514);


module.exports = Schema.DEFAULT = new Schema({
  include: [
    __webpack_require__(8949)
  ],
  explicit: [
    __webpack_require__(5914),
    __webpack_require__(9242),
    __webpack_require__(7278)
  ]
});


/***/ }),

/***/ 8949:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
// JS-YAML's default schema for `safeLoad` function.
// It is not described in the YAML specification.
//
// This schema is based on standard YAML's Core schema and includes most of
// extra types described at YAML tag repository. (http://yaml.org/type/)





var Schema = __webpack_require__(6514);


module.exports = new Schema({
  include: [
    __webpack_require__(2183)
  ],
  implicit: [
    __webpack_require__(3714),
    __webpack_require__(1393)
  ],
  explicit: [
    __webpack_require__(2551),
    __webpack_require__(6668),
    __webpack_require__(6039),
    __webpack_require__(9237)
  ]
});


/***/ }),

/***/ 6037:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
// Standard YAML's Failsafe schema.
// http://www.yaml.org/spec/1.2/spec.html#id2802346





var Schema = __webpack_require__(6514);


module.exports = new Schema({
  explicit: [
    __webpack_require__(2672),
    __webpack_require__(5490),
    __webpack_require__(1173)
  ]
});


/***/ }),

/***/ 1571:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
// Standard YAML's JSON schema.
// http://www.yaml.org/spec/1.2/spec.html#id2803231
//
// NOTE: JS-YAML does not support schema-specific tag resolution restrictions.
// So, this schema is not such strict as defined in the YAML specification.
// It allows numbers in binary notaion, use `Null` and `NULL` as `null`, etc.





var Schema = __webpack_require__(6514);


module.exports = new Schema({
  include: [
    __webpack_require__(6037)
  ],
  implicit: [
    __webpack_require__(5647),
    __webpack_require__(4675),
    __webpack_require__(9963),
    __webpack_require__(5564)
  ]
});


/***/ }),

/***/ 967:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";


var YAMLException = __webpack_require__(5199);

var TYPE_CONSTRUCTOR_OPTIONS = [
  'kind',
  'resolve',
  'construct',
  'instanceOf',
  'predicate',
  'represent',
  'defaultStyle',
  'styleAliases'
];

var YAML_NODE_KINDS = [
  'scalar',
  'sequence',
  'mapping'
];

function compileStyleAliases(map) {
  var result = {};

  if (map !== null) {
    Object.keys(map).forEach(function (style) {
      map[style].forEach(function (alias) {
        result[String(alias)] = style;
      });
    });
  }

  return result;
}

function Type(tag, options) {
  options = options || {};

  Object.keys(options).forEach(function (name) {
    if (TYPE_CONSTRUCTOR_OPTIONS.indexOf(name) === -1) {
      throw new YAMLException('Unknown option "' + name + '" is met in definition of "' + tag + '" YAML type.');
    }
  });

  // TODO: Add tag format check.
  this.tag          = tag;
  this.kind         = options['kind']         || null;
  this.resolve      = options['resolve']      || function () { return true; };
  this.construct    = options['construct']    || function (data) { return data; };
  this.instanceOf   = options['instanceOf']   || null;
  this.predicate    = options['predicate']    || null;
  this.represent    = options['represent']    || null;
  this.defaultStyle = options['defaultStyle'] || null;
  this.styleAliases = compileStyleAliases(options['styleAliases'] || null);

  if (YAML_NODE_KINDS.indexOf(this.kind) === -1) {
    throw new YAMLException('Unknown kind "' + this.kind + '" is specified for "' + tag + '" YAML type.');
  }
}

module.exports = Type;


/***/ }),

/***/ 2551:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";


/*eslint-disable no-bitwise*/

var NodeBuffer;

try {
  // A trick for browserified version, to not include `Buffer` shim
  var _require = require;
  NodeBuffer = _require('buffer').Buffer;
} catch (__) {}

var Type       = __webpack_require__(967);


// [ 64, 65, 66 ] -> [ padding, CR, LF ]
var BASE64_MAP = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=\n\r';


function resolveYamlBinary(data) {
  if (data === null) return false;

  var code, idx, bitlen = 0, max = data.length, map = BASE64_MAP;

  // Convert one by one.
  for (idx = 0; idx < max; idx++) {
    code = map.indexOf(data.charAt(idx));

    // Skip CR/LF
    if (code > 64) continue;

    // Fail on illegal characters
    if (code < 0) return false;

    bitlen += 6;
  }

  // If there are any bits left, source was corrupted
  return (bitlen % 8) === 0;
}

function constructYamlBinary(data) {
  var idx, tailbits,
      input = data.replace(/[\r\n=]/g, ''), // remove CR/LF & padding to simplify scan
      max = input.length,
      map = BASE64_MAP,
      bits = 0,
      result = [];

  // Collect by 6*4 bits (3 bytes)

  for (idx = 0; idx < max; idx++) {
    if ((idx % 4 === 0) && idx) {
      result.push((bits >> 16) & 0xFF);
      result.push((bits >> 8) & 0xFF);
      result.push(bits & 0xFF);
    }

    bits = (bits << 6) | map.indexOf(input.charAt(idx));
  }

  // Dump tail

  tailbits = (max % 4) * 6;

  if (tailbits === 0) {
    result.push((bits >> 16) & 0xFF);
    result.push((bits >> 8) & 0xFF);
    result.push(bits & 0xFF);
  } else if (tailbits === 18) {
    result.push((bits >> 10) & 0xFF);
    result.push((bits >> 2) & 0xFF);
  } else if (tailbits === 12) {
    result.push((bits >> 4) & 0xFF);
  }

  // Wrap into Buffer for NodeJS and leave Array for browser
  if (NodeBuffer) {
    // Support node 6.+ Buffer API when available
    return NodeBuffer.from ? NodeBuffer.from(result) : new NodeBuffer(result);
  }

  return result;
}

function representYamlBinary(object /*, style*/) {
  var result = '', bits = 0, idx, tail,
      max = object.length,
      map = BASE64_MAP;

  // Convert every three bytes to 4 ASCII characters.

  for (idx = 0; idx < max; idx++) {
    if ((idx % 3 === 0) && idx) {
      result += map[(bits >> 18) & 0x3F];
      result += map[(bits >> 12) & 0x3F];
      result += map[(bits >> 6) & 0x3F];
      result += map[bits & 0x3F];
    }

    bits = (bits << 8) + object[idx];
  }

  // Dump tail

  tail = max % 3;

  if (tail === 0) {
    result += map[(bits >> 18) & 0x3F];
    result += map[(bits >> 12) & 0x3F];
    result += map[(bits >> 6) & 0x3F];
    result += map[bits & 0x3F];
  } else if (tail === 2) {
    result += map[(bits >> 10) & 0x3F];
    result += map[(bits >> 4) & 0x3F];
    result += map[(bits << 2) & 0x3F];
    result += map[64];
  } else if (tail === 1) {
    result += map[(bits >> 2) & 0x3F];
    result += map[(bits << 4) & 0x3F];
    result += map[64];
    result += map[64];
  }

  return result;
}

function isBinary(object) {
  return NodeBuffer && NodeBuffer.isBuffer(object);
}

module.exports = new Type('tag:yaml.org,2002:binary', {
  kind: 'scalar',
  resolve: resolveYamlBinary,
  construct: constructYamlBinary,
  predicate: isBinary,
  represent: representYamlBinary
});


/***/ }),

/***/ 4675:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";


var Type = __webpack_require__(967);

function resolveYamlBoolean(data) {
  if (data === null) return false;

  var max = data.length;

  return (max === 4 && (data === 'true' || data === 'True' || data === 'TRUE')) ||
         (max === 5 && (data === 'false' || data === 'False' || data === 'FALSE'));
}

function constructYamlBoolean(data) {
  return data === 'true' ||
         data === 'True' ||
         data === 'TRUE';
}

function isBoolean(object) {
  return Object.prototype.toString.call(object) === '[object Boolean]';
}

module.exports = new Type('tag:yaml.org,2002:bool', {
  kind: 'scalar',
  resolve: resolveYamlBoolean,
  construct: constructYamlBoolean,
  predicate: isBoolean,
  represent: {
    lowercase: function (object) { return object ? 'true' : 'false'; },
    uppercase: function (object) { return object ? 'TRUE' : 'FALSE'; },
    camelcase: function (object) { return object ? 'True' : 'False'; }
  },
  defaultStyle: 'lowercase'
});


/***/ }),

/***/ 5564:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";


var common = __webpack_require__(9136);
var Type   = __webpack_require__(967);

var YAML_FLOAT_PATTERN = new RegExp(
  // 2.5e4, 2.5 and integers
  '^(?:[-+]?(?:0|[1-9][0-9_]*)(?:\\.[0-9_]*)?(?:[eE][-+]?[0-9]+)?' +
  // .2e4, .2
  // special case, seems not from spec
  '|\\.[0-9_]+(?:[eE][-+]?[0-9]+)?' +
  // 20:59
  '|[-+]?[0-9][0-9_]*(?::[0-5]?[0-9])+\\.[0-9_]*' +
  // .inf
  '|[-+]?\\.(?:inf|Inf|INF)' +
  // .nan
  '|\\.(?:nan|NaN|NAN))$');

function resolveYamlFloat(data) {
  if (data === null) return false;

  if (!YAML_FLOAT_PATTERN.test(data) ||
      // Quick hack to not allow integers end with `_`
      // Probably should update regexp & check speed
      data[data.length - 1] === '_') {
    return false;
  }

  return true;
}

function constructYamlFloat(data) {
  var value, sign, base, digits;

  value  = data.replace(/_/g, '').toLowerCase();
  sign   = value[0] === '-' ? -1 : 1;
  digits = [];

  if ('+-'.indexOf(value[0]) >= 0) {
    value = value.slice(1);
  }

  if (value === '.inf') {
    return (sign === 1) ? Number.POSITIVE_INFINITY : Number.NEGATIVE_INFINITY;

  } else if (value === '.nan') {
    return NaN;

  } else if (value.indexOf(':') >= 0) {
    value.split(':').forEach(function (v) {
      digits.unshift(parseFloat(v, 10));
    });

    value = 0.0;
    base = 1;

    digits.forEach(function (d) {
      value += d * base;
      base *= 60;
    });

    return sign * value;

  }
  return sign * parseFloat(value, 10);
}


var SCIENTIFIC_WITHOUT_DOT = /^[-+]?[0-9]+e/;

function representYamlFloat(object, style) {
  var res;

  if (isNaN(object)) {
    switch (style) {
      case 'lowercase': return '.nan';
      case 'uppercase': return '.NAN';
      case 'camelcase': return '.NaN';
    }
  } else if (Number.POSITIVE_INFINITY === object) {
    switch (style) {
      case 'lowercase': return '.inf';
      case 'uppercase': return '.INF';
      case 'camelcase': return '.Inf';
    }
  } else if (Number.NEGATIVE_INFINITY === object) {
    switch (style) {
      case 'lowercase': return '-.inf';
      case 'uppercase': return '-.INF';
      case 'camelcase': return '-.Inf';
    }
  } else if (common.isNegativeZero(object)) {
    return '-0.0';
  }

  res = object.toString(10);

  // JS stringifier can build scientific format without dots: 5e-100,
  // while YAML requres dot: 5.e-100. Fix it with simple hack

  return SCIENTIFIC_WITHOUT_DOT.test(res) ? res.replace('e', '.e') : res;
}

function isFloat(object) {
  return (Object.prototype.toString.call(object) === '[object Number]') &&
         (object % 1 !== 0 || common.isNegativeZero(object));
}

module.exports = new Type('tag:yaml.org,2002:float', {
  kind: 'scalar',
  resolve: resolveYamlFloat,
  construct: constructYamlFloat,
  predicate: isFloat,
  represent: representYamlFloat,
  defaultStyle: 'lowercase'
});


/***/ }),

/***/ 9963:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";


var common = __webpack_require__(9136);
var Type   = __webpack_require__(967);

function isHexCode(c) {
  return ((0x30/* 0 */ <= c) && (c <= 0x39/* 9 */)) ||
         ((0x41/* A */ <= c) && (c <= 0x46/* F */)) ||
         ((0x61/* a */ <= c) && (c <= 0x66/* f */));
}

function isOctCode(c) {
  return ((0x30/* 0 */ <= c) && (c <= 0x37/* 7 */));
}

function isDecCode(c) {
  return ((0x30/* 0 */ <= c) && (c <= 0x39/* 9 */));
}

function resolveYamlInteger(data) {
  if (data === null) return false;

  var max = data.length,
      index = 0,
      hasDigits = false,
      ch;

  if (!max) return false;

  ch = data[index];

  // sign
  if (ch === '-' || ch === '+') {
    ch = data[++index];
  }

  if (ch === '0') {
    // 0
    if (index + 1 === max) return true;
    ch = data[++index];

    // base 2, base 8, base 16

    if (ch === 'b') {
      // base 2
      index++;

      for (; index < max; index++) {
        ch = data[index];
        if (ch === '_') continue;
        if (ch !== '0' && ch !== '1') return false;
        hasDigits = true;
      }
      return hasDigits && ch !== '_';
    }


    if (ch === 'x') {
      // base 16
      index++;

      for (; index < max; index++) {
        ch = data[index];
        if (ch === '_') continue;
        if (!isHexCode(data.charCodeAt(index))) return false;
        hasDigits = true;
      }
      return hasDigits && ch !== '_';
    }

    // base 8
    for (; index < max; index++) {
      ch = data[index];
      if (ch === '_') continue;
      if (!isOctCode(data.charCodeAt(index))) return false;
      hasDigits = true;
    }
    return hasDigits && ch !== '_';
  }

  // base 10 (except 0) or base 60

  // value should not start with `_`;
  if (ch === '_') return false;

  for (; index < max; index++) {
    ch = data[index];
    if (ch === '_') continue;
    if (ch === ':') break;
    if (!isDecCode(data.charCodeAt(index))) {
      return false;
    }
    hasDigits = true;
  }

  // Should have digits and should not end with `_`
  if (!hasDigits || ch === '_') return false;

  // if !base60 - done;
  if (ch !== ':') return true;

  // base60 almost not used, no needs to optimize
  return /^(:[0-5]?[0-9])+$/.test(data.slice(index));
}

function constructYamlInteger(data) {
  var value = data, sign = 1, ch, base, digits = [];

  if (value.indexOf('_') !== -1) {
    value = value.replace(/_/g, '');
  }

  ch = value[0];

  if (ch === '-' || ch === '+') {
    if (ch === '-') sign = -1;
    value = value.slice(1);
    ch = value[0];
  }

  if (value === '0') return 0;

  if (ch === '0') {
    if (value[1] === 'b') return sign * parseInt(value.slice(2), 2);
    if (value[1] === 'x') return sign * parseInt(value, 16);
    return sign * parseInt(value, 8);
  }

  if (value.indexOf(':') !== -1) {
    value.split(':').forEach(function (v) {
      digits.unshift(parseInt(v, 10));
    });

    value = 0;
    base = 1;

    digits.forEach(function (d) {
      value += (d * base);
      base *= 60;
    });

    return sign * value;

  }

  return sign * parseInt(value, 10);
}

function isInteger(object) {
  return (Object.prototype.toString.call(object)) === '[object Number]' &&
         (object % 1 === 0 && !common.isNegativeZero(object));
}

module.exports = new Type('tag:yaml.org,2002:int', {
  kind: 'scalar',
  resolve: resolveYamlInteger,
  construct: constructYamlInteger,
  predicate: isInteger,
  represent: {
    binary:      function (obj) { return obj >= 0 ? '0b' + obj.toString(2) : '-0b' + obj.toString(2).slice(1); },
    octal:       function (obj) { return obj >= 0 ? '0'  + obj.toString(8) : '-0'  + obj.toString(8).slice(1); },
    decimal:     function (obj) { return obj.toString(10); },
    /* eslint-disable max-len */
    hexadecimal: function (obj) { return obj >= 0 ? '0x' + obj.toString(16).toUpperCase() :  '-0x' + obj.toString(16).toUpperCase().slice(1); }
  },
  defaultStyle: 'decimal',
  styleAliases: {
    binary:      [ 2,  'bin' ],
    octal:       [ 8,  'oct' ],
    decimal:     [ 10, 'dec' ],
    hexadecimal: [ 16, 'hex' ]
  }
});


/***/ }),

/***/ 7278:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";


var esprima;

// Browserified version does not have esprima
//
// 1. For node.js just require module as deps
// 2. For browser try to require mudule via external AMD system.
//    If not found - try to fallback to window.esprima. If not
//    found too - then fail to parse.
//
try {
  // workaround to exclude package from browserify list.
  var _require = require;
  esprima = _require('esprima');
} catch (_) {
  /* eslint-disable no-redeclare */
  /* global window */
  if (typeof window !== 'undefined') esprima = window.esprima;
}

var Type = __webpack_require__(967);

function resolveJavascriptFunction(data) {
  if (data === null) return false;

  try {
    var source = '(' + data + ')',
        ast    = esprima.parse(source, { range: true });

    if (ast.type                    !== 'Program'             ||
        ast.body.length             !== 1                     ||
        ast.body[0].type            !== 'ExpressionStatement' ||
        (ast.body[0].expression.type !== 'ArrowFunctionExpression' &&
          ast.body[0].expression.type !== 'FunctionExpression')) {
      return false;
    }

    return true;
  } catch (err) {
    return false;
  }
}

function constructJavascriptFunction(data) {
  /*jslint evil:true*/

  var source = '(' + data + ')',
      ast    = esprima.parse(source, { range: true }),
      params = [],
      body;

  if (ast.type                    !== 'Program'             ||
      ast.body.length             !== 1                     ||
      ast.body[0].type            !== 'ExpressionStatement' ||
      (ast.body[0].expression.type !== 'ArrowFunctionExpression' &&
        ast.body[0].expression.type !== 'FunctionExpression')) {
    throw new Error('Failed to resolve function');
  }

  ast.body[0].expression.params.forEach(function (param) {
    params.push(param.name);
  });

  body = ast.body[0].expression.body.range;

  // Esprima's ranges include the first '{' and the last '}' characters on
  // function expressions. So cut them out.
  if (ast.body[0].expression.body.type === 'BlockStatement') {
    /*eslint-disable no-new-func*/
    return new Function(params, source.slice(body[0] + 1, body[1] - 1));
  }
  // ES6 arrow functions can omit the BlockStatement. In that case, just return
  // the body.
  /*eslint-disable no-new-func*/
  return new Function(params, 'return ' + source.slice(body[0], body[1]));
}

function representJavascriptFunction(object /*, style*/) {
  return object.toString();
}

function isFunction(object) {
  return Object.prototype.toString.call(object) === '[object Function]';
}

module.exports = new Type('tag:yaml.org,2002:js/function', {
  kind: 'scalar',
  resolve: resolveJavascriptFunction,
  construct: constructJavascriptFunction,
  predicate: isFunction,
  represent: representJavascriptFunction
});


/***/ }),

/***/ 9242:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";


var Type = __webpack_require__(967);

function resolveJavascriptRegExp(data) {
  if (data === null) return false;
  if (data.length === 0) return false;

  var regexp = data,
      tail   = /\/([gim]*)$/.exec(data),
      modifiers = '';

  // if regexp starts with '/' it can have modifiers and must be properly closed
  // `/foo/gim` - modifiers tail can be maximum 3 chars
  if (regexp[0] === '/') {
    if (tail) modifiers = tail[1];

    if (modifiers.length > 3) return false;
    // if expression starts with /, is should be properly terminated
    if (regexp[regexp.length - modifiers.length - 1] !== '/') return false;
  }

  return true;
}

function constructJavascriptRegExp(data) {
  var regexp = data,
      tail   = /\/([gim]*)$/.exec(data),
      modifiers = '';

  // `/foo/gim` - tail can be maximum 4 chars
  if (regexp[0] === '/') {
    if (tail) modifiers = tail[1];
    regexp = regexp.slice(1, regexp.length - modifiers.length - 1);
  }

  return new RegExp(regexp, modifiers);
}

function representJavascriptRegExp(object /*, style*/) {
  var result = '/' + object.source + '/';

  if (object.global) result += 'g';
  if (object.multiline) result += 'm';
  if (object.ignoreCase) result += 'i';

  return result;
}

function isRegExp(object) {
  return Object.prototype.toString.call(object) === '[object RegExp]';
}

module.exports = new Type('tag:yaml.org,2002:js/regexp', {
  kind: 'scalar',
  resolve: resolveJavascriptRegExp,
  construct: constructJavascriptRegExp,
  predicate: isRegExp,
  represent: representJavascriptRegExp
});


/***/ }),

/***/ 5914:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";


var Type = __webpack_require__(967);

function resolveJavascriptUndefined() {
  return true;
}

function constructJavascriptUndefined() {
  /*eslint-disable no-undefined*/
  return undefined;
}

function representJavascriptUndefined() {
  return '';
}

function isUndefined(object) {
  return typeof object === 'undefined';
}

module.exports = new Type('tag:yaml.org,2002:js/undefined', {
  kind: 'scalar',
  resolve: resolveJavascriptUndefined,
  construct: constructJavascriptUndefined,
  predicate: isUndefined,
  represent: representJavascriptUndefined
});


/***/ }),

/***/ 1173:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";


var Type = __webpack_require__(967);

module.exports = new Type('tag:yaml.org,2002:map', {
  kind: 'mapping',
  construct: function (data) { return data !== null ? data : {}; }
});


/***/ }),

/***/ 1393:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";


var Type = __webpack_require__(967);

function resolveYamlMerge(data) {
  return data === '<<' || data === null;
}

module.exports = new Type('tag:yaml.org,2002:merge', {
  kind: 'scalar',
  resolve: resolveYamlMerge
});


/***/ }),

/***/ 5647:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";


var Type = __webpack_require__(967);

function resolveYamlNull(data) {
  if (data === null) return true;

  var max = data.length;

  return (max === 1 && data === '~') ||
         (max === 4 && (data === 'null' || data === 'Null' || data === 'NULL'));
}

function constructYamlNull() {
  return null;
}

function isNull(object) {
  return object === null;
}

module.exports = new Type('tag:yaml.org,2002:null', {
  kind: 'scalar',
  resolve: resolveYamlNull,
  construct: constructYamlNull,
  predicate: isNull,
  represent: {
    canonical: function () { return '~';    },
    lowercase: function () { return 'null'; },
    uppercase: function () { return 'NULL'; },
    camelcase: function () { return 'Null'; }
  },
  defaultStyle: 'lowercase'
});


/***/ }),

/***/ 6668:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";


var Type = __webpack_require__(967);

var _hasOwnProperty = Object.prototype.hasOwnProperty;
var _toString       = Object.prototype.toString;

function resolveYamlOmap(data) {
  if (data === null) return true;

  var objectKeys = [], index, length, pair, pairKey, pairHasKey,
      object = data;

  for (index = 0, length = object.length; index < length; index += 1) {
    pair = object[index];
    pairHasKey = false;

    if (_toString.call(pair) !== '[object Object]') return false;

    for (pairKey in pair) {
      if (_hasOwnProperty.call(pair, pairKey)) {
        if (!pairHasKey) pairHasKey = true;
        else return false;
      }
    }

    if (!pairHasKey) return false;

    if (objectKeys.indexOf(pairKey) === -1) objectKeys.push(pairKey);
    else return false;
  }

  return true;
}

function constructYamlOmap(data) {
  return data !== null ? data : [];
}

module.exports = new Type('tag:yaml.org,2002:omap', {
  kind: 'sequence',
  resolve: resolveYamlOmap,
  construct: constructYamlOmap
});


/***/ }),

/***/ 6039:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";


var Type = __webpack_require__(967);

var _toString = Object.prototype.toString;

function resolveYamlPairs(data) {
  if (data === null) return true;

  var index, length, pair, keys, result,
      object = data;

  result = new Array(object.length);

  for (index = 0, length = object.length; index < length; index += 1) {
    pair = object[index];

    if (_toString.call(pair) !== '[object Object]') return false;

    keys = Object.keys(pair);

    if (keys.length !== 1) return false;

    result[index] = [ keys[0], pair[keys[0]] ];
  }

  return true;
}

function constructYamlPairs(data) {
  if (data === null) return [];

  var index, length, pair, keys, result,
      object = data;

  result = new Array(object.length);

  for (index = 0, length = object.length; index < length; index += 1) {
    pair = object[index];

    keys = Object.keys(pair);

    result[index] = [ keys[0], pair[keys[0]] ];
  }

  return result;
}

module.exports = new Type('tag:yaml.org,2002:pairs', {
  kind: 'sequence',
  resolve: resolveYamlPairs,
  construct: constructYamlPairs
});


/***/ }),

/***/ 5490:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";


var Type = __webpack_require__(967);

module.exports = new Type('tag:yaml.org,2002:seq', {
  kind: 'sequence',
  construct: function (data) { return data !== null ? data : []; }
});


/***/ }),

/***/ 9237:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";


var Type = __webpack_require__(967);

var _hasOwnProperty = Object.prototype.hasOwnProperty;

function resolveYamlSet(data) {
  if (data === null) return true;

  var key, object = data;

  for (key in object) {
    if (_hasOwnProperty.call(object, key)) {
      if (object[key] !== null) return false;
    }
  }

  return true;
}

function constructYamlSet(data) {
  return data !== null ? data : {};
}

module.exports = new Type('tag:yaml.org,2002:set', {
  kind: 'mapping',
  resolve: resolveYamlSet,
  construct: constructYamlSet
});


/***/ }),

/***/ 2672:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";


var Type = __webpack_require__(967);

module.exports = new Type('tag:yaml.org,2002:str', {
  kind: 'scalar',
  construct: function (data) { return data !== null ? data : ''; }
});


/***/ }),

/***/ 3714:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";


var Type = __webpack_require__(967);

var YAML_DATE_REGEXP = new RegExp(
  '^([0-9][0-9][0-9][0-9])'          + // [1] year
  '-([0-9][0-9])'                    + // [2] month
  '-([0-9][0-9])$');                   // [3] day

var YAML_TIMESTAMP_REGEXP = new RegExp(
  '^([0-9][0-9][0-9][0-9])'          + // [1] year
  '-([0-9][0-9]?)'                   + // [2] month
  '-([0-9][0-9]?)'                   + // [3] day
  '(?:[Tt]|[ \\t]+)'                 + // ...
  '([0-9][0-9]?)'                    + // [4] hour
  ':([0-9][0-9])'                    + // [5] minute
  ':([0-9][0-9])'                    + // [6] second
  '(?:\\.([0-9]*))?'                 + // [7] fraction
  '(?:[ \\t]*(Z|([-+])([0-9][0-9]?)' + // [8] tz [9] tz_sign [10] tz_hour
  '(?::([0-9][0-9]))?))?$');           // [11] tz_minute

function resolveYamlTimestamp(data) {
  if (data === null) return false;
  if (YAML_DATE_REGEXP.exec(data) !== null) return true;
  if (YAML_TIMESTAMP_REGEXP.exec(data) !== null) return true;
  return false;
}

function constructYamlTimestamp(data) {
  var match, year, month, day, hour, minute, second, fraction = 0,
      delta = null, tz_hour, tz_minute, date;

  match = YAML_DATE_REGEXP.exec(data);
  if (match === null) match = YAML_TIMESTAMP_REGEXP.exec(data);

  if (match === null) throw new Error('Date resolve error');

  // match: [1] year [2] month [3] day

  year = +(match[1]);
  month = +(match[2]) - 1; // JS month starts with 0
  day = +(match[3]);

  if (!match[4]) { // no hour
    return new Date(Date.UTC(year, month, day));
  }

  // match: [4] hour [5] minute [6] second [7] fraction

  hour = +(match[4]);
  minute = +(match[5]);
  second = +(match[6]);

  if (match[7]) {
    fraction = match[7].slice(0, 3);
    while (fraction.length < 3) { // milli-seconds
      fraction += '0';
    }
    fraction = +fraction;
  }

  // match: [8] tz [9] tz_sign [10] tz_hour [11] tz_minute

  if (match[9]) {
    tz_hour = +(match[10]);
    tz_minute = +(match[11] || 0);
    delta = (tz_hour * 60 + tz_minute) * 60000; // delta in mili-seconds
    if (match[9] === '-') delta = -delta;
  }

  date = new Date(Date.UTC(year, month, day, hour, minute, second, fraction));

  if (delta) date.setTime(date.getTime() - delta);

  return date;
}

function representYamlTimestamp(object /*, style*/) {
  return object.toISOString();
}

module.exports = new Type('tag:yaml.org,2002:timestamp', {
  kind: 'scalar',
  resolve: resolveYamlTimestamp,
  construct: constructYamlTimestamp,
  instanceOf: Date,
  represent: representYamlTimestamp
});


/***/ }),

/***/ 5171:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
/**
 * line-column - Convert efficiently index to/from line-column in a string
 * @module  lineColumn
 * @license MIT
 */


var isArray  = __webpack_require__(893);
var isObject = __webpack_require__(8310);
var slice = Array.prototype.slice;

module.exports = LineColumnFinder;

/**
 * Finder for index and line-column from given string.
 *
 * You can call this without `new` operator as it returns an instance anyway.
 *
 * @class
 * @param {string} str - A string to be parsed.
 * @param {Object|number} [options] - Options.
 *     This can be an index in the string for shorthand of `lineColumn(str, index)`.
 * @param {number} [options.origin=1] - The origin value of line and column.
 */
function LineColumnFinder(str, options) {
  if (!(this instanceof LineColumnFinder)) {
    if (typeof options === "number") {
      return (new LineColumnFinder(str)).fromIndex(options);
    }
    return new LineColumnFinder(str, options);
  }

  this.str = str || "";
  this.lineToIndex = buildLineToIndex(this.str);

  options = options || {};
  this.origin = typeof options.origin === "undefined" ? 1 : options.origin;
}

/**
 * Find line and column from index in the string.
 *
 * @param  {number} index - Index in the string. (0-origin)
 * @return {Object|null}
 *     Found line number and column number in object `{ line: X, col: Y }`.
 *     If the given index is out of range, it returns `null`.
 */
LineColumnFinder.prototype.fromIndex = function (index) {
  if (index < 0 || index >= this.str.length || isNaN(index)) {
    return null;
  }

  var line = findLowerIndexInRangeArray(index, this.lineToIndex);
  return {
    line: line + this.origin,
    col:  index - this.lineToIndex[line] + this.origin
  };
}

/**
 * Find index from line and column in the string.
 *
 * @param  {number|Object|Array} line - Line number in the string.
 *     This can be an Object of `{ line: X, col: Y }`, or
 *     an Array of `[line, col]`.
 * @param  {number} [column] - Column number in the string.
 *     This must be omitted or undefined when Object or Array is given
 *     to the first argument.
 * @return {number}
 *     Found index in the string. (always 0-origin)
 *     If the given line or column is out of range, it returns `-1`.
 */
LineColumnFinder.prototype.toIndex = function (line, column) {
  if (typeof column === "undefined") {
    if (isArray(line) && line.length >= 2) {
      return this.toIndex(line[0], line[1]);
    }
    if (isObject(line) && "line" in line && ("col" in line || "column" in line)) {
      return this.toIndex(line.line, ("col" in line ? line.col : line.column));
    }
    return -1;
  }
  if (isNaN(line) || isNaN(column)) {
    return -1;
  }

  line -= this.origin;
  column -= this.origin;

  if (line >= 0 && column >= 0 && line < this.lineToIndex.length) {
    var lineIndex = this.lineToIndex[line];
    var nextIndex = (
      line === this.lineToIndex.length - 1
        ? this.str.length
        : this.lineToIndex[line + 1]
    );

    if (column < nextIndex - lineIndex) {
      return lineIndex + column;
    }
  }
  return -1;
}

/**
 * Build an array of indexes of each line from a string.
 *
 * @private
 * @param   str {string}  An input string.
 * @return  {number[]}    Built array of indexes. The key is line number.
 */
function buildLineToIndex(str) {
  var lines = str.split("\n"),
      lineToIndex = new Array(lines.length),
      index = 0;

  for (var i = 0, l = lines.length; i < l; i++) {
    lineToIndex[i] = index;
    index += lines[i].length + /* "\n".length */ 1;
  }
  return lineToIndex;
}

/**
 * Find a lower-bound index of a value in a sorted array of ranges.
 *
 * Assume `arr = [0, 5, 10, 15, 20]` and
 * this returns `1` for `value = 7` (5 <= value < 10),
 * and returns `3` for `value = 18` (15 <= value < 20).
 *
 * @private
 * @param  arr   {number[]} An array of values representing ranges.
 * @param  value {number}   A value to be searched.
 * @return {number} Found index. If not found `-1`.
 */
function findLowerIndexInRangeArray(value, arr) {
  if (value >= arr[arr.length - 1]) {
    return arr.length - 1;
  }

  var min = 0, max = arr.length - 2, mid;
  while (min < max) {
    mid = min + ((max - min) >> 1);

    if (value < arr[mid]) {
      max = mid - 1;
    } else if (value >= arr[mid + 1]) {
      min = mid + 1;
    } else { // value >= arr[mid] && value < arr[mid + 1]
      min = mid;
      break;
    }
  }
  return min;
}


/***/ }),

/***/ 8310:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
/*!
 * isobject <https://github.com/jonschlinkert/isobject>
 *
 * Copyright (c) 2014-2015, Jon Schlinkert.
 * Licensed under the MIT License.
 */



var isArray = __webpack_require__(893);

module.exports = function isObject(val) {
  return val != null && typeof val === 'object' && isArray(val) === false;
};


/***/ }),

/***/ 3973:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

module.exports = minimatch
minimatch.Minimatch = Minimatch

var path = { sep: '/' }
try {
  path = __webpack_require__(5622)
} catch (er) {}

var GLOBSTAR = minimatch.GLOBSTAR = Minimatch.GLOBSTAR = {}
var expand = __webpack_require__(3717)

var plTypes = {
  '!': { open: '(?:(?!(?:', close: '))[^/]*?)'},
  '?': { open: '(?:', close: ')?' },
  '+': { open: '(?:', close: ')+' },
  '*': { open: '(?:', close: ')*' },
  '@': { open: '(?:', close: ')' }
}

// any single thing other than /
// don't need to escape / when using new RegExp()
var qmark = '[^/]'

// * => any number of characters
var star = qmark + '*?'

// ** when dots are allowed.  Anything goes, except .. and .
// not (^ or / followed by one or two dots followed by $ or /),
// followed by anything, any number of times.
var twoStarDot = '(?:(?!(?:\\\/|^)(?:\\.{1,2})($|\\\/)).)*?'

// not a ^ or / followed by a dot,
// followed by anything, any number of times.
var twoStarNoDot = '(?:(?!(?:\\\/|^)\\.).)*?'

// characters that need to be escaped in RegExp.
var reSpecials = charSet('().*{}+?[]^$\\!')

// "abc" -> { a:true, b:true, c:true }
function charSet (s) {
  return s.split('').reduce(function (set, c) {
    set[c] = true
    return set
  }, {})
}

// normalizes slashes.
var slashSplit = /\/+/

minimatch.filter = filter
function filter (pattern, options) {
  options = options || {}
  return function (p, i, list) {
    return minimatch(p, pattern, options)
  }
}

function ext (a, b) {
  a = a || {}
  b = b || {}
  var t = {}
  Object.keys(b).forEach(function (k) {
    t[k] = b[k]
  })
  Object.keys(a).forEach(function (k) {
    t[k] = a[k]
  })
  return t
}

minimatch.defaults = function (def) {
  if (!def || !Object.keys(def).length) return minimatch

  var orig = minimatch

  var m = function minimatch (p, pattern, options) {
    return orig.minimatch(p, pattern, ext(def, options))
  }

  m.Minimatch = function Minimatch (pattern, options) {
    return new orig.Minimatch(pattern, ext(def, options))
  }

  return m
}

Minimatch.defaults = function (def) {
  if (!def || !Object.keys(def).length) return Minimatch
  return minimatch.defaults(def).Minimatch
}

function minimatch (p, pattern, options) {
  if (typeof pattern !== 'string') {
    throw new TypeError('glob pattern string required')
  }

  if (!options) options = {}

  // shortcut: comments match nothing.
  if (!options.nocomment && pattern.charAt(0) === '#') {
    return false
  }

  // "" only matches ""
  if (pattern.trim() === '') return p === ''

  return new Minimatch(pattern, options).match(p)
}

function Minimatch (pattern, options) {
  if (!(this instanceof Minimatch)) {
    return new Minimatch(pattern, options)
  }

  if (typeof pattern !== 'string') {
    throw new TypeError('glob pattern string required')
  }

  if (!options) options = {}
  pattern = pattern.trim()

  // windows support: need to use /, not \
  if (path.sep !== '/') {
    pattern = pattern.split(path.sep).join('/')
  }

  this.options = options
  this.set = []
  this.pattern = pattern
  this.regexp = null
  this.negate = false
  this.comment = false
  this.empty = false

  // make the set of regexps etc.
  this.make()
}

Minimatch.prototype.debug = function () {}

Minimatch.prototype.make = make
function make () {
  // don't do it more than once.
  if (this._made) return

  var pattern = this.pattern
  var options = this.options

  // empty patterns and comments match nothing.
  if (!options.nocomment && pattern.charAt(0) === '#') {
    this.comment = true
    return
  }
  if (!pattern) {
    this.empty = true
    return
  }

  // step 1: figure out negation, etc.
  this.parseNegate()

  // step 2: expand braces
  var set = this.globSet = this.braceExpand()

  if (options.debug) this.debug = console.error

  this.debug(this.pattern, set)

  // step 3: now we have a set, so turn each one into a series of path-portion
  // matching patterns.
  // These will be regexps, except in the case of "**", which is
  // set to the GLOBSTAR object for globstar behavior,
  // and will not contain any / characters
  set = this.globParts = set.map(function (s) {
    return s.split(slashSplit)
  })

  this.debug(this.pattern, set)

  // glob --> regexps
  set = set.map(function (s, si, set) {
    return s.map(this.parse, this)
  }, this)

  this.debug(this.pattern, set)

  // filter out everything that didn't compile properly.
  set = set.filter(function (s) {
    return s.indexOf(false) === -1
  })

  this.debug(this.pattern, set)

  this.set = set
}

Minimatch.prototype.parseNegate = parseNegate
function parseNegate () {
  var pattern = this.pattern
  var negate = false
  var options = this.options
  var negateOffset = 0

  if (options.nonegate) return

  for (var i = 0, l = pattern.length
    ; i < l && pattern.charAt(i) === '!'
    ; i++) {
    negate = !negate
    negateOffset++
  }

  if (negateOffset) this.pattern = pattern.substr(negateOffset)
  this.negate = negate
}

// Brace expansion:
// a{b,c}d -> abd acd
// a{b,}c -> abc ac
// a{0..3}d -> a0d a1d a2d a3d
// a{b,c{d,e}f}g -> abg acdfg acefg
// a{b,c}d{e,f}g -> abdeg acdeg abdeg abdfg
//
// Invalid sets are not expanded.
// a{2..}b -> a{2..}b
// a{b}c -> a{b}c
minimatch.braceExpand = function (pattern, options) {
  return braceExpand(pattern, options)
}

Minimatch.prototype.braceExpand = braceExpand

function braceExpand (pattern, options) {
  if (!options) {
    if (this instanceof Minimatch) {
      options = this.options
    } else {
      options = {}
    }
  }

  pattern = typeof pattern === 'undefined'
    ? this.pattern : pattern

  if (typeof pattern === 'undefined') {
    throw new TypeError('undefined pattern')
  }

  if (options.nobrace ||
    !pattern.match(/\{.*\}/)) {
    // shortcut. no need to expand.
    return [pattern]
  }

  return expand(pattern)
}

// parse a component of the expanded set.
// At this point, no pattern may contain "/" in it
// so we're going to return a 2d array, where each entry is the full
// pattern, split on '/', and then turned into a regular expression.
// A regexp is made at the end which joins each array with an
// escaped /, and another full one which joins each regexp with |.
//
// Following the lead of Bash 4.1, note that "**" only has special meaning
// when it is the *only* thing in a path portion.  Otherwise, any series
// of * is equivalent to a single *.  Globstar behavior is enabled by
// default, and can be disabled by setting options.noglobstar.
Minimatch.prototype.parse = parse
var SUBPARSE = {}
function parse (pattern, isSub) {
  if (pattern.length > 1024 * 64) {
    throw new TypeError('pattern is too long')
  }

  var options = this.options

  // shortcuts
  if (!options.noglobstar && pattern === '**') return GLOBSTAR
  if (pattern === '') return ''

  var re = ''
  var hasMagic = !!options.nocase
  var escaping = false
  // ? => one single character
  var patternListStack = []
  var negativeLists = []
  var stateChar
  var inClass = false
  var reClassStart = -1
  var classStart = -1
  // . and .. never match anything that doesn't start with .,
  // even when options.dot is set.
  var patternStart = pattern.charAt(0) === '.' ? '' // anything
  // not (start or / followed by . or .. followed by / or end)
  : options.dot ? '(?!(?:^|\\\/)\\.{1,2}(?:$|\\\/))'
  : '(?!\\.)'
  var self = this

  function clearStateChar () {
    if (stateChar) {
      // we had some state-tracking character
      // that wasn't consumed by this pass.
      switch (stateChar) {
        case '*':
          re += star
          hasMagic = true
        break
        case '?':
          re += qmark
          hasMagic = true
        break
        default:
          re += '\\' + stateChar
        break
      }
      self.debug('clearStateChar %j %j', stateChar, re)
      stateChar = false
    }
  }

  for (var i = 0, len = pattern.length, c
    ; (i < len) && (c = pattern.charAt(i))
    ; i++) {
    this.debug('%s\t%s %s %j', pattern, i, re, c)

    // skip over any that are escaped.
    if (escaping && reSpecials[c]) {
      re += '\\' + c
      escaping = false
      continue
    }

    switch (c) {
      case '/':
        // completely not allowed, even escaped.
        // Should already be path-split by now.
        return false

      case '\\':
        clearStateChar()
        escaping = true
      continue

      // the various stateChar values
      // for the "extglob" stuff.
      case '?':
      case '*':
      case '+':
      case '@':
      case '!':
        this.debug('%s\t%s %s %j <-- stateChar', pattern, i, re, c)

        // all of those are literals inside a class, except that
        // the glob [!a] means [^a] in regexp
        if (inClass) {
          this.debug('  in class')
          if (c === '!' && i === classStart + 1) c = '^'
          re += c
          continue
        }

        // if we already have a stateChar, then it means
        // that there was something like ** or +? in there.
        // Handle the stateChar, then proceed with this one.
        self.debug('call clearStateChar %j', stateChar)
        clearStateChar()
        stateChar = c
        // if extglob is disabled, then +(asdf|foo) isn't a thing.
        // just clear the statechar *now*, rather than even diving into
        // the patternList stuff.
        if (options.noext) clearStateChar()
      continue

      case '(':
        if (inClass) {
          re += '('
          continue
        }

        if (!stateChar) {
          re += '\\('
          continue
        }

        patternListStack.push({
          type: stateChar,
          start: i - 1,
          reStart: re.length,
          open: plTypes[stateChar].open,
          close: plTypes[stateChar].close
        })
        // negation is (?:(?!js)[^/]*)
        re += stateChar === '!' ? '(?:(?!(?:' : '(?:'
        this.debug('plType %j %j', stateChar, re)
        stateChar = false
      continue

      case ')':
        if (inClass || !patternListStack.length) {
          re += '\\)'
          continue
        }

        clearStateChar()
        hasMagic = true
        var pl = patternListStack.pop()
        // negation is (?:(?!js)[^/]*)
        // The others are (?:<pattern>)<type>
        re += pl.close
        if (pl.type === '!') {
          negativeLists.push(pl)
        }
        pl.reEnd = re.length
      continue

      case '|':
        if (inClass || !patternListStack.length || escaping) {
          re += '\\|'
          escaping = false
          continue
        }

        clearStateChar()
        re += '|'
      continue

      // these are mostly the same in regexp and glob
      case '[':
        // swallow any state-tracking char before the [
        clearStateChar()

        if (inClass) {
          re += '\\' + c
          continue
        }

        inClass = true
        classStart = i
        reClassStart = re.length
        re += c
      continue

      case ']':
        //  a right bracket shall lose its special
        //  meaning and represent itself in
        //  a bracket expression if it occurs
        //  first in the list.  -- POSIX.2 2.8.3.2
        if (i === classStart + 1 || !inClass) {
          re += '\\' + c
          escaping = false
          continue
        }

        // handle the case where we left a class open.
        // "[z-a]" is valid, equivalent to "\[z-a\]"
        if (inClass) {
          // split where the last [ was, make sure we don't have
          // an invalid re. if so, re-walk the contents of the
          // would-be class to re-translate any characters that
          // were passed through as-is
          // TODO: It would probably be faster to determine this
          // without a try/catch and a new RegExp, but it's tricky
          // to do safely.  For now, this is safe and works.
          var cs = pattern.substring(classStart + 1, i)
          try {
            RegExp('[' + cs + ']')
          } catch (er) {
            // not a valid class!
            var sp = this.parse(cs, SUBPARSE)
            re = re.substr(0, reClassStart) + '\\[' + sp[0] + '\\]'
            hasMagic = hasMagic || sp[1]
            inClass = false
            continue
          }
        }

        // finish up the class.
        hasMagic = true
        inClass = false
        re += c
      continue

      default:
        // swallow any state char that wasn't consumed
        clearStateChar()

        if (escaping) {
          // no need
          escaping = false
        } else if (reSpecials[c]
          && !(c === '^' && inClass)) {
          re += '\\'
        }

        re += c

    } // switch
  } // for

  // handle the case where we left a class open.
  // "[abc" is valid, equivalent to "\[abc"
  if (inClass) {
    // split where the last [ was, and escape it
    // this is a huge pita.  We now have to re-walk
    // the contents of the would-be class to re-translate
    // any characters that were passed through as-is
    cs = pattern.substr(classStart + 1)
    sp = this.parse(cs, SUBPARSE)
    re = re.substr(0, reClassStart) + '\\[' + sp[0]
    hasMagic = hasMagic || sp[1]
  }

  // handle the case where we had a +( thing at the *end*
  // of the pattern.
  // each pattern list stack adds 3 chars, and we need to go through
  // and escape any | chars that were passed through as-is for the regexp.
  // Go through and escape them, taking care not to double-escape any
  // | chars that were already escaped.
  for (pl = patternListStack.pop(); pl; pl = patternListStack.pop()) {
    var tail = re.slice(pl.reStart + pl.open.length)
    this.debug('setting tail', re, pl)
    // maybe some even number of \, then maybe 1 \, followed by a |
    tail = tail.replace(/((?:\\{2}){0,64})(\\?)\|/g, function (_, $1, $2) {
      if (!$2) {
        // the | isn't already escaped, so escape it.
        $2 = '\\'
      }

      // need to escape all those slashes *again*, without escaping the
      // one that we need for escaping the | character.  As it works out,
      // escaping an even number of slashes can be done by simply repeating
      // it exactly after itself.  That's why this trick works.
      //
      // I am sorry that you have to see this.
      return $1 + $1 + $2 + '|'
    })

    this.debug('tail=%j\n   %s', tail, tail, pl, re)
    var t = pl.type === '*' ? star
      : pl.type === '?' ? qmark
      : '\\' + pl.type

    hasMagic = true
    re = re.slice(0, pl.reStart) + t + '\\(' + tail
  }

  // handle trailing things that only matter at the very end.
  clearStateChar()
  if (escaping) {
    // trailing \\
    re += '\\\\'
  }

  // only need to apply the nodot start if the re starts with
  // something that could conceivably capture a dot
  var addPatternStart = false
  switch (re.charAt(0)) {
    case '.':
    case '[':
    case '(': addPatternStart = true
  }

  // Hack to work around lack of negative lookbehind in JS
  // A pattern like: *.!(x).!(y|z) needs to ensure that a name
  // like 'a.xyz.yz' doesn't match.  So, the first negative
  // lookahead, has to look ALL the way ahead, to the end of
  // the pattern.
  for (var n = negativeLists.length - 1; n > -1; n--) {
    var nl = negativeLists[n]

    var nlBefore = re.slice(0, nl.reStart)
    var nlFirst = re.slice(nl.reStart, nl.reEnd - 8)
    var nlLast = re.slice(nl.reEnd - 8, nl.reEnd)
    var nlAfter = re.slice(nl.reEnd)

    nlLast += nlAfter

    // Handle nested stuff like *(*.js|!(*.json)), where open parens
    // mean that we should *not* include the ) in the bit that is considered
    // "after" the negated section.
    var openParensBefore = nlBefore.split('(').length - 1
    var cleanAfter = nlAfter
    for (i = 0; i < openParensBefore; i++) {
      cleanAfter = cleanAfter.replace(/\)[+*?]?/, '')
    }
    nlAfter = cleanAfter

    var dollar = ''
    if (nlAfter === '' && isSub !== SUBPARSE) {
      dollar = '$'
    }
    var newRe = nlBefore + nlFirst + nlAfter + dollar + nlLast
    re = newRe
  }

  // if the re is not "" at this point, then we need to make sure
  // it doesn't match against an empty path part.
  // Otherwise a/* will match a/, which it should not.
  if (re !== '' && hasMagic) {
    re = '(?=.)' + re
  }

  if (addPatternStart) {
    re = patternStart + re
  }

  // parsing just a piece of a larger pattern.
  if (isSub === SUBPARSE) {
    return [re, hasMagic]
  }

  // skip the regexp for non-magical patterns
  // unescape anything in it, though, so that it'll be
  // an exact match against a file etc.
  if (!hasMagic) {
    return globUnescape(pattern)
  }

  var flags = options.nocase ? 'i' : ''
  try {
    var regExp = new RegExp('^' + re + '$', flags)
  } catch (er) {
    // If it was an invalid regular expression, then it can't match
    // anything.  This trick looks for a character after the end of
    // the string, which is of course impossible, except in multi-line
    // mode, but it's not a /m regex.
    return new RegExp('$.')
  }

  regExp._glob = pattern
  regExp._src = re

  return regExp
}

minimatch.makeRe = function (pattern, options) {
  return new Minimatch(pattern, options || {}).makeRe()
}

Minimatch.prototype.makeRe = makeRe
function makeRe () {
  if (this.regexp || this.regexp === false) return this.regexp

  // at this point, this.set is a 2d array of partial
  // pattern strings, or "**".
  //
  // It's better to use .match().  This function shouldn't
  // be used, really, but it's pretty convenient sometimes,
  // when you just want to work with a regex.
  var set = this.set

  if (!set.length) {
    this.regexp = false
    return this.regexp
  }
  var options = this.options

  var twoStar = options.noglobstar ? star
    : options.dot ? twoStarDot
    : twoStarNoDot
  var flags = options.nocase ? 'i' : ''

  var re = set.map(function (pattern) {
    return pattern.map(function (p) {
      return (p === GLOBSTAR) ? twoStar
      : (typeof p === 'string') ? regExpEscape(p)
      : p._src
    }).join('\\\/')
  }).join('|')

  // must match entire pattern
  // ending in a * or ** will make it less strict.
  re = '^(?:' + re + ')$'

  // can match anything, as long as it's not this.
  if (this.negate) re = '^(?!' + re + ').*$'

  try {
    this.regexp = new RegExp(re, flags)
  } catch (ex) {
    this.regexp = false
  }
  return this.regexp
}

minimatch.match = function (list, pattern, options) {
  options = options || {}
  var mm = new Minimatch(pattern, options)
  list = list.filter(function (f) {
    return mm.match(f)
  })
  if (mm.options.nonull && !list.length) {
    list.push(pattern)
  }
  return list
}

Minimatch.prototype.match = match
function match (f, partial) {
  this.debug('match', f, this.pattern)
  // short-circuit in the case of busted things.
  // comments, etc.
  if (this.comment) return false
  if (this.empty) return f === ''

  if (f === '/' && partial) return true

  var options = this.options

  // windows: need to use /, not \
  if (path.sep !== '/') {
    f = f.split(path.sep).join('/')
  }

  // treat the test path as a set of pathparts.
  f = f.split(slashSplit)
  this.debug(this.pattern, 'split', f)

  // just ONE of the pattern sets in this.set needs to match
  // in order for it to be valid.  If negating, then just one
  // match means that we have failed.
  // Either way, return on the first hit.

  var set = this.set
  this.debug(this.pattern, 'set', set)

  // Find the basename of the path by looking for the last non-empty segment
  var filename
  var i
  for (i = f.length - 1; i >= 0; i--) {
    filename = f[i]
    if (filename) break
  }

  for (i = 0; i < set.length; i++) {
    var pattern = set[i]
    var file = f
    if (options.matchBase && pattern.length === 1) {
      file = [filename]
    }
    var hit = this.matchOne(file, pattern, partial)
    if (hit) {
      if (options.flipNegate) return true
      return !this.negate
    }
  }

  // didn't get any hits.  this is success if it's a negative
  // pattern, failure otherwise.
  if (options.flipNegate) return false
  return this.negate
}

// set partial to true to test if, for example,
// "/a/b" matches the start of "/*/b/*/d"
// Partial means, if you run out of file before you run
// out of pattern, then that's fine, as long as all
// the parts match.
Minimatch.prototype.matchOne = function (file, pattern, partial) {
  var options = this.options

  this.debug('matchOne',
    { 'this': this, file: file, pattern: pattern })

  this.debug('matchOne', file.length, pattern.length)

  for (var fi = 0,
      pi = 0,
      fl = file.length,
      pl = pattern.length
      ; (fi < fl) && (pi < pl)
      ; fi++, pi++) {
    this.debug('matchOne loop')
    var p = pattern[pi]
    var f = file[fi]

    this.debug(pattern, p, f)

    // should be impossible.
    // some invalid regexp stuff in the set.
    if (p === false) return false

    if (p === GLOBSTAR) {
      this.debug('GLOBSTAR', [pattern, p, f])

      // "**"
      // a/**/b/**/c would match the following:
      // a/b/x/y/z/c
      // a/x/y/z/b/c
      // a/b/x/b/x/c
      // a/b/c
      // To do this, take the rest of the pattern after
      // the **, and see if it would match the file remainder.
      // If so, return success.
      // If not, the ** "swallows" a segment, and try again.
      // This is recursively awful.
      //
      // a/**/b/**/c matching a/b/x/y/z/c
      // - a matches a
      // - doublestar
      //   - matchOne(b/x/y/z/c, b/**/c)
      //     - b matches b
      //     - doublestar
      //       - matchOne(x/y/z/c, c) -> no
      //       - matchOne(y/z/c, c) -> no
      //       - matchOne(z/c, c) -> no
      //       - matchOne(c, c) yes, hit
      var fr = fi
      var pr = pi + 1
      if (pr === pl) {
        this.debug('** at the end')
        // a ** at the end will just swallow the rest.
        // We have found a match.
        // however, it will not swallow /.x, unless
        // options.dot is set.
        // . and .. are *never* matched by **, for explosively
        // exponential reasons.
        for (; fi < fl; fi++) {
          if (file[fi] === '.' || file[fi] === '..' ||
            (!options.dot && file[fi].charAt(0) === '.')) return false
        }
        return true
      }

      // ok, let's see if we can swallow whatever we can.
      while (fr < fl) {
        var swallowee = file[fr]

        this.debug('\nglobstar while', file, fr, pattern, pr, swallowee)

        // XXX remove this slice.  Just pass the start index.
        if (this.matchOne(file.slice(fr), pattern.slice(pr), partial)) {
          this.debug('globstar found match!', fr, fl, swallowee)
          // found a match.
          return true
        } else {
          // can't swallow "." or ".." ever.
          // can only swallow ".foo" when explicitly asked.
          if (swallowee === '.' || swallowee === '..' ||
            (!options.dot && swallowee.charAt(0) === '.')) {
            this.debug('dot detected!', file, fr, pattern, pr)
            break
          }

          // ** swallows a segment, and continue.
          this.debug('globstar swallow a segment, and continue')
          fr++
        }
      }

      // no match was found.
      // However, in partial mode, we can't say this is necessarily over.
      // If there's more *pattern* left, then
      if (partial) {
        // ran out of file
        this.debug('\n>>> no match, partial?', file, fr, pattern, pr)
        if (fr === fl) return true
      }
      return false
    }

    // something other than **
    // non-magic patterns just have to match exactly
    // patterns with magic have been turned into regexps.
    var hit
    if (typeof p === 'string') {
      if (options.nocase) {
        hit = f.toLowerCase() === p.toLowerCase()
      } else {
        hit = f === p
      }
      this.debug('string match', p, f, hit)
    } else {
      hit = f.match(p)
      this.debug('pattern match', p, f, hit)
    }

    if (!hit) return false
  }

  // Note: ending in / means that we'll get a final ""
  // at the end of the pattern.  This can only match a
  // corresponding "" at the end of the file.
  // If the file ends in /, then it can only match a
  // a pattern that ends in /, unless the pattern just
  // doesn't have any more for it. But, a/b/ should *not*
  // match "a/b/*", even though "" matches against the
  // [^/]*? pattern, except in partial mode, where it might
  // simply not be reached yet.
  // However, a/b/ should still satisfy a/*

  // now either we fell off the end of the pattern, or we're done.
  if (fi === fl && pi === pl) {
    // ran out of pattern and filename at the same time.
    // an exact hit!
    return true
  } else if (fi === fl) {
    // ran out of file, but still had pattern left.
    // this is ok if we're doing the match as part of
    // a glob fs traversal.
    return partial
  } else if (pi === pl) {
    // ran out of pattern, still have file left.
    // this is only acceptable if we're on the very last
    // empty segment of a file with a trailing slash.
    // a/* should match a/b/
    var emptyFileEnd = (fi === fl - 1) && (file[fi] === '')
    return emptyFileEnd
  }

  // should be unreachable.
  throw new Error('wtf?')
}

// replace stuff like \* with *
function globUnescape (s) {
  return s.replace(/\\(.)/g, '$1')
}

function regExpEscape (s) {
  return s.replace(/[-[\]{}()*+?.,\\^$|#\s]/g, '\\$&')
}


/***/ }),

/***/ 467:
/***/ ((module, exports, __webpack_require__) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({ value: true }));

function _interopDefault (ex) { return (ex && (typeof ex === 'object') && 'default' in ex) ? ex['default'] : ex; }

var Stream = _interopDefault(__webpack_require__(2413));
var http = _interopDefault(__webpack_require__(8605));
var Url = _interopDefault(__webpack_require__(8835));
var https = _interopDefault(__webpack_require__(7211));
var zlib = _interopDefault(__webpack_require__(8761));

// Based on https://github.com/tmpvar/jsdom/blob/aa85b2abf07766ff7bf5c1f6daafb3726f2f2db5/lib/jsdom/living/blob.js

// fix for "Readable" isn't a named export issue
const Readable = Stream.Readable;

const BUFFER = Symbol('buffer');
const TYPE = Symbol('type');

class Blob {
	constructor() {
		this[TYPE] = '';

		const blobParts = arguments[0];
		const options = arguments[1];

		const buffers = [];
		let size = 0;

		if (blobParts) {
			const a = blobParts;
			const length = Number(a.length);
			for (let i = 0; i < length; i++) {
				const element = a[i];
				let buffer;
				if (element instanceof Buffer) {
					buffer = element;
				} else if (ArrayBuffer.isView(element)) {
					buffer = Buffer.from(element.buffer, element.byteOffset, element.byteLength);
				} else if (element instanceof ArrayBuffer) {
					buffer = Buffer.from(element);
				} else if (element instanceof Blob) {
					buffer = element[BUFFER];
				} else {
					buffer = Buffer.from(typeof element === 'string' ? element : String(element));
				}
				size += buffer.length;
				buffers.push(buffer);
			}
		}

		this[BUFFER] = Buffer.concat(buffers);

		let type = options && options.type !== undefined && String(options.type).toLowerCase();
		if (type && !/[^\u0020-\u007E]/.test(type)) {
			this[TYPE] = type;
		}
	}
	get size() {
		return this[BUFFER].length;
	}
	get type() {
		return this[TYPE];
	}
	text() {
		return Promise.resolve(this[BUFFER].toString());
	}
	arrayBuffer() {
		const buf = this[BUFFER];
		const ab = buf.buffer.slice(buf.byteOffset, buf.byteOffset + buf.byteLength);
		return Promise.resolve(ab);
	}
	stream() {
		const readable = new Readable();
		readable._read = function () {};
		readable.push(this[BUFFER]);
		readable.push(null);
		return readable;
	}
	toString() {
		return '[object Blob]';
	}
	slice() {
		const size = this.size;

		const start = arguments[0];
		const end = arguments[1];
		let relativeStart, relativeEnd;
		if (start === undefined) {
			relativeStart = 0;
		} else if (start < 0) {
			relativeStart = Math.max(size + start, 0);
		} else {
			relativeStart = Math.min(start, size);
		}
		if (end === undefined) {
			relativeEnd = size;
		} else if (end < 0) {
			relativeEnd = Math.max(size + end, 0);
		} else {
			relativeEnd = Math.min(end, size);
		}
		const span = Math.max(relativeEnd - relativeStart, 0);

		const buffer = this[BUFFER];
		const slicedBuffer = buffer.slice(relativeStart, relativeStart + span);
		const blob = new Blob([], { type: arguments[2] });
		blob[BUFFER] = slicedBuffer;
		return blob;
	}
}

Object.defineProperties(Blob.prototype, {
	size: { enumerable: true },
	type: { enumerable: true },
	slice: { enumerable: true }
});

Object.defineProperty(Blob.prototype, Symbol.toStringTag, {
	value: 'Blob',
	writable: false,
	enumerable: false,
	configurable: true
});

/**
 * fetch-error.js
 *
 * FetchError interface for operational errors
 */

/**
 * Create FetchError instance
 *
 * @param   String      message      Error message for human
 * @param   String      type         Error type for machine
 * @param   String      systemError  For Node.js system error
 * @return  FetchError
 */
function FetchError(message, type, systemError) {
  Error.call(this, message);

  this.message = message;
  this.type = type;

  // when err.type is `system`, err.code contains system error code
  if (systemError) {
    this.code = this.errno = systemError.code;
  }

  // hide custom error implementation details from end-users
  Error.captureStackTrace(this, this.constructor);
}

FetchError.prototype = Object.create(Error.prototype);
FetchError.prototype.constructor = FetchError;
FetchError.prototype.name = 'FetchError';

let convert;
try {
	convert = __webpack_require__(2877).convert;
} catch (e) {}

const INTERNALS = Symbol('Body internals');

// fix an issue where "PassThrough" isn't a named export for node <10
const PassThrough = Stream.PassThrough;

/**
 * Body mixin
 *
 * Ref: https://fetch.spec.whatwg.org/#body
 *
 * @param   Stream  body  Readable stream
 * @param   Object  opts  Response options
 * @return  Void
 */
function Body(body) {
	var _this = this;

	var _ref = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {},
	    _ref$size = _ref.size;

	let size = _ref$size === undefined ? 0 : _ref$size;
	var _ref$timeout = _ref.timeout;
	let timeout = _ref$timeout === undefined ? 0 : _ref$timeout;

	if (body == null) {
		// body is undefined or null
		body = null;
	} else if (isURLSearchParams(body)) {
		// body is a URLSearchParams
		body = Buffer.from(body.toString());
	} else if (isBlob(body)) ; else if (Buffer.isBuffer(body)) ; else if (Object.prototype.toString.call(body) === '[object ArrayBuffer]') {
		// body is ArrayBuffer
		body = Buffer.from(body);
	} else if (ArrayBuffer.isView(body)) {
		// body is ArrayBufferView
		body = Buffer.from(body.buffer, body.byteOffset, body.byteLength);
	} else if (body instanceof Stream) ; else {
		// none of the above
		// coerce to string then buffer
		body = Buffer.from(String(body));
	}
	this[INTERNALS] = {
		body,
		disturbed: false,
		error: null
	};
	this.size = size;
	this.timeout = timeout;

	if (body instanceof Stream) {
		body.on('error', function (err) {
			const error = err.name === 'AbortError' ? err : new FetchError(`Invalid response body while trying to fetch ${_this.url}: ${err.message}`, 'system', err);
			_this[INTERNALS].error = error;
		});
	}
}

Body.prototype = {
	get body() {
		return this[INTERNALS].body;
	},

	get bodyUsed() {
		return this[INTERNALS].disturbed;
	},

	/**
  * Decode response as ArrayBuffer
  *
  * @return  Promise
  */
	arrayBuffer() {
		return consumeBody.call(this).then(function (buf) {
			return buf.buffer.slice(buf.byteOffset, buf.byteOffset + buf.byteLength);
		});
	},

	/**
  * Return raw response as Blob
  *
  * @return Promise
  */
	blob() {
		let ct = this.headers && this.headers.get('content-type') || '';
		return consumeBody.call(this).then(function (buf) {
			return Object.assign(
			// Prevent copying
			new Blob([], {
				type: ct.toLowerCase()
			}), {
				[BUFFER]: buf
			});
		});
	},

	/**
  * Decode response as json
  *
  * @return  Promise
  */
	json() {
		var _this2 = this;

		return consumeBody.call(this).then(function (buffer) {
			try {
				return JSON.parse(buffer.toString());
			} catch (err) {
				return Body.Promise.reject(new FetchError(`invalid json response body at ${_this2.url} reason: ${err.message}`, 'invalid-json'));
			}
		});
	},

	/**
  * Decode response as text
  *
  * @return  Promise
  */
	text() {
		return consumeBody.call(this).then(function (buffer) {
			return buffer.toString();
		});
	},

	/**
  * Decode response as buffer (non-spec api)
  *
  * @return  Promise
  */
	buffer() {
		return consumeBody.call(this);
	},

	/**
  * Decode response as text, while automatically detecting the encoding and
  * trying to decode to UTF-8 (non-spec api)
  *
  * @return  Promise
  */
	textConverted() {
		var _this3 = this;

		return consumeBody.call(this).then(function (buffer) {
			return convertBody(buffer, _this3.headers);
		});
	}
};

// In browsers, all properties are enumerable.
Object.defineProperties(Body.prototype, {
	body: { enumerable: true },
	bodyUsed: { enumerable: true },
	arrayBuffer: { enumerable: true },
	blob: { enumerable: true },
	json: { enumerable: true },
	text: { enumerable: true }
});

Body.mixIn = function (proto) {
	for (const name of Object.getOwnPropertyNames(Body.prototype)) {
		// istanbul ignore else: future proof
		if (!(name in proto)) {
			const desc = Object.getOwnPropertyDescriptor(Body.prototype, name);
			Object.defineProperty(proto, name, desc);
		}
	}
};

/**
 * Consume and convert an entire Body to a Buffer.
 *
 * Ref: https://fetch.spec.whatwg.org/#concept-body-consume-body
 *
 * @return  Promise
 */
function consumeBody() {
	var _this4 = this;

	if (this[INTERNALS].disturbed) {
		return Body.Promise.reject(new TypeError(`body used already for: ${this.url}`));
	}

	this[INTERNALS].disturbed = true;

	if (this[INTERNALS].error) {
		return Body.Promise.reject(this[INTERNALS].error);
	}

	let body = this.body;

	// body is null
	if (body === null) {
		return Body.Promise.resolve(Buffer.alloc(0));
	}

	// body is blob
	if (isBlob(body)) {
		body = body.stream();
	}

	// body is buffer
	if (Buffer.isBuffer(body)) {
		return Body.Promise.resolve(body);
	}

	// istanbul ignore if: should never happen
	if (!(body instanceof Stream)) {
		return Body.Promise.resolve(Buffer.alloc(0));
	}

	// body is stream
	// get ready to actually consume the body
	let accum = [];
	let accumBytes = 0;
	let abort = false;

	return new Body.Promise(function (resolve, reject) {
		let resTimeout;

		// allow timeout on slow response body
		if (_this4.timeout) {
			resTimeout = setTimeout(function () {
				abort = true;
				reject(new FetchError(`Response timeout while trying to fetch ${_this4.url} (over ${_this4.timeout}ms)`, 'body-timeout'));
			}, _this4.timeout);
		}

		// handle stream errors
		body.on('error', function (err) {
			if (err.name === 'AbortError') {
				// if the request was aborted, reject with this Error
				abort = true;
				reject(err);
			} else {
				// other errors, such as incorrect content-encoding
				reject(new FetchError(`Invalid response body while trying to fetch ${_this4.url}: ${err.message}`, 'system', err));
			}
		});

		body.on('data', function (chunk) {
			if (abort || chunk === null) {
				return;
			}

			if (_this4.size && accumBytes + chunk.length > _this4.size) {
				abort = true;
				reject(new FetchError(`content size at ${_this4.url} over limit: ${_this4.size}`, 'max-size'));
				return;
			}

			accumBytes += chunk.length;
			accum.push(chunk);
		});

		body.on('end', function () {
			if (abort) {
				return;
			}

			clearTimeout(resTimeout);

			try {
				resolve(Buffer.concat(accum, accumBytes));
			} catch (err) {
				// handle streams that have accumulated too much data (issue #414)
				reject(new FetchError(`Could not create Buffer from response body for ${_this4.url}: ${err.message}`, 'system', err));
			}
		});
	});
}

/**
 * Detect buffer encoding and convert to target encoding
 * ref: http://www.w3.org/TR/2011/WD-html5-20110113/parsing.html#determining-the-character-encoding
 *
 * @param   Buffer  buffer    Incoming buffer
 * @param   String  encoding  Target encoding
 * @return  String
 */
function convertBody(buffer, headers) {
	if (typeof convert !== 'function') {
		throw new Error('The package `encoding` must be installed to use the textConverted() function');
	}

	const ct = headers.get('content-type');
	let charset = 'utf-8';
	let res, str;

	// header
	if (ct) {
		res = /charset=([^;]*)/i.exec(ct);
	}

	// no charset in content type, peek at response body for at most 1024 bytes
	str = buffer.slice(0, 1024).toString();

	// html5
	if (!res && str) {
		res = /<meta.+?charset=(['"])(.+?)\1/i.exec(str);
	}

	// html4
	if (!res && str) {
		res = /<meta[\s]+?http-equiv=(['"])content-type\1[\s]+?content=(['"])(.+?)\2/i.exec(str);
		if (!res) {
			res = /<meta[\s]+?content=(['"])(.+?)\1[\s]+?http-equiv=(['"])content-type\3/i.exec(str);
			if (res) {
				res.pop(); // drop last quote
			}
		}

		if (res) {
			res = /charset=(.*)/i.exec(res.pop());
		}
	}

	// xml
	if (!res && str) {
		res = /<\?xml.+?encoding=(['"])(.+?)\1/i.exec(str);
	}

	// found charset
	if (res) {
		charset = res.pop();

		// prevent decode issues when sites use incorrect encoding
		// ref: https://hsivonen.fi/encoding-menu/
		if (charset === 'gb2312' || charset === 'gbk') {
			charset = 'gb18030';
		}
	}

	// turn raw buffers into a single utf-8 buffer
	return convert(buffer, 'UTF-8', charset).toString();
}

/**
 * Detect a URLSearchParams object
 * ref: https://github.com/bitinn/node-fetch/issues/296#issuecomment-307598143
 *
 * @param   Object  obj     Object to detect by type or brand
 * @return  String
 */
function isURLSearchParams(obj) {
	// Duck-typing as a necessary condition.
	if (typeof obj !== 'object' || typeof obj.append !== 'function' || typeof obj.delete !== 'function' || typeof obj.get !== 'function' || typeof obj.getAll !== 'function' || typeof obj.has !== 'function' || typeof obj.set !== 'function') {
		return false;
	}

	// Brand-checking and more duck-typing as optional condition.
	return obj.constructor.name === 'URLSearchParams' || Object.prototype.toString.call(obj) === '[object URLSearchParams]' || typeof obj.sort === 'function';
}

/**
 * Check if `obj` is a W3C `Blob` object (which `File` inherits from)
 * @param  {*} obj
 * @return {boolean}
 */
function isBlob(obj) {
	return typeof obj === 'object' && typeof obj.arrayBuffer === 'function' && typeof obj.type === 'string' && typeof obj.stream === 'function' && typeof obj.constructor === 'function' && typeof obj.constructor.name === 'string' && /^(Blob|File)$/.test(obj.constructor.name) && /^(Blob|File)$/.test(obj[Symbol.toStringTag]);
}

/**
 * Clone body given Res/Req instance
 *
 * @param   Mixed  instance  Response or Request instance
 * @return  Mixed
 */
function clone(instance) {
	let p1, p2;
	let body = instance.body;

	// don't allow cloning a used body
	if (instance.bodyUsed) {
		throw new Error('cannot clone body after it is used');
	}

	// check that body is a stream and not form-data object
	// note: we can't clone the form-data object without having it as a dependency
	if (body instanceof Stream && typeof body.getBoundary !== 'function') {
		// tee instance body
		p1 = new PassThrough();
		p2 = new PassThrough();
		body.pipe(p1);
		body.pipe(p2);
		// set instance body to teed body and return the other teed body
		instance[INTERNALS].body = p1;
		body = p2;
	}

	return body;
}

/**
 * Performs the operation "extract a `Content-Type` value from |object|" as
 * specified in the specification:
 * https://fetch.spec.whatwg.org/#concept-bodyinit-extract
 *
 * This function assumes that instance.body is present.
 *
 * @param   Mixed  instance  Any options.body input
 */
function extractContentType(body) {
	if (body === null) {
		// body is null
		return null;
	} else if (typeof body === 'string') {
		// body is string
		return 'text/plain;charset=UTF-8';
	} else if (isURLSearchParams(body)) {
		// body is a URLSearchParams
		return 'application/x-www-form-urlencoded;charset=UTF-8';
	} else if (isBlob(body)) {
		// body is blob
		return body.type || null;
	} else if (Buffer.isBuffer(body)) {
		// body is buffer
		return null;
	} else if (Object.prototype.toString.call(body) === '[object ArrayBuffer]') {
		// body is ArrayBuffer
		return null;
	} else if (ArrayBuffer.isView(body)) {
		// body is ArrayBufferView
		return null;
	} else if (typeof body.getBoundary === 'function') {
		// detect form data input from form-data module
		return `multipart/form-data;boundary=${body.getBoundary()}`;
	} else if (body instanceof Stream) {
		// body is stream
		// can't really do much about this
		return null;
	} else {
		// Body constructor defaults other things to string
		return 'text/plain;charset=UTF-8';
	}
}

/**
 * The Fetch Standard treats this as if "total bytes" is a property on the body.
 * For us, we have to explicitly get it with a function.
 *
 * ref: https://fetch.spec.whatwg.org/#concept-body-total-bytes
 *
 * @param   Body    instance   Instance of Body
 * @return  Number?            Number of bytes, or null if not possible
 */
function getTotalBytes(instance) {
	const body = instance.body;


	if (body === null) {
		// body is null
		return 0;
	} else if (isBlob(body)) {
		return body.size;
	} else if (Buffer.isBuffer(body)) {
		// body is buffer
		return body.length;
	} else if (body && typeof body.getLengthSync === 'function') {
		// detect form data input from form-data module
		if (body._lengthRetrievers && body._lengthRetrievers.length == 0 || // 1.x
		body.hasKnownLength && body.hasKnownLength()) {
			// 2.x
			return body.getLengthSync();
		}
		return null;
	} else {
		// body is stream
		return null;
	}
}

/**
 * Write a Body to a Node.js WritableStream (e.g. http.Request) object.
 *
 * @param   Body    instance   Instance of Body
 * @return  Void
 */
function writeToStream(dest, instance) {
	const body = instance.body;


	if (body === null) {
		// body is null
		dest.end();
	} else if (isBlob(body)) {
		body.stream().pipe(dest);
	} else if (Buffer.isBuffer(body)) {
		// body is buffer
		dest.write(body);
		dest.end();
	} else {
		// body is stream
		body.pipe(dest);
	}
}

// expose Promise
Body.Promise = global.Promise;

/**
 * headers.js
 *
 * Headers class offers convenient helpers
 */

const invalidTokenRegex = /[^\^_`a-zA-Z\-0-9!#$%&'*+.|~]/;
const invalidHeaderCharRegex = /[^\t\x20-\x7e\x80-\xff]/;

function validateName(name) {
	name = `${name}`;
	if (invalidTokenRegex.test(name) || name === '') {
		throw new TypeError(`${name} is not a legal HTTP header name`);
	}
}

function validateValue(value) {
	value = `${value}`;
	if (invalidHeaderCharRegex.test(value)) {
		throw new TypeError(`${value} is not a legal HTTP header value`);
	}
}

/**
 * Find the key in the map object given a header name.
 *
 * Returns undefined if not found.
 *
 * @param   String  name  Header name
 * @return  String|Undefined
 */
function find(map, name) {
	name = name.toLowerCase();
	for (const key in map) {
		if (key.toLowerCase() === name) {
			return key;
		}
	}
	return undefined;
}

const MAP = Symbol('map');
class Headers {
	/**
  * Headers class
  *
  * @param   Object  headers  Response headers
  * @return  Void
  */
	constructor() {
		let init = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : undefined;

		this[MAP] = Object.create(null);

		if (init instanceof Headers) {
			const rawHeaders = init.raw();
			const headerNames = Object.keys(rawHeaders);

			for (const headerName of headerNames) {
				for (const value of rawHeaders[headerName]) {
					this.append(headerName, value);
				}
			}

			return;
		}

		// We don't worry about converting prop to ByteString here as append()
		// will handle it.
		if (init == null) ; else if (typeof init === 'object') {
			const method = init[Symbol.iterator];
			if (method != null) {
				if (typeof method !== 'function') {
					throw new TypeError('Header pairs must be iterable');
				}

				// sequence<sequence<ByteString>>
				// Note: per spec we have to first exhaust the lists then process them
				const pairs = [];
				for (const pair of init) {
					if (typeof pair !== 'object' || typeof pair[Symbol.iterator] !== 'function') {
						throw new TypeError('Each header pair must be iterable');
					}
					pairs.push(Array.from(pair));
				}

				for (const pair of pairs) {
					if (pair.length !== 2) {
						throw new TypeError('Each header pair must be a name/value tuple');
					}
					this.append(pair[0], pair[1]);
				}
			} else {
				// record<ByteString, ByteString>
				for (const key of Object.keys(init)) {
					const value = init[key];
					this.append(key, value);
				}
			}
		} else {
			throw new TypeError('Provided initializer must be an object');
		}
	}

	/**
  * Return combined header value given name
  *
  * @param   String  name  Header name
  * @return  Mixed
  */
	get(name) {
		name = `${name}`;
		validateName(name);
		const key = find(this[MAP], name);
		if (key === undefined) {
			return null;
		}

		return this[MAP][key].join(', ');
	}

	/**
  * Iterate over all headers
  *
  * @param   Function  callback  Executed for each item with parameters (value, name, thisArg)
  * @param   Boolean   thisArg   `this` context for callback function
  * @return  Void
  */
	forEach(callback) {
		let thisArg = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : undefined;

		let pairs = getHeaders(this);
		let i = 0;
		while (i < pairs.length) {
			var _pairs$i = pairs[i];
			const name = _pairs$i[0],
			      value = _pairs$i[1];

			callback.call(thisArg, value, name, this);
			pairs = getHeaders(this);
			i++;
		}
	}

	/**
  * Overwrite header values given name
  *
  * @param   String  name   Header name
  * @param   String  value  Header value
  * @return  Void
  */
	set(name, value) {
		name = `${name}`;
		value = `${value}`;
		validateName(name);
		validateValue(value);
		const key = find(this[MAP], name);
		this[MAP][key !== undefined ? key : name] = [value];
	}

	/**
  * Append a value onto existing header
  *
  * @param   String  name   Header name
  * @param   String  value  Header value
  * @return  Void
  */
	append(name, value) {
		name = `${name}`;
		value = `${value}`;
		validateName(name);
		validateValue(value);
		const key = find(this[MAP], name);
		if (key !== undefined) {
			this[MAP][key].push(value);
		} else {
			this[MAP][name] = [value];
		}
	}

	/**
  * Check for header name existence
  *
  * @param   String   name  Header name
  * @return  Boolean
  */
	has(name) {
		name = `${name}`;
		validateName(name);
		return find(this[MAP], name) !== undefined;
	}

	/**
  * Delete all header values given name
  *
  * @param   String  name  Header name
  * @return  Void
  */
	delete(name) {
		name = `${name}`;
		validateName(name);
		const key = find(this[MAP], name);
		if (key !== undefined) {
			delete this[MAP][key];
		}
	}

	/**
  * Return raw headers (non-spec api)
  *
  * @return  Object
  */
	raw() {
		return this[MAP];
	}

	/**
  * Get an iterator on keys.
  *
  * @return  Iterator
  */
	keys() {
		return createHeadersIterator(this, 'key');
	}

	/**
  * Get an iterator on values.
  *
  * @return  Iterator
  */
	values() {
		return createHeadersIterator(this, 'value');
	}

	/**
  * Get an iterator on entries.
  *
  * This is the default iterator of the Headers object.
  *
  * @return  Iterator
  */
	[Symbol.iterator]() {
		return createHeadersIterator(this, 'key+value');
	}
}
Headers.prototype.entries = Headers.prototype[Symbol.iterator];

Object.defineProperty(Headers.prototype, Symbol.toStringTag, {
	value: 'Headers',
	writable: false,
	enumerable: false,
	configurable: true
});

Object.defineProperties(Headers.prototype, {
	get: { enumerable: true },
	forEach: { enumerable: true },
	set: { enumerable: true },
	append: { enumerable: true },
	has: { enumerable: true },
	delete: { enumerable: true },
	keys: { enumerable: true },
	values: { enumerable: true },
	entries: { enumerable: true }
});

function getHeaders(headers) {
	let kind = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'key+value';

	const keys = Object.keys(headers[MAP]).sort();
	return keys.map(kind === 'key' ? function (k) {
		return k.toLowerCase();
	} : kind === 'value' ? function (k) {
		return headers[MAP][k].join(', ');
	} : function (k) {
		return [k.toLowerCase(), headers[MAP][k].join(', ')];
	});
}

const INTERNAL = Symbol('internal');

function createHeadersIterator(target, kind) {
	const iterator = Object.create(HeadersIteratorPrototype);
	iterator[INTERNAL] = {
		target,
		kind,
		index: 0
	};
	return iterator;
}

const HeadersIteratorPrototype = Object.setPrototypeOf({
	next() {
		// istanbul ignore if
		if (!this || Object.getPrototypeOf(this) !== HeadersIteratorPrototype) {
			throw new TypeError('Value of `this` is not a HeadersIterator');
		}

		var _INTERNAL = this[INTERNAL];
		const target = _INTERNAL.target,
		      kind = _INTERNAL.kind,
		      index = _INTERNAL.index;

		const values = getHeaders(target, kind);
		const len = values.length;
		if (index >= len) {
			return {
				value: undefined,
				done: true
			};
		}

		this[INTERNAL].index = index + 1;

		return {
			value: values[index],
			done: false
		};
	}
}, Object.getPrototypeOf(Object.getPrototypeOf([][Symbol.iterator]())));

Object.defineProperty(HeadersIteratorPrototype, Symbol.toStringTag, {
	value: 'HeadersIterator',
	writable: false,
	enumerable: false,
	configurable: true
});

/**
 * Export the Headers object in a form that Node.js can consume.
 *
 * @param   Headers  headers
 * @return  Object
 */
function exportNodeCompatibleHeaders(headers) {
	const obj = Object.assign({ __proto__: null }, headers[MAP]);

	// http.request() only supports string as Host header. This hack makes
	// specifying custom Host header possible.
	const hostHeaderKey = find(headers[MAP], 'Host');
	if (hostHeaderKey !== undefined) {
		obj[hostHeaderKey] = obj[hostHeaderKey][0];
	}

	return obj;
}

/**
 * Create a Headers object from an object of headers, ignoring those that do
 * not conform to HTTP grammar productions.
 *
 * @param   Object  obj  Object of headers
 * @return  Headers
 */
function createHeadersLenient(obj) {
	const headers = new Headers();
	for (const name of Object.keys(obj)) {
		if (invalidTokenRegex.test(name)) {
			continue;
		}
		if (Array.isArray(obj[name])) {
			for (const val of obj[name]) {
				if (invalidHeaderCharRegex.test(val)) {
					continue;
				}
				if (headers[MAP][name] === undefined) {
					headers[MAP][name] = [val];
				} else {
					headers[MAP][name].push(val);
				}
			}
		} else if (!invalidHeaderCharRegex.test(obj[name])) {
			headers[MAP][name] = [obj[name]];
		}
	}
	return headers;
}

const INTERNALS$1 = Symbol('Response internals');

// fix an issue where "STATUS_CODES" aren't a named export for node <10
const STATUS_CODES = http.STATUS_CODES;

/**
 * Response class
 *
 * @param   Stream  body  Readable stream
 * @param   Object  opts  Response options
 * @return  Void
 */
class Response {
	constructor() {
		let body = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;
		let opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

		Body.call(this, body, opts);

		const status = opts.status || 200;
		const headers = new Headers(opts.headers);

		if (body != null && !headers.has('Content-Type')) {
			const contentType = extractContentType(body);
			if (contentType) {
				headers.append('Content-Type', contentType);
			}
		}

		this[INTERNALS$1] = {
			url: opts.url,
			status,
			statusText: opts.statusText || STATUS_CODES[status],
			headers,
			counter: opts.counter
		};
	}

	get url() {
		return this[INTERNALS$1].url || '';
	}

	get status() {
		return this[INTERNALS$1].status;
	}

	/**
  * Convenience property representing if the request ended normally
  */
	get ok() {
		return this[INTERNALS$1].status >= 200 && this[INTERNALS$1].status < 300;
	}

	get redirected() {
		return this[INTERNALS$1].counter > 0;
	}

	get statusText() {
		return this[INTERNALS$1].statusText;
	}

	get headers() {
		return this[INTERNALS$1].headers;
	}

	/**
  * Clone this response
  *
  * @return  Response
  */
	clone() {
		return new Response(clone(this), {
			url: this.url,
			status: this.status,
			statusText: this.statusText,
			headers: this.headers,
			ok: this.ok,
			redirected: this.redirected
		});
	}
}

Body.mixIn(Response.prototype);

Object.defineProperties(Response.prototype, {
	url: { enumerable: true },
	status: { enumerable: true },
	ok: { enumerable: true },
	redirected: { enumerable: true },
	statusText: { enumerable: true },
	headers: { enumerable: true },
	clone: { enumerable: true }
});

Object.defineProperty(Response.prototype, Symbol.toStringTag, {
	value: 'Response',
	writable: false,
	enumerable: false,
	configurable: true
});

const INTERNALS$2 = Symbol('Request internals');

// fix an issue where "format", "parse" aren't a named export for node <10
const parse_url = Url.parse;
const format_url = Url.format;

const streamDestructionSupported = 'destroy' in Stream.Readable.prototype;

/**
 * Check if a value is an instance of Request.
 *
 * @param   Mixed   input
 * @return  Boolean
 */
function isRequest(input) {
	return typeof input === 'object' && typeof input[INTERNALS$2] === 'object';
}

function isAbortSignal(signal) {
	const proto = signal && typeof signal === 'object' && Object.getPrototypeOf(signal);
	return !!(proto && proto.constructor.name === 'AbortSignal');
}

/**
 * Request class
 *
 * @param   Mixed   input  Url or Request instance
 * @param   Object  init   Custom options
 * @return  Void
 */
class Request {
	constructor(input) {
		let init = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

		let parsedURL;

		// normalize input
		if (!isRequest(input)) {
			if (input && input.href) {
				// in order to support Node.js' Url objects; though WHATWG's URL objects
				// will fall into this branch also (since their `toString()` will return
				// `href` property anyway)
				parsedURL = parse_url(input.href);
			} else {
				// coerce input to a string before attempting to parse
				parsedURL = parse_url(`${input}`);
			}
			input = {};
		} else {
			parsedURL = parse_url(input.url);
		}

		let method = init.method || input.method || 'GET';
		method = method.toUpperCase();

		if ((init.body != null || isRequest(input) && input.body !== null) && (method === 'GET' || method === 'HEAD')) {
			throw new TypeError('Request with GET/HEAD method cannot have body');
		}

		let inputBody = init.body != null ? init.body : isRequest(input) && input.body !== null ? clone(input) : null;

		Body.call(this, inputBody, {
			timeout: init.timeout || input.timeout || 0,
			size: init.size || input.size || 0
		});

		const headers = new Headers(init.headers || input.headers || {});

		if (inputBody != null && !headers.has('Content-Type')) {
			const contentType = extractContentType(inputBody);
			if (contentType) {
				headers.append('Content-Type', contentType);
			}
		}

		let signal = isRequest(input) ? input.signal : null;
		if ('signal' in init) signal = init.signal;

		if (signal != null && !isAbortSignal(signal)) {
			throw new TypeError('Expected signal to be an instanceof AbortSignal');
		}

		this[INTERNALS$2] = {
			method,
			redirect: init.redirect || input.redirect || 'follow',
			headers,
			parsedURL,
			signal
		};

		// node-fetch-only options
		this.follow = init.follow !== undefined ? init.follow : input.follow !== undefined ? input.follow : 20;
		this.compress = init.compress !== undefined ? init.compress : input.compress !== undefined ? input.compress : true;
		this.counter = init.counter || input.counter || 0;
		this.agent = init.agent || input.agent;
	}

	get method() {
		return this[INTERNALS$2].method;
	}

	get url() {
		return format_url(this[INTERNALS$2].parsedURL);
	}

	get headers() {
		return this[INTERNALS$2].headers;
	}

	get redirect() {
		return this[INTERNALS$2].redirect;
	}

	get signal() {
		return this[INTERNALS$2].signal;
	}

	/**
  * Clone this request
  *
  * @return  Request
  */
	clone() {
		return new Request(this);
	}
}

Body.mixIn(Request.prototype);

Object.defineProperty(Request.prototype, Symbol.toStringTag, {
	value: 'Request',
	writable: false,
	enumerable: false,
	configurable: true
});

Object.defineProperties(Request.prototype, {
	method: { enumerable: true },
	url: { enumerable: true },
	headers: { enumerable: true },
	redirect: { enumerable: true },
	clone: { enumerable: true },
	signal: { enumerable: true }
});

/**
 * Convert a Request to Node.js http request options.
 *
 * @param   Request  A Request instance
 * @return  Object   The options object to be passed to http.request
 */
function getNodeRequestOptions(request) {
	const parsedURL = request[INTERNALS$2].parsedURL;
	const headers = new Headers(request[INTERNALS$2].headers);

	// fetch step 1.3
	if (!headers.has('Accept')) {
		headers.set('Accept', '*/*');
	}

	// Basic fetch
	if (!parsedURL.protocol || !parsedURL.hostname) {
		throw new TypeError('Only absolute URLs are supported');
	}

	if (!/^https?:$/.test(parsedURL.protocol)) {
		throw new TypeError('Only HTTP(S) protocols are supported');
	}

	if (request.signal && request.body instanceof Stream.Readable && !streamDestructionSupported) {
		throw new Error('Cancellation of streamed requests with AbortSignal is not supported in node < 8');
	}

	// HTTP-network-or-cache fetch steps 2.4-2.7
	let contentLengthValue = null;
	if (request.body == null && /^(POST|PUT)$/i.test(request.method)) {
		contentLengthValue = '0';
	}
	if (request.body != null) {
		const totalBytes = getTotalBytes(request);
		if (typeof totalBytes === 'number') {
			contentLengthValue = String(totalBytes);
		}
	}
	if (contentLengthValue) {
		headers.set('Content-Length', contentLengthValue);
	}

	// HTTP-network-or-cache fetch step 2.11
	if (!headers.has('User-Agent')) {
		headers.set('User-Agent', 'node-fetch/1.0 (+https://github.com/bitinn/node-fetch)');
	}

	// HTTP-network-or-cache fetch step 2.15
	if (request.compress && !headers.has('Accept-Encoding')) {
		headers.set('Accept-Encoding', 'gzip,deflate');
	}

	let agent = request.agent;
	if (typeof agent === 'function') {
		agent = agent(parsedURL);
	}

	if (!headers.has('Connection') && !agent) {
		headers.set('Connection', 'close');
	}

	// HTTP-network fetch step 4.2
	// chunked encoding is handled by Node.js

	return Object.assign({}, parsedURL, {
		method: request.method,
		headers: exportNodeCompatibleHeaders(headers),
		agent
	});
}

/**
 * abort-error.js
 *
 * AbortError interface for cancelled requests
 */

/**
 * Create AbortError instance
 *
 * @param   String      message      Error message for human
 * @return  AbortError
 */
function AbortError(message) {
  Error.call(this, message);

  this.type = 'aborted';
  this.message = message;

  // hide custom error implementation details from end-users
  Error.captureStackTrace(this, this.constructor);
}

AbortError.prototype = Object.create(Error.prototype);
AbortError.prototype.constructor = AbortError;
AbortError.prototype.name = 'AbortError';

// fix an issue where "PassThrough", "resolve" aren't a named export for node <10
const PassThrough$1 = Stream.PassThrough;
const resolve_url = Url.resolve;

/**
 * Fetch function
 *
 * @param   Mixed    url   Absolute url or Request instance
 * @param   Object   opts  Fetch options
 * @return  Promise
 */
function fetch(url, opts) {

	// allow custom promise
	if (!fetch.Promise) {
		throw new Error('native promise missing, set fetch.Promise to your favorite alternative');
	}

	Body.Promise = fetch.Promise;

	// wrap http.request into fetch
	return new fetch.Promise(function (resolve, reject) {
		// build request object
		const request = new Request(url, opts);
		const options = getNodeRequestOptions(request);

		const send = (options.protocol === 'https:' ? https : http).request;
		const signal = request.signal;

		let response = null;

		const abort = function abort() {
			let error = new AbortError('The user aborted a request.');
			reject(error);
			if (request.body && request.body instanceof Stream.Readable) {
				request.body.destroy(error);
			}
			if (!response || !response.body) return;
			response.body.emit('error', error);
		};

		if (signal && signal.aborted) {
			abort();
			return;
		}

		const abortAndFinalize = function abortAndFinalize() {
			abort();
			finalize();
		};

		// send request
		const req = send(options);
		let reqTimeout;

		if (signal) {
			signal.addEventListener('abort', abortAndFinalize);
		}

		function finalize() {
			req.abort();
			if (signal) signal.removeEventListener('abort', abortAndFinalize);
			clearTimeout(reqTimeout);
		}

		if (request.timeout) {
			req.once('socket', function (socket) {
				reqTimeout = setTimeout(function () {
					reject(new FetchError(`network timeout at: ${request.url}`, 'request-timeout'));
					finalize();
				}, request.timeout);
			});
		}

		req.on('error', function (err) {
			reject(new FetchError(`request to ${request.url} failed, reason: ${err.message}`, 'system', err));
			finalize();
		});

		req.on('response', function (res) {
			clearTimeout(reqTimeout);

			const headers = createHeadersLenient(res.headers);

			// HTTP fetch step 5
			if (fetch.isRedirect(res.statusCode)) {
				// HTTP fetch step 5.2
				const location = headers.get('Location');

				// HTTP fetch step 5.3
				const locationURL = location === null ? null : resolve_url(request.url, location);

				// HTTP fetch step 5.5
				switch (request.redirect) {
					case 'error':
						reject(new FetchError(`uri requested responds with a redirect, redirect mode is set to error: ${request.url}`, 'no-redirect'));
						finalize();
						return;
					case 'manual':
						// node-fetch-specific step: make manual redirect a bit easier to use by setting the Location header value to the resolved URL.
						if (locationURL !== null) {
							// handle corrupted header
							try {
								headers.set('Location', locationURL);
							} catch (err) {
								// istanbul ignore next: nodejs server prevent invalid response headers, we can't test this through normal request
								reject(err);
							}
						}
						break;
					case 'follow':
						// HTTP-redirect fetch step 2
						if (locationURL === null) {
							break;
						}

						// HTTP-redirect fetch step 5
						if (request.counter >= request.follow) {
							reject(new FetchError(`maximum redirect reached at: ${request.url}`, 'max-redirect'));
							finalize();
							return;
						}

						// HTTP-redirect fetch step 6 (counter increment)
						// Create a new Request object.
						const requestOpts = {
							headers: new Headers(request.headers),
							follow: request.follow,
							counter: request.counter + 1,
							agent: request.agent,
							compress: request.compress,
							method: request.method,
							body: request.body,
							signal: request.signal,
							timeout: request.timeout,
							size: request.size
						};

						// HTTP-redirect fetch step 9
						if (res.statusCode !== 303 && request.body && getTotalBytes(request) === null) {
							reject(new FetchError('Cannot follow redirect with body being a readable stream', 'unsupported-redirect'));
							finalize();
							return;
						}

						// HTTP-redirect fetch step 11
						if (res.statusCode === 303 || (res.statusCode === 301 || res.statusCode === 302) && request.method === 'POST') {
							requestOpts.method = 'GET';
							requestOpts.body = undefined;
							requestOpts.headers.delete('content-length');
						}

						// HTTP-redirect fetch step 15
						resolve(fetch(new Request(locationURL, requestOpts)));
						finalize();
						return;
				}
			}

			// prepare response
			res.once('end', function () {
				if (signal) signal.removeEventListener('abort', abortAndFinalize);
			});
			let body = res.pipe(new PassThrough$1());

			const response_options = {
				url: request.url,
				status: res.statusCode,
				statusText: res.statusMessage,
				headers: headers,
				size: request.size,
				timeout: request.timeout,
				counter: request.counter
			};

			// HTTP-network fetch step 12.1.1.3
			const codings = headers.get('Content-Encoding');

			// HTTP-network fetch step 12.1.1.4: handle content codings

			// in following scenarios we ignore compression support
			// 1. compression support is disabled
			// 2. HEAD request
			// 3. no Content-Encoding header
			// 4. no content response (204)
			// 5. content not modified response (304)
			if (!request.compress || request.method === 'HEAD' || codings === null || res.statusCode === 204 || res.statusCode === 304) {
				response = new Response(body, response_options);
				resolve(response);
				return;
			}

			// For Node v6+
			// Be less strict when decoding compressed responses, since sometimes
			// servers send slightly invalid responses that are still accepted
			// by common browsers.
			// Always using Z_SYNC_FLUSH is what cURL does.
			const zlibOptions = {
				flush: zlib.Z_SYNC_FLUSH,
				finishFlush: zlib.Z_SYNC_FLUSH
			};

			// for gzip
			if (codings == 'gzip' || codings == 'x-gzip') {
				body = body.pipe(zlib.createGunzip(zlibOptions));
				response = new Response(body, response_options);
				resolve(response);
				return;
			}

			// for deflate
			if (codings == 'deflate' || codings == 'x-deflate') {
				// handle the infamous raw deflate response from old servers
				// a hack for old IIS and Apache servers
				const raw = res.pipe(new PassThrough$1());
				raw.once('data', function (chunk) {
					// see http://stackoverflow.com/questions/37519828
					if ((chunk[0] & 0x0F) === 0x08) {
						body = body.pipe(zlib.createInflate());
					} else {
						body = body.pipe(zlib.createInflateRaw());
					}
					response = new Response(body, response_options);
					resolve(response);
				});
				return;
			}

			// for br
			if (codings == 'br' && typeof zlib.createBrotliDecompress === 'function') {
				body = body.pipe(zlib.createBrotliDecompress());
				response = new Response(body, response_options);
				resolve(response);
				return;
			}

			// otherwise, use response as-is
			response = new Response(body, response_options);
			resolve(response);
		});

		writeToStream(req, request);
	});
}
/**
 * Redirect code matching
 *
 * @param   Number   code  Status code
 * @return  Boolean
 */
fetch.isRedirect = function (code) {
	return code === 301 || code === 302 || code === 303 || code === 307 || code === 308;
};

// expose Promise
fetch.Promise = global.Promise;

module.exports = exports = fetch;
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.default = exports;
exports.Headers = Headers;
exports.Request = Request;
exports.Response = Response;
exports.FetchError = FetchError;


/***/ }),

/***/ 1223:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var wrappy = __webpack_require__(2940)
module.exports = wrappy(once)
module.exports.strict = wrappy(onceStrict)

once.proto = once(function () {
  Object.defineProperty(Function.prototype, 'once', {
    value: function () {
      return once(this)
    },
    configurable: true
  })

  Object.defineProperty(Function.prototype, 'onceStrict', {
    value: function () {
      return onceStrict(this)
    },
    configurable: true
  })
})

function once (fn) {
  var f = function () {
    if (f.called) return f.value
    f.called = true
    return f.value = fn.apply(this, arguments)
  }
  f.called = false
  return f
}

function onceStrict (fn) {
  var f = function () {
    if (f.called)
      throw new Error(f.onceError)
    f.called = true
    return f.value = fn.apply(this, arguments)
  }
  var name = fn.name || 'Function wrapped with `once`'
  f.onceError = name + " shouldn't be called more than once"
  f.called = false
  return f
}


/***/ }),

/***/ 4303:
/***/ (function(module) {

;(function(root, factory) {
    // istanbul ignore next
    if (typeof define === "function" && define.amd) {
        // istanbul ignore next
        define([], factory)
    } else if ( true && module.exports) {
        module.exports = factory()
    } else {
        // istanbul ignore next
        root.regexpToAst = factory()
    }
})(
    typeof self !== "undefined"
        ? // istanbul ignore next
          self
        : this,
    function() {
        // references
        // https://hackernoon.com/the-madness-of-parsing-real-world-javascript-regexps-d9ee336df983
        // https://www.ecma-international.org/ecma-262/8.0/index.html#prod-Pattern
        function RegExpParser() {}

        RegExpParser.prototype.saveState = function() {
            return {
                idx: this.idx,
                input: this.input,
                groupIdx: this.groupIdx
            }
        }

        RegExpParser.prototype.restoreState = function(newState) {
            this.idx = newState.idx
            this.input = newState.input
            this.groupIdx = newState.groupIdx
        }

        RegExpParser.prototype.pattern = function(input) {
            // parser state
            this.idx = 0
            this.input = input
            this.groupIdx = 0

            this.consumeChar("/")
            var value = this.disjunction()
            this.consumeChar("/")

            var flags = {
                type: "Flags",
                loc: { begin: this.idx, end: input.length },
                global: false,
                ignoreCase: false,
                multiLine: false,
                unicode: false,
                sticky: false
            }

            while (this.isRegExpFlag()) {
                switch (this.popChar()) {
                    case "g":
                        addFlag(flags, "global")
                        break
                    case "i":
                        addFlag(flags, "ignoreCase")
                        break
                    case "m":
                        addFlag(flags, "multiLine")
                        break
                    case "u":
                        addFlag(flags, "unicode")
                        break
                    case "y":
                        addFlag(flags, "sticky")
                        break
                }
            }

            if (this.idx !== this.input.length) {
                throw Error(
                    "Redundant input: " + this.input.substring(this.idx)
                )
            }
            return {
                type: "Pattern",
                flags: flags,
                value: value,
                loc: this.loc(0)
            }
        }

        RegExpParser.prototype.disjunction = function() {
            var alts = []
            var begin = this.idx

            alts.push(this.alternative())

            while (this.peekChar() === "|") {
                this.consumeChar("|")
                alts.push(this.alternative())
            }

            return { type: "Disjunction", value: alts, loc: this.loc(begin) }
        }

        RegExpParser.prototype.alternative = function() {
            var terms = []
            var begin = this.idx

            while (this.isTerm()) {
                terms.push(this.term())
            }

            return { type: "Alternative", value: terms, loc: this.loc(begin) }
        }

        RegExpParser.prototype.term = function() {
            if (this.isAssertion()) {
                return this.assertion()
            } else {
                return this.atom()
            }
        }

        RegExpParser.prototype.assertion = function() {
            var begin = this.idx
            switch (this.popChar()) {
                case "^":
                    return {
                        type: "StartAnchor",
                        loc: this.loc(begin)
                    }
                case "$":
                    return { type: "EndAnchor", loc: this.loc(begin) }
                // '\b' or '\B'
                case "\\":
                    switch (this.popChar()) {
                        case "b":
                            return {
                                type: "WordBoundary",
                                loc: this.loc(begin)
                            }
                        case "B":
                            return {
                                type: "NonWordBoundary",
                                loc: this.loc(begin)
                            }
                    }
                    // istanbul ignore next
                    throw Error("Invalid Assertion Escape")
                // '(?=' or '(?!'
                case "(":
                    this.consumeChar("?")

                    var type
                    switch (this.popChar()) {
                        case "=":
                            type = "Lookahead"
                            break
                        case "!":
                            type = "NegativeLookahead"
                            break
                    }
                    ASSERT_EXISTS(type)

                    var disjunction = this.disjunction()

                    this.consumeChar(")")

                    return {
                        type: type,
                        value: disjunction,
                        loc: this.loc(begin)
                    }
            }
            // istanbul ignore next
            ASSERT_NEVER_REACH_HERE()
        }

        RegExpParser.prototype.quantifier = function(isBacktracking) {
            var range
            var begin = this.idx
            switch (this.popChar()) {
                case "*":
                    range = {
                        atLeast: 0,
                        atMost: Infinity
                    }
                    break
                case "+":
                    range = {
                        atLeast: 1,
                        atMost: Infinity
                    }
                    break
                case "?":
                    range = {
                        atLeast: 0,
                        atMost: 1
                    }
                    break
                case "{":
                    var atLeast = this.integerIncludingZero()
                    switch (this.popChar()) {
                        case "}":
                            range = {
                                atLeast: atLeast,
                                atMost: atLeast
                            }
                            break
                        case ",":
                            var atMost
                            if (this.isDigit()) {
                                atMost = this.integerIncludingZero()
                                range = {
                                    atLeast: atLeast,
                                    atMost: atMost
                                }
                            } else {
                                range = {
                                    atLeast: atLeast,
                                    atMost: Infinity
                                }
                            }
                            this.consumeChar("}")
                            break
                    }
                    // throwing exceptions from "ASSERT_EXISTS" during backtracking
                    // causes severe performance degradations
                    if (isBacktracking === true && range === undefined) {
                        return undefined
                    }
                    ASSERT_EXISTS(range)
                    break
            }

            // throwing exceptions from "ASSERT_EXISTS" during backtracking
            // causes severe performance degradations
            if (isBacktracking === true && range === undefined) {
                return undefined
            }

            ASSERT_EXISTS(range)

            if (this.peekChar(0) === "?") {
                this.consumeChar("?")
                range.greedy = false
            } else {
                range.greedy = true
            }

            range.type = "Quantifier"
            range.loc = this.loc(begin)
            return range
        }

        RegExpParser.prototype.atom = function() {
            var atom
            var begin = this.idx
            switch (this.peekChar()) {
                case ".":
                    atom = this.dotAll()
                    break
                case "\\":
                    atom = this.atomEscape()
                    break
                case "[":
                    atom = this.characterClass()
                    break
                case "(":
                    atom = this.group()
                    break
            }

            if (atom === undefined && this.isPatternCharacter()) {
                atom = this.patternCharacter()
            }

            ASSERT_EXISTS(atom)

            atom.loc = this.loc(begin)

            if (this.isQuantifier()) {
                atom.quantifier = this.quantifier()
            }

            return atom
        }

        RegExpParser.prototype.dotAll = function() {
            this.consumeChar(".")
            return {
                type: "Set",
                complement: true,
                value: [cc("\n"), cc("\r"), cc("\u2028"), cc("\u2029")]
            }
        }

        RegExpParser.prototype.atomEscape = function() {
            this.consumeChar("\\")

            switch (this.peekChar()) {
                case "1":
                case "2":
                case "3":
                case "4":
                case "5":
                case "6":
                case "7":
                case "8":
                case "9":
                    return this.decimalEscapeAtom()
                case "d":
                case "D":
                case "s":
                case "S":
                case "w":
                case "W":
                    return this.characterClassEscape()
                case "f":
                case "n":
                case "r":
                case "t":
                case "v":
                    return this.controlEscapeAtom()
                case "c":
                    return this.controlLetterEscapeAtom()
                case "0":
                    return this.nulCharacterAtom()
                case "x":
                    return this.hexEscapeSequenceAtom()
                case "u":
                    return this.regExpUnicodeEscapeSequenceAtom()
                default:
                    return this.identityEscapeAtom()
            }
        }

        RegExpParser.prototype.decimalEscapeAtom = function() {
            var value = this.positiveInteger()

            return { type: "GroupBackReference", value: value }
        }

        RegExpParser.prototype.characterClassEscape = function() {
            var set
            var complement = false
            switch (this.popChar()) {
                case "d":
                    set = digitsCharCodes
                    break
                case "D":
                    set = digitsCharCodes
                    complement = true
                    break
                case "s":
                    set = whitespaceCodes
                    break
                case "S":
                    set = whitespaceCodes
                    complement = true
                    break
                case "w":
                    set = wordCharCodes
                    break
                case "W":
                    set = wordCharCodes
                    complement = true
                    break
            }

            ASSERT_EXISTS(set)

            return { type: "Set", value: set, complement: complement }
        }

        RegExpParser.prototype.controlEscapeAtom = function() {
            var escapeCode
            switch (this.popChar()) {
                case "f":
                    escapeCode = cc("\f")
                    break
                case "n":
                    escapeCode = cc("\n")
                    break
                case "r":
                    escapeCode = cc("\r")
                    break
                case "t":
                    escapeCode = cc("\t")
                    break
                case "v":
                    escapeCode = cc("\v")
                    break
            }
            ASSERT_EXISTS(escapeCode)

            return { type: "Character", value: escapeCode }
        }

        RegExpParser.prototype.controlLetterEscapeAtom = function() {
            this.consumeChar("c")
            var letter = this.popChar()
            if (/[a-zA-Z]/.test(letter) === false) {
                throw Error("Invalid ")
            }

            var letterCode = letter.toUpperCase().charCodeAt(0) - 64
            return { type: "Character", value: letterCode }
        }

        RegExpParser.prototype.nulCharacterAtom = function() {
            // TODO implement '[lookahead ∉ DecimalDigit]'
            // TODO: for the deprecated octal escape sequence
            this.consumeChar("0")
            return { type: "Character", value: cc("\0") }
        }

        RegExpParser.prototype.hexEscapeSequenceAtom = function() {
            this.consumeChar("x")
            return this.parseHexDigits(2)
        }

        RegExpParser.prototype.regExpUnicodeEscapeSequenceAtom = function() {
            this.consumeChar("u")
            return this.parseHexDigits(4)
        }

        RegExpParser.prototype.identityEscapeAtom = function() {
            // TODO: implement "SourceCharacter but not UnicodeIDContinue"
            // // http://unicode.org/reports/tr31/#Specific_Character_Adjustments
            var escapedChar = this.popChar()
            return { type: "Character", value: cc(escapedChar) }
        }

        RegExpParser.prototype.classPatternCharacterAtom = function() {
            switch (this.peekChar()) {
                // istanbul ignore next
                case "\n":
                // istanbul ignore next
                case "\r":
                // istanbul ignore next
                case "\u2028":
                // istanbul ignore next
                case "\u2029":
                // istanbul ignore next
                case "\\":
                // istanbul ignore next
                case "]":
                    throw Error("TBD")
                default:
                    var nextChar = this.popChar()
                    return { type: "Character", value: cc(nextChar) }
            }
        }

        RegExpParser.prototype.characterClass = function() {
            var set = []
            var complement = false
            this.consumeChar("[")
            if (this.peekChar(0) === "^") {
                this.consumeChar("^")
                complement = true
            }

            while (this.isClassAtom()) {
                var from = this.classAtom()
                var isFromSingleChar = from.type === "Character"
                if (isFromSingleChar && this.isRangeDash()) {
                    this.consumeChar("-")
                    var to = this.classAtom()
                    var isToSingleChar = to.type === "Character"

                    // a range can only be used when both sides are single characters
                    if (isToSingleChar) {
                        if (to.value < from.value) {
                            throw Error("Range out of order in character class")
                        }
                        set.push({ from: from.value, to: to.value })
                    } else {
                        // literal dash
                        insertToSet(from.value, set)
                        set.push(cc("-"))
                        insertToSet(to.value, set)
                    }
                } else {
                    insertToSet(from.value, set)
                }
            }

            this.consumeChar("]")

            return { type: "Set", complement: complement, value: set }
        }

        RegExpParser.prototype.classAtom = function() {
            switch (this.peekChar()) {
                // istanbul ignore next
                case "]":
                // istanbul ignore next
                case "\n":
                // istanbul ignore next
                case "\r":
                // istanbul ignore next
                case "\u2028":
                // istanbul ignore next
                case "\u2029":
                    throw Error("TBD")
                case "\\":
                    return this.classEscape()
                default:
                    return this.classPatternCharacterAtom()
            }
        }

        RegExpParser.prototype.classEscape = function() {
            this.consumeChar("\\")
            switch (this.peekChar()) {
                // Matches a backspace.
                // (Not to be confused with \b word boundary outside characterClass)
                case "b":
                    this.consumeChar("b")
                    return { type: "Character", value: cc("\u0008") }
                case "d":
                case "D":
                case "s":
                case "S":
                case "w":
                case "W":
                    return this.characterClassEscape()
                case "f":
                case "n":
                case "r":
                case "t":
                case "v":
                    return this.controlEscapeAtom()
                case "c":
                    return this.controlLetterEscapeAtom()
                case "0":
                    return this.nulCharacterAtom()
                case "x":
                    return this.hexEscapeSequenceAtom()
                case "u":
                    return this.regExpUnicodeEscapeSequenceAtom()
                default:
                    return this.identityEscapeAtom()
            }
        }

        RegExpParser.prototype.group = function() {
            var capturing = true
            this.consumeChar("(")
            switch (this.peekChar(0)) {
                case "?":
                    this.consumeChar("?")
                    this.consumeChar(":")
                    capturing = false
                    break
                default:
                    this.groupIdx++
                    break
            }
            var value = this.disjunction()
            this.consumeChar(")")

            var groupAst = {
                type: "Group",
                capturing: capturing,
                value: value
            }

            if (capturing) {
                groupAst.idx = this.groupIdx
            }

            return groupAst
        }

        RegExpParser.prototype.positiveInteger = function() {
            var number = this.popChar()

            // istanbul ignore next - can't ever get here due to previous lookahead checks
            // still implementing this error checking in case this ever changes.
            if (decimalPatternNoZero.test(number) === false) {
                throw Error("Expecting a positive integer")
            }

            while (decimalPattern.test(this.peekChar(0))) {
                number += this.popChar()
            }

            return parseInt(number, 10)
        }

        RegExpParser.prototype.integerIncludingZero = function() {
            var number = this.popChar()
            if (decimalPattern.test(number) === false) {
                throw Error("Expecting an integer")
            }

            while (decimalPattern.test(this.peekChar(0))) {
                number += this.popChar()
            }

            return parseInt(number, 10)
        }

        RegExpParser.prototype.patternCharacter = function() {
            var nextChar = this.popChar()
            switch (nextChar) {
                // istanbul ignore next
                case "\n":
                // istanbul ignore next
                case "\r":
                // istanbul ignore next
                case "\u2028":
                // istanbul ignore next
                case "\u2029":
                // istanbul ignore next
                case "^":
                // istanbul ignore next
                case "$":
                // istanbul ignore next
                case "\\":
                // istanbul ignore next
                case ".":
                // istanbul ignore next
                case "*":
                // istanbul ignore next
                case "+":
                // istanbul ignore next
                case "?":
                // istanbul ignore next
                case "(":
                // istanbul ignore next
                case ")":
                // istanbul ignore next
                case "[":
                // istanbul ignore next
                case "|":
                    // istanbul ignore next
                    throw Error("TBD")
                default:
                    return { type: "Character", value: cc(nextChar) }
            }
        }
        RegExpParser.prototype.isRegExpFlag = function() {
            switch (this.peekChar(0)) {
                case "g":
                case "i":
                case "m":
                case "u":
                case "y":
                    return true
                default:
                    return false
            }
        }

        RegExpParser.prototype.isRangeDash = function() {
            return this.peekChar() === "-" && this.isClassAtom(1)
        }

        RegExpParser.prototype.isDigit = function() {
            return decimalPattern.test(this.peekChar(0))
        }

        RegExpParser.prototype.isClassAtom = function(howMuch) {
            if (howMuch === undefined) {
                howMuch = 0
            }

            switch (this.peekChar(howMuch)) {
                case "]":
                case "\n":
                case "\r":
                case "\u2028":
                case "\u2029":
                    return false
                default:
                    return true
            }
        }

        RegExpParser.prototype.isTerm = function() {
            return this.isAtom() || this.isAssertion()
        }

        RegExpParser.prototype.isAtom = function() {
            if (this.isPatternCharacter()) {
                return true
            }

            switch (this.peekChar(0)) {
                case ".":
                case "\\": // atomEscape
                case "[": // characterClass
                // TODO: isAtom must be called before isAssertion - disambiguate
                case "(": // group
                    return true
                default:
                    return false
            }
        }

        RegExpParser.prototype.isAssertion = function() {
            switch (this.peekChar(0)) {
                case "^":
                case "$":
                    return true
                // '\b' or '\B'
                case "\\":
                    switch (this.peekChar(1)) {
                        case "b":
                        case "B":
                            return true
                        default:
                            return false
                    }
                // '(?=' or '(?!'
                case "(":
                    return (
                        this.peekChar(1) === "?" &&
                        (this.peekChar(2) === "=" || this.peekChar(2) === "!")
                    )
                default:
                    return false
            }
        }

        RegExpParser.prototype.isQuantifier = function() {
            var prevState = this.saveState()
            try {
                return this.quantifier(true) !== undefined
            } catch (e) {
                return false
            } finally {
                this.restoreState(prevState)
            }
        }

        RegExpParser.prototype.isPatternCharacter = function() {
            switch (this.peekChar()) {
                case "^":
                case "$":
                case "\\":
                case ".":
                case "*":
                case "+":
                case "?":
                case "(":
                case ")":
                case "[":
                case "|":
                case "/":
                case "\n":
                case "\r":
                case "\u2028":
                case "\u2029":
                    return false
                default:
                    return true
            }
        }

        RegExpParser.prototype.parseHexDigits = function(howMany) {
            var hexString = ""
            for (var i = 0; i < howMany; i++) {
                var hexChar = this.popChar()
                if (hexDigitPattern.test(hexChar) === false) {
                    throw Error("Expecting a HexDecimal digits")
                }
                hexString += hexChar
            }
            var charCode = parseInt(hexString, 16)
            return { type: "Character", value: charCode }
        }

        RegExpParser.prototype.peekChar = function(howMuch) {
            if (howMuch === undefined) {
                howMuch = 0
            }
            return this.input[this.idx + howMuch]
        }

        RegExpParser.prototype.popChar = function() {
            var nextChar = this.peekChar(0)
            this.consumeChar()
            return nextChar
        }

        RegExpParser.prototype.consumeChar = function(char) {
            if (char !== undefined && this.input[this.idx] !== char) {
                throw Error(
                    "Expected: '" +
                        char +
                        "' but found: '" +
                        this.input[this.idx] +
                        "' at offset: " +
                        this.idx
                )
            }

            if (this.idx >= this.input.length) {
                throw Error("Unexpected end of input")
            }
            this.idx++
        }

        RegExpParser.prototype.loc = function(begin) {
            return { begin: begin, end: this.idx }
        }

        // consts and utilities
        var hexDigitPattern = /[0-9a-fA-F]/
        var decimalPattern = /[0-9]/
        var decimalPatternNoZero = /[1-9]/

        function cc(char) {
            return char.charCodeAt(0)
        }

        function insertToSet(item, set) {
            if (item.length !== undefined) {
                item.forEach(function(subItem) {
                    set.push(subItem)
                })
            } else {
                set.push(item)
            }
        }

        function addFlag(flagObj, flagKey) {
            if (flagObj[flagKey] === true) {
                throw "duplicate flag " + flagKey
            }

            flagObj[flagKey] = true
        }

        function ASSERT_EXISTS(obj) {
            // istanbul ignore next
            if (obj === undefined) {
                throw Error("Internal Error - Should never get here!")
            }
        }

        // istanbul ignore next
        function ASSERT_NEVER_REACH_HERE() {
            throw Error("Internal Error - Should never get here!")
        }

        var i
        var digitsCharCodes = []
        for (i = cc("0"); i <= cc("9"); i++) {
            digitsCharCodes.push(i)
        }

        var wordCharCodes = [cc("_")].concat(digitsCharCodes)
        for (i = cc("a"); i <= cc("z"); i++) {
            wordCharCodes.push(i)
        }

        for (i = cc("A"); i <= cc("Z"); i++) {
            wordCharCodes.push(i)
        }

        // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp#character-classes
        var whitespaceCodes = [
            cc(" "),
            cc("\f"),
            cc("\n"),
            cc("\r"),
            cc("\t"),
            cc("\v"),
            cc("\t"),
            cc("\u00a0"),
            cc("\u1680"),
            cc("\u2000"),
            cc("\u2001"),
            cc("\u2002"),
            cc("\u2003"),
            cc("\u2004"),
            cc("\u2005"),
            cc("\u2006"),
            cc("\u2007"),
            cc("\u2008"),
            cc("\u2009"),
            cc("\u200a"),
            cc("\u2028"),
            cc("\u2029"),
            cc("\u202f"),
            cc("\u205f"),
            cc("\u3000"),
            cc("\ufeff")
        ]

        function BaseRegExpVisitor() {}

        BaseRegExpVisitor.prototype.visitChildren = function(node) {
            for (var key in node) {
                var child = node[key]
                /* istanbul ignore else */
                if (node.hasOwnProperty(key)) {
                    if (child.type !== undefined) {
                        this.visit(child)
                    } else if (Array.isArray(child)) {
                        child.forEach(function(subChild) {
                            this.visit(subChild)
                        }, this)
                    }
                }
            }
        }

        BaseRegExpVisitor.prototype.visit = function(node) {
            switch (node.type) {
                case "Pattern":
                    this.visitPattern(node)
                    break
                case "Flags":
                    this.visitFlags(node)
                    break
                case "Disjunction":
                    this.visitDisjunction(node)
                    break
                case "Alternative":
                    this.visitAlternative(node)
                    break
                case "StartAnchor":
                    this.visitStartAnchor(node)
                    break
                case "EndAnchor":
                    this.visitEndAnchor(node)
                    break
                case "WordBoundary":
                    this.visitWordBoundary(node)
                    break
                case "NonWordBoundary":
                    this.visitNonWordBoundary(node)
                    break
                case "Lookahead":
                    this.visitLookahead(node)
                    break
                case "NegativeLookahead":
                    this.visitNegativeLookahead(node)
                    break
                case "Character":
                    this.visitCharacter(node)
                    break
                case "Set":
                    this.visitSet(node)
                    break
                case "Group":
                    this.visitGroup(node)
                    break
                case "GroupBackReference":
                    this.visitGroupBackReference(node)
                    break
                case "Quantifier":
                    this.visitQuantifier(node)
                    break
            }

            this.visitChildren(node)
        }

        BaseRegExpVisitor.prototype.visitPattern = function(node) {}

        BaseRegExpVisitor.prototype.visitFlags = function(node) {}

        BaseRegExpVisitor.prototype.visitDisjunction = function(node) {}

        BaseRegExpVisitor.prototype.visitAlternative = function(node) {}

        // Assertion
        BaseRegExpVisitor.prototype.visitStartAnchor = function(node) {}

        BaseRegExpVisitor.prototype.visitEndAnchor = function(node) {}

        BaseRegExpVisitor.prototype.visitWordBoundary = function(node) {}

        BaseRegExpVisitor.prototype.visitNonWordBoundary = function(node) {}

        BaseRegExpVisitor.prototype.visitLookahead = function(node) {}

        BaseRegExpVisitor.prototype.visitNegativeLookahead = function(node) {}

        // atoms
        BaseRegExpVisitor.prototype.visitCharacter = function(node) {}

        BaseRegExpVisitor.prototype.visitSet = function(node) {}

        BaseRegExpVisitor.prototype.visitGroup = function(node) {}

        BaseRegExpVisitor.prototype.visitGroupBackReference = function(node) {}

        BaseRegExpVisitor.prototype.visitQuantifier = function(node) {}

        return {
            RegExpParser: RegExpParser,
            BaseRegExpVisitor: BaseRegExpVisitor,
            VERSION: "0.5.0"
        }
    }
)


/***/ }),

/***/ 4294:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

module.exports = __webpack_require__(4219);


/***/ }),

/***/ 4219:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


var net = __webpack_require__(1631);
var tls = __webpack_require__(4016);
var http = __webpack_require__(8605);
var https = __webpack_require__(7211);
var events = __webpack_require__(8614);
var assert = __webpack_require__(2357);
var util = __webpack_require__(1669);


exports.httpOverHttp = httpOverHttp;
exports.httpsOverHttp = httpsOverHttp;
exports.httpOverHttps = httpOverHttps;
exports.httpsOverHttps = httpsOverHttps;


function httpOverHttp(options) {
  var agent = new TunnelingAgent(options);
  agent.request = http.request;
  return agent;
}

function httpsOverHttp(options) {
  var agent = new TunnelingAgent(options);
  agent.request = http.request;
  agent.createSocket = createSecureSocket;
  agent.defaultPort = 443;
  return agent;
}

function httpOverHttps(options) {
  var agent = new TunnelingAgent(options);
  agent.request = https.request;
  return agent;
}

function httpsOverHttps(options) {
  var agent = new TunnelingAgent(options);
  agent.request = https.request;
  agent.createSocket = createSecureSocket;
  agent.defaultPort = 443;
  return agent;
}


function TunnelingAgent(options) {
  var self = this;
  self.options = options || {};
  self.proxyOptions = self.options.proxy || {};
  self.maxSockets = self.options.maxSockets || http.Agent.defaultMaxSockets;
  self.requests = [];
  self.sockets = [];

  self.on('free', function onFree(socket, host, port, localAddress) {
    var options = toOptions(host, port, localAddress);
    for (var i = 0, len = self.requests.length; i < len; ++i) {
      var pending = self.requests[i];
      if (pending.host === options.host && pending.port === options.port) {
        // Detect the request to connect same origin server,
        // reuse the connection.
        self.requests.splice(i, 1);
        pending.request.onSocket(socket);
        return;
      }
    }
    socket.destroy();
    self.removeSocket(socket);
  });
}
util.inherits(TunnelingAgent, events.EventEmitter);

TunnelingAgent.prototype.addRequest = function addRequest(req, host, port, localAddress) {
  var self = this;
  var options = mergeOptions({request: req}, self.options, toOptions(host, port, localAddress));

  if (self.sockets.length >= this.maxSockets) {
    // We are over limit so we'll add it to the queue.
    self.requests.push(options);
    return;
  }

  // If we are under maxSockets create a new one.
  self.createSocket(options, function(socket) {
    socket.on('free', onFree);
    socket.on('close', onCloseOrRemove);
    socket.on('agentRemove', onCloseOrRemove);
    req.onSocket(socket);

    function onFree() {
      self.emit('free', socket, options);
    }

    function onCloseOrRemove(err) {
      self.removeSocket(socket);
      socket.removeListener('free', onFree);
      socket.removeListener('close', onCloseOrRemove);
      socket.removeListener('agentRemove', onCloseOrRemove);
    }
  });
};

TunnelingAgent.prototype.createSocket = function createSocket(options, cb) {
  var self = this;
  var placeholder = {};
  self.sockets.push(placeholder);

  var connectOptions = mergeOptions({}, self.proxyOptions, {
    method: 'CONNECT',
    path: options.host + ':' + options.port,
    agent: false,
    headers: {
      host: options.host + ':' + options.port
    }
  });
  if (options.localAddress) {
    connectOptions.localAddress = options.localAddress;
  }
  if (connectOptions.proxyAuth) {
    connectOptions.headers = connectOptions.headers || {};
    connectOptions.headers['Proxy-Authorization'] = 'Basic ' +
        new Buffer(connectOptions.proxyAuth).toString('base64');
  }

  debug('making CONNECT request');
  var connectReq = self.request(connectOptions);
  connectReq.useChunkedEncodingByDefault = false; // for v0.6
  connectReq.once('response', onResponse); // for v0.6
  connectReq.once('upgrade', onUpgrade);   // for v0.6
  connectReq.once('connect', onConnect);   // for v0.7 or later
  connectReq.once('error', onError);
  connectReq.end();

  function onResponse(res) {
    // Very hacky. This is necessary to avoid http-parser leaks.
    res.upgrade = true;
  }

  function onUpgrade(res, socket, head) {
    // Hacky.
    process.nextTick(function() {
      onConnect(res, socket, head);
    });
  }

  function onConnect(res, socket, head) {
    connectReq.removeAllListeners();
    socket.removeAllListeners();

    if (res.statusCode !== 200) {
      debug('tunneling socket could not be established, statusCode=%d',
        res.statusCode);
      socket.destroy();
      var error = new Error('tunneling socket could not be established, ' +
        'statusCode=' + res.statusCode);
      error.code = 'ECONNRESET';
      options.request.emit('error', error);
      self.removeSocket(placeholder);
      return;
    }
    if (head.length > 0) {
      debug('got illegal response body from proxy');
      socket.destroy();
      var error = new Error('got illegal response body from proxy');
      error.code = 'ECONNRESET';
      options.request.emit('error', error);
      self.removeSocket(placeholder);
      return;
    }
    debug('tunneling connection has established');
    self.sockets[self.sockets.indexOf(placeholder)] = socket;
    return cb(socket);
  }

  function onError(cause) {
    connectReq.removeAllListeners();

    debug('tunneling socket could not be established, cause=%s\n',
          cause.message, cause.stack);
    var error = new Error('tunneling socket could not be established, ' +
                          'cause=' + cause.message);
    error.code = 'ECONNRESET';
    options.request.emit('error', error);
    self.removeSocket(placeholder);
  }
};

TunnelingAgent.prototype.removeSocket = function removeSocket(socket) {
  var pos = this.sockets.indexOf(socket)
  if (pos === -1) {
    return;
  }
  this.sockets.splice(pos, 1);

  var pending = this.requests.shift();
  if (pending) {
    // If we have pending requests and a socket gets closed a new one
    // needs to be created to take over in the pool for the one that closed.
    this.createSocket(pending, function(socket) {
      pending.request.onSocket(socket);
    });
  }
};

function createSecureSocket(options, cb) {
  var self = this;
  TunnelingAgent.prototype.createSocket.call(self, options, function(socket) {
    var hostHeader = options.request.getHeader('host');
    var tlsOptions = mergeOptions({}, self.options, {
      socket: socket,
      servername: hostHeader ? hostHeader.replace(/:.*$/, '') : options.host
    });

    // 0 is dummy port for v0.6
    var secureSocket = tls.connect(0, tlsOptions);
    self.sockets[self.sockets.indexOf(socket)] = secureSocket;
    cb(secureSocket);
  });
}


function toOptions(host, port, localAddress) {
  if (typeof host === 'string') { // since v0.10
    return {
      host: host,
      port: port,
      localAddress: localAddress
    };
  }
  return host; // for v0.11 or later
}

function mergeOptions(target) {
  for (var i = 1, len = arguments.length; i < len; ++i) {
    var overrides = arguments[i];
    if (typeof overrides === 'object') {
      var keys = Object.keys(overrides);
      for (var j = 0, keyLen = keys.length; j < keyLen; ++j) {
        var k = keys[j];
        if (overrides[k] !== undefined) {
          target[k] = overrides[k];
        }
      }
    }
  }
  return target;
}


var debug;
if (process.env.NODE_DEBUG && /\btunnel\b/.test(process.env.NODE_DEBUG)) {
  debug = function() {
    var args = Array.prototype.slice.call(arguments);
    if (typeof args[0] === 'string') {
      args[0] = 'TUNNEL: ' + args[0];
    } else {
      args.unshift('TUNNEL:');
    }
    console.error.apply(console, args);
  }
} else {
  debug = function() {};
}
exports.debug = debug; // for test


/***/ }),

/***/ 5030:
/***/ ((__unused_webpack_module, exports) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({ value: true }));

function getUserAgent() {
  if (typeof navigator === "object" && "userAgent" in navigator) {
    return navigator.userAgent;
  }

  if (typeof process === "object" && "version" in process) {
    return `Node.js/${process.version.substr(1)} (${process.platform}; ${process.arch})`;
  }

  return "<environment undetectable>";
}

exports.getUserAgent = getUserAgent;
//# sourceMappingURL=index.js.map


/***/ }),

/***/ 2940:
/***/ ((module) => {

// Returns a wrapper function that returns a wrapped callback
// The wrapper function should do some stuff, and return a
// presumably different callback function.
// This makes sure that own properties are retained, so that
// decorations and such are not lost along the way.
module.exports = wrappy
function wrappy (fn, cb) {
  if (fn && cb) return wrappy(fn)(cb)

  if (typeof fn !== 'function')
    throw new TypeError('need wrapper function')

  Object.keys(fn).forEach(function (k) {
    wrapper[k] = fn[k]
  })

  return wrapper

  function wrapper() {
    var args = new Array(arguments.length)
    for (var i = 0; i < args.length; i++) {
      args[i] = arguments[i]
    }
    var ret = fn.apply(this, args)
    var cb = args[args.length-1]
    if (typeof ret === 'function' && ret !== cb) {
      Object.keys(cb).forEach(function (k) {
        ret[k] = cb[k]
      })
    }
    return ret
  }
}


/***/ }),

/***/ 7195:
/***/ ((__unused_webpack_module, exports) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
function isNothing(subject) {
    return (typeof subject === 'undefined') || (null === subject);
}
exports.isNothing = isNothing;
function isObject(subject) {
    return (typeof subject === 'object') && (null !== subject);
}
exports.isObject = isObject;
function toArray(sequence) {
    if (Array.isArray(sequence)) {
        return sequence;
    }
    else if (isNothing(sequence)) {
        return [];
    }
    return [sequence];
}
exports.toArray = toArray;
function extend(target, source) {
    var index, length, key, sourceKeys;
    if (source) {
        sourceKeys = Object.keys(source);
        for (index = 0, length = sourceKeys.length; index < length; index += 1) {
            key = sourceKeys[index];
            target[key] = source[key];
        }
    }
    return target;
}
exports.extend = extend;
function repeat(string, count) {
    var result = '', cycle;
    for (cycle = 0; cycle < count; cycle += 1) {
        result += string;
    }
    return result;
}
exports.repeat = repeat;
function isNegativeZero(number) {
    return (0 === number) && (Number.NEGATIVE_INFINITY === 1 / number);
}
exports.isNegativeZero = isNegativeZero;
//# sourceMappingURL=common.js.map

/***/ }),

/***/ 5730:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
var common = __webpack_require__(7195);
var YAMLException = __webpack_require__(1629);
var DEFAULT_FULL_SCHEMA = __webpack_require__(5589);
var DEFAULT_SAFE_SCHEMA = __webpack_require__(8518);
var _toString = Object.prototype.toString;
var _hasOwnProperty = Object.prototype.hasOwnProperty;
var CHAR_TAB = 0x09;
var CHAR_LINE_FEED = 0x0A;
var CHAR_CARRIAGE_RETURN = 0x0D;
var CHAR_SPACE = 0x20;
var CHAR_EXCLAMATION = 0x21;
var CHAR_DOUBLE_QUOTE = 0x22;
var CHAR_SHARP = 0x23;
var CHAR_PERCENT = 0x25;
var CHAR_AMPERSAND = 0x26;
var CHAR_SINGLE_QUOTE = 0x27;
var CHAR_ASTERISK = 0x2A;
var CHAR_COMMA = 0x2C;
var CHAR_MINUS = 0x2D;
var CHAR_COLON = 0x3A;
var CHAR_GREATER_THAN = 0x3E;
var CHAR_QUESTION = 0x3F;
var CHAR_COMMERCIAL_AT = 0x40;
var CHAR_LEFT_SQUARE_BRACKET = 0x5B;
var CHAR_RIGHT_SQUARE_BRACKET = 0x5D;
var CHAR_GRAVE_ACCENT = 0x60;
var CHAR_LEFT_CURLY_BRACKET = 0x7B;
var CHAR_VERTICAL_LINE = 0x7C;
var CHAR_RIGHT_CURLY_BRACKET = 0x7D;
var ESCAPE_SEQUENCES = {};
ESCAPE_SEQUENCES[0x00] = '\\0';
ESCAPE_SEQUENCES[0x07] = '\\a';
ESCAPE_SEQUENCES[0x08] = '\\b';
ESCAPE_SEQUENCES[0x09] = '\\t';
ESCAPE_SEQUENCES[0x0A] = '\\n';
ESCAPE_SEQUENCES[0x0B] = '\\v';
ESCAPE_SEQUENCES[0x0C] = '\\f';
ESCAPE_SEQUENCES[0x0D] = '\\r';
ESCAPE_SEQUENCES[0x1B] = '\\e';
ESCAPE_SEQUENCES[0x22] = '\\"';
ESCAPE_SEQUENCES[0x5C] = '\\\\';
ESCAPE_SEQUENCES[0x85] = '\\N';
ESCAPE_SEQUENCES[0xA0] = '\\_';
ESCAPE_SEQUENCES[0x2028] = '\\L';
ESCAPE_SEQUENCES[0x2029] = '\\P';
var DEPRECATED_BOOLEANS_SYNTAX = [
    'y', 'Y', 'yes', 'Yes', 'YES', 'on', 'On', 'ON',
    'n', 'N', 'no', 'No', 'NO', 'off', 'Off', 'OFF'
];
function compileStyleMap(schema, map) {
    var result, keys, index, length, tag, style, type;
    if (null === map) {
        return {};
    }
    result = {};
    keys = Object.keys(map);
    for (index = 0, length = keys.length; index < length; index += 1) {
        tag = keys[index];
        style = String(map[tag]);
        if ('!!' === tag.slice(0, 2)) {
            tag = 'tag:yaml.org,2002:' + tag.slice(2);
        }
        type = schema.compiledTypeMap[tag];
        if (type && _hasOwnProperty.call(type.styleAliases, style)) {
            style = type.styleAliases[style];
        }
        result[tag] = style;
    }
    return result;
}
function encodeHex(character) {
    var string, handle, length;
    string = character.toString(16).toUpperCase();
    if (character <= 0xFF) {
        handle = 'x';
        length = 2;
    }
    else if (character <= 0xFFFF) {
        handle = 'u';
        length = 4;
    }
    else if (character <= 0xFFFFFFFF) {
        handle = 'U';
        length = 8;
    }
    else {
        throw new YAMLException('code point within a string may not be greater than 0xFFFFFFFF');
    }
    return '\\' + handle + common.repeat('0', length - string.length) + string;
}
function State(options) {
    this.schema = options['schema'] || DEFAULT_FULL_SCHEMA;
    this.indent = Math.max(1, (options['indent'] || 2));
    this.skipInvalid = options['skipInvalid'] || false;
    this.flowLevel = (common.isNothing(options['flowLevel']) ? -1 : options['flowLevel']);
    this.styleMap = compileStyleMap(this.schema, options['styles'] || null);
    this.implicitTypes = this.schema.compiledImplicit;
    this.explicitTypes = this.schema.compiledExplicit;
    this.tag = null;
    this.result = '';
    this.duplicates = [];
    this.usedDuplicates = null;
}
function indentString(string, spaces) {
    var ind = common.repeat(' ', spaces), position = 0, next = -1, result = '', line, length = string.length;
    while (position < length) {
        next = string.indexOf('\n', position);
        if (next === -1) {
            line = string.slice(position);
            position = length;
        }
        else {
            line = string.slice(position, next + 1);
            position = next + 1;
        }
        if (line.length && line !== '\n') {
            result += ind;
        }
        result += line;
    }
    return result;
}
function generateNextLine(state, level) {
    return '\n' + common.repeat(' ', state.indent * level);
}
function testImplicitResolving(state, str) {
    var index, length, type;
    for (index = 0, length = state.implicitTypes.length; index < length; index += 1) {
        type = state.implicitTypes[index];
        if (type.resolve(str)) {
            return true;
        }
    }
    return false;
}
function StringBuilder(source) {
    this.source = source;
    this.result = '';
    this.checkpoint = 0;
}
StringBuilder.prototype.takeUpTo = function (position) {
    var er;
    if (position < this.checkpoint) {
        er = new Error('position should be > checkpoint');
        er.position = position;
        er.checkpoint = this.checkpoint;
        throw er;
    }
    this.result += this.source.slice(this.checkpoint, position);
    this.checkpoint = position;
    return this;
};
StringBuilder.prototype.escapeChar = function () {
    var character, esc;
    character = this.source.charCodeAt(this.checkpoint);
    esc = ESCAPE_SEQUENCES[character] || encodeHex(character);
    this.result += esc;
    this.checkpoint += 1;
    return this;
};
StringBuilder.prototype.finish = function () {
    if (this.source.length > this.checkpoint) {
        this.takeUpTo(this.source.length);
    }
};
function writeScalar(state, object, level) {
    var simple, first, spaceWrap, folded, literal, single, double, sawLineFeed, linePosition, longestLine, indent, max, character, position, escapeSeq, hexEsc, previous, lineLength, modifier, trailingLineBreaks, result;
    if (0 === object.length) {
        state.dump = "''";
        return;
    }
    if (object.indexOf("!include") == 0) {
        state.dump = "" + object;
        return;
    }
    if (object.indexOf("!$$$novalue") == 0) {
        state.dump = "";
        return;
    }
    if (-1 !== DEPRECATED_BOOLEANS_SYNTAX.indexOf(object)) {
        state.dump = "'" + object + "'";
        return;
    }
    simple = true;
    first = object.length ? object.charCodeAt(0) : 0;
    spaceWrap = (CHAR_SPACE === first ||
        CHAR_SPACE === object.charCodeAt(object.length - 1));
    if (CHAR_MINUS === first ||
        CHAR_QUESTION === first ||
        CHAR_COMMERCIAL_AT === first ||
        CHAR_GRAVE_ACCENT === first) {
        simple = false;
    }
    if (spaceWrap) {
        simple = false;
        folded = false;
        literal = false;
    }
    else {
        folded = true;
        literal = true;
    }
    single = true;
    double = new StringBuilder(object);
    sawLineFeed = false;
    linePosition = 0;
    longestLine = 0;
    indent = state.indent * level;
    max = 80;
    if (indent < 40) {
        max -= indent;
    }
    else {
        max = 40;
    }
    for (position = 0; position < object.length; position++) {
        character = object.charCodeAt(position);
        if (simple) {
            if (!simpleChar(character)) {
                simple = false;
            }
            else {
                continue;
            }
        }
        if (single && character === CHAR_SINGLE_QUOTE) {
            single = false;
        }
        escapeSeq = ESCAPE_SEQUENCES[character];
        hexEsc = needsHexEscape(character);
        if (!escapeSeq && !hexEsc) {
            continue;
        }
        if (character !== CHAR_LINE_FEED &&
            character !== CHAR_DOUBLE_QUOTE &&
            character !== CHAR_SINGLE_QUOTE) {
            folded = false;
            literal = false;
        }
        else if (character === CHAR_LINE_FEED) {
            sawLineFeed = true;
            single = false;
            if (position > 0) {
                previous = object.charCodeAt(position - 1);
                if (previous === CHAR_SPACE) {
                    literal = false;
                    folded = false;
                }
            }
            if (folded) {
                lineLength = position - linePosition;
                linePosition = position;
                if (lineLength > longestLine) {
                    longestLine = lineLength;
                }
            }
        }
        if (character !== CHAR_DOUBLE_QUOTE) {
            single = false;
        }
        double.takeUpTo(position);
        double.escapeChar();
    }
    if (simple && testImplicitResolving(state, object)) {
        simple = false;
    }
    modifier = '';
    if (folded || literal) {
        trailingLineBreaks = 0;
        if (object.charCodeAt(object.length - 1) === CHAR_LINE_FEED) {
            trailingLineBreaks += 1;
            if (object.charCodeAt(object.length - 2) === CHAR_LINE_FEED) {
                trailingLineBreaks += 1;
            }
        }
        if (trailingLineBreaks === 0) {
            modifier = '-';
        }
        else if (trailingLineBreaks === 2) {
            modifier = '+';
        }
    }
    if (literal && longestLine < max) {
        folded = false;
    }
    if (!sawLineFeed) {
        literal = false;
    }
    if (simple) {
        state.dump = object;
    }
    else if (single) {
        state.dump = '\'' + object + '\'';
    }
    else if (folded) {
        result = fold(object, max);
        state.dump = '>' + modifier + '\n' + indentString(result, indent);
    }
    else if (literal) {
        if (!modifier) {
            object = object.replace(/\n$/, '');
        }
        state.dump = '|' + modifier + '\n' + indentString(object, indent);
    }
    else if (double) {
        double.finish();
        state.dump = '"' + double.result + '"';
    }
    else {
        throw new Error('Failed to dump scalar value');
    }
    return;
}
function fold(object, max) {
    var result = '', position = 0, length = object.length, trailing = /\n+$/.exec(object), newLine;
    if (trailing) {
        length = trailing.index + 1;
    }
    while (position < length) {
        newLine = object.indexOf('\n', position);
        if (newLine > length || newLine === -1) {
            if (result) {
                result += '\n\n';
            }
            result += foldLine(object.slice(position, length), max);
            position = length;
        }
        else {
            if (result) {
                result += '\n\n';
            }
            result += foldLine(object.slice(position, newLine), max);
            position = newLine + 1;
        }
    }
    if (trailing && trailing[0] !== '\n') {
        result += trailing[0];
    }
    return result;
}
function foldLine(line, max) {
    if (line === '') {
        return line;
    }
    var foldRe = /[^\s] [^\s]/g, result = '', prevMatch = 0, foldStart = 0, match = foldRe.exec(line), index, foldEnd, folded;
    while (match) {
        index = match.index;
        if (index - foldStart > max) {
            if (prevMatch !== foldStart) {
                foldEnd = prevMatch;
            }
            else {
                foldEnd = index;
            }
            if (result) {
                result += '\n';
            }
            folded = line.slice(foldStart, foldEnd);
            result += folded;
            foldStart = foldEnd + 1;
        }
        prevMatch = index + 1;
        match = foldRe.exec(line);
    }
    if (result) {
        result += '\n';
    }
    if (foldStart !== prevMatch && line.length - foldStart > max) {
        result += line.slice(foldStart, prevMatch) + '\n' +
            line.slice(prevMatch + 1);
    }
    else {
        result += line.slice(foldStart);
    }
    return result;
}
function simpleChar(character) {
    return CHAR_TAB !== character &&
        CHAR_LINE_FEED !== character &&
        CHAR_CARRIAGE_RETURN !== character &&
        CHAR_COMMA !== character &&
        CHAR_LEFT_SQUARE_BRACKET !== character &&
        CHAR_RIGHT_SQUARE_BRACKET !== character &&
        CHAR_LEFT_CURLY_BRACKET !== character &&
        CHAR_RIGHT_CURLY_BRACKET !== character &&
        CHAR_SHARP !== character &&
        CHAR_AMPERSAND !== character &&
        CHAR_ASTERISK !== character &&
        CHAR_EXCLAMATION !== character &&
        CHAR_VERTICAL_LINE !== character &&
        CHAR_GREATER_THAN !== character &&
        CHAR_SINGLE_QUOTE !== character &&
        CHAR_DOUBLE_QUOTE !== character &&
        CHAR_PERCENT !== character &&
        CHAR_COLON !== character &&
        !ESCAPE_SEQUENCES[character] &&
        !needsHexEscape(character);
}
function needsHexEscape(character) {
    return !((0x00020 <= character && character <= 0x00007E) ||
        (0x00085 === character) ||
        (0x000A0 <= character && character <= 0x00D7FF) ||
        (0x0E000 <= character && character <= 0x00FFFD) ||
        (0x10000 <= character && character <= 0x10FFFF));
}
function writeFlowSequence(state, level, object) {
    var _result = '', _tag = state.tag, index, length;
    for (index = 0, length = object.length; index < length; index += 1) {
        if (writeNode(state, level, object[index], false, false)) {
            if (0 !== index) {
                _result += ', ';
            }
            _result += state.dump;
        }
    }
    state.tag = _tag;
    state.dump = '[' + _result + ']';
}
function writeBlockSequence(state, level, object, compact) {
    var _result = '', _tag = state.tag, index, length;
    for (index = 0, length = object.length; index < length; index += 1) {
        if (writeNode(state, level + 1, object[index], true, true)) {
            if (!compact || 0 !== index) {
                _result += generateNextLine(state, level);
            }
            _result += '- ' + state.dump;
        }
    }
    state.tag = _tag;
    state.dump = _result || '[]';
}
function writeFlowMapping(state, level, object) {
    var _result = '', _tag = state.tag, objectKeyList = Object.keys(object), index, length, objectKey, objectValue, pairBuffer;
    for (index = 0, length = objectKeyList.length; index < length; index += 1) {
        pairBuffer = '';
        if (0 !== index) {
            pairBuffer += ', ';
        }
        objectKey = objectKeyList[index];
        objectValue = object[objectKey];
        if (!writeNode(state, level, objectKey, false, false)) {
            continue;
        }
        if (state.dump.length > 1024) {
            pairBuffer += '? ';
        }
        pairBuffer += state.dump + ': ';
        if (!writeNode(state, level, objectValue, false, false)) {
            continue;
        }
        pairBuffer += state.dump;
        _result += pairBuffer;
    }
    state.tag = _tag;
    state.dump = '{' + _result + '}';
}
function writeBlockMapping(state, level, object, compact) {
    var _result = '', _tag = state.tag, objectKeyList = Object.keys(object), index, length, objectKey, objectValue, explicitPair, pairBuffer;
    for (index = 0, length = objectKeyList.length; index < length; index += 1) {
        pairBuffer = '';
        if (!compact || 0 !== index) {
            pairBuffer += generateNextLine(state, level);
        }
        objectKey = objectKeyList[index];
        objectValue = object[objectKey];
        if (!writeNode(state, level + 1, objectKey, true, true)) {
            continue;
        }
        explicitPair = (null !== state.tag && '?' !== state.tag) ||
            (state.dump && state.dump.length > 1024);
        if (explicitPair) {
            if (state.dump && CHAR_LINE_FEED === state.dump.charCodeAt(0)) {
                pairBuffer += '?';
            }
            else {
                pairBuffer += '? ';
            }
        }
        pairBuffer += state.dump;
        if (explicitPair) {
            pairBuffer += generateNextLine(state, level);
        }
        if (!writeNode(state, level + 1, objectValue, true, explicitPair)) {
            continue;
        }
        if (state.dump && CHAR_LINE_FEED === state.dump.charCodeAt(0)) {
            pairBuffer += ':';
        }
        else {
            pairBuffer += ': ';
        }
        pairBuffer += state.dump;
        _result += pairBuffer;
    }
    state.tag = _tag;
    state.dump = _result || '{}';
}
function detectType(state, object, explicit) {
    var _result, typeList, index, length, type, style;
    typeList = explicit ? state.explicitTypes : state.implicitTypes;
    for (index = 0, length = typeList.length; index < length; index += 1) {
        type = typeList[index];
        if ((type.instanceOf || type.predicate) &&
            (!type.instanceOf || (('object' === typeof object) && (object instanceof type.instanceOf))) &&
            (!type.predicate || type.predicate(object))) {
            state.tag = explicit ? type.tag : '?';
            if (type.represent) {
                style = state.styleMap[type.tag] || type.defaultStyle;
                if ('[object Function]' === _toString.call(type.represent)) {
                    _result = type.represent(object, style);
                }
                else if (_hasOwnProperty.call(type.represent, style)) {
                    _result = type.represent[style](object, style);
                }
                else {
                    throw new YAMLException('!<' + type.tag + '> tag resolver accepts not "' + style + '" style');
                }
                state.dump = _result;
            }
            return true;
        }
    }
    return false;
}
function writeNode(state, level, object, block, compact) {
    state.tag = null;
    state.dump = object;
    if (!detectType(state, object, false)) {
        detectType(state, object, true);
    }
    var type = _toString.call(state.dump);
    if (block) {
        block = (0 > state.flowLevel || state.flowLevel > level);
    }
    if ((null !== state.tag && '?' !== state.tag) || (2 !== state.indent && level > 0)) {
        compact = false;
    }
    var objectOrArray = '[object Object]' === type || '[object Array]' === type, duplicateIndex, duplicate;
    if (objectOrArray) {
        duplicateIndex = state.duplicates.indexOf(object);
        duplicate = duplicateIndex !== -1;
    }
    if (duplicate && state.usedDuplicates[duplicateIndex]) {
        state.dump = '*ref_' + duplicateIndex;
    }
    else {
        if (objectOrArray && duplicate && !state.usedDuplicates[duplicateIndex]) {
            state.usedDuplicates[duplicateIndex] = true;
        }
        if ('[object Object]' === type) {
            if (block && (0 !== Object.keys(state.dump).length)) {
                writeBlockMapping(state, level, state.dump, compact);
                if (duplicate) {
                    state.dump = '&ref_' + duplicateIndex + (0 === level ? '\n' : '') + state.dump;
                }
            }
            else {
                writeFlowMapping(state, level, state.dump);
                if (duplicate) {
                    state.dump = '&ref_' + duplicateIndex + ' ' + state.dump;
                }
            }
        }
        else if ('[object Array]' === type) {
            if (block && (0 !== state.dump.length)) {
                writeBlockSequence(state, level, state.dump, compact);
                if (duplicate) {
                    state.dump = '&ref_' + duplicateIndex + (0 === level ? '\n' : '') + state.dump;
                }
            }
            else {
                writeFlowSequence(state, level, state.dump);
                if (duplicate) {
                    state.dump = '&ref_' + duplicateIndex + ' ' + state.dump;
                }
            }
        }
        else if ('[object String]' === type) {
            if ('?' !== state.tag) {
                writeScalar(state, state.dump, level);
            }
        }
        else {
            if (state.skipInvalid) {
                return false;
            }
            throw new YAMLException('unacceptable kind of an object to dump ' + type);
        }
        if (null !== state.tag && '?' !== state.tag) {
            state.dump = '!<' + state.tag + '> ' + state.dump;
        }
    }
    return true;
}
function getDuplicateReferences(object, state) {
    var objects = [], duplicatesIndexes = [], index, length;
    inspectNode(object, objects, duplicatesIndexes);
    for (index = 0, length = duplicatesIndexes.length; index < length; index += 1) {
        state.duplicates.push(objects[duplicatesIndexes[index]]);
    }
    state.usedDuplicates = new Array(length);
}
function inspectNode(object, objects, duplicatesIndexes) {
    var type = _toString.call(object), objectKeyList, index, length;
    if (null !== object && 'object' === typeof object) {
        index = objects.indexOf(object);
        if (-1 !== index) {
            if (-1 === duplicatesIndexes.indexOf(index)) {
                duplicatesIndexes.push(index);
            }
        }
        else {
            objects.push(object);
            if (Array.isArray(object)) {
                for (index = 0, length = object.length; index < length; index += 1) {
                    inspectNode(object[index], objects, duplicatesIndexes);
                }
            }
            else {
                objectKeyList = Object.keys(object);
                for (index = 0, length = objectKeyList.length; index < length; index += 1) {
                    inspectNode(object[objectKeyList[index]], objects, duplicatesIndexes);
                }
            }
        }
    }
}
function dump(input, options) {
    options = options || {};
    var state = new State(options);
    getDuplicateReferences(input, state);
    if (writeNode(state, 0, input, true, true)) {
        return state.dump + '\n';
    }
    return '';
}
exports.dump = dump;
function safeDump(input, options) {
    return dump(input, common.extend({ schema: DEFAULT_SAFE_SCHEMA }, options));
}
exports.safeDump = safeDump;
//# sourceMappingURL=dumper.js.map

/***/ }),

/***/ 1629:
/***/ ((module) => {

"use strict";

var YAMLException = (function () {
    function YAMLException(reason, mark, isWarning) {
        if (mark === void 0) { mark = null; }
        if (isWarning === void 0) { isWarning = false; }
        this.name = 'YAMLException';
        this.reason = reason;
        this.mark = mark;
        this.message = this.toString(false);
        this.isWarning = isWarning;
    }
    YAMLException.isInstance = function (instance) {
        if (instance != null && instance.getClassIdentifier
            && typeof (instance.getClassIdentifier) == "function") {
            for (var _i = 0, _a = instance.getClassIdentifier(); _i < _a.length; _i++) {
                var currentIdentifier = _a[_i];
                if (currentIdentifier == YAMLException.CLASS_IDENTIFIER)
                    return true;
            }
        }
        return false;
    };
    YAMLException.prototype.getClassIdentifier = function () {
        var superIdentifiers = [];
        return superIdentifiers.concat(YAMLException.CLASS_IDENTIFIER);
    };
    YAMLException.prototype.toString = function (compact) {
        if (compact === void 0) { compact = false; }
        var result;
        result = 'JS-YAML: ' + (this.reason || '(unknown reason)');
        if (!compact && this.mark) {
            result += ' ' + this.mark.toString();
        }
        return result;
    };
    YAMLException.CLASS_IDENTIFIER = "yaml-ast-parser.YAMLException";
    return YAMLException;
}());
module.exports = YAMLException;
//# sourceMappingURL=exception.js.map

/***/ }),

/***/ 8342:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

function __export(m) {
    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];
}
Object.defineProperty(exports, "__esModule", ({ value: true }));
var loader_1 = __webpack_require__(8729);
exports.load = loader_1.load;
exports.loadAll = loader_1.loadAll;
exports.safeLoad = loader_1.safeLoad;
exports.safeLoadAll = loader_1.safeLoadAll;
var dumper_1 = __webpack_require__(5730);
exports.dump = dumper_1.dump;
exports.safeDump = dumper_1.safeDump;
exports.YAMLException = __webpack_require__(1629);
__export(__webpack_require__(9421));
function deprecated(name) {
    return function () {
        throw new Error('Function ' + name + ' is deprecated and cannot be used.');
    };
}
__export(__webpack_require__(2434));
//# sourceMappingURL=index.js.map

/***/ }),

/***/ 8729:
/***/ ((module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
var ast = __webpack_require__(9421);
'use strict';
var common = __webpack_require__(7195);
var YAMLException = __webpack_require__(1629);
var Mark = __webpack_require__(6324);
var DEFAULT_SAFE_SCHEMA = __webpack_require__(8518);
var DEFAULT_FULL_SCHEMA = __webpack_require__(5589);
var _hasOwnProperty = Object.prototype.hasOwnProperty;
var CONTEXT_FLOW_IN = 1;
var CONTEXT_FLOW_OUT = 2;
var CONTEXT_BLOCK_IN = 3;
var CONTEXT_BLOCK_OUT = 4;
var CHOMPING_CLIP = 1;
var CHOMPING_STRIP = 2;
var CHOMPING_KEEP = 3;
var PATTERN_NON_PRINTABLE = /[\x00-\x08\x0B\x0C\x0E-\x1F\x7F-\x84\x86-\x9F\uFFFE\uFFFF]|[\uD800-\uDBFF](?![\uDC00-\uDFFF])|(?:[^\uD800-\uDBFF]|^)[\uDC00-\uDFFF]/;
var PATTERN_NON_ASCII_LINE_BREAKS = /[\x85\u2028\u2029]/;
var PATTERN_FLOW_INDICATORS = /[,\[\]\{\}]/;
var PATTERN_TAG_HANDLE = /^(?:!|!!|![a-z\-]+!)$/i;
var PATTERN_TAG_URI = /^(?:!|[^,\[\]\{\}])(?:%[0-9a-f]{2}|[0-9a-z\-#;\/\?:@&=\+\$,_\.!~\*'\(\)\[\]])*$/i;
function is_EOL(c) {
    return (c === 0x0A) || (c === 0x0D);
}
function is_WHITE_SPACE(c) {
    return (c === 0x09) || (c === 0x20);
}
function is_WS_OR_EOL(c) {
    return (c === 0x09) ||
        (c === 0x20) ||
        (c === 0x0A) ||
        (c === 0x0D);
}
function is_FLOW_INDICATOR(c) {
    return 0x2C === c ||
        0x5B === c ||
        0x5D === c ||
        0x7B === c ||
        0x7D === c;
}
function fromHexCode(c) {
    var lc;
    if ((0x30 <= c) && (c <= 0x39)) {
        return c - 0x30;
    }
    lc = c | 0x20;
    if ((0x61 <= lc) && (lc <= 0x66)) {
        return lc - 0x61 + 10;
    }
    return -1;
}
function escapedHexLen(c) {
    if (c === 0x78) {
        return 2;
    }
    if (c === 0x75) {
        return 4;
    }
    if (c === 0x55) {
        return 8;
    }
    return 0;
}
function fromDecimalCode(c) {
    if ((0x30 <= c) && (c <= 0x39)) {
        return c - 0x30;
    }
    return -1;
}
function simpleEscapeSequence(c) {
    return (c === 0x30) ? '\x00' :
        (c === 0x61) ? '\x07' :
            (c === 0x62) ? '\x08' :
                (c === 0x74) ? '\x09' :
                    (c === 0x09) ? '\x09' :
                        (c === 0x6E) ? '\x0A' :
                            (c === 0x76) ? '\x0B' :
                                (c === 0x66) ? '\x0C' :
                                    (c === 0x72) ? '\x0D' :
                                        (c === 0x65) ? '\x1B' :
                                            (c === 0x20) ? ' ' :
                                                (c === 0x22) ? '\x22' :
                                                    (c === 0x2F) ? '/' :
                                                        (c === 0x5C) ? '\x5C' :
                                                            (c === 0x4E) ? '\x85' :
                                                                (c === 0x5F) ? '\xA0' :
                                                                    (c === 0x4C) ? '\u2028' :
                                                                        (c === 0x50) ? '\u2029' : '';
}
function charFromCodepoint(c) {
    if (c <= 0xFFFF) {
        return String.fromCharCode(c);
    }
    return String.fromCharCode(((c - 0x010000) >> 10) + 0xD800, ((c - 0x010000) & 0x03FF) + 0xDC00);
}
var simpleEscapeCheck = new Array(256);
var simpleEscapeMap = new Array(256);
var customEscapeCheck = new Array(256);
var customEscapeMap = new Array(256);
for (var i = 0; i < 256; i++) {
    customEscapeMap[i] = simpleEscapeMap[i] = simpleEscapeSequence(i);
    simpleEscapeCheck[i] = simpleEscapeMap[i] ? 1 : 0;
    customEscapeCheck[i] = 1;
    if (!simpleEscapeCheck[i]) {
        customEscapeMap[i] = '\\' + String.fromCharCode(i);
    }
}
var State = (function () {
    function State(input, options) {
        this.errorMap = {};
        this.errors = [];
        this.lines = [];
        this.input = input;
        this.filename = options['filename'] || null;
        this.schema = options['schema'] || DEFAULT_FULL_SCHEMA;
        this.onWarning = options['onWarning'] || null;
        this.legacy = options['legacy'] || false;
        this.allowAnyEscape = options['allowAnyEscape'] || false;
        this.ignoreDuplicateKeys = options['ignoreDuplicateKeys'] || false;
        this.implicitTypes = this.schema.compiledImplicit;
        this.typeMap = this.schema.compiledTypeMap;
        this.length = input.length;
        this.position = 0;
        this.line = 0;
        this.lineStart = 0;
        this.lineIndent = 0;
        this.documents = [];
    }
    return State;
}());
function generateError(state, message, isWarning) {
    if (isWarning === void 0) { isWarning = false; }
    return new YAMLException(message, new Mark(state.filename, state.input, state.position, state.line, (state.position - state.lineStart)), isWarning);
}
function throwErrorFromPosition(state, position, message, isWarning, toLineEnd) {
    if (isWarning === void 0) { isWarning = false; }
    if (toLineEnd === void 0) { toLineEnd = false; }
    var line = positionToLine(state, position);
    if (!line) {
        return;
    }
    var hash = message + position;
    if (state.errorMap[hash]) {
        return;
    }
    var mark = new Mark(state.filename, state.input, position, line.line, (position - line.start));
    if (toLineEnd) {
        mark.toLineEnd = true;
    }
    var error = new YAMLException(message, mark, isWarning);
    state.errors.push(error);
}
function throwError(state, message) {
    var error = generateError(state, message);
    var hash = error.message + error.mark.position;
    if (state.errorMap[hash]) {
        return;
    }
    state.errors.push(error);
    state.errorMap[hash] = 1;
    var or = state.position;
    while (true) {
        if (state.position >= state.input.length - 1) {
            return;
        }
        var c = state.input.charAt(state.position);
        if (c == '\n') {
            state.position--;
            if (state.position == or) {
                state.position += 1;
            }
            return;
        }
        if (c == '\r') {
            state.position--;
            if (state.position == or) {
                state.position += 1;
            }
            return;
        }
        state.position++;
    }
}
function throwWarning(state, message) {
    var error = generateError(state, message);
    if (state.onWarning) {
        state.onWarning.call(null, error);
    }
    else {
    }
}
var directiveHandlers = {
    YAML: function handleYamlDirective(state, name, args) {
        var match, major, minor;
        if (null !== state.version) {
            throwError(state, 'duplication of %YAML directive');
        }
        if (1 !== args.length) {
            throwError(state, 'YAML directive accepts exactly one argument');
        }
        match = /^([0-9]+)\.([0-9]+)$/.exec(args[0]);
        if (null === match) {
            throwError(state, 'ill-formed argument of the YAML directive');
        }
        major = parseInt(match[1], 10);
        minor = parseInt(match[2], 10);
        if (1 !== major) {
            throwError(state, 'found incompatible YAML document (version 1.2 is required)');
        }
        state.version = args[0];
        state.checkLineBreaks = (minor < 2);
        if (2 !== minor) {
            throwError(state, 'found incompatible YAML document (version 1.2 is required)');
        }
    },
    TAG: function handleTagDirective(state, name, args) {
        var handle, prefix;
        if (2 !== args.length) {
            throwError(state, 'TAG directive accepts exactly two arguments');
        }
        handle = args[0];
        prefix = args[1];
        if (!PATTERN_TAG_HANDLE.test(handle)) {
            throwError(state, 'ill-formed tag handle (first argument) of the TAG directive');
        }
        if (_hasOwnProperty.call(state.tagMap, handle)) {
            throwError(state, 'there is a previously declared suffix for "' + handle + '" tag handle');
        }
        if (!PATTERN_TAG_URI.test(prefix)) {
            throwError(state, 'ill-formed tag prefix (second argument) of the TAG directive');
        }
        state.tagMap[handle] = prefix;
    }
};
function captureSegment(state, start, end, checkJson) {
    var _position, _length, _character, _result;
    var scalar = state.result;
    if (scalar.startPosition == -1) {
        scalar.startPosition = start;
    }
    if (start <= end) {
        _result = state.input.slice(start, end);
        if (checkJson) {
            for (_position = 0, _length = _result.length; _position < _length; _position += 1) {
                _character = _result.charCodeAt(_position);
                if (!(0x09 === _character ||
                    0x20 <= _character && _character <= 0x10FFFF)) {
                    throwError(state, 'expected valid JSON character');
                }
            }
        }
        else if (PATTERN_NON_PRINTABLE.test(_result)) {
            throwError(state, 'the stream contains non-printable characters');
        }
        scalar.value += _result;
        scalar.endPosition = end;
    }
}
function mergeMappings(state, destination, source) {
    var sourceKeys, key, index, quantity;
    if (!common.isObject(source)) {
        throwError(state, 'cannot merge mappings; the provided source object is unacceptable');
    }
    sourceKeys = Object.keys(source);
    for (index = 0, quantity = sourceKeys.length; index < quantity; index += 1) {
        key = sourceKeys[index];
        if (!_hasOwnProperty.call(destination, key)) {
            destination[key] = source[key];
        }
    }
}
function storeMappingPair(state, _result, keyTag, keyNode, valueNode) {
    var index, quantity;
    if (keyNode == null) {
        return;
    }
    if (null === _result) {
        _result = {
            startPosition: keyNode.startPosition,
            endPosition: valueNode.endPosition,
            parent: null,
            errors: [],
            mappings: [], kind: ast.Kind.MAP
        };
    }
    var mapping = ast.newMapping(keyNode, valueNode);
    mapping.parent = _result;
    keyNode.parent = mapping;
    if (valueNode != null) {
        valueNode.parent = mapping;
    }
    !state.ignoreDuplicateKeys && _result.mappings.forEach(function (sibling) {
        if (sibling.key && sibling.key.value === (mapping.key && mapping.key.value)) {
            throwErrorFromPosition(state, mapping.key.startPosition, 'duplicate key');
            throwErrorFromPosition(state, sibling.key.startPosition, 'duplicate key');
        }
    });
    _result.mappings.push(mapping);
    _result.endPosition = valueNode ? valueNode.endPosition : keyNode.endPosition + 1;
    return _result;
}
function readLineBreak(state) {
    var ch;
    ch = state.input.charCodeAt(state.position);
    if (0x0A === ch) {
        state.position++;
    }
    else if (0x0D === ch) {
        state.position++;
        if (0x0A === state.input.charCodeAt(state.position)) {
            state.position++;
        }
    }
    else {
        throwError(state, 'a line break is expected');
    }
    state.line += 1;
    state.lineStart = state.position;
    state.lines.push({
        start: state.lineStart,
        line: state.line
    });
}
var Line = (function () {
    function Line() {
    }
    return Line;
}());
function positionToLine(state, position) {
    var line;
    for (var i = 0; i < state.lines.length; i++) {
        if (state.lines[i].start > position) {
            break;
        }
        line = state.lines[i];
    }
    if (!line) {
        return {
            start: 0,
            line: 0
        };
    }
    return line;
}
function skipSeparationSpace(state, allowComments, checkIndent) {
    var lineBreaks = 0, ch = state.input.charCodeAt(state.position);
    while (0 !== ch) {
        while (is_WHITE_SPACE(ch)) {
            if (ch === 0x09) {
                state.errors.push(generateError(state, "Using tabs can lead to unpredictable results", true));
            }
            ch = state.input.charCodeAt(++state.position);
        }
        if (allowComments && 0x23 === ch) {
            do {
                ch = state.input.charCodeAt(++state.position);
            } while (ch !== 0x0A && ch !== 0x0D && 0 !== ch);
        }
        if (is_EOL(ch)) {
            readLineBreak(state);
            ch = state.input.charCodeAt(state.position);
            lineBreaks++;
            state.lineIndent = 0;
            while (0x20 === ch) {
                state.lineIndent++;
                ch = state.input.charCodeAt(++state.position);
            }
        }
        else {
            break;
        }
    }
    if (-1 !== checkIndent && 0 !== lineBreaks && state.lineIndent < checkIndent) {
        throwWarning(state, 'deficient indentation');
    }
    return lineBreaks;
}
function testDocumentSeparator(state) {
    var _position = state.position, ch;
    ch = state.input.charCodeAt(_position);
    if ((0x2D === ch || 0x2E === ch) &&
        state.input.charCodeAt(_position + 1) === ch &&
        state.input.charCodeAt(_position + 2) === ch) {
        _position += 3;
        ch = state.input.charCodeAt(_position);
        if (ch === 0 || is_WS_OR_EOL(ch)) {
            return true;
        }
    }
    return false;
}
function writeFoldedLines(state, scalar, count) {
    if (1 === count) {
        scalar.value += ' ';
    }
    else if (count > 1) {
        scalar.value += common.repeat('\n', count - 1);
    }
}
function readPlainScalar(state, nodeIndent, withinFlowCollection) {
    var preceding, following, captureStart, captureEnd, hasPendingContent, _line, _lineStart, _lineIndent, _kind = state.kind, _result = state.result, ch;
    var state_result = ast.newScalar();
    state_result.plainScalar = true;
    state.result = state_result;
    ch = state.input.charCodeAt(state.position);
    if (is_WS_OR_EOL(ch) ||
        is_FLOW_INDICATOR(ch) ||
        0x23 === ch ||
        0x26 === ch ||
        0x2A === ch ||
        0x21 === ch ||
        0x7C === ch ||
        0x3E === ch ||
        0x27 === ch ||
        0x22 === ch ||
        0x25 === ch ||
        0x40 === ch ||
        0x60 === ch) {
        return false;
    }
    if (0x3F === ch || 0x2D === ch) {
        following = state.input.charCodeAt(state.position + 1);
        if (is_WS_OR_EOL(following) ||
            withinFlowCollection && is_FLOW_INDICATOR(following)) {
            return false;
        }
    }
    state.kind = 'scalar';
    captureStart = captureEnd = state.position;
    hasPendingContent = false;
    while (0 !== ch) {
        if (0x3A === ch) {
            following = state.input.charCodeAt(state.position + 1);
            if (is_WS_OR_EOL(following) ||
                withinFlowCollection && is_FLOW_INDICATOR(following)) {
                break;
            }
        }
        else if (0x23 === ch) {
            preceding = state.input.charCodeAt(state.position - 1);
            if (is_WS_OR_EOL(preceding)) {
                break;
            }
        }
        else if ((state.position === state.lineStart && testDocumentSeparator(state)) ||
            withinFlowCollection && is_FLOW_INDICATOR(ch)) {
            break;
        }
        else if (is_EOL(ch)) {
            _line = state.line;
            _lineStart = state.lineStart;
            _lineIndent = state.lineIndent;
            skipSeparationSpace(state, false, -1);
            if (state.lineIndent >= nodeIndent) {
                hasPendingContent = true;
                ch = state.input.charCodeAt(state.position);
                continue;
            }
            else {
                state.position = captureEnd;
                state.line = _line;
                state.lineStart = _lineStart;
                state.lineIndent = _lineIndent;
                break;
            }
        }
        if (hasPendingContent) {
            captureSegment(state, captureStart, captureEnd, false);
            writeFoldedLines(state, state_result, state.line - _line);
            captureStart = captureEnd = state.position;
            hasPendingContent = false;
        }
        if (!is_WHITE_SPACE(ch)) {
            captureEnd = state.position + 1;
        }
        ch = state.input.charCodeAt(++state.position);
        if (state.position >= state.input.length) {
            return false;
        }
    }
    captureSegment(state, captureStart, captureEnd, false);
    if (state.result.startPosition != -1) {
        state_result.rawValue = state.input.substring(state_result.startPosition, state_result.endPosition);
        return true;
    }
    state.kind = _kind;
    state.result = _result;
    return false;
}
function readSingleQuotedScalar(state, nodeIndent) {
    var ch, captureStart, captureEnd;
    ch = state.input.charCodeAt(state.position);
    if (0x27 !== ch) {
        return false;
    }
    var scalar = ast.newScalar();
    scalar.singleQuoted = true;
    state.kind = 'scalar';
    state.result = scalar;
    scalar.startPosition = state.position;
    state.position++;
    captureStart = captureEnd = state.position;
    while (0 !== (ch = state.input.charCodeAt(state.position))) {
        if (0x27 === ch) {
            captureSegment(state, captureStart, state.position, true);
            ch = state.input.charCodeAt(++state.position);
            scalar.endPosition = state.position;
            if (0x27 === ch) {
                captureStart = captureEnd = state.position;
                state.position++;
            }
            else {
                return true;
            }
        }
        else if (is_EOL(ch)) {
            captureSegment(state, captureStart, captureEnd, true);
            writeFoldedLines(state, scalar, skipSeparationSpace(state, false, nodeIndent));
            captureStart = captureEnd = state.position;
        }
        else if (state.position === state.lineStart && testDocumentSeparator(state)) {
            throwError(state, 'unexpected end of the document within a single quoted scalar');
        }
        else {
            state.position++;
            captureEnd = state.position;
            scalar.endPosition = state.position;
        }
    }
    throwError(state, 'unexpected end of the stream within a single quoted scalar');
}
function readDoubleQuotedScalar(state, nodeIndent) {
    var captureStart, captureEnd, hexLength, hexResult, tmp, tmpEsc, ch;
    ch = state.input.charCodeAt(state.position);
    if (0x22 !== ch) {
        return false;
    }
    state.kind = 'scalar';
    var scalar = ast.newScalar();
    scalar.doubleQuoted = true;
    state.result = scalar;
    scalar.startPosition = state.position;
    state.position++;
    captureStart = captureEnd = state.position;
    while (0 !== (ch = state.input.charCodeAt(state.position))) {
        if (0x22 === ch) {
            captureSegment(state, captureStart, state.position, true);
            state.position++;
            scalar.endPosition = state.position;
            scalar.rawValue = state.input.substring(scalar.startPosition, scalar.endPosition);
            return true;
        }
        else if (0x5C === ch) {
            captureSegment(state, captureStart, state.position, true);
            ch = state.input.charCodeAt(++state.position);
            if (is_EOL(ch)) {
                skipSeparationSpace(state, false, nodeIndent);
            }
            else if (ch < 256 && (state.allowAnyEscape ? customEscapeCheck[ch] : simpleEscapeCheck[ch])) {
                scalar.value += (state.allowAnyEscape ? customEscapeMap[ch] : simpleEscapeMap[ch]);
                state.position++;
            }
            else if ((tmp = escapedHexLen(ch)) > 0) {
                hexLength = tmp;
                hexResult = 0;
                for (; hexLength > 0; hexLength--) {
                    ch = state.input.charCodeAt(++state.position);
                    if ((tmp = fromHexCode(ch)) >= 0) {
                        hexResult = (hexResult << 4) + tmp;
                    }
                    else {
                        throwError(state, 'expected hexadecimal character');
                    }
                }
                scalar.value += charFromCodepoint(hexResult);
                state.position++;
            }
            else {
                throwError(state, 'unknown escape sequence');
            }
            captureStart = captureEnd = state.position;
        }
        else if (is_EOL(ch)) {
            captureSegment(state, captureStart, captureEnd, true);
            writeFoldedLines(state, scalar, skipSeparationSpace(state, false, nodeIndent));
            captureStart = captureEnd = state.position;
        }
        else if (state.position === state.lineStart && testDocumentSeparator(state)) {
            throwError(state, 'unexpected end of the document within a double quoted scalar');
        }
        else {
            state.position++;
            captureEnd = state.position;
        }
    }
    throwError(state, 'unexpected end of the stream within a double quoted scalar');
}
function readFlowCollection(state, nodeIndent) {
    var readNext = true, _line, _tag = state.tag, _result, _anchor = state.anchor, following, terminator, isPair, isExplicitPair, isMapping, keyNode, keyTag, valueNode, ch;
    ch = state.input.charCodeAt(state.position);
    if (ch === 0x5B) {
        terminator = 0x5D;
        isMapping = false;
        _result = ast.newItems();
        _result.startPosition = state.position;
    }
    else if (ch === 0x7B) {
        terminator = 0x7D;
        isMapping = true;
        _result = ast.newMap();
        _result.startPosition = state.position;
    }
    else {
        return false;
    }
    if (null !== state.anchor) {
        _result.anchorId = state.anchor;
        state.anchorMap[state.anchor] = _result;
    }
    ch = state.input.charCodeAt(++state.position);
    while (0 !== ch) {
        skipSeparationSpace(state, true, nodeIndent);
        ch = state.input.charCodeAt(state.position);
        if (ch === terminator) {
            state.position++;
            state.tag = _tag;
            state.anchor = _anchor;
            state.kind = isMapping ? 'mapping' : 'sequence';
            state.result = _result;
            _result.endPosition = state.position;
            return true;
        }
        else if (!readNext) {
            var p = state.position;
            throwError(state, 'missed comma between flow collection entries');
            state.position = p + 1;
        }
        keyTag = keyNode = valueNode = null;
        isPair = isExplicitPair = false;
        if (0x3F === ch) {
            following = state.input.charCodeAt(state.position + 1);
            if (is_WS_OR_EOL(following)) {
                isPair = isExplicitPair = true;
                state.position++;
                skipSeparationSpace(state, true, nodeIndent);
            }
        }
        _line = state.line;
        composeNode(state, nodeIndent, CONTEXT_FLOW_IN, false, true);
        keyTag = state.tag;
        keyNode = state.result;
        skipSeparationSpace(state, true, nodeIndent);
        ch = state.input.charCodeAt(state.position);
        if ((isExplicitPair || state.line === _line) && 0x3A === ch) {
            isPair = true;
            ch = state.input.charCodeAt(++state.position);
            skipSeparationSpace(state, true, nodeIndent);
            composeNode(state, nodeIndent, CONTEXT_FLOW_IN, false, true);
            valueNode = state.result;
        }
        if (isMapping) {
            storeMappingPair(state, _result, keyTag, keyNode, valueNode);
        }
        else if (isPair) {
            var mp = storeMappingPair(state, null, keyTag, keyNode, valueNode);
            mp.parent = _result;
            _result.items.push(mp);
        }
        else {
            if (keyNode) {
                keyNode.parent = _result;
            }
            _result.items.push(keyNode);
        }
        _result.endPosition = state.position + 1;
        skipSeparationSpace(state, true, nodeIndent);
        ch = state.input.charCodeAt(state.position);
        if (0x2C === ch) {
            readNext = true;
            ch = state.input.charCodeAt(++state.position);
        }
        else {
            readNext = false;
        }
    }
    throwError(state, 'unexpected end of the stream within a flow collection');
}
function readBlockScalar(state, nodeIndent) {
    var captureStart, folding, chomping = CHOMPING_CLIP, detectedIndent = false, textIndent = nodeIndent, emptyLines = 0, atMoreIndented = false, tmp, ch;
    ch = state.input.charCodeAt(state.position);
    if (ch === 0x7C) {
        folding = false;
    }
    else if (ch === 0x3E) {
        folding = true;
    }
    else {
        return false;
    }
    var sc = ast.newScalar();
    state.kind = 'scalar';
    state.result = sc;
    sc.startPosition = state.position;
    while (0 !== ch) {
        ch = state.input.charCodeAt(++state.position);
        if (0x2B === ch || 0x2D === ch) {
            if (CHOMPING_CLIP === chomping) {
                chomping = (0x2B === ch) ? CHOMPING_KEEP : CHOMPING_STRIP;
            }
            else {
                throwError(state, 'repeat of a chomping mode identifier');
            }
        }
        else if ((tmp = fromDecimalCode(ch)) >= 0) {
            if (tmp === 0) {
                throwError(state, 'bad explicit indentation width of a block scalar; it cannot be less than one');
            }
            else if (!detectedIndent) {
                textIndent = nodeIndent + tmp - 1;
                detectedIndent = true;
            }
            else {
                throwError(state, 'repeat of an indentation width identifier');
            }
        }
        else {
            break;
        }
    }
    if (is_WHITE_SPACE(ch)) {
        do {
            ch = state.input.charCodeAt(++state.position);
        } while (is_WHITE_SPACE(ch));
        if (0x23 === ch) {
            do {
                ch = state.input.charCodeAt(++state.position);
            } while (!is_EOL(ch) && (0 !== ch));
        }
    }
    while (0 !== ch) {
        readLineBreak(state);
        state.lineIndent = 0;
        ch = state.input.charCodeAt(state.position);
        while ((!detectedIndent || state.lineIndent < textIndent) &&
            (0x20 === ch)) {
            state.lineIndent++;
            ch = state.input.charCodeAt(++state.position);
        }
        if (!detectedIndent && state.lineIndent > textIndent) {
            textIndent = state.lineIndent;
        }
        if (is_EOL(ch)) {
            emptyLines++;
            continue;
        }
        if (state.lineIndent < textIndent) {
            if (chomping === CHOMPING_KEEP) {
                sc.value += common.repeat('\n', emptyLines);
            }
            else if (chomping === CHOMPING_CLIP) {
                if (detectedIndent) {
                    sc.value += '\n';
                }
            }
            break;
        }
        if (folding) {
            if (is_WHITE_SPACE(ch)) {
                atMoreIndented = true;
                sc.value += common.repeat('\n', emptyLines + 1);
            }
            else if (atMoreIndented) {
                atMoreIndented = false;
                sc.value += common.repeat('\n', emptyLines + 1);
            }
            else if (0 === emptyLines) {
                if (detectedIndent) {
                    sc.value += ' ';
                }
            }
            else {
                sc.value += common.repeat('\n', emptyLines);
            }
        }
        else if (detectedIndent) {
            sc.value += common.repeat('\n', emptyLines + 1);
        }
        else {
        }
        detectedIndent = true;
        emptyLines = 0;
        captureStart = state.position;
        while (!is_EOL(ch) && (0 !== ch)) {
            ch = state.input.charCodeAt(++state.position);
        }
        captureSegment(state, captureStart, state.position, false);
    }
    sc.endPosition = state.position;
    var i = state.position - 1;
    var needMinus = false;
    while (true) {
        var c = state.input[i];
        if (c == '\r' || c == '\n') {
            if (needMinus) {
                i--;
            }
            break;
        }
        if (c != ' ' && c != '\t') {
            break;
        }
        i--;
    }
    sc.endPosition = i;
    sc.rawValue = state.input.substring(sc.startPosition, sc.endPosition);
    return true;
}
function readBlockSequence(state, nodeIndent) {
    var _line, _tag = state.tag, _anchor = state.anchor, _result = ast.newItems(), following, detected = false, ch;
    if (null !== state.anchor) {
        _result.anchorId = state.anchor;
        state.anchorMap[state.anchor] = _result;
    }
    _result.startPosition = state.position;
    ch = state.input.charCodeAt(state.position);
    while (0 !== ch) {
        if (0x2D !== ch) {
            break;
        }
        following = state.input.charCodeAt(state.position + 1);
        if (!is_WS_OR_EOL(following)) {
            break;
        }
        detected = true;
        state.position++;
        if (skipSeparationSpace(state, true, -1)) {
            if (state.lineIndent <= nodeIndent) {
                _result.items.push(null);
                ch = state.input.charCodeAt(state.position);
                continue;
            }
        }
        _line = state.line;
        composeNode(state, nodeIndent, CONTEXT_BLOCK_IN, false, true);
        if (state.result) {
            state.result.parent = _result;
            _result.items.push(state.result);
        }
        skipSeparationSpace(state, true, -1);
        ch = state.input.charCodeAt(state.position);
        if ((state.line === _line || state.lineIndent > nodeIndent) && (0 !== ch)) {
            throwError(state, 'bad indentation of a sequence entry');
        }
        else if (state.lineIndent < nodeIndent) {
            break;
        }
    }
    _result.endPosition = state.position;
    if (detected) {
        state.tag = _tag;
        state.anchor = _anchor;
        state.kind = 'sequence';
        state.result = _result;
        _result.endPosition = state.position;
        return true;
    }
    return false;
}
function readBlockMapping(state, nodeIndent, flowIndent) {
    var following, allowCompact, _line, _tag = state.tag, _anchor = state.anchor, _result = ast.newMap(), keyTag = null, keyNode = null, valueNode = null, atExplicitKey = false, detected = false, ch;
    _result.startPosition = state.position;
    if (null !== state.anchor) {
        _result.anchorId = state.anchor;
        state.anchorMap[state.anchor] = _result;
    }
    ch = state.input.charCodeAt(state.position);
    while (0 !== ch) {
        following = state.input.charCodeAt(state.position + 1);
        _line = state.line;
        if ((0x3F === ch || 0x3A === ch) && is_WS_OR_EOL(following)) {
            if (0x3F === ch) {
                if (atExplicitKey) {
                    storeMappingPair(state, _result, keyTag, keyNode, null);
                    keyTag = keyNode = valueNode = null;
                }
                detected = true;
                atExplicitKey = true;
                allowCompact = true;
            }
            else if (atExplicitKey) {
                atExplicitKey = false;
                allowCompact = true;
            }
            else {
                throwError(state, 'incomplete explicit mapping pair; a key node is missed');
            }
            state.position += 1;
            ch = following;
        }
        else if (composeNode(state, flowIndent, CONTEXT_FLOW_OUT, false, true)) {
            if (state.line === _line) {
                ch = state.input.charCodeAt(state.position);
                while (is_WHITE_SPACE(ch)) {
                    ch = state.input.charCodeAt(++state.position);
                }
                if (0x3A === ch) {
                    ch = state.input.charCodeAt(++state.position);
                    if (!is_WS_OR_EOL(ch)) {
                        throwError(state, 'a whitespace character is expected after the key-value separator within a block mapping');
                    }
                    if (atExplicitKey) {
                        storeMappingPair(state, _result, keyTag, keyNode, null);
                        keyTag = keyNode = valueNode = null;
                    }
                    detected = true;
                    atExplicitKey = false;
                    allowCompact = false;
                    keyTag = state.tag;
                    keyNode = state.result;
                }
                else if (state.position == state.lineStart && testDocumentSeparator(state)) {
                    break;
                }
                else if (detected) {
                    throwError(state, 'can not read an implicit mapping pair; a colon is missed');
                }
                else {
                    state.tag = _tag;
                    state.anchor = _anchor;
                    return true;
                }
            }
            else if (detected) {
                throwError(state, 'can not read a block mapping entry; a multiline key may not be an implicit key');
                while (state.position > 0) {
                    ch = state.input.charCodeAt(--state.position);
                    if (is_EOL(ch)) {
                        state.position++;
                        break;
                    }
                }
            }
            else {
                state.tag = _tag;
                state.anchor = _anchor;
                return true;
            }
        }
        else {
            break;
        }
        if (state.line === _line || state.lineIndent > nodeIndent) {
            if (composeNode(state, nodeIndent, CONTEXT_BLOCK_OUT, true, allowCompact)) {
                if (atExplicitKey) {
                    keyNode = state.result;
                }
                else {
                    valueNode = state.result;
                }
            }
            if (!atExplicitKey) {
                storeMappingPair(state, _result, keyTag, keyNode, valueNode);
                keyTag = keyNode = valueNode = null;
            }
            skipSeparationSpace(state, true, -1);
            ch = state.input.charCodeAt(state.position);
        }
        if (state.lineIndent > nodeIndent && (0 !== ch)) {
            throwError(state, 'bad indentation of a mapping entry');
        }
        else if (state.lineIndent < nodeIndent) {
            break;
        }
    }
    if (atExplicitKey) {
        storeMappingPair(state, _result, keyTag, keyNode, null);
    }
    if (detected) {
        state.tag = _tag;
        state.anchor = _anchor;
        state.kind = 'mapping';
        state.result = _result;
    }
    return detected;
}
function readTagProperty(state) {
    var _position, isVerbatim = false, isNamed = false, tagHandle, tagName, ch;
    ch = state.input.charCodeAt(state.position);
    if (0x21 !== ch) {
        return false;
    }
    if (null !== state.tag) {
        throwError(state, 'duplication of a tag property');
    }
    ch = state.input.charCodeAt(++state.position);
    if (0x3C === ch) {
        isVerbatim = true;
        ch = state.input.charCodeAt(++state.position);
    }
    else if (0x21 === ch) {
        isNamed = true;
        tagHandle = '!!';
        ch = state.input.charCodeAt(++state.position);
    }
    else {
        tagHandle = '!';
    }
    _position = state.position;
    if (isVerbatim) {
        do {
            ch = state.input.charCodeAt(++state.position);
        } while (0 !== ch && 0x3E !== ch);
        if (state.position < state.length) {
            tagName = state.input.slice(_position, state.position);
            ch = state.input.charCodeAt(++state.position);
        }
        else {
            throwError(state, 'unexpected end of the stream within a verbatim tag');
        }
    }
    else {
        while (0 !== ch && !is_WS_OR_EOL(ch)) {
            if (0x21 === ch) {
                if (!isNamed) {
                    tagHandle = state.input.slice(_position - 1, state.position + 1);
                    if (!PATTERN_TAG_HANDLE.test(tagHandle)) {
                        throwError(state, 'named tag handle cannot contain such characters');
                    }
                    isNamed = true;
                    _position = state.position + 1;
                }
                else {
                    throwError(state, 'tag suffix cannot contain exclamation marks');
                }
            }
            ch = state.input.charCodeAt(++state.position);
        }
        tagName = state.input.slice(_position, state.position);
        if (PATTERN_FLOW_INDICATORS.test(tagName)) {
            throwError(state, 'tag suffix cannot contain flow indicator characters');
        }
    }
    if (tagName && !PATTERN_TAG_URI.test(tagName)) {
        throwError(state, 'tag name cannot contain such characters: ' + tagName);
    }
    if (isVerbatim) {
        state.tag = tagName;
    }
    else if (_hasOwnProperty.call(state.tagMap, tagHandle)) {
        state.tag = state.tagMap[tagHandle] + tagName;
    }
    else if ('!' === tagHandle) {
        state.tag = '!' + tagName;
    }
    else if ('!!' === tagHandle) {
        state.tag = 'tag:yaml.org,2002:' + tagName;
    }
    else {
        throwError(state, 'undeclared tag handle "' + tagHandle + '"');
    }
    return true;
}
function readAnchorProperty(state) {
    var _position, ch;
    ch = state.input.charCodeAt(state.position);
    if (0x26 !== ch) {
        return false;
    }
    if (null !== state.anchor) {
        throwError(state, 'duplication of an anchor property');
    }
    ch = state.input.charCodeAt(++state.position);
    _position = state.position;
    while (0 !== ch && !is_WS_OR_EOL(ch) && !is_FLOW_INDICATOR(ch)) {
        ch = state.input.charCodeAt(++state.position);
    }
    if (state.position === _position) {
        throwError(state, 'name of an anchor node must contain at least one character');
    }
    state.anchor = state.input.slice(_position, state.position);
    return true;
}
function readAlias(state) {
    var _position, alias, len = state.length, input = state.input, ch;
    ch = state.input.charCodeAt(state.position);
    if (0x2A !== ch) {
        return false;
    }
    ch = state.input.charCodeAt(++state.position);
    _position = state.position;
    while (0 !== ch && !is_WS_OR_EOL(ch) && !is_FLOW_INDICATOR(ch)) {
        ch = state.input.charCodeAt(++state.position);
    }
    if (state.position <= _position) {
        throwError(state, 'name of an alias node must contain at least one character');
        state.position = _position + 1;
    }
    alias = state.input.slice(_position, state.position);
    if (!state.anchorMap.hasOwnProperty(alias)) {
        throwError(state, 'unidentified alias "' + alias + '"');
        if (state.position <= _position) {
            state.position = _position + 1;
        }
    }
    state.result = ast.newAnchorRef(alias, _position, state.position, state.anchorMap[alias]);
    skipSeparationSpace(state, true, -1);
    return true;
}
function composeNode(state, parentIndent, nodeContext, allowToSeek, allowCompact) {
    var allowBlockStyles, allowBlockScalars, allowBlockCollections, indentStatus = 1, atNewLine = false, hasContent = false, typeIndex, typeQuantity, type, flowIndent, blockIndent, _result;
    state.tag = null;
    state.anchor = null;
    state.kind = null;
    state.result = null;
    allowBlockStyles = allowBlockScalars = allowBlockCollections =
        CONTEXT_BLOCK_OUT === nodeContext ||
            CONTEXT_BLOCK_IN === nodeContext;
    if (allowToSeek) {
        if (skipSeparationSpace(state, true, -1)) {
            atNewLine = true;
            if (state.lineIndent > parentIndent) {
                indentStatus = 1;
            }
            else if (state.lineIndent === parentIndent) {
                indentStatus = 0;
            }
            else if (state.lineIndent < parentIndent) {
                indentStatus = -1;
            }
        }
    }
    var tagStart = state.position;
    var tagColumn = state.position - state.lineStart;
    if (1 === indentStatus) {
        while (readTagProperty(state) || readAnchorProperty(state)) {
            if (skipSeparationSpace(state, true, -1)) {
                atNewLine = true;
                allowBlockCollections = allowBlockStyles;
                if (state.lineIndent > parentIndent) {
                    indentStatus = 1;
                }
                else if (state.lineIndent === parentIndent) {
                    indentStatus = 0;
                }
                else if (state.lineIndent < parentIndent) {
                    indentStatus = -1;
                }
            }
            else {
                allowBlockCollections = false;
            }
        }
    }
    if (allowBlockCollections) {
        allowBlockCollections = atNewLine || allowCompact;
    }
    if (1 === indentStatus || CONTEXT_BLOCK_OUT === nodeContext) {
        if (CONTEXT_FLOW_IN === nodeContext || CONTEXT_FLOW_OUT === nodeContext) {
            flowIndent = parentIndent;
        }
        else {
            flowIndent = parentIndent + 1;
        }
        blockIndent = state.position - state.lineStart;
        if (1 === indentStatus) {
            if (allowBlockCollections &&
                (readBlockSequence(state, blockIndent) ||
                    readBlockMapping(state, blockIndent, flowIndent)) ||
                readFlowCollection(state, flowIndent)) {
                hasContent = true;
            }
            else {
                if ((allowBlockScalars && readBlockScalar(state, flowIndent)) ||
                    readSingleQuotedScalar(state, flowIndent) ||
                    readDoubleQuotedScalar(state, flowIndent)) {
                    hasContent = true;
                }
                else if (readAlias(state)) {
                    hasContent = true;
                    if (null !== state.tag || null !== state.anchor) {
                        throwError(state, 'alias node should not have any properties');
                    }
                }
                else if (readPlainScalar(state, flowIndent, CONTEXT_FLOW_IN === nodeContext)) {
                    hasContent = true;
                    if (null === state.tag) {
                        state.tag = '?';
                    }
                }
                if (null !== state.anchor) {
                    state.anchorMap[state.anchor] = state.result;
                    state.result.anchorId = state.anchor;
                }
            }
        }
        else if (0 === indentStatus) {
            hasContent = allowBlockCollections && readBlockSequence(state, blockIndent);
        }
    }
    if (null !== state.tag && '!' !== state.tag) {
        if (state.tag == "!include") {
            if (!state.result) {
                state.result = ast.newScalar();
                state.result.startPosition = state.position;
                state.result.endPosition = state.position;
                throwError(state, "!include without value");
            }
            state.result.kind = ast.Kind.INCLUDE_REF;
        }
        else if ('?' === state.tag) {
            for (typeIndex = 0, typeQuantity = state.implicitTypes.length; typeIndex < typeQuantity; typeIndex += 1) {
                type = state.implicitTypes[typeIndex];
                var vl = state.result['value'];
                if (type.resolve(vl)) {
                    state.result.valueObject = type.construct(state.result['value']);
                    state.tag = type.tag;
                    if (null !== state.anchor) {
                        state.result.anchorId = state.anchor;
                        state.anchorMap[state.anchor] = state.result;
                    }
                    break;
                }
            }
        }
        else if (_hasOwnProperty.call(state.typeMap, state.tag)) {
            type = state.typeMap[state.tag];
            if (null !== state.result && type.kind !== state.kind) {
                throwError(state, 'unacceptable node kind for !<' + state.tag + '> tag; it should be "' + type.kind + '", not "' + state.kind + '"');
            }
            if (!type.resolve(state.result)) {
                throwError(state, 'cannot resolve a node with !<' + state.tag + '> explicit tag');
            }
            else {
                state.result = type.construct(state.result);
                if (null !== state.anchor) {
                    state.result.anchorId = state.anchor;
                    state.anchorMap[state.anchor] = state.result;
                }
            }
        }
        else {
            throwErrorFromPosition(state, tagStart, 'unknown tag <' + state.tag + '>', false, true);
        }
    }
    return null !== state.tag || null !== state.anchor || hasContent;
}
function readDocument(state) {
    var documentStart = state.position, _position, directiveName, directiveArgs, hasDirectives = false, ch;
    state.version = null;
    state.checkLineBreaks = state.legacy;
    state.tagMap = {};
    state.anchorMap = {};
    while (0 !== (ch = state.input.charCodeAt(state.position))) {
        skipSeparationSpace(state, true, -1);
        ch = state.input.charCodeAt(state.position);
        if (state.lineIndent > 0 || 0x25 !== ch) {
            break;
        }
        hasDirectives = true;
        ch = state.input.charCodeAt(++state.position);
        _position = state.position;
        while (0 !== ch && !is_WS_OR_EOL(ch)) {
            ch = state.input.charCodeAt(++state.position);
        }
        directiveName = state.input.slice(_position, state.position);
        directiveArgs = [];
        if (directiveName.length < 1) {
            throwError(state, 'directive name must not be less than one character in length');
        }
        while (0 !== ch) {
            while (is_WHITE_SPACE(ch)) {
                ch = state.input.charCodeAt(++state.position);
            }
            if (0x23 === ch) {
                do {
                    ch = state.input.charCodeAt(++state.position);
                } while (0 !== ch && !is_EOL(ch));
                break;
            }
            if (is_EOL(ch)) {
                break;
            }
            _position = state.position;
            while (0 !== ch && !is_WS_OR_EOL(ch)) {
                ch = state.input.charCodeAt(++state.position);
            }
            directiveArgs.push(state.input.slice(_position, state.position));
        }
        if (0 !== ch) {
            readLineBreak(state);
        }
        if (_hasOwnProperty.call(directiveHandlers, directiveName)) {
            directiveHandlers[directiveName](state, directiveName, directiveArgs);
        }
        else {
            throwWarning(state, 'unknown document directive "' + directiveName + '"');
            state.position++;
        }
    }
    skipSeparationSpace(state, true, -1);
    if (0 === state.lineIndent &&
        0x2D === state.input.charCodeAt(state.position) &&
        0x2D === state.input.charCodeAt(state.position + 1) &&
        0x2D === state.input.charCodeAt(state.position + 2)) {
        state.position += 3;
        skipSeparationSpace(state, true, -1);
    }
    else if (hasDirectives) {
        throwError(state, 'directives end mark is expected');
    }
    composeNode(state, state.lineIndent - 1, CONTEXT_BLOCK_OUT, false, true);
    skipSeparationSpace(state, true, -1);
    if (state.checkLineBreaks &&
        PATTERN_NON_ASCII_LINE_BREAKS.test(state.input.slice(documentStart, state.position))) {
        throwWarning(state, 'non-ASCII line breaks are interpreted as content');
    }
    state.documents.push(state.result);
    if (state.position === state.lineStart && testDocumentSeparator(state)) {
        if (0x2E === state.input.charCodeAt(state.position)) {
            state.position += 3;
            skipSeparationSpace(state, true, -1);
        }
        return;
    }
    if (state.position < (state.length - 1)) {
        throwError(state, 'end of the stream or a document separator is expected');
    }
    else {
        return;
    }
}
function loadDocuments(input, options) {
    input = String(input);
    options = options || {};
    var inputLength = input.length;
    if (inputLength !== 0) {
        if (0x0A !== input.charCodeAt(inputLength - 1) &&
            0x0D !== input.charCodeAt(inputLength - 1)) {
            input += '\n';
        }
        if (input.charCodeAt(0) === 0xFEFF) {
            input = input.slice(1);
        }
    }
    var state = new State(input, options);
    state.input += '\0';
    while (0x20 === state.input.charCodeAt(state.position)) {
        state.lineIndent += 1;
        state.position += 1;
    }
    while (state.position < (state.length - 1)) {
        var q = state.position;
        readDocument(state);
        if (state.position <= q) {
            for (; state.position < state.length - 1; state.position++) {
                var c = state.input.charAt(state.position);
                if (c == '\n') {
                    break;
                }
            }
        }
    }
    var documents = state.documents;
    var docsCount = documents.length;
    if (docsCount > 0) {
        documents[docsCount - 1].endPosition = inputLength;
    }
    for (var _i = 0, documents_1 = documents; _i < documents_1.length; _i++) {
        var x = documents_1[_i];
        x.errors = state.errors;
        if (x.startPosition > x.endPosition) {
            x.startPosition = x.endPosition;
        }
    }
    return documents;
}
function loadAll(input, iterator, options) {
    if (options === void 0) { options = {}; }
    var documents = loadDocuments(input, options), index, length;
    for (index = 0, length = documents.length; index < length; index += 1) {
        iterator(documents[index]);
    }
}
exports.loadAll = loadAll;
function load(input, options) {
    if (options === void 0) { options = {}; }
    var documents = loadDocuments(input, options), index, length;
    if (0 === documents.length) {
        return undefined;
    }
    else if (1 === documents.length) {
        return documents[0];
    }
    var e = new YAMLException('expected a single document in the stream, but found more');
    e.mark = new Mark("", "", 0, 0, 0);
    e.mark.position = documents[0].endPosition;
    documents[0].errors.push(e);
    return documents[0];
}
exports.load = load;
function safeLoadAll(input, output, options) {
    if (options === void 0) { options = {}; }
    loadAll(input, output, common.extend({ schema: DEFAULT_SAFE_SCHEMA }, options));
}
exports.safeLoadAll = safeLoadAll;
function safeLoad(input, options) {
    if (options === void 0) { options = {}; }
    return load(input, common.extend({ schema: DEFAULT_SAFE_SCHEMA }, options));
}
exports.safeLoad = safeLoad;
module.exports.loadAll = loadAll;
module.exports.load = load;
module.exports.safeLoadAll = safeLoadAll;
module.exports.safeLoad = safeLoad;
//# sourceMappingURL=loader.js.map

/***/ }),

/***/ 6324:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";

var common = __webpack_require__(7195);
var Mark = (function () {
    function Mark(name, buffer, position, line, column) {
        this.name = name;
        this.buffer = buffer;
        this.position = position;
        this.line = line;
        this.column = column;
    }
    Mark.prototype.getSnippet = function (indent, maxLength) {
        if (indent === void 0) { indent = 0; }
        if (maxLength === void 0) { maxLength = 75; }
        var head, start, tail, end, snippet;
        if (!this.buffer) {
            return null;
        }
        indent = indent || 4;
        maxLength = maxLength || 75;
        head = '';
        start = this.position;
        while (start > 0 && -1 === '\x00\r\n\x85\u2028\u2029'.indexOf(this.buffer.charAt(start - 1))) {
            start -= 1;
            if (this.position - start > (maxLength / 2 - 1)) {
                head = ' ... ';
                start += 5;
                break;
            }
        }
        tail = '';
        end = this.position;
        while (end < this.buffer.length && -1 === '\x00\r\n\x85\u2028\u2029'.indexOf(this.buffer.charAt(end))) {
            end += 1;
            if (end - this.position > (maxLength / 2 - 1)) {
                tail = ' ... ';
                end -= 5;
                break;
            }
        }
        snippet = this.buffer.slice(start, end);
        return common.repeat(' ', indent) + head + snippet + tail + '\n' +
            common.repeat(' ', indent + this.position - start + head.length) + '^';
    };
    Mark.prototype.toString = function (compact) {
        if (compact === void 0) { compact = true; }
        var snippet, where = '';
        if (this.name) {
            where += 'in "' + this.name + '" ';
        }
        where += 'at line ' + (this.line + 1) + ', column ' + (this.column + 1);
        if (!compact) {
            snippet = this.getSnippet();
            if (snippet) {
                where += ':\n' + snippet;
            }
        }
        return where;
    };
    return Mark;
}());
module.exports = Mark;
//# sourceMappingURL=mark.js.map

/***/ }),

/***/ 2434:
/***/ ((__unused_webpack_module, exports) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
function parseYamlBoolean(input) {
    if (["true", "True", "TRUE"].lastIndexOf(input) >= 0) {
        return true;
    }
    else if (["false", "False", "FALSE"].lastIndexOf(input) >= 0) {
        return false;
    }
    throw "Invalid boolean \"" + input + "\"";
}
exports.parseYamlBoolean = parseYamlBoolean;
function safeParseYamlInteger(input) {
    if (input.lastIndexOf('0o', 0) === 0) {
        return parseInt(input.substring(2), 8);
    }
    return parseInt(input);
}
function parseYamlInteger(input) {
    var result = safeParseYamlInteger(input);
    if (isNaN(result)) {
        throw "Invalid integer \"" + input + "\"";
    }
    return result;
}
exports.parseYamlInteger = parseYamlInteger;
function parseYamlFloat(input) {
    if ([".nan", ".NaN", ".NAN"].lastIndexOf(input) >= 0) {
        return NaN;
    }
    var infinity = /^([-+])?(?:\.inf|\.Inf|\.INF)$/;
    var match = infinity.exec(input);
    if (match) {
        return (match[1] === '-') ? -Infinity : Infinity;
    }
    var result = parseFloat(input);
    if (!isNaN(result)) {
        return result;
    }
    throw "Invalid float \"" + input + "\"";
}
exports.parseYamlFloat = parseYamlFloat;
var ScalarType;
(function (ScalarType) {
    ScalarType[ScalarType["null"] = 0] = "null";
    ScalarType[ScalarType["bool"] = 1] = "bool";
    ScalarType[ScalarType["int"] = 2] = "int";
    ScalarType[ScalarType["float"] = 3] = "float";
    ScalarType[ScalarType["string"] = 4] = "string";
})(ScalarType = exports.ScalarType || (exports.ScalarType = {}));
function determineScalarType(node) {
    if (node === undefined) {
        return ScalarType.null;
    }
    if (node.doubleQuoted || !node.plainScalar || node['singleQuoted']) {
        return ScalarType.string;
    }
    var value = node.value;
    if (["null", "Null", "NULL", "~", ''].indexOf(value) >= 0) {
        return ScalarType.null;
    }
    if (value === null || value === undefined) {
        return ScalarType.null;
    }
    if (["true", "True", "TRUE", "false", "False", "FALSE"].indexOf(value) >= 0) {
        return ScalarType.bool;
    }
    var base10 = /^[-+]?[0-9]+$/;
    var base8 = /^0o[0-7]+$/;
    var base16 = /^0x[0-9a-fA-F]+$/;
    if (base10.test(value) || base8.test(value) || base16.test(value)) {
        return ScalarType.int;
    }
    var float = /^[-+]?(\.[0-9]+|[0-9]+(\.[0-9]*)?)([eE][-+]?[0-9]+)?$/;
    var infinity = /^[-+]?(\.inf|\.Inf|\.INF)$/;
    if (float.test(value) || infinity.test(value) || [".nan", ".NaN", ".NAN"].indexOf(value) >= 0) {
        return ScalarType.float;
    }
    return ScalarType.string;
}
exports.determineScalarType = determineScalarType;
//# sourceMappingURL=scalarInference.js.map

/***/ }),

/***/ 6488:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
var common = __webpack_require__(7195);
var YAMLException = __webpack_require__(1629);
var type_1 = __webpack_require__(4642);
function compileList(schema, name, result) {
    var exclude = [];
    schema.include.forEach(function (includedSchema) {
        result = compileList(includedSchema, name, result);
    });
    schema[name].forEach(function (currentType) {
        result.forEach(function (previousType, previousIndex) {
            if (previousType.tag === currentType.tag) {
                exclude.push(previousIndex);
            }
        });
        result.push(currentType);
    });
    return result.filter(function (type, index) {
        return -1 === exclude.indexOf(index);
    });
}
function compileMap() {
    var result = {}, index, length;
    function collectType(type) {
        result[type.tag] = type;
    }
    for (index = 0, length = arguments.length; index < length; index += 1) {
        arguments[index].forEach(collectType);
    }
    return result;
}
var Schema = (function () {
    function Schema(definition) {
        this.include = definition.include || [];
        this.implicit = definition.implicit || [];
        this.explicit = definition.explicit || [];
        this.implicit.forEach(function (type) {
            if (type.loadKind && 'scalar' !== type.loadKind) {
                throw new YAMLException('There is a non-scalar type in the implicit list of a schema. Implicit resolving of such types is not supported.');
            }
        });
        this.compiledImplicit = compileList(this, 'implicit', []);
        this.compiledExplicit = compileList(this, 'explicit', []);
        this.compiledTypeMap = compileMap(this.compiledImplicit, this.compiledExplicit);
    }
    Schema.DEFAULT = null;
    Schema.create = function createSchema() {
        var schemas, types;
        switch (arguments.length) {
            case 1:
                schemas = Schema.DEFAULT;
                types = arguments[0];
                break;
            case 2:
                schemas = arguments[0];
                types = arguments[1];
                break;
            default:
                throw new YAMLException('Wrong number of arguments for Schema.create function');
        }
        schemas = common.toArray(schemas);
        types = common.toArray(types);
        if (!schemas.every(function (schema) { return schema instanceof Schema; })) {
            throw new YAMLException('Specified list of super schemas (or a single Schema object) contains a non-Schema object.');
        }
        if (!types.every(function (type) { return type instanceof type_1.Type; })) {
            throw new YAMLException('Specified list of YAML types (or a single Type object) contains a non-Type object.');
        }
        return new Schema({
            include: schemas,
            explicit: types
        });
    };
    return Schema;
}());
exports.Schema = Schema;
//# sourceMappingURL=schema.js.map

/***/ }),

/***/ 1038:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";

var schema_1 = __webpack_require__(6488);
module.exports = new schema_1.Schema({
    include: [
        __webpack_require__(8168)
    ]
});
//# sourceMappingURL=core.js.map

/***/ }),

/***/ 5589:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";

var schema_1 = __webpack_require__(6488);
var schema = new schema_1.Schema({
    include: [
        __webpack_require__(8518)
    ],
    explicit: [
        __webpack_require__(2706),
        __webpack_require__(7018)
    ]
});
schema_1.Schema.DEFAULT = schema;
module.exports = schema;
//# sourceMappingURL=default_full.js.map

/***/ }),

/***/ 8518:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";

var schema_1 = __webpack_require__(6488);
var schema = new schema_1.Schema({
    include: [
        __webpack_require__(1038)
    ],
    implicit: [
        __webpack_require__(4214),
        __webpack_require__(8676)
    ],
    explicit: [
        __webpack_require__(7892),
        __webpack_require__(2246),
        __webpack_require__(2594),
        __webpack_require__(6840)
    ]
});
module.exports = schema;
//# sourceMappingURL=default_safe.js.map

/***/ }),

/***/ 8651:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";

var schema_1 = __webpack_require__(6488);
module.exports = new schema_1.Schema({
    explicit: [
        __webpack_require__(5801),
        __webpack_require__(5861),
        __webpack_require__(7444)
    ]
});
//# sourceMappingURL=failsafe.js.map

/***/ }),

/***/ 8168:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";

var schema_1 = __webpack_require__(6488);
module.exports = new schema_1.Schema({
    include: [
        __webpack_require__(8651)
    ],
    implicit: [
        __webpack_require__(4322),
        __webpack_require__(1242),
        __webpack_require__(2739),
        __webpack_require__(56)
    ]
});
//# sourceMappingURL=json.js.map

/***/ }),

/***/ 4642:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
var YAMLException = __webpack_require__(1629);
var TYPE_CONSTRUCTOR_OPTIONS = [
    'kind',
    'resolve',
    'construct',
    'instanceOf',
    'predicate',
    'represent',
    'defaultStyle',
    'styleAliases'
];
var YAML_NODE_KINDS = [
    'scalar',
    'sequence',
    'mapping'
];
function compileStyleAliases(map) {
    var result = {};
    if (null !== map) {
        Object.keys(map).forEach(function (style) {
            map[style].forEach(function (alias) {
                result[String(alias)] = style;
            });
        });
    }
    return result;
}
var Type = (function () {
    function Type(tag, options) {
        options = options || {};
        Object.keys(options).forEach(function (name) {
            if (-1 === TYPE_CONSTRUCTOR_OPTIONS.indexOf(name)) {
                throw new YAMLException('Unknown option "' + name + '" is met in definition of "' + tag + '" YAML type.');
            }
        });
        this.tag = tag;
        this.kind = options['kind'] || null;
        this.resolve = options['resolve'] || function () { return true; };
        this.construct = options['construct'] || function (data) { return data; };
        this.instanceOf = options['instanceOf'] || null;
        this.predicate = options['predicate'] || null;
        this.represent = options['represent'] || null;
        this.defaultStyle = options['defaultStyle'] || null;
        this.styleAliases = compileStyleAliases(options['styleAliases'] || null);
        if (-1 === YAML_NODE_KINDS.indexOf(this.kind)) {
            throw new YAMLException('Unknown kind "' + this.kind + '" is specified for "' + tag + '" YAML type.');
        }
    }
    return Type;
}());
exports.Type = Type;
//# sourceMappingURL=type.js.map

/***/ }),

/***/ 7892:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";

var NodeBuffer = __webpack_require__(4293).Buffer;
var type_1 = __webpack_require__(4642);
var BASE64_MAP = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=\n\r';
function resolveYamlBinary(data) {
    if (null === data) {
        return false;
    }
    var code, idx, bitlen = 0, len = 0, max = data.length, map = BASE64_MAP;
    for (idx = 0; idx < max; idx++) {
        code = map.indexOf(data.charAt(idx));
        if (code > 64) {
            continue;
        }
        if (code < 0) {
            return false;
        }
        bitlen += 6;
    }
    return (bitlen % 8) === 0;
}
function constructYamlBinary(data) {
    var code, idx, tailbits, input = data.replace(/[\r\n=]/g, ''), max = input.length, map = BASE64_MAP, bits = 0, result = [];
    for (idx = 0; idx < max; idx++) {
        if ((idx % 4 === 0) && idx) {
            result.push((bits >> 16) & 0xFF);
            result.push((bits >> 8) & 0xFF);
            result.push(bits & 0xFF);
        }
        bits = (bits << 6) | map.indexOf(input.charAt(idx));
    }
    tailbits = (max % 4) * 6;
    if (tailbits === 0) {
        result.push((bits >> 16) & 0xFF);
        result.push((bits >> 8) & 0xFF);
        result.push(bits & 0xFF);
    }
    else if (tailbits === 18) {
        result.push((bits >> 10) & 0xFF);
        result.push((bits >> 2) & 0xFF);
    }
    else if (tailbits === 12) {
        result.push((bits >> 4) & 0xFF);
    }
    if (NodeBuffer) {
        return new NodeBuffer(result);
    }
    return result;
}
function representYamlBinary(object) {
    var result = '', bits = 0, idx, tail, max = object.length, map = BASE64_MAP;
    for (idx = 0; idx < max; idx++) {
        if ((idx % 3 === 0) && idx) {
            result += map[(bits >> 18) & 0x3F];
            result += map[(bits >> 12) & 0x3F];
            result += map[(bits >> 6) & 0x3F];
            result += map[bits & 0x3F];
        }
        bits = (bits << 8) + object[idx];
    }
    tail = max % 3;
    if (tail === 0) {
        result += map[(bits >> 18) & 0x3F];
        result += map[(bits >> 12) & 0x3F];
        result += map[(bits >> 6) & 0x3F];
        result += map[bits & 0x3F];
    }
    else if (tail === 2) {
        result += map[(bits >> 10) & 0x3F];
        result += map[(bits >> 4) & 0x3F];
        result += map[(bits << 2) & 0x3F];
        result += map[64];
    }
    else if (tail === 1) {
        result += map[(bits >> 2) & 0x3F];
        result += map[(bits << 4) & 0x3F];
        result += map[64];
        result += map[64];
    }
    return result;
}
function isBinary(object) {
    return NodeBuffer && NodeBuffer.isBuffer(object);
}
module.exports = new type_1.Type('tag:yaml.org,2002:binary', {
    kind: 'scalar',
    resolve: resolveYamlBinary,
    construct: constructYamlBinary,
    predicate: isBinary,
    represent: representYamlBinary
});
//# sourceMappingURL=binary.js.map

/***/ }),

/***/ 1242:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";

'use strict';
var type_1 = __webpack_require__(4642);
function resolveYamlBoolean(data) {
    if (null === data) {
        return false;
    }
    var max = data.length;
    return (max === 4 && (data === 'true' || data === 'True' || data === 'TRUE')) ||
        (max === 5 && (data === 'false' || data === 'False' || data === 'FALSE'));
}
function constructYamlBoolean(data) {
    return data === 'true' ||
        data === 'True' ||
        data === 'TRUE';
}
function isBoolean(object) {
    return '[object Boolean]' === Object.prototype.toString.call(object);
}
module.exports = new type_1.Type('tag:yaml.org,2002:bool', {
    kind: 'scalar',
    resolve: resolveYamlBoolean,
    construct: constructYamlBoolean,
    predicate: isBoolean,
    represent: {
        lowercase: function (object) { return object ? 'true' : 'false'; },
        uppercase: function (object) { return object ? 'TRUE' : 'FALSE'; },
        camelcase: function (object) { return object ? 'True' : 'False'; }
    },
    defaultStyle: 'lowercase'
});
//# sourceMappingURL=bool.js.map

/***/ }),

/***/ 56:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";

var common = __webpack_require__(7195);
var type_1 = __webpack_require__(4642);
var YAML_FLOAT_PATTERN = new RegExp('^(?:[-+]?(?:[0-9][0-9_]*)\\.[0-9_]*(?:[eE][-+][0-9]+)?' +
    '|\\.[0-9_]+(?:[eE][-+][0-9]+)?' +
    '|[-+]?[0-9][0-9_]*(?::[0-5]?[0-9])+\\.[0-9_]*' +
    '|[-+]?\\.(?:inf|Inf|INF)' +
    '|\\.(?:nan|NaN|NAN))$');
function resolveYamlFloat(data) {
    if (null === data) {
        return false;
    }
    var value, sign, base, digits;
    if (!YAML_FLOAT_PATTERN.test(data)) {
        return false;
    }
    return true;
}
function constructYamlFloat(data) {
    var value, sign, base, digits;
    value = data.replace(/_/g, '').toLowerCase();
    sign = '-' === value[0] ? -1 : 1;
    digits = [];
    if (0 <= '+-'.indexOf(value[0])) {
        value = value.slice(1);
    }
    if ('.inf' === value) {
        return (1 === sign) ? Number.POSITIVE_INFINITY : Number.NEGATIVE_INFINITY;
    }
    else if ('.nan' === value) {
        return NaN;
    }
    else if (0 <= value.indexOf(':')) {
        value.split(':').forEach(function (v) {
            digits.unshift(parseFloat(v, 10));
        });
        value = 0.0;
        base = 1;
        digits.forEach(function (d) {
            value += d * base;
            base *= 60;
        });
        return sign * value;
    }
    return sign * parseFloat(value, 10);
}
function representYamlFloat(object, style) {
    if (isNaN(object)) {
        switch (style) {
            case 'lowercase':
                return '.nan';
            case 'uppercase':
                return '.NAN';
            case 'camelcase':
                return '.NaN';
        }
    }
    else if (Number.POSITIVE_INFINITY === object) {
        switch (style) {
            case 'lowercase':
                return '.inf';
            case 'uppercase':
                return '.INF';
            case 'camelcase':
                return '.Inf';
        }
    }
    else if (Number.NEGATIVE_INFINITY === object) {
        switch (style) {
            case 'lowercase':
                return '-.inf';
            case 'uppercase':
                return '-.INF';
            case 'camelcase':
                return '-.Inf';
        }
    }
    else if (common.isNegativeZero(object)) {
        return '-0.0';
    }
    return object.toString(10);
}
function isFloat(object) {
    return ('[object Number]' === Object.prototype.toString.call(object)) &&
        (0 !== object % 1 || common.isNegativeZero(object));
}
module.exports = new type_1.Type('tag:yaml.org,2002:float', {
    kind: 'scalar',
    resolve: resolveYamlFloat,
    construct: constructYamlFloat,
    predicate: isFloat,
    represent: representYamlFloat,
    defaultStyle: 'lowercase'
});
//# sourceMappingURL=float.js.map

/***/ }),

/***/ 2739:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";

var common = __webpack_require__(7195);
var type_1 = __webpack_require__(4642);
function isHexCode(c) {
    return ((0x30 <= c) && (c <= 0x39)) ||
        ((0x41 <= c) && (c <= 0x46)) ||
        ((0x61 <= c) && (c <= 0x66));
}
function isOctCode(c) {
    return ((0x30 <= c) && (c <= 0x37));
}
function isDecCode(c) {
    return ((0x30 <= c) && (c <= 0x39));
}
function resolveYamlInteger(data) {
    if (null === data) {
        return false;
    }
    var max = data.length, index = 0, hasDigits = false, ch;
    if (!max) {
        return false;
    }
    ch = data[index];
    if (ch === '-' || ch === '+') {
        ch = data[++index];
    }
    if (ch === '0') {
        if (index + 1 === max) {
            return true;
        }
        ch = data[++index];
        if (ch === 'b') {
            index++;
            for (; index < max; index++) {
                ch = data[index];
                if (ch === '_') {
                    continue;
                }
                if (ch !== '0' && ch !== '1') {
                    return false;
                }
                hasDigits = true;
            }
            return hasDigits;
        }
        if (ch === 'x') {
            index++;
            for (; index < max; index++) {
                ch = data[index];
                if (ch === '_') {
                    continue;
                }
                if (!isHexCode(data.charCodeAt(index))) {
                    return false;
                }
                hasDigits = true;
            }
            return hasDigits;
        }
        for (; index < max; index++) {
            ch = data[index];
            if (ch === '_') {
                continue;
            }
            if (!isOctCode(data.charCodeAt(index))) {
                return false;
            }
            hasDigits = true;
        }
        return hasDigits;
    }
    for (; index < max; index++) {
        ch = data[index];
        if (ch === '_') {
            continue;
        }
        if (ch === ':') {
            break;
        }
        if (!isDecCode(data.charCodeAt(index))) {
            return false;
        }
        hasDigits = true;
    }
    if (!hasDigits) {
        return false;
    }
    if (ch !== ':') {
        return true;
    }
    return /^(:[0-5]?[0-9])+$/.test(data.slice(index));
}
function constructYamlInteger(data) {
    var value = data, sign = 1, ch, base, digits = [];
    if (value.indexOf('_') !== -1) {
        value = value.replace(/_/g, '');
    }
    ch = value[0];
    if (ch === '-' || ch === '+') {
        if (ch === '-') {
            sign = -1;
        }
        value = value.slice(1);
        ch = value[0];
    }
    if ('0' === value) {
        return 0;
    }
    if (ch === '0') {
        if (value[1] === 'b') {
            return sign * parseInt(value.slice(2), 2);
        }
        if (value[1] === 'x') {
            return sign * parseInt(value, 16);
        }
        return sign * parseInt(value, 8);
    }
    if (value.indexOf(':') !== -1) {
        value.split(':').forEach(function (v) {
            digits.unshift(parseInt(v, 10));
        });
        value = 0;
        base = 1;
        digits.forEach(function (d) {
            value += (d * base);
            base *= 60;
        });
        return sign * value;
    }
    return sign * parseInt(value, 10);
}
function isInteger(object) {
    return ('[object Number]' === Object.prototype.toString.call(object)) &&
        (0 === object % 1 && !common.isNegativeZero(object));
}
module.exports = new type_1.Type('tag:yaml.org,2002:int', {
    kind: 'scalar',
    resolve: resolveYamlInteger,
    construct: constructYamlInteger,
    predicate: isInteger,
    represent: {
        binary: function (object) { return '0b' + object.toString(2); },
        octal: function (object) { return '0' + object.toString(8); },
        decimal: function (object) { return object.toString(10); },
        hexadecimal: function (object) { return '0x' + object.toString(16).toUpperCase(); }
    },
    defaultStyle: 'decimal',
    styleAliases: {
        binary: [2, 'bin'],
        octal: [8, 'oct'],
        decimal: [10, 'dec'],
        hexadecimal: [16, 'hex']
    }
});
//# sourceMappingURL=int.js.map

/***/ }),

/***/ 7018:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";

var type_1 = __webpack_require__(4642);
function resolveJavascriptRegExp(data) {
    if (null === data) {
        return false;
    }
    if (0 === data.length) {
        return false;
    }
    var regexp = data, tail = /\/([gim]*)$/.exec(data), modifiers = '';
    if ('/' === regexp[0]) {
        if (tail) {
            modifiers = tail[1];
        }
        if (modifiers.length > 3) {
            return false;
        }
        if (regexp[regexp.length - modifiers.length - 1] !== '/') {
            return false;
        }
        regexp = regexp.slice(1, regexp.length - modifiers.length - 1);
    }
    try {
        var dummy = new RegExp(regexp, modifiers);
        return true;
    }
    catch (error) {
        return false;
    }
}
function constructJavascriptRegExp(data) {
    var regexp = data, tail = /\/([gim]*)$/.exec(data), modifiers = '';
    if ('/' === regexp[0]) {
        if (tail) {
            modifiers = tail[1];
        }
        regexp = regexp.slice(1, regexp.length - modifiers.length - 1);
    }
    return new RegExp(regexp, modifiers);
}
function representJavascriptRegExp(object) {
    var result = '/' + object.source + '/';
    if (object.global) {
        result += 'g';
    }
    if (object.multiline) {
        result += 'm';
    }
    if (object.ignoreCase) {
        result += 'i';
    }
    return result;
}
function isRegExp(object) {
    return '[object RegExp]' === Object.prototype.toString.call(object);
}
module.exports = new type_1.Type('tag:yaml.org,2002:js/regexp', {
    kind: 'scalar',
    resolve: resolveJavascriptRegExp,
    construct: constructJavascriptRegExp,
    predicate: isRegExp,
    represent: representJavascriptRegExp
});
//# sourceMappingURL=regexp.js.map

/***/ }),

/***/ 2706:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";

var type_1 = __webpack_require__(4642);
function resolveJavascriptUndefined() {
    return true;
}
function constructJavascriptUndefined() {
    return undefined;
}
function representJavascriptUndefined() {
    return '';
}
function isUndefined(object) {
    return 'undefined' === typeof object;
}
module.exports = new type_1.Type('tag:yaml.org,2002:js/undefined', {
    kind: 'scalar',
    resolve: resolveJavascriptUndefined,
    construct: constructJavascriptUndefined,
    predicate: isUndefined,
    represent: representJavascriptUndefined
});
//# sourceMappingURL=undefined.js.map

/***/ }),

/***/ 7444:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";

var type_1 = __webpack_require__(4642);
module.exports = new type_1.Type('tag:yaml.org,2002:map', {
    kind: 'mapping',
    construct: function (data) { return null !== data ? data : {}; }
});
//# sourceMappingURL=map.js.map

/***/ }),

/***/ 8676:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";

var type_1 = __webpack_require__(4642);
function resolveYamlMerge(data) {
    return '<<' === data || null === data;
}
module.exports = new type_1.Type('tag:yaml.org,2002:merge', {
    kind: 'scalar',
    resolve: resolveYamlMerge
});
//# sourceMappingURL=merge.js.map

/***/ }),

/***/ 4322:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";

var type_1 = __webpack_require__(4642);
function resolveYamlNull(data) {
    if (null === data) {
        return true;
    }
    var max = data.length;
    return (max === 1 && data === '~') ||
        (max === 4 && (data === 'null' || data === 'Null' || data === 'NULL'));
}
function constructYamlNull() {
    return null;
}
function isNull(object) {
    return null === object;
}
module.exports = new type_1.Type('tag:yaml.org,2002:null', {
    kind: 'scalar',
    resolve: resolveYamlNull,
    construct: constructYamlNull,
    predicate: isNull,
    represent: {
        canonical: function () { return '~'; },
        lowercase: function () { return 'null'; },
        uppercase: function () { return 'NULL'; },
        camelcase: function () { return 'Null'; }
    },
    defaultStyle: 'lowercase'
});
//# sourceMappingURL=null.js.map

/***/ }),

/***/ 2246:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";

var type_1 = __webpack_require__(4642);
var _hasOwnProperty = Object.prototype.hasOwnProperty;
var _toString = Object.prototype.toString;
function resolveYamlOmap(data) {
    if (null === data) {
        return true;
    }
    var objectKeys = [], index, length, pair, pairKey, pairHasKey, object = data;
    for (index = 0, length = object.length; index < length; index += 1) {
        pair = object[index];
        pairHasKey = false;
        if ('[object Object]' !== _toString.call(pair)) {
            return false;
        }
        for (pairKey in pair) {
            if (_hasOwnProperty.call(pair, pairKey)) {
                if (!pairHasKey) {
                    pairHasKey = true;
                }
                else {
                    return false;
                }
            }
        }
        if (!pairHasKey) {
            return false;
        }
        if (-1 === objectKeys.indexOf(pairKey)) {
            objectKeys.push(pairKey);
        }
        else {
            return false;
        }
    }
    return true;
}
function constructYamlOmap(data) {
    return null !== data ? data : [];
}
module.exports = new type_1.Type('tag:yaml.org,2002:omap', {
    kind: 'sequence',
    resolve: resolveYamlOmap,
    construct: constructYamlOmap
});
//# sourceMappingURL=omap.js.map

/***/ }),

/***/ 2594:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";

var type_1 = __webpack_require__(4642);
var ast = __webpack_require__(9421);
var _toString = Object.prototype.toString;
function resolveYamlPairs(data) {
    if (null === data) {
        return true;
    }
    if (data.kind != ast.Kind.SEQ) {
        return false;
    }
    var index, length, pair, keys, result, object = data.items;
    for (index = 0, length = object.length; index < length; index += 1) {
        pair = object[index];
        if ('[object Object]' !== _toString.call(pair)) {
            return false;
        }
        if (!Array.isArray(pair.mappings)) {
            return false;
        }
        if (1 !== pair.mappings.length) {
            return false;
        }
    }
    return true;
}
function constructYamlPairs(data) {
    if (null === data || !Array.isArray(data.items)) {
        return [];
    }
    var index, length, keys, result, object = data.items;
    result = ast.newItems();
    result.parent = data.parent;
    result.startPosition = data.startPosition;
    result.endPosition = data.endPosition;
    for (index = 0, length = object.length; index < length; index += 1) {
        var pair = object[index];
        var mapping = pair.mappings[0];
        var pairSeq = ast.newItems();
        pairSeq.parent = result;
        pairSeq.startPosition = mapping.key.startPosition;
        pairSeq.endPosition = mapping.value.startPosition;
        mapping.key.parent = pairSeq;
        mapping.value.parent = pairSeq;
        pairSeq.items = [mapping.key, mapping.value];
        result.items.push(pairSeq);
    }
    return result;
}
module.exports = new type_1.Type('tag:yaml.org,2002:pairs', {
    kind: 'sequence',
    resolve: resolveYamlPairs,
    construct: constructYamlPairs
});
//# sourceMappingURL=pairs.js.map

/***/ }),

/***/ 5861:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";

var type_1 = __webpack_require__(4642);
module.exports = new type_1.Type('tag:yaml.org,2002:seq', {
    kind: 'sequence',
    construct: function (data) { return null !== data ? data : []; }
});
//# sourceMappingURL=seq.js.map

/***/ }),

/***/ 6840:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";

var type_1 = __webpack_require__(4642);
var ast = __webpack_require__(9421);
var _hasOwnProperty = Object.prototype.hasOwnProperty;
function resolveYamlSet(data) {
    if (null === data) {
        return true;
    }
    if (data.kind != ast.Kind.MAP) {
        return false;
    }
    return true;
}
function constructYamlSet(data) {
    return null !== data ? data : {};
}
module.exports = new type_1.Type('tag:yaml.org,2002:set', {
    kind: 'mapping',
    resolve: resolveYamlSet,
    construct: constructYamlSet
});
//# sourceMappingURL=set.js.map

/***/ }),

/***/ 5801:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";

var type_1 = __webpack_require__(4642);
module.exports = new type_1.Type('tag:yaml.org,2002:str', {
    kind: 'scalar',
    construct: function (data) { return null !== data ? data : ''; }
});
//# sourceMappingURL=str.js.map

/***/ }),

/***/ 4214:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";

var type_1 = __webpack_require__(4642);
var YAML_TIMESTAMP_REGEXP = new RegExp('^([0-9][0-9][0-9][0-9])' +
    '-([0-9][0-9]?)' +
    '-([0-9][0-9]?)' +
    '(?:(?:[Tt]|[ \\t]+)' +
    '([0-9][0-9]?)' +
    ':([0-9][0-9])' +
    ':([0-9][0-9])' +
    '(?:\\.([0-9]*))?' +
    '(?:[ \\t]*(Z|([-+])([0-9][0-9]?)' +
    '(?::([0-9][0-9]))?))?)?$');
function resolveYamlTimestamp(data) {
    if (null === data) {
        return false;
    }
    var match, year, month, day, hour, minute, second, fraction = 0, delta = null, tz_hour, tz_minute, date;
    match = YAML_TIMESTAMP_REGEXP.exec(data);
    if (null === match) {
        return false;
    }
    return true;
}
function constructYamlTimestamp(data) {
    var match, year, month, day, hour, minute, second, fraction = 0, delta = null, tz_hour, tz_minute, date;
    match = YAML_TIMESTAMP_REGEXP.exec(data);
    if (null === match) {
        throw new Error('Date resolve error');
    }
    year = +(match[1]);
    month = +(match[2]) - 1;
    day = +(match[3]);
    if (!match[4]) {
        return new Date(Date.UTC(year, month, day));
    }
    hour = +(match[4]);
    minute = +(match[5]);
    second = +(match[6]);
    if (match[7]) {
        fraction = match[7].slice(0, 3);
        while (fraction.length < 3) {
            fraction = fraction + '0';
        }
        fraction = +fraction;
    }
    if (match[9]) {
        tz_hour = +(match[10]);
        tz_minute = +(match[11] || 0);
        delta = (tz_hour * 60 + tz_minute) * 60000;
        if ('-' === match[9]) {
            delta = -delta;
        }
    }
    date = new Date(Date.UTC(year, month, day, hour, minute, second, fraction));
    if (delta) {
        date.setTime(date.getTime() - delta);
    }
    return date;
}
function representYamlTimestamp(object) {
    return object.toISOString();
}
module.exports = new type_1.Type('tag:yaml.org,2002:timestamp', {
    kind: 'scalar',
    resolve: resolveYamlTimestamp,
    construct: constructYamlTimestamp,
    instanceOf: Date,
    represent: representYamlTimestamp
});
//# sourceMappingURL=timestamp.js.map

/***/ }),

/***/ 9421:
/***/ ((__unused_webpack_module, exports) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
var Kind;
(function (Kind) {
    Kind[Kind["SCALAR"] = 0] = "SCALAR";
    Kind[Kind["MAPPING"] = 1] = "MAPPING";
    Kind[Kind["MAP"] = 2] = "MAP";
    Kind[Kind["SEQ"] = 3] = "SEQ";
    Kind[Kind["ANCHOR_REF"] = 4] = "ANCHOR_REF";
    Kind[Kind["INCLUDE_REF"] = 5] = "INCLUDE_REF";
})(Kind = exports.Kind || (exports.Kind = {}));
function newMapping(key, value) {
    var end = (value ? value.endPosition : key.endPosition + 1);
    var node = {
        key: key,
        value: value,
        startPosition: key.startPosition,
        endPosition: end,
        kind: Kind.MAPPING,
        parent: null,
        errors: []
    };
    return node;
}
exports.newMapping = newMapping;
function newAnchorRef(key, start, end, value) {
    return {
        errors: [],
        referencesAnchor: key,
        value: value,
        startPosition: start,
        endPosition: end,
        kind: Kind.ANCHOR_REF,
        parent: null
    };
}
exports.newAnchorRef = newAnchorRef;
function newScalar(v) {
    if (v === void 0) { v = ""; }
    var result = {
        errors: [],
        startPosition: -1,
        endPosition: -1,
        value: "" + v,
        kind: Kind.SCALAR,
        parent: null,
        doubleQuoted: false,
        rawValue: "" + v,
    };
    if (typeof v !== "string") {
        result.valueObject = v;
    }
    return result;
}
exports.newScalar = newScalar;
function newItems() {
    return {
        errors: [],
        startPosition: -1,
        endPosition: -1,
        items: [],
        kind: Kind.SEQ,
        parent: null
    };
}
exports.newItems = newItems;
function newSeq() {
    return newItems();
}
exports.newSeq = newSeq;
function newMap(mappings) {
    return {
        errors: [],
        startPosition: -1,
        endPosition: -1,
        mappings: mappings ? mappings : [],
        kind: Kind.MAP,
        parent: null
    };
}
exports.newMap = newMap;
//# sourceMappingURL=yamlAST.js.map

/***/ }),

/***/ 2877:
/***/ ((module) => {

module.exports = eval("require")("encoding");


/***/ }),

/***/ 2357:
/***/ ((module) => {

"use strict";
module.exports = require("assert");;

/***/ }),

/***/ 4293:
/***/ ((module) => {

"use strict";
module.exports = require("buffer");;

/***/ }),

/***/ 8614:
/***/ ((module) => {

"use strict";
module.exports = require("events");;

/***/ }),

/***/ 5747:
/***/ ((module) => {

"use strict";
module.exports = require("fs");;

/***/ }),

/***/ 8605:
/***/ ((module) => {

"use strict";
module.exports = require("http");;

/***/ }),

/***/ 7211:
/***/ ((module) => {

"use strict";
module.exports = require("https");;

/***/ }),

/***/ 1631:
/***/ ((module) => {

"use strict";
module.exports = require("net");;

/***/ }),

/***/ 2087:
/***/ ((module) => {

"use strict";
module.exports = require("os");;

/***/ }),

/***/ 5622:
/***/ ((module) => {

"use strict";
module.exports = require("path");;

/***/ }),

/***/ 2413:
/***/ ((module) => {

"use strict";
module.exports = require("stream");;

/***/ }),

/***/ 4016:
/***/ ((module) => {

"use strict";
module.exports = require("tls");;

/***/ }),

/***/ 8835:
/***/ ((module) => {

"use strict";
module.exports = require("url");;

/***/ }),

/***/ 1669:
/***/ ((module) => {

"use strict";
module.exports = require("util");;

/***/ }),

/***/ 8761:
/***/ ((module) => {

"use strict";
module.exports = require("zlib");;

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The module cache
/******/ 	var __webpack_module_cache__ = {};
/******/ 	
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/ 		// Check if module is in cache
/******/ 		if(__webpack_module_cache__[moduleId]) {
/******/ 			return __webpack_module_cache__[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = __webpack_module_cache__[moduleId] = {
/******/ 			// no module.id needed
/******/ 			// no module.loaded needed
/******/ 			exports: {}
/******/ 		};
/******/ 	
/******/ 		// Execute the module function
/******/ 		var threw = true;
/******/ 		try {
/******/ 			__webpack_modules__[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/ 			threw = false;
/******/ 		} finally {
/******/ 			if(threw) delete __webpack_module_cache__[moduleId];
/******/ 		}
/******/ 	
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/ 	
/************************************************************************/
/******/ 	/* webpack/runtime/compat */
/******/ 	
/******/ 	__webpack_require__.ab = __dirname + "/";/************************************************************************/
/******/ 	// module exports must be returned from runtime so entry inlining is disabled
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(3109);
/******/ })()
;
//# sourceMappingURL=index.js.map